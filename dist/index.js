require('./sourcemap-register.js');/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 1212:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parse = void 0;
const core = __importStar(__nccwpck_require__(2186));
const point = __importStar(__nccwpck_require__(3767));
function* parse(content) {
    const lines = content.split('\n');
    let lineNum = 1;
    let offset = 0;
    for (const line of lines) {
        const commentRemoved = line.replace(/#.*/, '');
        const trimmed = commentRemoved.trim();
        if (trimmed === '') {
            continue;
        }
        const split = trimmed.split(/\s+/);
        if (split.length === 1) {
            yield { word: split[0] };
        }
        else if (split.length === 3 && split[1] === 'like') {
            const lineOffset = line.lastIndexOf(split[2]);
            const start = {
                line: lineNum,
                column: lineOffset + 1,
                offset: offset + lineOffset
            };
            const end = point.offset(start, point.end(split[2]));
            const position = { start, end };
            yield { word: split[0], similarTo: { word: split[2], position } };
        }
        else {
            core.warning(`Couldn't parse ignore file entry '${line}' on line ${lineNum}. Expected format: Just a <word> or '<word> like <word>'`);
        }
        offset += line.length + 1; // 1 for the newline
        lineNum++;
    }
}
exports.parse = parse;


/***/ }),

/***/ 3109:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core = __importStar(__nccwpck_require__(2186));
const glob = __importStar(__nccwpck_require__(8090));
const ignoreFile = __importStar(__nccwpck_require__(1212));
const spellcheck_1 = __nccwpck_require__(8800);
const fs_1 = __nccwpck_require__(7147);
function run() {
    var e_1, _a, e_2, _b;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const included = core.getInput('files-to-check');
            const excludePattern = core.getInput('files-to-exclude');
            const ignoreFilename = core.getInput('words-to-ignore-file').trim();
            if (included == null || included === '') {
                core.info(`No files passed to check.`);
                return;
            }
            const isExcluded = yield excluder(excludePattern);
            const spell = yield (0, spellcheck_1.initialise)();
            const ignores = [];
            let ignoreMsg = () => 'If you want to ignore this message, configure an ignore file for md-spellcheck-action.';
            if (ignoreFilename !== '') {
                ignoreMsg = word => `If you want to ignore this message, add ${word} to the ignore file at ${ignoreFilename}`;
                const ignoreFileContent = (0, fs_1.readFileSync)(ignoreFilename, { encoding: 'utf8' });
                const ignoreEntries = itMap(ignoreFile.parse(ignoreFileContent), (ignore) => {
                    ignores.push(ignore);
                    return ignore;
                });
                for (const misspelled of spell.addIgnores(ignoreEntries)) {
                    outputMisspelled(misspelled, ignoreFilename, () => "When using '<word> like <word>' syntax in ignore files, the second must be a reference word that's already part of the dictionary.");
                }
            }
            if (ignores.length > 0) {
                core.info(`Ignoring words: ${ignores.map(ignore => ignore.word)}`);
            }
            else {
                core.info(`No words to ignore configured: ${ignoreFilename === ''
                    ? 'No ignore file configured.'
                    : 'No words parsed from the ignore file.'}`);
            }
            let hasMisspelled = false;
            let checkedFiles = false;
            try {
                for (var _c = __asyncValues(included.split('|')), _d; _d = yield _c.next(), !_d.done;) {
                    const file = _d.value;
                    if (isExcluded(file)) {
                        core.info(`Ignoring ${file} because it is excluded via 'files-to-exclude'.`);
                        continue;
                    }
                    checkedFiles = true;
                    const contents = (0, fs_1.readFileSync)(file, { encoding: 'utf8' });
                    try {
                        for (var _e = (e_2 = void 0, __asyncValues(spell.check(contents))), _f; _f = yield _e.next(), !_f.done;) {
                            const result = _f.value;
                            hasMisspelled = true;
                            outputMisspelled(result, file, ignoreMsg);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) yield _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    core.info(`Spellchecked ${file}.`);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) yield _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (hasMisspelled) {
                core.setFailed('Misspelled word(s)');
            }
            else if (!checkedFiles) {
                core.setFailed(`Couldn't find any files matching the list ${included}`);
            }
        }
        catch (error) {
            if (error instanceof Error)
                core.setFailed(error.message);
        }
    });
}
function excluder(excludePattern) {
    return __awaiter(this, void 0, void 0, function* () {
        if (excludePattern === '') {
            return () => false;
        }
        const exclude = yield glob.create(excludePattern);
        const excluded = yield exclude.glob();
        return filename => excluded.includes(filename);
    });
}
function outputMisspelled(misspelled, file, ignoreMsg, asWarning = false) {
    const suggestions = misspelled.suggestions.map(s => `"${s}"`).join(', ');
    const outputFunc = asWarning ? core.warning : core.error;
    outputFunc(`Misspelled word "${misspelled.word}".\nSuggested alternatives: ${suggestions}\n${ignoreMsg(misspelled.word)}`, {
        title: 'Misspelled word',
        file,
        startLine: misspelled.position.start.line,
        startColumn: misspelled.position.start.column,
        endLine: misspelled.position.end.line,
        endColumn: misspelled.position.end.column
    });
}
function* itMap(iterator, f) {
    for (const input of iterator) {
        yield f(input);
    }
}
run();


/***/ }),

/***/ 3767:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.max = exports.min = exports.offset = exports.end = void 0;
function end(str) {
    let line = 1;
    let lastNewlineOffset = -1;
    for (const match of str.matchAll(/\n/g)) {
        if (match.index == null) {
            throw new Error(`Regex match went wrong. No index? ${match}`);
        }
        line++;
        lastNewlineOffset = match.index;
    }
    return {
        line,
        column: str.length - lastNewlineOffset,
        offset: str.length
    };
}
exports.end = end;
function offset(point, relativeOffset) {
    const line0 = point.line - 1;
    const column0 = point.column - 1;
    return {
        line: relativeOffset.line + line0,
        column: relativeOffset.line === 1
            ? relativeOffset.column + column0
            : relativeOffset.column,
        offset: relativeOffset.offset != null && point.offset != null
            ? relativeOffset.offset + point.offset
            : undefined
    };
}
exports.offset = offset;
function min(a, b) {
    if (a.offset && b.offset) {
        return a.offset < b.offset ? a : b;
    }
    if (a.line === b.line) {
        return a.column < b.column ? a : b;
    }
    return a.line < b.line ? a : b;
}
exports.min = min;
function max(a, b) {
    if (a.offset && b.offset) {
        return a.offset > b.offset ? a : b;
    }
    if (a.line === b.line) {
        return a.column > b.column ? a : b;
    }
    return a.line > b.line ? a : b;
}
exports.max = max;


/***/ }),

/***/ 2325:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.merge = void 0;
const point = __importStar(__nccwpck_require__(3767));
function merge(a, b) {
    return {
        start: point.min(a.start, b.start),
        end: point.max(a.end, b.end)
    };
}
exports.merge = merge;


/***/ }),

/***/ 8800:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splitWords = exports.initialise = exports.INLINE_TYPES = exports.SKIP_TYPES = exports.WORD_REGEX = void 0;
const parser_gfm_ex_1 = __nccwpck_require__(1977);
const tokenizer_math_1 = __nccwpck_require__(6543);
const tokenizer_inline_math_1 = __nccwpck_require__(5280);
const dictionary_en_gb_1 = __importDefault(__nccwpck_require__(2729));
const hunspell_asm_1 = __nccwpck_require__(4517);
const point = __importStar(__nccwpck_require__(3767));
const positions = __importStar(__nccwpck_require__(2325));
// Captures any unicode letter with any number of (letter or "'" and letter or "-" and letter).
exports.WORD_REGEX = /\p{L}(?:\p{L}|'\p{L}|-\p{L})*/gu;
exports.SKIP_TYPES = ['inlineCode', 'inlineMath'];
exports.INLINE_TYPES = [
    'text',
    'emphasis',
    'delete',
    'strong',
    'link',
    'link-reference'
];
function initialise() {
    return __awaiter(this, void 0, void 0, function* () {
        const { aff, dic } = yield getDictionaryEN();
        const hunspellFactory = yield (0, hunspell_asm_1.loadModule)();
        const affPath = hunspellFactory.mountBuffer(aff);
        const dicPath = hunspellFactory.mountBuffer(dic);
        const hunspell = hunspellFactory.create(affPath, dicPath);
        return {
            *addIgnores(ignoreList) {
                for (const ignored of ignoreList) {
                    if (ignored.similarTo != null) {
                        if (hunspell.spell(ignored.similarTo.word)) {
                            hunspell.addWordWithAffix(ignored.word, ignored.similarTo.word);
                        }
                        else {
                            yield Object.assign(Object.assign({}, ignored.similarTo), { suggestions: hunspell.suggest(ignored.similarTo.word) });
                        }
                    }
                    else {
                        hunspell.addWord(ignored.word);
                    }
                }
            },
            check(contents) {
                return __asyncGenerator(this, arguments, function* check_1() {
                    const parser = constructParser();
                    const parsed = parser.parse(contents);
                    for (const { word, position } of mergeConsecutiveWordTokens(markdownTokens(parsed))) {
                        if (!hunspell.spell(word)) {
                            yield yield __await({
                                word,
                                position,
                                suggestions: hunspell.suggest(word)
                            });
                        }
                    }
                });
            }
        };
    });
}
exports.initialise = initialise;
function constructParser() {
    const parser = new parser_gfm_ex_1.GfmExParser();
    parser.useTokenizer(new tokenizer_math_1.MathTokenizer());
    parser.useTokenizer(new tokenizer_inline_math_1.InlineMathTokenizer({ backtickRequired: false }));
    parser.setDefaultParseOptions({ shouldReservePosition: true });
    return parser;
}
function* markdownTokens(node) {
    if (exports.SKIP_TYPES.includes(node.type)) {
        return;
    }
    if (isLink(node)) {
        const text = innerText(node);
        if (text === node.url) {
            return; // skip auto-generated link nodes like https://example.com
        }
    }
    if (isText(node)) {
        yield* literalPositionedTokens(node);
    }
    else if (isParent(node)) {
        for (const child of node.children) {
            const needsBreaks = !exports.INLINE_TYPES.includes(child.type);
            if (needsBreaks)
                yield { type: 'break' };
            yield* markdownTokens(child);
            if (needsBreaks)
                yield { type: 'break' };
        }
    }
}
function innerText(node) {
    return node.children
        .map(child => isText(child) ? child.value : isParent(child) ? innerText(child) : '')
        .join('');
}
function* literalPositionedTokens(node) {
    if (node.position == null) {
        throw new Error('Missing position spans');
    }
    let start = node.position.start;
    for (const token of wordsAndWhitespace(node.value)) {
        const end = point.offset(start, point.end(token.content));
        yield Object.assign(Object.assign({}, token), { position: { start, end } });
        start = end;
    }
}
function* wordsAndWhitespace(str) {
    let lastEnd = 0;
    for (const match of str.matchAll(exports.WORD_REGEX)) {
        if (match.index == null) {
            throw new Error(`Regex match went wrong. No index? ${match}`);
        }
        const word = match[0];
        if (match.index !== 0 && lastEnd !== match.index) {
            yield {
                type: 'whitespace',
                content: str.substring(lastEnd, match.index)
            };
        }
        yield {
            type: 'word',
            content: word
        };
        lastEnd = match.index + word.length;
    }
    if (lastEnd !== str.length) {
        yield {
            type: 'whitespace',
            content: str.substring(lastEnd, str.length)
        };
    }
}
function* mergeConsecutiveWordTokens(tokens) {
    let currentWord = null;
    for (const token of tokens) {
        // current word begins
        if (currentWord == null && token.type === 'word') {
            currentWord = {
                word: token.content,
                position: token.position
            };
            // continuing the current word
        }
        else if (currentWord != null && token.type === 'word') {
            currentWord = {
                word: `${currentWord.word}${token.content}`,
                position: positions.merge(currentWord.position, token.position)
            };
            // current word ended
        }
        else if (currentWord != null && token.type !== 'word') {
            // yield a word
            yield currentWord;
            currentWord = null;
        }
    }
    if (currentWord != null) {
        yield currentWord;
    }
}
function* splitWords(str) {
    let start = {
        line: 1,
        column: 1,
        offset: 0
    };
    for (const item of wordsAndWhitespace(str)) {
        const end = point.offset(start, point.end(item.content));
        if (item.type === 'word') {
            yield {
                word: item.content,
                position: { start, end }
            };
        }
        start = end;
    }
}
exports.splitWords = splitWords;
function getDictionaryEN() {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            try {
                (0, dictionary_en_gb_1.default)((error, dicts) => (error ? reject(error) : resolve(dicts)));
            }
            catch (e) {
                reject(e);
            }
        });
    });
}
function isText(obj) {
    return obj.type === 'text';
}
function isLink(obj) {
    return obj.type === 'link';
}
function isParent(obj) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return Array.isArray(obj.children);
}


/***/ }),

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(7351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(8041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        const delimiter = '_GitHubActionsFileCommandDelimeter_';
        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;
        file_command_1.issueCommand('ENV', commandValue);
    }
    else {
        command_1.issueCommand('set-env', { name }, convertedVal);
    }
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    return inputs;
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, value);
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    command_1.issueCommand('save-state', { name }, value);
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issueCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
function issueCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueCommand = issueCommand;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 8041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(6255);
const auth_1 = __nccwpck_require__(5526);
const core_1 = __nccwpck_require__(2186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 1327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 8090:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashFiles = exports.create = void 0;
const internal_globber_1 = __nccwpck_require__(8298);
const internal_hash_files_1 = __nccwpck_require__(2448);
/**
 * Constructs a globber
 *
 * @param patterns  Patterns separated by newlines
 * @param options   Glob options
 */
function create(patterns, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield internal_globber_1.DefaultGlobber.create(patterns, options);
    });
}
exports.create = create;
/**
 * Computes the sha256 hash of a glob
 *
 * @param patterns  Patterns separated by newlines
 * @param options   Glob options
 */
function hashFiles(patterns, options, verbose = false) {
    return __awaiter(this, void 0, void 0, function* () {
        let followSymbolicLinks = true;
        if (options && typeof options.followSymbolicLinks === 'boolean') {
            followSymbolicLinks = options.followSymbolicLinks;
        }
        const globber = yield create(patterns, { followSymbolicLinks });
        return internal_hash_files_1.hashFiles(globber, verbose);
    });
}
exports.hashFiles = hashFiles;
//# sourceMappingURL=glob.js.map

/***/ }),

/***/ 1026:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOptions = void 0;
const core = __importStar(__nccwpck_require__(2186));
/**
 * Returns a copy with defaults filled in.
 */
function getOptions(copy) {
    const result = {
        followSymbolicLinks: true,
        implicitDescendants: true,
        matchDirectories: true,
        omitBrokenSymbolicLinks: true
    };
    if (copy) {
        if (typeof copy.followSymbolicLinks === 'boolean') {
            result.followSymbolicLinks = copy.followSymbolicLinks;
            core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);
        }
        if (typeof copy.implicitDescendants === 'boolean') {
            result.implicitDescendants = copy.implicitDescendants;
            core.debug(`implicitDescendants '${result.implicitDescendants}'`);
        }
        if (typeof copy.matchDirectories === 'boolean') {
            result.matchDirectories = copy.matchDirectories;
            core.debug(`matchDirectories '${result.matchDirectories}'`);
        }
        if (typeof copy.omitBrokenSymbolicLinks === 'boolean') {
            result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks;
            core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);
        }
    }
    return result;
}
exports.getOptions = getOptions;
//# sourceMappingURL=internal-glob-options-helper.js.map

/***/ }),

/***/ 8298:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultGlobber = void 0;
const core = __importStar(__nccwpck_require__(2186));
const fs = __importStar(__nccwpck_require__(7147));
const globOptionsHelper = __importStar(__nccwpck_require__(1026));
const path = __importStar(__nccwpck_require__(1017));
const patternHelper = __importStar(__nccwpck_require__(9005));
const internal_match_kind_1 = __nccwpck_require__(1063);
const internal_pattern_1 = __nccwpck_require__(4536);
const internal_search_state_1 = __nccwpck_require__(9117);
const IS_WINDOWS = process.platform === 'win32';
class DefaultGlobber {
    constructor(options) {
        this.patterns = [];
        this.searchPaths = [];
        this.options = globOptionsHelper.getOptions(options);
    }
    getSearchPaths() {
        // Return a copy
        return this.searchPaths.slice();
    }
    glob() {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            try {
                for (var _b = __asyncValues(this.globGenerator()), _c; _c = yield _b.next(), !_c.done;) {
                    const itemPath = _c.value;
                    result.push(itemPath);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return result;
        });
    }
    globGenerator() {
        return __asyncGenerator(this, arguments, function* globGenerator_1() {
            // Fill in defaults options
            const options = globOptionsHelper.getOptions(this.options);
            // Implicit descendants?
            const patterns = [];
            for (const pattern of this.patterns) {
                patterns.push(pattern);
                if (options.implicitDescendants &&
                    (pattern.trailingSeparator ||
                        pattern.segments[pattern.segments.length - 1] !== '**')) {
                    patterns.push(new internal_pattern_1.Pattern(pattern.negate, true, pattern.segments.concat('**')));
                }
            }
            // Push the search paths
            const stack = [];
            for (const searchPath of patternHelper.getSearchPaths(patterns)) {
                core.debug(`Search path '${searchPath}'`);
                // Exists?
                try {
                    // Intentionally using lstat. Detection for broken symlink
                    // will be performed later (if following symlinks).
                    yield __await(fs.promises.lstat(searchPath));
                }
                catch (err) {
                    if (err.code === 'ENOENT') {
                        continue;
                    }
                    throw err;
                }
                stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
            }
            // Search
            const traversalChain = []; // used to detect cycles
            while (stack.length) {
                // Pop
                const item = stack.pop();
                // Match?
                const match = patternHelper.match(patterns, item.path);
                const partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);
                if (!match && !partialMatch) {
                    continue;
                }
                // Stat
                const stats = yield __await(DefaultGlobber.stat(item, options, traversalChain)
                // Broken symlink, or symlink cycle detected, or no longer exists
                );
                // Broken symlink, or symlink cycle detected, or no longer exists
                if (!stats) {
                    continue;
                }
                // Directory
                if (stats.isDirectory()) {
                    // Matched
                    if (match & internal_match_kind_1.MatchKind.Directory && options.matchDirectories) {
                        yield yield __await(item.path);
                    }
                    // Descend?
                    else if (!partialMatch) {
                        continue;
                    }
                    // Push the child items in reverse
                    const childLevel = item.level + 1;
                    const childItems = (yield __await(fs.promises.readdir(item.path))).map(x => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel));
                    stack.push(...childItems.reverse());
                }
                // File
                else if (match & internal_match_kind_1.MatchKind.File) {
                    yield yield __await(item.path);
                }
            }
        });
    }
    /**
     * Constructs a DefaultGlobber
     */
    static create(patterns, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = new DefaultGlobber(options);
            if (IS_WINDOWS) {
                patterns = patterns.replace(/\r\n/g, '\n');
                patterns = patterns.replace(/\r/g, '\n');
            }
            const lines = patterns.split('\n').map(x => x.trim());
            for (const line of lines) {
                // Empty or comment
                if (!line || line.startsWith('#')) {
                    continue;
                }
                // Pattern
                else {
                    result.patterns.push(new internal_pattern_1.Pattern(line));
                }
            }
            result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));
            return result;
        });
    }
    static stat(item, options, traversalChain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Note:
            // `stat` returns info about the target of a symlink (or symlink chain)
            // `lstat` returns info about a symlink itself
            let stats;
            if (options.followSymbolicLinks) {
                try {
                    // Use `stat` (following symlinks)
                    stats = yield fs.promises.stat(item.path);
                }
                catch (err) {
                    if (err.code === 'ENOENT') {
                        if (options.omitBrokenSymbolicLinks) {
                            core.debug(`Broken symlink '${item.path}'`);
                            return undefined;
                        }
                        throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
                    }
                    throw err;
                }
            }
            else {
                // Use `lstat` (not following symlinks)
                stats = yield fs.promises.lstat(item.path);
            }
            // Note, isDirectory() returns false for the lstat of a symlink
            if (stats.isDirectory() && options.followSymbolicLinks) {
                // Get the realpath
                const realPath = yield fs.promises.realpath(item.path);
                // Fixup the traversal chain to match the item level
                while (traversalChain.length >= item.level) {
                    traversalChain.pop();
                }
                // Test for a cycle
                if (traversalChain.some((x) => x === realPath)) {
                    core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
                    return undefined;
                }
                // Update the traversal chain
                traversalChain.push(realPath);
            }
            return stats;
        });
    }
}
exports.DefaultGlobber = DefaultGlobber;
//# sourceMappingURL=internal-globber.js.map

/***/ }),

/***/ 2448:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashFiles = void 0;
const crypto = __importStar(__nccwpck_require__(6113));
const core = __importStar(__nccwpck_require__(2186));
const fs = __importStar(__nccwpck_require__(7147));
const stream = __importStar(__nccwpck_require__(2781));
const util = __importStar(__nccwpck_require__(3837));
const path = __importStar(__nccwpck_require__(1017));
function hashFiles(globber, verbose = false) {
    var e_1, _a;
    var _b;
    return __awaiter(this, void 0, void 0, function* () {
        const writeDelegate = verbose ? core.info : core.debug;
        let hasMatch = false;
        const githubWorkspace = (_b = process.env['GITHUB_WORKSPACE']) !== null && _b !== void 0 ? _b : process.cwd();
        const result = crypto.createHash('sha256');
        let count = 0;
        try {
            for (var _c = __asyncValues(globber.globGenerator()), _d; _d = yield _c.next(), !_d.done;) {
                const file = _d.value;
                writeDelegate(file);
                if (!file.startsWith(`${githubWorkspace}${path.sep}`)) {
                    writeDelegate(`Ignore '${file}' since it is not under GITHUB_WORKSPACE.`);
                    continue;
                }
                if (fs.statSync(file).isDirectory()) {
                    writeDelegate(`Skip directory '${file}'.`);
                    continue;
                }
                const hash = crypto.createHash('sha256');
                const pipeline = util.promisify(stream.pipeline);
                yield pipeline(fs.createReadStream(file), hash);
                result.write(hash.digest());
                count++;
                if (!hasMatch) {
                    hasMatch = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) yield _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        result.end();
        if (hasMatch) {
            writeDelegate(`Found ${count} files to hash.`);
            return result.digest('hex');
        }
        else {
            writeDelegate(`No matches found for glob`);
            return '';
        }
    });
}
exports.hashFiles = hashFiles;
//# sourceMappingURL=internal-hash-files.js.map

/***/ }),

/***/ 1063:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MatchKind = void 0;
/**
 * Indicates whether a pattern matches a path
 */
var MatchKind;
(function (MatchKind) {
    /** Not matched */
    MatchKind[MatchKind["None"] = 0] = "None";
    /** Matched if the path is a directory */
    MatchKind[MatchKind["Directory"] = 1] = "Directory";
    /** Matched if the path is a regular file */
    MatchKind[MatchKind["File"] = 2] = "File";
    /** Matched */
    MatchKind[MatchKind["All"] = 3] = "All";
})(MatchKind = exports.MatchKind || (exports.MatchKind = {}));
//# sourceMappingURL=internal-match-kind.js.map

/***/ }),

/***/ 1849:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeTrimTrailingSeparator = exports.normalizeSeparators = exports.hasRoot = exports.hasAbsoluteRoot = exports.ensureAbsoluteRoot = exports.dirname = void 0;
const path = __importStar(__nccwpck_require__(1017));
const assert_1 = __importDefault(__nccwpck_require__(9491));
const IS_WINDOWS = process.platform === 'win32';
/**
 * Similar to path.dirname except normalizes the path separators and slightly better handling for Windows UNC paths.
 *
 * For example, on Linux/macOS:
 * - `/               => /`
 * - `/hello          => /`
 *
 * For example, on Windows:
 * - `C:\             => C:\`
 * - `C:\hello        => C:\`
 * - `C:              => C:`
 * - `C:hello         => C:`
 * - `\               => \`
 * - `\hello          => \`
 * - `\\hello         => \\hello`
 * - `\\hello\world   => \\hello\world`
 */
function dirname(p) {
    // Normalize slashes and trim unnecessary trailing slash
    p = safeTrimTrailingSeparator(p);
    // Windows UNC root, e.g. \\hello or \\hello\world
    if (IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p)) {
        return p;
    }
    // Get dirname
    let result = path.dirname(p);
    // Trim trailing slash for Windows UNC root, e.g. \\hello\world\
    if (IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result)) {
        result = safeTrimTrailingSeparator(result);
    }
    return result;
}
exports.dirname = dirname;
/**
 * Roots the path if not already rooted. On Windows, relative roots like `\`
 * or `C:` are expanded based on the current working directory.
 */
function ensureAbsoluteRoot(root, itemPath) {
    assert_1.default(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);
    assert_1.default(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);
    // Already rooted
    if (hasAbsoluteRoot(itemPath)) {
        return itemPath;
    }
    // Windows
    if (IS_WINDOWS) {
        // Check for itemPath like C: or C:foo
        if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
            let cwd = process.cwd();
            assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
            // Drive letter matches cwd? Expand to cwd
            if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {
                // Drive only, e.g. C:
                if (itemPath.length === 2) {
                    // Preserve specified drive letter case (upper or lower)
                    return `${itemPath[0]}:\\${cwd.substr(3)}`;
                }
                // Drive + path, e.g. C:foo
                else {
                    if (!cwd.endsWith('\\')) {
                        cwd += '\\';
                    }
                    // Preserve specified drive letter case (upper or lower)
                    return `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`;
                }
            }
            // Different drive
            else {
                return `${itemPath[0]}:\\${itemPath.substr(2)}`;
            }
        }
        // Check for itemPath like \ or \foo
        else if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
            const cwd = process.cwd();
            assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
            return `${cwd[0]}:\\${itemPath.substr(1)}`;
        }
    }
    assert_1.default(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);
    // Otherwise ensure root ends with a separator
    if (root.endsWith('/') || (IS_WINDOWS && root.endsWith('\\'))) {
        // Intentionally empty
    }
    else {
        // Append separator
        root += path.sep;
    }
    return root + itemPath;
}
exports.ensureAbsoluteRoot = ensureAbsoluteRoot;
/**
 * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:
 * `\\hello\share` and `C:\hello` (and using alternate separator).
 */
function hasAbsoluteRoot(itemPath) {
    assert_1.default(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);
    // Normalize separators
    itemPath = normalizeSeparators(itemPath);
    // Windows
    if (IS_WINDOWS) {
        // E.g. \\hello\share or C:\hello
        return itemPath.startsWith('\\\\') || /^[A-Z]:\\/i.test(itemPath);
    }
    // E.g. /hello
    return itemPath.startsWith('/');
}
exports.hasAbsoluteRoot = hasAbsoluteRoot;
/**
 * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:
 * `\`, `\hello`, `\\hello\share`, `C:`, and `C:\hello` (and using alternate separator).
 */
function hasRoot(itemPath) {
    assert_1.default(itemPath, `isRooted parameter 'itemPath' must not be empty`);
    // Normalize separators
    itemPath = normalizeSeparators(itemPath);
    // Windows
    if (IS_WINDOWS) {
        // E.g. \ or \hello or \\hello
        // E.g. C: or C:\hello
        return itemPath.startsWith('\\') || /^[A-Z]:/i.test(itemPath);
    }
    // E.g. /hello
    return itemPath.startsWith('/');
}
exports.hasRoot = hasRoot;
/**
 * Removes redundant slashes and converts `/` to `\` on Windows
 */
function normalizeSeparators(p) {
    p = p || '';
    // Windows
    if (IS_WINDOWS) {
        // Convert slashes on Windows
        p = p.replace(/\//g, '\\');
        // Remove redundant slashes
        const isUnc = /^\\\\+[^\\]/.test(p); // e.g. \\hello
        return (isUnc ? '\\' : '') + p.replace(/\\\\+/g, '\\'); // preserve leading \\ for UNC
    }
    // Remove redundant slashes
    return p.replace(/\/\/+/g, '/');
}
exports.normalizeSeparators = normalizeSeparators;
/**
 * Normalizes the path separators and trims the trailing separator (when safe).
 * For example, `/foo/ => /foo` but `/ => /`
 */
function safeTrimTrailingSeparator(p) {
    // Short-circuit if empty
    if (!p) {
        return '';
    }
    // Normalize separators
    p = normalizeSeparators(p);
    // No trailing slash
    if (!p.endsWith(path.sep)) {
        return p;
    }
    // Check '/' on Linux/macOS and '\' on Windows
    if (p === path.sep) {
        return p;
    }
    // On Windows check if drive root. E.g. C:\
    if (IS_WINDOWS && /^[A-Z]:\\$/i.test(p)) {
        return p;
    }
    // Otherwise trim trailing slash
    return p.substr(0, p.length - 1);
}
exports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
//# sourceMappingURL=internal-path-helper.js.map

/***/ }),

/***/ 6836:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Path = void 0;
const path = __importStar(__nccwpck_require__(1017));
const pathHelper = __importStar(__nccwpck_require__(1849));
const assert_1 = __importDefault(__nccwpck_require__(9491));
const IS_WINDOWS = process.platform === 'win32';
/**
 * Helper class for parsing paths into segments
 */
class Path {
    /**
     * Constructs a Path
     * @param itemPath Path or array of segments
     */
    constructor(itemPath) {
        this.segments = [];
        // String
        if (typeof itemPath === 'string') {
            assert_1.default(itemPath, `Parameter 'itemPath' must not be empty`);
            // Normalize slashes and trim unnecessary trailing slash
            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
            // Not rooted
            if (!pathHelper.hasRoot(itemPath)) {
                this.segments = itemPath.split(path.sep);
            }
            // Rooted
            else {
                // Add all segments, while not at the root
                let remaining = itemPath;
                let dir = pathHelper.dirname(remaining);
                while (dir !== remaining) {
                    // Add the segment
                    const basename = path.basename(remaining);
                    this.segments.unshift(basename);
                    // Truncate the last segment
                    remaining = dir;
                    dir = pathHelper.dirname(remaining);
                }
                // Remainder is the root
                this.segments.unshift(remaining);
            }
        }
        // Array
        else {
            // Must not be empty
            assert_1.default(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);
            // Each segment
            for (let i = 0; i < itemPath.length; i++) {
                let segment = itemPath[i];
                // Must not be empty
                assert_1.default(segment, `Parameter 'itemPath' must not contain any empty segments`);
                // Normalize slashes
                segment = pathHelper.normalizeSeparators(itemPath[i]);
                // Root segment
                if (i === 0 && pathHelper.hasRoot(segment)) {
                    segment = pathHelper.safeTrimTrailingSeparator(segment);
                    assert_1.default(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);
                    this.segments.push(segment);
                }
                // All other segments
                else {
                    // Must not contain slash
                    assert_1.default(!segment.includes(path.sep), `Parameter 'itemPath' contains unexpected path separators`);
                    this.segments.push(segment);
                }
            }
        }
    }
    /**
     * Converts the path to it's string representation
     */
    toString() {
        // First segment
        let result = this.segments[0];
        // All others
        let skipSlash = result.endsWith(path.sep) || (IS_WINDOWS && /^[A-Z]:$/i.test(result));
        for (let i = 1; i < this.segments.length; i++) {
            if (skipSlash) {
                skipSlash = false;
            }
            else {
                result += path.sep;
            }
            result += this.segments[i];
        }
        return result;
    }
}
exports.Path = Path;
//# sourceMappingURL=internal-path.js.map

/***/ }),

/***/ 9005:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.partialMatch = exports.match = exports.getSearchPaths = void 0;
const pathHelper = __importStar(__nccwpck_require__(1849));
const internal_match_kind_1 = __nccwpck_require__(1063);
const IS_WINDOWS = process.platform === 'win32';
/**
 * Given an array of patterns, returns an array of paths to search.
 * Duplicates and paths under other included paths are filtered out.
 */
function getSearchPaths(patterns) {
    // Ignore negate patterns
    patterns = patterns.filter(x => !x.negate);
    // Create a map of all search paths
    const searchPathMap = {};
    for (const pattern of patterns) {
        const key = IS_WINDOWS
            ? pattern.searchPath.toUpperCase()
            : pattern.searchPath;
        searchPathMap[key] = 'candidate';
    }
    const result = [];
    for (const pattern of patterns) {
        // Check if already included
        const key = IS_WINDOWS
            ? pattern.searchPath.toUpperCase()
            : pattern.searchPath;
        if (searchPathMap[key] === 'included') {
            continue;
        }
        // Check for an ancestor search path
        let foundAncestor = false;
        let tempKey = key;
        let parent = pathHelper.dirname(tempKey);
        while (parent !== tempKey) {
            if (searchPathMap[parent]) {
                foundAncestor = true;
                break;
            }
            tempKey = parent;
            parent = pathHelper.dirname(tempKey);
        }
        // Include the search pattern in the result
        if (!foundAncestor) {
            result.push(pattern.searchPath);
            searchPathMap[key] = 'included';
        }
    }
    return result;
}
exports.getSearchPaths = getSearchPaths;
/**
 * Matches the patterns against the path
 */
function match(patterns, itemPath) {
    let result = internal_match_kind_1.MatchKind.None;
    for (const pattern of patterns) {
        if (pattern.negate) {
            result &= ~pattern.match(itemPath);
        }
        else {
            result |= pattern.match(itemPath);
        }
    }
    return result;
}
exports.match = match;
/**
 * Checks whether to descend further into the directory
 */
function partialMatch(patterns, itemPath) {
    return patterns.some(x => !x.negate && x.partialMatch(itemPath));
}
exports.partialMatch = partialMatch;
//# sourceMappingURL=internal-pattern-helper.js.map

/***/ }),

/***/ 4536:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pattern = void 0;
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const pathHelper = __importStar(__nccwpck_require__(1849));
const assert_1 = __importDefault(__nccwpck_require__(9491));
const minimatch_1 = __nccwpck_require__(3973);
const internal_match_kind_1 = __nccwpck_require__(1063);
const internal_path_1 = __nccwpck_require__(6836);
const IS_WINDOWS = process.platform === 'win32';
class Pattern {
    constructor(patternOrNegate, isImplicitPattern = false, segments, homedir) {
        /**
         * Indicates whether matches should be excluded from the result set
         */
        this.negate = false;
        // Pattern overload
        let pattern;
        if (typeof patternOrNegate === 'string') {
            pattern = patternOrNegate.trim();
        }
        // Segments overload
        else {
            // Convert to pattern
            segments = segments || [];
            assert_1.default(segments.length, `Parameter 'segments' must not empty`);
            const root = Pattern.getLiteral(segments[0]);
            assert_1.default(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);
            pattern = new internal_path_1.Path(segments).toString().trim();
            if (patternOrNegate) {
                pattern = `!${pattern}`;
            }
        }
        // Negate
        while (pattern.startsWith('!')) {
            this.negate = !this.negate;
            pattern = pattern.substr(1).trim();
        }
        // Normalize slashes and ensures absolute root
        pattern = Pattern.fixupPattern(pattern, homedir);
        // Segments
        this.segments = new internal_path_1.Path(pattern).segments;
        // Trailing slash indicates the pattern should only match directories, not regular files
        this.trailingSeparator = pathHelper
            .normalizeSeparators(pattern)
            .endsWith(path.sep);
        pattern = pathHelper.safeTrimTrailingSeparator(pattern);
        // Search path (literal path prior to the first glob segment)
        let foundGlob = false;
        const searchSegments = this.segments
            .map(x => Pattern.getLiteral(x))
            .filter(x => !foundGlob && !(foundGlob = x === ''));
        this.searchPath = new internal_path_1.Path(searchSegments).toString();
        // Root RegExp (required when determining partial match)
        this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? 'i' : '');
        this.isImplicitPattern = isImplicitPattern;
        // Create minimatch
        const minimatchOptions = {
            dot: true,
            nobrace: true,
            nocase: IS_WINDOWS,
            nocomment: true,
            noext: true,
            nonegate: true
        };
        pattern = IS_WINDOWS ? pattern.replace(/\\/g, '/') : pattern;
        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);
    }
    /**
     * Matches the pattern against the specified path
     */
    match(itemPath) {
        // Last segment is globstar?
        if (this.segments[this.segments.length - 1] === '**') {
            // Normalize slashes
            itemPath = pathHelper.normalizeSeparators(itemPath);
            // Append a trailing slash. Otherwise Minimatch will not match the directory immediately
            // preceding the globstar. For example, given the pattern `/foo/**`, Minimatch returns
            // false for `/foo` but returns true for `/foo/`. Append a trailing slash to handle that quirk.
            if (!itemPath.endsWith(path.sep) && this.isImplicitPattern === false) {
                // Note, this is safe because the constructor ensures the pattern has an absolute root.
                // For example, formats like C: and C:foo on Windows are resolved to an absolute root.
                itemPath = `${itemPath}${path.sep}`;
            }
        }
        else {
            // Normalize slashes and trim unnecessary trailing slash
            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        }
        // Match
        if (this.minimatch.match(itemPath)) {
            return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;
        }
        return internal_match_kind_1.MatchKind.None;
    }
    /**
     * Indicates whether the pattern may match descendants of the specified path
     */
    partialMatch(itemPath) {
        // Normalize slashes and trim unnecessary trailing slash
        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        // matchOne does not handle root path correctly
        if (pathHelper.dirname(itemPath) === itemPath) {
            return this.rootRegExp.test(itemPath);
        }
        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], true);
    }
    /**
     * Escapes glob patterns within a path
     */
    static globEscape(s) {
        return (IS_WINDOWS ? s : s.replace(/\\/g, '\\\\')) // escape '\' on Linux/macOS
            .replace(/(\[)(?=[^/]+\])/g, '[[]') // escape '[' when ']' follows within the path segment
            .replace(/\?/g, '[?]') // escape '?'
            .replace(/\*/g, '[*]'); // escape '*'
    }
    /**
     * Normalizes slashes and ensures absolute root
     */
    static fixupPattern(pattern, homedir) {
        // Empty
        assert_1.default(pattern, 'pattern cannot be empty');
        // Must not contain `.` segment, unless first segment
        // Must not contain `..` segment
        const literalSegments = new internal_path_1.Path(pattern).segments.map(x => Pattern.getLiteral(x));
        assert_1.default(literalSegments.every((x, i) => (x !== '.' || i === 0) && x !== '..'), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);
        // Must not contain globs in root, e.g. Windows UNC path \\foo\b*r
        assert_1.default(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);
        // Normalize slashes
        pattern = pathHelper.normalizeSeparators(pattern);
        // Replace leading `.` segment
        if (pattern === '.' || pattern.startsWith(`.${path.sep}`)) {
            pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1);
        }
        // Replace leading `~` segment
        else if (pattern === '~' || pattern.startsWith(`~${path.sep}`)) {
            homedir = homedir || os.homedir();
            assert_1.default(homedir, 'Unable to determine HOME directory');
            assert_1.default(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);
            pattern = Pattern.globEscape(homedir) + pattern.substr(1);
        }
        // Replace relative drive root, e.g. pattern is C: or C:foo
        else if (IS_WINDOWS &&
            (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
            let root = pathHelper.ensureAbsoluteRoot('C:\\dummy-root', pattern.substr(0, 2));
            if (pattern.length > 2 && !root.endsWith('\\')) {
                root += '\\';
            }
            pattern = Pattern.globEscape(root) + pattern.substr(2);
        }
        // Replace relative root, e.g. pattern is \ or \foo
        else if (IS_WINDOWS && (pattern === '\\' || pattern.match(/^\\[^\\]/))) {
            let root = pathHelper.ensureAbsoluteRoot('C:\\dummy-root', '\\');
            if (!root.endsWith('\\')) {
                root += '\\';
            }
            pattern = Pattern.globEscape(root) + pattern.substr(1);
        }
        // Otherwise ensure absolute root
        else {
            pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);
        }
        return pathHelper.normalizeSeparators(pattern);
    }
    /**
     * Attempts to unescape a pattern segment to create a literal path segment.
     * Otherwise returns empty string.
     */
    static getLiteral(segment) {
        let literal = '';
        for (let i = 0; i < segment.length; i++) {
            const c = segment[i];
            // Escape
            if (c === '\\' && !IS_WINDOWS && i + 1 < segment.length) {
                literal += segment[++i];
                continue;
            }
            // Wildcard
            else if (c === '*' || c === '?') {
                return '';
            }
            // Character set
            else if (c === '[' && i + 1 < segment.length) {
                let set = '';
                let closed = -1;
                for (let i2 = i + 1; i2 < segment.length; i2++) {
                    const c2 = segment[i2];
                    // Escape
                    if (c2 === '\\' && !IS_WINDOWS && i2 + 1 < segment.length) {
                        set += segment[++i2];
                        continue;
                    }
                    // Closed
                    else if (c2 === ']') {
                        closed = i2;
                        break;
                    }
                    // Otherwise
                    else {
                        set += c2;
                    }
                }
                // Closed?
                if (closed >= 0) {
                    // Cannot convert
                    if (set.length > 1) {
                        return '';
                    }
                    // Convert to literal
                    if (set) {
                        literal += set;
                        i = closed;
                        continue;
                    }
                }
                // Otherwise fall thru
            }
            // Append
            literal += c;
        }
        return literal;
    }
    /**
     * Escapes regexp special characters
     * https://javascript.info/regexp-escaping
     */
    static regExpEscape(s) {
        return s.replace(/[[\\^$.|?*+()]/g, '\\$&');
    }
}
exports.Pattern = Pattern;
//# sourceMappingURL=internal-pattern.js.map

/***/ }),

/***/ 9117:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchState = void 0;
class SearchState {
    constructor(path, level) {
        this.path = path;
        this.level = level;
    }
}
exports.SearchState = SearchState;
//# sourceMappingURL=internal-search-state.js.map

/***/ }),

/***/ 5526:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 6255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(9835));
const tunnel = __importStar(__nccwpck_require__(4294));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        return new URL(proxyVar);
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperReqHosts.some(x => x === upperNoProxyItem)) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 395:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

const AdmonitionType = 'admonition';

const BlockquoteType = 'blockquote';

const BreakType = 'break';

const CodeType = 'code';

const DefinitionType = 'definition';

const DeleteType = 'delete';

const EcmaImportType = 'ecmaImport';

const EmphasisType = 'emphasis';

const FootnoteType = 'footnote';

const FootnoteDefinitionType = 'footnoteDefinition';

const FootnoteReferenceType = 'footnoteReference';

const FrontmatterType = 'frontmatter';

const HeadingType = 'heading';

const HtmlType = 'html';
exports.HtmlContentType = void 0;
(function (HtmlContentType) {
    HtmlContentType["CDATA"] = "cdata";
    HtmlContentType["Closing"] = "closing";
    HtmlContentType["Comment"] = "comment";
    HtmlContentType["Declaration"] = "declaration";
    HtmlContentType["Instruction"] = "instruction";
    HtmlContentType["Open"] = "open";
})(exports.HtmlContentType || (exports.HtmlContentType = {}));

const ImageReferenceType = 'imageReference';

const ImageType = 'image';

const InlineCodeType = 'inlineCode';

const InlineMathType = 'inlineMath';

const LinkReferenceType = 'linkReference';

const LinkType = 'link';

const ListItemType = 'listItem';
exports.TaskStatus = void 0;
(function (TaskStatus) {
    TaskStatus["TODO"] = "todo";
    TaskStatus["DOING"] = "doing";
    TaskStatus["DONE"] = "done";
})(exports.TaskStatus || (exports.TaskStatus = {}));

const ListType = 'list';

const MathType = 'math';

const ParagraphType = 'paragraph';

const RootType = 'root';

const StrongType = 'strong';

const TableCellType = 'tableCell';

const TableRowType = 'tableRow';

const TableType = 'table';

const TextType = 'text';

const ThematicBreakType = 'thematicBreak';

exports.AdmonitionType = AdmonitionType;
exports.BlockquoteType = BlockquoteType;
exports.BreakType = BreakType;
exports.CodeType = CodeType;
exports.DefinitionType = DefinitionType;
exports.DeleteType = DeleteType;
exports.EcmaImportType = EcmaImportType;
exports.EmphasisType = EmphasisType;
exports.FootnoteDefinitionType = FootnoteDefinitionType;
exports.FootnoteReferenceType = FootnoteReferenceType;
exports.FootnoteType = FootnoteType;
exports.FrontmatterType = FrontmatterType;
exports.HeadingType = HeadingType;
exports.HtmlType = HtmlType;
exports.ImageReferenceType = ImageReferenceType;
exports.ImageType = ImageType;
exports.InlineCodeType = InlineCodeType;
exports.InlineMathType = InlineMathType;
exports.LinkReferenceType = LinkReferenceType;
exports.LinkType = LinkType;
exports.ListItemType = ListItemType;
exports.ListType = ListType;
exports.MathType = MathType;
exports.ParagraphType = ParagraphType;
exports.RootType = RootType;
exports.StrongType = StrongType;
exports.TableCellType = TableCellType;
exports.TableRowType = TableRowType;
exports.TableType = TableType;
exports.TextType = TextType;
exports.ThematicBreakType = ThematicBreakType;


/***/ }),

/***/ 8356:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

exports.AsciiCodePoint = void 0;
(function (AsciiCodePoint) {
    AsciiCodePoint[AsciiCodePoint["NUL"] = 0] = "NUL";
    AsciiCodePoint[AsciiCodePoint["SOH"] = 1] = "SOH";
    AsciiCodePoint[AsciiCodePoint["STX"] = 2] = "STX";
    AsciiCodePoint[AsciiCodePoint["ETX"] = 3] = "ETX";
    AsciiCodePoint[AsciiCodePoint["EOT"] = 4] = "EOT";
    AsciiCodePoint[AsciiCodePoint["ENQ"] = 5] = "ENQ";
    AsciiCodePoint[AsciiCodePoint["ACK"] = 6] = "ACK";
    AsciiCodePoint[AsciiCodePoint["BEL"] = 7] = "BEL";
    AsciiCodePoint[AsciiCodePoint["BS"] = 8] = "BS";
    AsciiCodePoint[AsciiCodePoint["HT"] = 9] = "HT";
    AsciiCodePoint[AsciiCodePoint["LF"] = 10] = "LF";
    AsciiCodePoint[AsciiCodePoint["VT"] = 11] = "VT";
    AsciiCodePoint[AsciiCodePoint["FF"] = 12] = "FF";
    AsciiCodePoint[AsciiCodePoint["CR"] = 13] = "CR";
    AsciiCodePoint[AsciiCodePoint["SO"] = 14] = "SO";
    AsciiCodePoint[AsciiCodePoint["SI"] = 15] = "SI";
    AsciiCodePoint[AsciiCodePoint["DLE"] = 16] = "DLE";
    AsciiCodePoint[AsciiCodePoint["DC1"] = 17] = "DC1";
    AsciiCodePoint[AsciiCodePoint["DC2"] = 18] = "DC2";
    AsciiCodePoint[AsciiCodePoint["DC3"] = 19] = "DC3";
    AsciiCodePoint[AsciiCodePoint["DC4"] = 20] = "DC4";
    AsciiCodePoint[AsciiCodePoint["NAK"] = 21] = "NAK";
    AsciiCodePoint[AsciiCodePoint["SYN"] = 22] = "SYN";
    AsciiCodePoint[AsciiCodePoint["ETB"] = 23] = "ETB";
    AsciiCodePoint[AsciiCodePoint["CAN"] = 24] = "CAN";
    AsciiCodePoint[AsciiCodePoint["EM"] = 25] = "EM";
    AsciiCodePoint[AsciiCodePoint["SUB"] = 26] = "SUB";
    AsciiCodePoint[AsciiCodePoint["ESC"] = 27] = "ESC";
    AsciiCodePoint[AsciiCodePoint["FS"] = 28] = "FS";
    AsciiCodePoint[AsciiCodePoint["GS"] = 29] = "GS";
    AsciiCodePoint[AsciiCodePoint["RS"] = 30] = "RS";
    AsciiCodePoint[AsciiCodePoint["US"] = 31] = "US";
    AsciiCodePoint[AsciiCodePoint["SPACE"] = 32] = "SPACE";
    AsciiCodePoint[AsciiCodePoint["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
    AsciiCodePoint[AsciiCodePoint["DOUBLE_QUOTE"] = 34] = "DOUBLE_QUOTE";
    AsciiCodePoint[AsciiCodePoint["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
    AsciiCodePoint[AsciiCodePoint["DOLLAR_SIGN"] = 36] = "DOLLAR_SIGN";
    AsciiCodePoint[AsciiCodePoint["PERCENT_SIGN"] = 37] = "PERCENT_SIGN";
    AsciiCodePoint[AsciiCodePoint["AMPERSAND"] = 38] = "AMPERSAND";
    AsciiCodePoint[AsciiCodePoint["SINGLE_QUOTE"] = 39] = "SINGLE_QUOTE";
    AsciiCodePoint[AsciiCodePoint["OPEN_PARENTHESIS"] = 40] = "OPEN_PARENTHESIS";
    AsciiCodePoint[AsciiCodePoint["CLOSE_PARENTHESIS"] = 41] = "CLOSE_PARENTHESIS";
    AsciiCodePoint[AsciiCodePoint["ASTERISK"] = 42] = "ASTERISK";
    AsciiCodePoint[AsciiCodePoint["PLUS_SIGN"] = 43] = "PLUS_SIGN";
    AsciiCodePoint[AsciiCodePoint["COMMA"] = 44] = "COMMA";
    AsciiCodePoint[AsciiCodePoint["MINUS_SIGN"] = 45] = "MINUS_SIGN";
    AsciiCodePoint[AsciiCodePoint["DOT"] = 46] = "DOT";
    AsciiCodePoint[AsciiCodePoint["SLASH"] = 47] = "SLASH";
    AsciiCodePoint[AsciiCodePoint["DIGIT0"] = 48] = "DIGIT0";
    AsciiCodePoint[AsciiCodePoint["DIGIT1"] = 49] = "DIGIT1";
    AsciiCodePoint[AsciiCodePoint["DIGIT2"] = 50] = "DIGIT2";
    AsciiCodePoint[AsciiCodePoint["DIGIT3"] = 51] = "DIGIT3";
    AsciiCodePoint[AsciiCodePoint["DIGIT4"] = 52] = "DIGIT4";
    AsciiCodePoint[AsciiCodePoint["DIGIT5"] = 53] = "DIGIT5";
    AsciiCodePoint[AsciiCodePoint["DIGIT6"] = 54] = "DIGIT6";
    AsciiCodePoint[AsciiCodePoint["DIGIT7"] = 55] = "DIGIT7";
    AsciiCodePoint[AsciiCodePoint["DIGIT8"] = 56] = "DIGIT8";
    AsciiCodePoint[AsciiCodePoint["DIGIT9"] = 57] = "DIGIT9";
    AsciiCodePoint[AsciiCodePoint["COLON"] = 58] = "COLON";
    AsciiCodePoint[AsciiCodePoint["SEMICOLON"] = 59] = "SEMICOLON";
    AsciiCodePoint[AsciiCodePoint["OPEN_ANGLE"] = 60] = "OPEN_ANGLE";
    AsciiCodePoint[AsciiCodePoint["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
    AsciiCodePoint[AsciiCodePoint["CLOSE_ANGLE"] = 62] = "CLOSE_ANGLE";
    AsciiCodePoint[AsciiCodePoint["QUESTION_MARK"] = 63] = "QUESTION_MARK";
    AsciiCodePoint[AsciiCodePoint["AT_SIGN"] = 64] = "AT_SIGN";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_A"] = 65] = "UPPERCASE_A";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_B"] = 66] = "UPPERCASE_B";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_C"] = 67] = "UPPERCASE_C";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_D"] = 68] = "UPPERCASE_D";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_E"] = 69] = "UPPERCASE_E";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_F"] = 70] = "UPPERCASE_F";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_G"] = 71] = "UPPERCASE_G";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_H"] = 72] = "UPPERCASE_H";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_I"] = 73] = "UPPERCASE_I";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_J"] = 74] = "UPPERCASE_J";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_K"] = 75] = "UPPERCASE_K";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_L"] = 76] = "UPPERCASE_L";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_M"] = 77] = "UPPERCASE_M";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_N"] = 78] = "UPPERCASE_N";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_O"] = 79] = "UPPERCASE_O";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_P"] = 80] = "UPPERCASE_P";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_Q"] = 81] = "UPPERCASE_Q";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_R"] = 82] = "UPPERCASE_R";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_S"] = 83] = "UPPERCASE_S";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_T"] = 84] = "UPPERCASE_T";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_U"] = 85] = "UPPERCASE_U";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_V"] = 86] = "UPPERCASE_V";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_W"] = 87] = "UPPERCASE_W";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_X"] = 88] = "UPPERCASE_X";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_Y"] = 89] = "UPPERCASE_Y";
    AsciiCodePoint[AsciiCodePoint["UPPERCASE_Z"] = 90] = "UPPERCASE_Z";
    AsciiCodePoint[AsciiCodePoint["OPEN_BRACKET"] = 91] = "OPEN_BRACKET";
    AsciiCodePoint[AsciiCodePoint["BACKSLASH"] = 92] = "BACKSLASH";
    AsciiCodePoint[AsciiCodePoint["CLOSE_BRACKET"] = 93] = "CLOSE_BRACKET";
    AsciiCodePoint[AsciiCodePoint["CARET"] = 94] = "CARET";
    AsciiCodePoint[AsciiCodePoint["UNDERSCORE"] = 95] = "UNDERSCORE";
    AsciiCodePoint[AsciiCodePoint["BACKTICK"] = 96] = "BACKTICK";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_A"] = 97] = "LOWERCASE_A";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_B"] = 98] = "LOWERCASE_B";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_C"] = 99] = "LOWERCASE_C";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_D"] = 100] = "LOWERCASE_D";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_E"] = 101] = "LOWERCASE_E";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_F"] = 102] = "LOWERCASE_F";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_G"] = 103] = "LOWERCASE_G";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_H"] = 104] = "LOWERCASE_H";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_I"] = 105] = "LOWERCASE_I";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_J"] = 106] = "LOWERCASE_J";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_K"] = 107] = "LOWERCASE_K";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_L"] = 108] = "LOWERCASE_L";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_M"] = 109] = "LOWERCASE_M";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_N"] = 110] = "LOWERCASE_N";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_O"] = 111] = "LOWERCASE_O";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_P"] = 112] = "LOWERCASE_P";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_Q"] = 113] = "LOWERCASE_Q";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_R"] = 114] = "LOWERCASE_R";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_S"] = 115] = "LOWERCASE_S";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_T"] = 116] = "LOWERCASE_T";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_U"] = 117] = "LOWERCASE_U";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_V"] = 118] = "LOWERCASE_V";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_W"] = 119] = "LOWERCASE_W";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_X"] = 120] = "LOWERCASE_X";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_Y"] = 121] = "LOWERCASE_Y";
    AsciiCodePoint[AsciiCodePoint["LOWERCASE_Z"] = 122] = "LOWERCASE_Z";
    AsciiCodePoint[AsciiCodePoint["OPEN_BRACE"] = 123] = "OPEN_BRACE";
    AsciiCodePoint[AsciiCodePoint["VERTICAL_SLASH"] = 124] = "VERTICAL_SLASH";
    AsciiCodePoint[AsciiCodePoint["CLOSE_BRACE"] = 125] = "CLOSE_BRACE";
    AsciiCodePoint[AsciiCodePoint["TILDE"] = 126] = "TILDE";
    AsciiCodePoint[AsciiCodePoint["DELETE"] = 127] = "DELETE";
})(exports.AsciiCodePoint || (exports.AsciiCodePoint = {}));

const foldingCaseCodeMap = {
    '\xB5': '\u03BC',
    '\xC0': '\xE0',
    '\xC1': '\xE1',
    '\xC2': '\xE2',
    '\xC3': '\xE3',
    '\xC4': '\xE4',
    '\xC5': '\xE5',
    '\xC6': '\xE6',
    '\xC7': '\xE7',
    '\xC8': '\xE8',
    '\xC9': '\xE9',
    '\xCA': '\xEA',
    '\xCB': '\xEB',
    '\xCC': '\xEC',
    '\xCD': '\xED',
    '\xCE': '\xEE',
    '\xCF': '\xEF',
    '\xD0': '\xF0',
    '\xD1': '\xF1',
    '\xD2': '\xF2',
    '\xD3': '\xF3',
    '\xD4': '\xF4',
    '\xD5': '\xF5',
    '\xD6': '\xF6',
    '\xD8': '\xF8',
    '\xD9': '\xF9',
    '\xDA': '\xFA',
    '\xDB': '\xFB',
    '\xDC': '\xFC',
    '\xDD': '\xFD',
    '\xDE': '\xFE',
    '\u0100': '\u0101',
    '\u0102': '\u0103',
    '\u0104': '\u0105',
    '\u0106': '\u0107',
    '\u0108': '\u0109',
    '\u010A': '\u010B',
    '\u010C': '\u010D',
    '\u010E': '\u010F',
    '\u0110': '\u0111',
    '\u0112': '\u0113',
    '\u0114': '\u0115',
    '\u0116': '\u0117',
    '\u0118': '\u0119',
    '\u011A': '\u011B',
    '\u011C': '\u011D',
    '\u011E': '\u011F',
    '\u0120': '\u0121',
    '\u0122': '\u0123',
    '\u0124': '\u0125',
    '\u0126': '\u0127',
    '\u0128': '\u0129',
    '\u012A': '\u012B',
    '\u012C': '\u012D',
    '\u012E': '\u012F',
    '\u0132': '\u0133',
    '\u0134': '\u0135',
    '\u0136': '\u0137',
    '\u0139': '\u013A',
    '\u013B': '\u013C',
    '\u013D': '\u013E',
    '\u013F': '\u0140',
    '\u0141': '\u0142',
    '\u0143': '\u0144',
    '\u0145': '\u0146',
    '\u0147': '\u0148',
    '\u014A': '\u014B',
    '\u014C': '\u014D',
    '\u014E': '\u014F',
    '\u0150': '\u0151',
    '\u0152': '\u0153',
    '\u0154': '\u0155',
    '\u0156': '\u0157',
    '\u0158': '\u0159',
    '\u015A': '\u015B',
    '\u015C': '\u015D',
    '\u015E': '\u015F',
    '\u0160': '\u0161',
    '\u0162': '\u0163',
    '\u0164': '\u0165',
    '\u0166': '\u0167',
    '\u0168': '\u0169',
    '\u016A': '\u016B',
    '\u016C': '\u016D',
    '\u016E': '\u016F',
    '\u0170': '\u0171',
    '\u0172': '\u0173',
    '\u0174': '\u0175',
    '\u0176': '\u0177',
    '\u0178': '\xFF',
    '\u0179': '\u017A',
    '\u017B': '\u017C',
    '\u017D': '\u017E',
    '\u017F': 's',
    '\u0181': '\u0253',
    '\u0182': '\u0183',
    '\u0184': '\u0185',
    '\u0186': '\u0254',
    '\u0187': '\u0188',
    '\u0189': '\u0256',
    '\u018A': '\u0257',
    '\u018B': '\u018C',
    '\u018E': '\u01DD',
    '\u018F': '\u0259',
    '\u0190': '\u025B',
    '\u0191': '\u0192',
    '\u0193': '\u0260',
    '\u0194': '\u0263',
    '\u0196': '\u0269',
    '\u0197': '\u0268',
    '\u0198': '\u0199',
    '\u019C': '\u026F',
    '\u019D': '\u0272',
    '\u019F': '\u0275',
    '\u01A0': '\u01A1',
    '\u01A2': '\u01A3',
    '\u01A4': '\u01A5',
    '\u01A6': '\u0280',
    '\u01A7': '\u01A8',
    '\u01A9': '\u0283',
    '\u01AC': '\u01AD',
    '\u01AE': '\u0288',
    '\u01AF': '\u01B0',
    '\u01B1': '\u028A',
    '\u01B2': '\u028B',
    '\u01B3': '\u01B4',
    '\u01B5': '\u01B6',
    '\u01B7': '\u0292',
    '\u01B8': '\u01B9',
    '\u01BC': '\u01BD',
    '\u01C4': '\u01C6',
    '\u01C5': '\u01C6',
    '\u01C7': '\u01C9',
    '\u01C8': '\u01C9',
    '\u01CA': '\u01CC',
    '\u01CB': '\u01CC',
    '\u01CD': '\u01CE',
    '\u01CF': '\u01D0',
    '\u01D1': '\u01D2',
    '\u01D3': '\u01D4',
    '\u01D5': '\u01D6',
    '\u01D7': '\u01D8',
    '\u01D9': '\u01DA',
    '\u01DB': '\u01DC',
    '\u01DE': '\u01DF',
    '\u01E0': '\u01E1',
    '\u01E2': '\u01E3',
    '\u01E4': '\u01E5',
    '\u01E6': '\u01E7',
    '\u01E8': '\u01E9',
    '\u01EA': '\u01EB',
    '\u01EC': '\u01ED',
    '\u01EE': '\u01EF',
    '\u01F1': '\u01F3',
    '\u01F2': '\u01F3',
    '\u01F4': '\u01F5',
    '\u01F6': '\u0195',
    '\u01F7': '\u01BF',
    '\u01F8': '\u01F9',
    '\u01FA': '\u01FB',
    '\u01FC': '\u01FD',
    '\u01FE': '\u01FF',
    '\u0200': '\u0201',
    '\u0202': '\u0203',
    '\u0204': '\u0205',
    '\u0206': '\u0207',
    '\u0208': '\u0209',
    '\u020A': '\u020B',
    '\u020C': '\u020D',
    '\u020E': '\u020F',
    '\u0210': '\u0211',
    '\u0212': '\u0213',
    '\u0214': '\u0215',
    '\u0216': '\u0217',
    '\u0218': '\u0219',
    '\u021A': '\u021B',
    '\u021C': '\u021D',
    '\u021E': '\u021F',
    '\u0220': '\u019E',
    '\u0222': '\u0223',
    '\u0224': '\u0225',
    '\u0226': '\u0227',
    '\u0228': '\u0229',
    '\u022A': '\u022B',
    '\u022C': '\u022D',
    '\u022E': '\u022F',
    '\u0230': '\u0231',
    '\u0232': '\u0233',
    '\u023A': '\u2C65',
    '\u023B': '\u023C',
    '\u023D': '\u019A',
    '\u023E': '\u2C66',
    '\u0241': '\u0242',
    '\u0243': '\u0180',
    '\u0244': '\u0289',
    '\u0245': '\u028C',
    '\u0246': '\u0247',
    '\u0248': '\u0249',
    '\u024A': '\u024B',
    '\u024C': '\u024D',
    '\u024E': '\u024F',
    '\u0345': '\u03B9',
    '\u0370': '\u0371',
    '\u0372': '\u0373',
    '\u0376': '\u0377',
    '\u037F': '\u03F3',
    '\u0386': '\u03AC',
    '\u0388': '\u03AD',
    '\u0389': '\u03AE',
    '\u038A': '\u03AF',
    '\u038C': '\u03CC',
    '\u038E': '\u03CD',
    '\u038F': '\u03CE',
    '\u0391': '\u03B1',
    '\u0392': '\u03B2',
    '\u0393': '\u03B3',
    '\u0394': '\u03B4',
    '\u0395': '\u03B5',
    '\u0396': '\u03B6',
    '\u0397': '\u03B7',
    '\u0398': '\u03B8',
    '\u0399': '\u03B9',
    '\u039A': '\u03BA',
    '\u039B': '\u03BB',
    '\u039C': '\u03BC',
    '\u039D': '\u03BD',
    '\u039E': '\u03BE',
    '\u039F': '\u03BF',
    '\u03A0': '\u03C0',
    '\u03A1': '\u03C1',
    '\u03A3': '\u03C3',
    '\u03A4': '\u03C4',
    '\u03A5': '\u03C5',
    '\u03A6': '\u03C6',
    '\u03A7': '\u03C7',
    '\u03A8': '\u03C8',
    '\u03A9': '\u03C9',
    '\u03AA': '\u03CA',
    '\u03AB': '\u03CB',
    '\u03C2': '\u03C3',
    '\u03CF': '\u03D7',
    '\u03D0': '\u03B2',
    '\u03D1': '\u03B8',
    '\u03D5': '\u03C6',
    '\u03D6': '\u03C0',
    '\u03D8': '\u03D9',
    '\u03DA': '\u03DB',
    '\u03DC': '\u03DD',
    '\u03DE': '\u03DF',
    '\u03E0': '\u03E1',
    '\u03E2': '\u03E3',
    '\u03E4': '\u03E5',
    '\u03E6': '\u03E7',
    '\u03E8': '\u03E9',
    '\u03EA': '\u03EB',
    '\u03EC': '\u03ED',
    '\u03EE': '\u03EF',
    '\u03F0': '\u03BA',
    '\u03F1': '\u03C1',
    '\u03F4': '\u03B8',
    '\u03F5': '\u03B5',
    '\u03F7': '\u03F8',
    '\u03F9': '\u03F2',
    '\u03FA': '\u03FB',
    '\u03FD': '\u037B',
    '\u03FE': '\u037C',
    '\u03FF': '\u037D',
    '\u0400': '\u0450',
    '\u0401': '\u0451',
    '\u0402': '\u0452',
    '\u0403': '\u0453',
    '\u0404': '\u0454',
    '\u0405': '\u0455',
    '\u0406': '\u0456',
    '\u0407': '\u0457',
    '\u0408': '\u0458',
    '\u0409': '\u0459',
    '\u040A': '\u045A',
    '\u040B': '\u045B',
    '\u040C': '\u045C',
    '\u040D': '\u045D',
    '\u040E': '\u045E',
    '\u040F': '\u045F',
    '\u0410': '\u0430',
    '\u0411': '\u0431',
    '\u0412': '\u0432',
    '\u0413': '\u0433',
    '\u0414': '\u0434',
    '\u0415': '\u0435',
    '\u0416': '\u0436',
    '\u0417': '\u0437',
    '\u0418': '\u0438',
    '\u0419': '\u0439',
    '\u041A': '\u043A',
    '\u041B': '\u043B',
    '\u041C': '\u043C',
    '\u041D': '\u043D',
    '\u041E': '\u043E',
    '\u041F': '\u043F',
    '\u0420': '\u0440',
    '\u0421': '\u0441',
    '\u0422': '\u0442',
    '\u0423': '\u0443',
    '\u0424': '\u0444',
    '\u0425': '\u0445',
    '\u0426': '\u0446',
    '\u0427': '\u0447',
    '\u0428': '\u0448',
    '\u0429': '\u0449',
    '\u042A': '\u044A',
    '\u042B': '\u044B',
    '\u042C': '\u044C',
    '\u042D': '\u044D',
    '\u042E': '\u044E',
    '\u042F': '\u044F',
    '\u0460': '\u0461',
    '\u0462': '\u0463',
    '\u0464': '\u0465',
    '\u0466': '\u0467',
    '\u0468': '\u0469',
    '\u046A': '\u046B',
    '\u046C': '\u046D',
    '\u046E': '\u046F',
    '\u0470': '\u0471',
    '\u0472': '\u0473',
    '\u0474': '\u0475',
    '\u0476': '\u0477',
    '\u0478': '\u0479',
    '\u047A': '\u047B',
    '\u047C': '\u047D',
    '\u047E': '\u047F',
    '\u0480': '\u0481',
    '\u048A': '\u048B',
    '\u048C': '\u048D',
    '\u048E': '\u048F',
    '\u0490': '\u0491',
    '\u0492': '\u0493',
    '\u0494': '\u0495',
    '\u0496': '\u0497',
    '\u0498': '\u0499',
    '\u049A': '\u049B',
    '\u049C': '\u049D',
    '\u049E': '\u049F',
    '\u04A0': '\u04A1',
    '\u04A2': '\u04A3',
    '\u04A4': '\u04A5',
    '\u04A6': '\u04A7',
    '\u04A8': '\u04A9',
    '\u04AA': '\u04AB',
    '\u04AC': '\u04AD',
    '\u04AE': '\u04AF',
    '\u04B0': '\u04B1',
    '\u04B2': '\u04B3',
    '\u04B4': '\u04B5',
    '\u04B6': '\u04B7',
    '\u04B8': '\u04B9',
    '\u04BA': '\u04BB',
    '\u04BC': '\u04BD',
    '\u04BE': '\u04BF',
    '\u04C0': '\u04CF',
    '\u04C1': '\u04C2',
    '\u04C3': '\u04C4',
    '\u04C5': '\u04C6',
    '\u04C7': '\u04C8',
    '\u04C9': '\u04CA',
    '\u04CB': '\u04CC',
    '\u04CD': '\u04CE',
    '\u04D0': '\u04D1',
    '\u04D2': '\u04D3',
    '\u04D4': '\u04D5',
    '\u04D6': '\u04D7',
    '\u04D8': '\u04D9',
    '\u04DA': '\u04DB',
    '\u04DC': '\u04DD',
    '\u04DE': '\u04DF',
    '\u04E0': '\u04E1',
    '\u04E2': '\u04E3',
    '\u04E4': '\u04E5',
    '\u04E6': '\u04E7',
    '\u04E8': '\u04E9',
    '\u04EA': '\u04EB',
    '\u04EC': '\u04ED',
    '\u04EE': '\u04EF',
    '\u04F0': '\u04F1',
    '\u04F2': '\u04F3',
    '\u04F4': '\u04F5',
    '\u04F6': '\u04F7',
    '\u04F8': '\u04F9',
    '\u04FA': '\u04FB',
    '\u04FC': '\u04FD',
    '\u04FE': '\u04FF',
    '\u0500': '\u0501',
    '\u0502': '\u0503',
    '\u0504': '\u0505',
    '\u0506': '\u0507',
    '\u0508': '\u0509',
    '\u050A': '\u050B',
    '\u050C': '\u050D',
    '\u050E': '\u050F',
    '\u0510': '\u0511',
    '\u0512': '\u0513',
    '\u0514': '\u0515',
    '\u0516': '\u0517',
    '\u0518': '\u0519',
    '\u051A': '\u051B',
    '\u051C': '\u051D',
    '\u051E': '\u051F',
    '\u0520': '\u0521',
    '\u0522': '\u0523',
    '\u0524': '\u0525',
    '\u0526': '\u0527',
    '\u0528': '\u0529',
    '\u052A': '\u052B',
    '\u052C': '\u052D',
    '\u052E': '\u052F',
    '\u0531': '\u0561',
    '\u0532': '\u0562',
    '\u0533': '\u0563',
    '\u0534': '\u0564',
    '\u0535': '\u0565',
    '\u0536': '\u0566',
    '\u0537': '\u0567',
    '\u0538': '\u0568',
    '\u0539': '\u0569',
    '\u053A': '\u056A',
    '\u053B': '\u056B',
    '\u053C': '\u056C',
    '\u053D': '\u056D',
    '\u053E': '\u056E',
    '\u053F': '\u056F',
    '\u0540': '\u0570',
    '\u0541': '\u0571',
    '\u0542': '\u0572',
    '\u0543': '\u0573',
    '\u0544': '\u0574',
    '\u0545': '\u0575',
    '\u0546': '\u0576',
    '\u0547': '\u0577',
    '\u0548': '\u0578',
    '\u0549': '\u0579',
    '\u054A': '\u057A',
    '\u054B': '\u057B',
    '\u054C': '\u057C',
    '\u054D': '\u057D',
    '\u054E': '\u057E',
    '\u054F': '\u057F',
    '\u0550': '\u0580',
    '\u0551': '\u0581',
    '\u0552': '\u0582',
    '\u0553': '\u0583',
    '\u0554': '\u0584',
    '\u0555': '\u0585',
    '\u0556': '\u0586',
    '\u10A0': '\u2D00',
    '\u10A1': '\u2D01',
    '\u10A2': '\u2D02',
    '\u10A3': '\u2D03',
    '\u10A4': '\u2D04',
    '\u10A5': '\u2D05',
    '\u10A6': '\u2D06',
    '\u10A7': '\u2D07',
    '\u10A8': '\u2D08',
    '\u10A9': '\u2D09',
    '\u10AA': '\u2D0A',
    '\u10AB': '\u2D0B',
    '\u10AC': '\u2D0C',
    '\u10AD': '\u2D0D',
    '\u10AE': '\u2D0E',
    '\u10AF': '\u2D0F',
    '\u10B0': '\u2D10',
    '\u10B1': '\u2D11',
    '\u10B2': '\u2D12',
    '\u10B3': '\u2D13',
    '\u10B4': '\u2D14',
    '\u10B5': '\u2D15',
    '\u10B6': '\u2D16',
    '\u10B7': '\u2D17',
    '\u10B8': '\u2D18',
    '\u10B9': '\u2D19',
    '\u10BA': '\u2D1A',
    '\u10BB': '\u2D1B',
    '\u10BC': '\u2D1C',
    '\u10BD': '\u2D1D',
    '\u10BE': '\u2D1E',
    '\u10BF': '\u2D1F',
    '\u10C0': '\u2D20',
    '\u10C1': '\u2D21',
    '\u10C2': '\u2D22',
    '\u10C3': '\u2D23',
    '\u10C4': '\u2D24',
    '\u10C5': '\u2D25',
    '\u10C7': '\u2D27',
    '\u10CD': '\u2D2D',
    '\u1E00': '\u1E01',
    '\u1E02': '\u1E03',
    '\u1E04': '\u1E05',
    '\u1E06': '\u1E07',
    '\u1E08': '\u1E09',
    '\u1E0A': '\u1E0B',
    '\u1E0C': '\u1E0D',
    '\u1E0E': '\u1E0F',
    '\u1E10': '\u1E11',
    '\u1E12': '\u1E13',
    '\u1E14': '\u1E15',
    '\u1E16': '\u1E17',
    '\u1E18': '\u1E19',
    '\u1E1A': '\u1E1B',
    '\u1E1C': '\u1E1D',
    '\u1E1E': '\u1E1F',
    '\u1E20': '\u1E21',
    '\u1E22': '\u1E23',
    '\u1E24': '\u1E25',
    '\u1E26': '\u1E27',
    '\u1E28': '\u1E29',
    '\u1E2A': '\u1E2B',
    '\u1E2C': '\u1E2D',
    '\u1E2E': '\u1E2F',
    '\u1E30': '\u1E31',
    '\u1E32': '\u1E33',
    '\u1E34': '\u1E35',
    '\u1E36': '\u1E37',
    '\u1E38': '\u1E39',
    '\u1E3A': '\u1E3B',
    '\u1E3C': '\u1E3D',
    '\u1E3E': '\u1E3F',
    '\u1E40': '\u1E41',
    '\u1E42': '\u1E43',
    '\u1E44': '\u1E45',
    '\u1E46': '\u1E47',
    '\u1E48': '\u1E49',
    '\u1E4A': '\u1E4B',
    '\u1E4C': '\u1E4D',
    '\u1E4E': '\u1E4F',
    '\u1E50': '\u1E51',
    '\u1E52': '\u1E53',
    '\u1E54': '\u1E55',
    '\u1E56': '\u1E57',
    '\u1E58': '\u1E59',
    '\u1E5A': '\u1E5B',
    '\u1E5C': '\u1E5D',
    '\u1E5E': '\u1E5F',
    '\u1E60': '\u1E61',
    '\u1E62': '\u1E63',
    '\u1E64': '\u1E65',
    '\u1E66': '\u1E67',
    '\u1E68': '\u1E69',
    '\u1E6A': '\u1E6B',
    '\u1E6C': '\u1E6D',
    '\u1E6E': '\u1E6F',
    '\u1E70': '\u1E71',
    '\u1E72': '\u1E73',
    '\u1E74': '\u1E75',
    '\u1E76': '\u1E77',
    '\u1E78': '\u1E79',
    '\u1E7A': '\u1E7B',
    '\u1E7C': '\u1E7D',
    '\u1E7E': '\u1E7F',
    '\u1E80': '\u1E81',
    '\u1E82': '\u1E83',
    '\u1E84': '\u1E85',
    '\u1E86': '\u1E87',
    '\u1E88': '\u1E89',
    '\u1E8A': '\u1E8B',
    '\u1E8C': '\u1E8D',
    '\u1E8E': '\u1E8F',
    '\u1E90': '\u1E91',
    '\u1E92': '\u1E93',
    '\u1E94': '\u1E95',
    '\u1E9B': '\u1E61',
    '\u1EA0': '\u1EA1',
    '\u1EA2': '\u1EA3',
    '\u1EA4': '\u1EA5',
    '\u1EA6': '\u1EA7',
    '\u1EA8': '\u1EA9',
    '\u1EAA': '\u1EAB',
    '\u1EAC': '\u1EAD',
    '\u1EAE': '\u1EAF',
    '\u1EB0': '\u1EB1',
    '\u1EB2': '\u1EB3',
    '\u1EB4': '\u1EB5',
    '\u1EB6': '\u1EB7',
    '\u1EB8': '\u1EB9',
    '\u1EBA': '\u1EBB',
    '\u1EBC': '\u1EBD',
    '\u1EBE': '\u1EBF',
    '\u1EC0': '\u1EC1',
    '\u1EC2': '\u1EC3',
    '\u1EC4': '\u1EC5',
    '\u1EC6': '\u1EC7',
    '\u1EC8': '\u1EC9',
    '\u1ECA': '\u1ECB',
    '\u1ECC': '\u1ECD',
    '\u1ECE': '\u1ECF',
    '\u1ED0': '\u1ED1',
    '\u1ED2': '\u1ED3',
    '\u1ED4': '\u1ED5',
    '\u1ED6': '\u1ED7',
    '\u1ED8': '\u1ED9',
    '\u1EDA': '\u1EDB',
    '\u1EDC': '\u1EDD',
    '\u1EDE': '\u1EDF',
    '\u1EE0': '\u1EE1',
    '\u1EE2': '\u1EE3',
    '\u1EE4': '\u1EE5',
    '\u1EE6': '\u1EE7',
    '\u1EE8': '\u1EE9',
    '\u1EEA': '\u1EEB',
    '\u1EEC': '\u1EED',
    '\u1EEE': '\u1EEF',
    '\u1EF0': '\u1EF1',
    '\u1EF2': '\u1EF3',
    '\u1EF4': '\u1EF5',
    '\u1EF6': '\u1EF7',
    '\u1EF8': '\u1EF9',
    '\u1EFA': '\u1EFB',
    '\u1EFC': '\u1EFD',
    '\u1EFE': '\u1EFF',
    '\u1F08': '\u1F00',
    '\u1F09': '\u1F01',
    '\u1F0A': '\u1F02',
    '\u1F0B': '\u1F03',
    '\u1F0C': '\u1F04',
    '\u1F0D': '\u1F05',
    '\u1F0E': '\u1F06',
    '\u1F0F': '\u1F07',
    '\u1F18': '\u1F10',
    '\u1F19': '\u1F11',
    '\u1F1A': '\u1F12',
    '\u1F1B': '\u1F13',
    '\u1F1C': '\u1F14',
    '\u1F1D': '\u1F15',
    '\u1F28': '\u1F20',
    '\u1F29': '\u1F21',
    '\u1F2A': '\u1F22',
    '\u1F2B': '\u1F23',
    '\u1F2C': '\u1F24',
    '\u1F2D': '\u1F25',
    '\u1F2E': '\u1F26',
    '\u1F2F': '\u1F27',
    '\u1F38': '\u1F30',
    '\u1F39': '\u1F31',
    '\u1F3A': '\u1F32',
    '\u1F3B': '\u1F33',
    '\u1F3C': '\u1F34',
    '\u1F3D': '\u1F35',
    '\u1F3E': '\u1F36',
    '\u1F3F': '\u1F37',
    '\u1F48': '\u1F40',
    '\u1F49': '\u1F41',
    '\u1F4A': '\u1F42',
    '\u1F4B': '\u1F43',
    '\u1F4C': '\u1F44',
    '\u1F4D': '\u1F45',
    '\u1F59': '\u1F51',
    '\u1F5B': '\u1F53',
    '\u1F5D': '\u1F55',
    '\u1F5F': '\u1F57',
    '\u1F68': '\u1F60',
    '\u1F69': '\u1F61',
    '\u1F6A': '\u1F62',
    '\u1F6B': '\u1F63',
    '\u1F6C': '\u1F64',
    '\u1F6D': '\u1F65',
    '\u1F6E': '\u1F66',
    '\u1F6F': '\u1F67',
    '\u1FB8': '\u1FB0',
    '\u1FB9': '\u1FB1',
    '\u1FBA': '\u1F70',
    '\u1FBB': '\u1F71',
    '\u1FBE': '\u03B9',
    '\u1FC8': '\u1F72',
    '\u1FC9': '\u1F73',
    '\u1FCA': '\u1F74',
    '\u1FCB': '\u1F75',
    '\u1FD8': '\u1FD0',
    '\u1FD9': '\u1FD1',
    '\u1FDA': '\u1F76',
    '\u1FDB': '\u1F77',
    '\u1FE8': '\u1FE0',
    '\u1FE9': '\u1FE1',
    '\u1FEA': '\u1F7A',
    '\u1FEB': '\u1F7B',
    '\u1FEC': '\u1FE5',
    '\u1FF8': '\u1F78',
    '\u1FF9': '\u1F79',
    '\u1FFA': '\u1F7C',
    '\u1FFB': '\u1F7D',
    '\u2126': '\u03C9',
    '\u212A': 'k',
    '\u212B': '\xE5',
    '\u2132': '\u214E',
    '\u2160': '\u2170',
    '\u2161': '\u2171',
    '\u2162': '\u2172',
    '\u2163': '\u2173',
    '\u2164': '\u2174',
    '\u2165': '\u2175',
    '\u2166': '\u2176',
    '\u2167': '\u2177',
    '\u2168': '\u2178',
    '\u2169': '\u2179',
    '\u216A': '\u217A',
    '\u216B': '\u217B',
    '\u216C': '\u217C',
    '\u216D': '\u217D',
    '\u216E': '\u217E',
    '\u216F': '\u217F',
    '\u2183': '\u2184',
    '\u24B6': '\u24D0',
    '\u24B7': '\u24D1',
    '\u24B8': '\u24D2',
    '\u24B9': '\u24D3',
    '\u24BA': '\u24D4',
    '\u24BB': '\u24D5',
    '\u24BC': '\u24D6',
    '\u24BD': '\u24D7',
    '\u24BE': '\u24D8',
    '\u24BF': '\u24D9',
    '\u24C0': '\u24DA',
    '\u24C1': '\u24DB',
    '\u24C2': '\u24DC',
    '\u24C3': '\u24DD',
    '\u24C4': '\u24DE',
    '\u24C5': '\u24DF',
    '\u24C6': '\u24E0',
    '\u24C7': '\u24E1',
    '\u24C8': '\u24E2',
    '\u24C9': '\u24E3',
    '\u24CA': '\u24E4',
    '\u24CB': '\u24E5',
    '\u24CC': '\u24E6',
    '\u24CD': '\u24E7',
    '\u24CE': '\u24E8',
    '\u24CF': '\u24E9',
    '\u2C00': '\u2C30',
    '\u2C01': '\u2C31',
    '\u2C02': '\u2C32',
    '\u2C03': '\u2C33',
    '\u2C04': '\u2C34',
    '\u2C05': '\u2C35',
    '\u2C06': '\u2C36',
    '\u2C07': '\u2C37',
    '\u2C08': '\u2C38',
    '\u2C09': '\u2C39',
    '\u2C0A': '\u2C3A',
    '\u2C0B': '\u2C3B',
    '\u2C0C': '\u2C3C',
    '\u2C0D': '\u2C3D',
    '\u2C0E': '\u2C3E',
    '\u2C0F': '\u2C3F',
    '\u2C10': '\u2C40',
    '\u2C11': '\u2C41',
    '\u2C12': '\u2C42',
    '\u2C13': '\u2C43',
    '\u2C14': '\u2C44',
    '\u2C15': '\u2C45',
    '\u2C16': '\u2C46',
    '\u2C17': '\u2C47',
    '\u2C18': '\u2C48',
    '\u2C19': '\u2C49',
    '\u2C1A': '\u2C4A',
    '\u2C1B': '\u2C4B',
    '\u2C1C': '\u2C4C',
    '\u2C1D': '\u2C4D',
    '\u2C1E': '\u2C4E',
    '\u2C1F': '\u2C4F',
    '\u2C20': '\u2C50',
    '\u2C21': '\u2C51',
    '\u2C22': '\u2C52',
    '\u2C23': '\u2C53',
    '\u2C24': '\u2C54',
    '\u2C25': '\u2C55',
    '\u2C26': '\u2C56',
    '\u2C27': '\u2C57',
    '\u2C28': '\u2C58',
    '\u2C29': '\u2C59',
    '\u2C2A': '\u2C5A',
    '\u2C2B': '\u2C5B',
    '\u2C2C': '\u2C5C',
    '\u2C2D': '\u2C5D',
    '\u2C2E': '\u2C5E',
    '\u2C60': '\u2C61',
    '\u2C62': '\u026B',
    '\u2C63': '\u1D7D',
    '\u2C64': '\u027D',
    '\u2C67': '\u2C68',
    '\u2C69': '\u2C6A',
    '\u2C6B': '\u2C6C',
    '\u2C6D': '\u0251',
    '\u2C6E': '\u0271',
    '\u2C6F': '\u0250',
    '\u2C70': '\u0252',
    '\u2C72': '\u2C73',
    '\u2C75': '\u2C76',
    '\u2C7E': '\u023F',
    '\u2C7F': '\u0240',
    '\u2C80': '\u2C81',
    '\u2C82': '\u2C83',
    '\u2C84': '\u2C85',
    '\u2C86': '\u2C87',
    '\u2C88': '\u2C89',
    '\u2C8A': '\u2C8B',
    '\u2C8C': '\u2C8D',
    '\u2C8E': '\u2C8F',
    '\u2C90': '\u2C91',
    '\u2C92': '\u2C93',
    '\u2C94': '\u2C95',
    '\u2C96': '\u2C97',
    '\u2C98': '\u2C99',
    '\u2C9A': '\u2C9B',
    '\u2C9C': '\u2C9D',
    '\u2C9E': '\u2C9F',
    '\u2CA0': '\u2CA1',
    '\u2CA2': '\u2CA3',
    '\u2CA4': '\u2CA5',
    '\u2CA6': '\u2CA7',
    '\u2CA8': '\u2CA9',
    '\u2CAA': '\u2CAB',
    '\u2CAC': '\u2CAD',
    '\u2CAE': '\u2CAF',
    '\u2CB0': '\u2CB1',
    '\u2CB2': '\u2CB3',
    '\u2CB4': '\u2CB5',
    '\u2CB6': '\u2CB7',
    '\u2CB8': '\u2CB9',
    '\u2CBA': '\u2CBB',
    '\u2CBC': '\u2CBD',
    '\u2CBE': '\u2CBF',
    '\u2CC0': '\u2CC1',
    '\u2CC2': '\u2CC3',
    '\u2CC4': '\u2CC5',
    '\u2CC6': '\u2CC7',
    '\u2CC8': '\u2CC9',
    '\u2CCA': '\u2CCB',
    '\u2CCC': '\u2CCD',
    '\u2CCE': '\u2CCF',
    '\u2CD0': '\u2CD1',
    '\u2CD2': '\u2CD3',
    '\u2CD4': '\u2CD5',
    '\u2CD6': '\u2CD7',
    '\u2CD8': '\u2CD9',
    '\u2CDA': '\u2CDB',
    '\u2CDC': '\u2CDD',
    '\u2CDE': '\u2CDF',
    '\u2CE0': '\u2CE1',
    '\u2CE2': '\u2CE3',
    '\u2CEB': '\u2CEC',
    '\u2CED': '\u2CEE',
    '\u2CF2': '\u2CF3',
    '\uA640': '\uA641',
    '\uA642': '\uA643',
    '\uA644': '\uA645',
    '\uA646': '\uA647',
    '\uA648': '\uA649',
    '\uA64A': '\uA64B',
    '\uA64C': '\uA64D',
    '\uA64E': '\uA64F',
    '\uA650': '\uA651',
    '\uA652': '\uA653',
    '\uA654': '\uA655',
    '\uA656': '\uA657',
    '\uA658': '\uA659',
    '\uA65A': '\uA65B',
    '\uA65C': '\uA65D',
    '\uA65E': '\uA65F',
    '\uA660': '\uA661',
    '\uA662': '\uA663',
    '\uA664': '\uA665',
    '\uA666': '\uA667',
    '\uA668': '\uA669',
    '\uA66A': '\uA66B',
    '\uA66C': '\uA66D',
    '\uA680': '\uA681',
    '\uA682': '\uA683',
    '\uA684': '\uA685',
    '\uA686': '\uA687',
    '\uA688': '\uA689',
    '\uA68A': '\uA68B',
    '\uA68C': '\uA68D',
    '\uA68E': '\uA68F',
    '\uA690': '\uA691',
    '\uA692': '\uA693',
    '\uA694': '\uA695',
    '\uA696': '\uA697',
    '\uA698': '\uA699',
    '\uA69A': '\uA69B',
    '\uA722': '\uA723',
    '\uA724': '\uA725',
    '\uA726': '\uA727',
    '\uA728': '\uA729',
    '\uA72A': '\uA72B',
    '\uA72C': '\uA72D',
    '\uA72E': '\uA72F',
    '\uA732': '\uA733',
    '\uA734': '\uA735',
    '\uA736': '\uA737',
    '\uA738': '\uA739',
    '\uA73A': '\uA73B',
    '\uA73C': '\uA73D',
    '\uA73E': '\uA73F',
    '\uA740': '\uA741',
    '\uA742': '\uA743',
    '\uA744': '\uA745',
    '\uA746': '\uA747',
    '\uA748': '\uA749',
    '\uA74A': '\uA74B',
    '\uA74C': '\uA74D',
    '\uA74E': '\uA74F',
    '\uA750': '\uA751',
    '\uA752': '\uA753',
    '\uA754': '\uA755',
    '\uA756': '\uA757',
    '\uA758': '\uA759',
    '\uA75A': '\uA75B',
    '\uA75C': '\uA75D',
    '\uA75E': '\uA75F',
    '\uA760': '\uA761',
    '\uA762': '\uA763',
    '\uA764': '\uA765',
    '\uA766': '\uA767',
    '\uA768': '\uA769',
    '\uA76A': '\uA76B',
    '\uA76C': '\uA76D',
    '\uA76E': '\uA76F',
    '\uA779': '\uA77A',
    '\uA77B': '\uA77C',
    '\uA77D': '\u1D79',
    '\uA77E': '\uA77F',
    '\uA780': '\uA781',
    '\uA782': '\uA783',
    '\uA784': '\uA785',
    '\uA786': '\uA787',
    '\uA78B': '\uA78C',
    '\uA78D': '\u0265',
    '\uA790': '\uA791',
    '\uA792': '\uA793',
    '\uA796': '\uA797',
    '\uA798': '\uA799',
    '\uA79A': '\uA79B',
    '\uA79C': '\uA79D',
    '\uA79E': '\uA79F',
    '\uA7A0': '\uA7A1',
    '\uA7A2': '\uA7A3',
    '\uA7A4': '\uA7A5',
    '\uA7A6': '\uA7A7',
    '\uA7A8': '\uA7A9',
    '\uA7AA': '\u0266',
    '\uA7AB': '\u025C',
    '\uA7AC': '\u0261',
    '\uA7AD': '\u026C',
    '\uA7B0': '\u029E',
    '\uA7B1': '\u0287',
    '\uFF21': '\uFF41',
    '\uFF22': '\uFF42',
    '\uFF23': '\uFF43',
    '\uFF24': '\uFF44',
    '\uFF25': '\uFF45',
    '\uFF26': '\uFF46',
    '\uFF27': '\uFF47',
    '\uFF28': '\uFF48',
    '\uFF29': '\uFF49',
    '\uFF2A': '\uFF4A',
    '\uFF2B': '\uFF4B',
    '\uFF2C': '\uFF4C',
    '\uFF2D': '\uFF4D',
    '\uFF2E': '\uFF4E',
    '\uFF2F': '\uFF4F',
    '\uFF30': '\uFF50',
    '\uFF31': '\uFF51',
    '\uFF32': '\uFF52',
    '\uFF33': '\uFF53',
    '\uFF34': '\uFF54',
    '\uFF35': '\uFF55',
    '\uFF36': '\uFF56',
    '\uFF37': '\uFF57',
    '\uFF38': '\uFF58',
    '\uFF39': '\uFF59',
    '\uFF3A': '\uFF5A',
    '\uD801\uDC00': '\uD801\uDC28',
    '\uD801\uDC01': '\uD801\uDC29',
    '\uD801\uDC02': '\uD801\uDC2A',
    '\uD801\uDC03': '\uD801\uDC2B',
    '\uD801\uDC04': '\uD801\uDC2C',
    '\uD801\uDC05': '\uD801\uDC2D',
    '\uD801\uDC06': '\uD801\uDC2E',
    '\uD801\uDC07': '\uD801\uDC2F',
    '\uD801\uDC08': '\uD801\uDC30',
    '\uD801\uDC09': '\uD801\uDC31',
    '\uD801\uDC0A': '\uD801\uDC32',
    '\uD801\uDC0B': '\uD801\uDC33',
    '\uD801\uDC0C': '\uD801\uDC34',
    '\uD801\uDC0D': '\uD801\uDC35',
    '\uD801\uDC0E': '\uD801\uDC36',
    '\uD801\uDC0F': '\uD801\uDC37',
    '\uD801\uDC10': '\uD801\uDC38',
    '\uD801\uDC11': '\uD801\uDC39',
    '\uD801\uDC12': '\uD801\uDC3A',
    '\uD801\uDC13': '\uD801\uDC3B',
    '\uD801\uDC14': '\uD801\uDC3C',
    '\uD801\uDC15': '\uD801\uDC3D',
    '\uD801\uDC16': '\uD801\uDC3E',
    '\uD801\uDC17': '\uD801\uDC3F',
    '\uD801\uDC18': '\uD801\uDC40',
    '\uD801\uDC19': '\uD801\uDC41',
    '\uD801\uDC1A': '\uD801\uDC42',
    '\uD801\uDC1B': '\uD801\uDC43',
    '\uD801\uDC1C': '\uD801\uDC44',
    '\uD801\uDC1D': '\uD801\uDC45',
    '\uD801\uDC1E': '\uD801\uDC46',
    '\uD801\uDC1F': '\uD801\uDC47',
    '\uD801\uDC20': '\uD801\uDC48',
    '\uD801\uDC21': '\uD801\uDC49',
    '\uD801\uDC22': '\uD801\uDC4A',
    '\uD801\uDC23': '\uD801\uDC4B',
    '\uD801\uDC24': '\uD801\uDC4C',
    '\uD801\uDC25': '\uD801\uDC4D',
    '\uD801\uDC26': '\uD801\uDC4E',
    '\uD801\uDC27': '\uD801\uDC4F',
    '\uD806\uDCA0': '\uD806\uDCC0',
    '\uD806\uDCA1': '\uD806\uDCC1',
    '\uD806\uDCA2': '\uD806\uDCC2',
    '\uD806\uDCA3': '\uD806\uDCC3',
    '\uD806\uDCA4': '\uD806\uDCC4',
    '\uD806\uDCA5': '\uD806\uDCC5',
    '\uD806\uDCA6': '\uD806\uDCC6',
    '\uD806\uDCA7': '\uD806\uDCC7',
    '\uD806\uDCA8': '\uD806\uDCC8',
    '\uD806\uDCA9': '\uD806\uDCC9',
    '\uD806\uDCAA': '\uD806\uDCCA',
    '\uD806\uDCAB': '\uD806\uDCCB',
    '\uD806\uDCAC': '\uD806\uDCCC',
    '\uD806\uDCAD': '\uD806\uDCCD',
    '\uD806\uDCAE': '\uD806\uDCCE',
    '\uD806\uDCAF': '\uD806\uDCCF',
    '\uD806\uDCB0': '\uD806\uDCD0',
    '\uD806\uDCB1': '\uD806\uDCD1',
    '\uD806\uDCB2': '\uD806\uDCD2',
    '\uD806\uDCB3': '\uD806\uDCD3',
    '\uD806\uDCB4': '\uD806\uDCD4',
    '\uD806\uDCB5': '\uD806\uDCD5',
    '\uD806\uDCB6': '\uD806\uDCD6',
    '\uD806\uDCB7': '\uD806\uDCD7',
    '\uD806\uDCB8': '\uD806\uDCD8',
    '\uD806\uDCB9': '\uD806\uDCD9',
    '\uD806\uDCBA': '\uD806\uDCDA',
    '\uD806\uDCBB': '\uD806\uDCDB',
    '\uD806\uDCBC': '\uD806\uDCDC',
    '\uD806\uDCBD': '\uD806\uDCDD',
    '\uD806\uDCBE': '\uD806\uDCDE',
    '\uD806\uDCBF': '\uD806\uDCDF',
    '\xDF': 'ss',
    '\u0130': 'i\u0307',
    '\u0149': '\u02BCn',
    '\u01F0': 'j\u030C',
    '\u0390': '\u03B9\u0308\u0301',
    '\u03B0': '\u03C5\u0308\u0301',
    '\u0587': '\u0565\u0582',
    '\u1E96': 'h\u0331',
    '\u1E97': 't\u0308',
    '\u1E98': 'w\u030A',
    '\u1E99': 'y\u030A',
    '\u1E9A': 'a\u02BE',
    '\u1E9E': 'ss',
    '\u1F50': '\u03C5\u0313',
    '\u1F52': '\u03C5\u0313\u0300',
    '\u1F54': '\u03C5\u0313\u0301',
    '\u1F56': '\u03C5\u0313\u0342',
    '\u1F80': '\u1F00\u03B9',
    '\u1F81': '\u1F01\u03B9',
    '\u1F82': '\u1F02\u03B9',
    '\u1F83': '\u1F03\u03B9',
    '\u1F84': '\u1F04\u03B9',
    '\u1F85': '\u1F05\u03B9',
    '\u1F86': '\u1F06\u03B9',
    '\u1F87': '\u1F07\u03B9',
    '\u1F88': '\u1F00\u03B9',
    '\u1F89': '\u1F01\u03B9',
    '\u1F8A': '\u1F02\u03B9',
    '\u1F8B': '\u1F03\u03B9',
    '\u1F8C': '\u1F04\u03B9',
    '\u1F8D': '\u1F05\u03B9',
    '\u1F8E': '\u1F06\u03B9',
    '\u1F8F': '\u1F07\u03B9',
    '\u1F90': '\u1F20\u03B9',
    '\u1F91': '\u1F21\u03B9',
    '\u1F92': '\u1F22\u03B9',
    '\u1F93': '\u1F23\u03B9',
    '\u1F94': '\u1F24\u03B9',
    '\u1F95': '\u1F25\u03B9',
    '\u1F96': '\u1F26\u03B9',
    '\u1F97': '\u1F27\u03B9',
    '\u1F98': '\u1F20\u03B9',
    '\u1F99': '\u1F21\u03B9',
    '\u1F9A': '\u1F22\u03B9',
    '\u1F9B': '\u1F23\u03B9',
    '\u1F9C': '\u1F24\u03B9',
    '\u1F9D': '\u1F25\u03B9',
    '\u1F9E': '\u1F26\u03B9',
    '\u1F9F': '\u1F27\u03B9',
    '\u1FA0': '\u1F60\u03B9',
    '\u1FA1': '\u1F61\u03B9',
    '\u1FA2': '\u1F62\u03B9',
    '\u1FA3': '\u1F63\u03B9',
    '\u1FA4': '\u1F64\u03B9',
    '\u1FA5': '\u1F65\u03B9',
    '\u1FA6': '\u1F66\u03B9',
    '\u1FA7': '\u1F67\u03B9',
    '\u1FA8': '\u1F60\u03B9',
    '\u1FA9': '\u1F61\u03B9',
    '\u1FAA': '\u1F62\u03B9',
    '\u1FAB': '\u1F63\u03B9',
    '\u1FAC': '\u1F64\u03B9',
    '\u1FAD': '\u1F65\u03B9',
    '\u1FAE': '\u1F66\u03B9',
    '\u1FAF': '\u1F67\u03B9',
    '\u1FB2': '\u1F70\u03B9',
    '\u1FB3': '\u03B1\u03B9',
    '\u1FB4': '\u03AC\u03B9',
    '\u1FB6': '\u03B1\u0342',
    '\u1FB7': '\u03B1\u0342\u03B9',
    '\u1FBC': '\u03B1\u03B9',
    '\u1FC2': '\u1F74\u03B9',
    '\u1FC3': '\u03B7\u03B9',
    '\u1FC4': '\u03AE\u03B9',
    '\u1FC6': '\u03B7\u0342',
    '\u1FC7': '\u03B7\u0342\u03B9',
    '\u1FCC': '\u03B7\u03B9',
    '\u1FD2': '\u03B9\u0308\u0300',
    '\u1FD3': '\u03B9\u0308\u0301',
    '\u1FD6': '\u03B9\u0342',
    '\u1FD7': '\u03B9\u0308\u0342',
    '\u1FE2': '\u03C5\u0308\u0300',
    '\u1FE3': '\u03C5\u0308\u0301',
    '\u1FE4': '\u03C1\u0313',
    '\u1FE6': '\u03C5\u0342',
    '\u1FE7': '\u03C5\u0308\u0342',
    '\u1FF2': '\u1F7C\u03B9',
    '\u1FF3': '\u03C9\u03B9',
    '\u1FF4': '\u03CE\u03B9',
    '\u1FF6': '\u03C9\u0342',
    '\u1FF7': '\u03C9\u0342\u03B9',
    '\u1FFC': '\u03C9\u03B9',
    '\uFB00': 'ff',
    '\uFB01': 'fi',
    '\uFB02': 'fl',
    '\uFB03': 'ffi',
    '\uFB04': 'ffl',
    '\uFB05': 'st',
    '\uFB06': 'st',
    '\uFB13': '\u0574\u0576',
    '\uFB14': '\u0574\u0565',
    '\uFB15': '\u0574\u056B',
    '\uFB16': '\u057E\u0576',
    '\uFB17': '\u0574\u056D',
};

const entityReferences = [
    { key: [65, 69, 108, 105, 103, 59], value: 'Æ' },
    { key: [65, 77, 80, 59], value: '&' },
    { key: [65, 97, 99, 117, 116, 101, 59], value: 'Á' },
    { key: [65, 98, 114, 101, 118, 101, 59], value: 'Ă' },
    { key: [65, 99, 105, 114, 99, 59], value: 'Â' },
    { key: [65, 99, 121, 59], value: 'А' },
    { key: [65, 102, 114, 59], value: '𝔄' },
    { key: [65, 103, 114, 97, 118, 101, 59], value: 'À' },
    { key: [65, 108, 112, 104, 97, 59], value: 'Α' },
    { key: [65, 109, 97, 99, 114, 59], value: 'Ā' },
    { key: [65, 110, 100, 59], value: '⩓' },
    { key: [65, 111, 103, 111, 110, 59], value: 'Ą' },
    { key: [65, 111, 112, 102, 59], value: '𝔸' },
    { key: [65, 112, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59], value: '⁡' },
    { key: [65, 114, 105, 110, 103, 59], value: 'Å' },
    { key: [65, 115, 99, 114, 59], value: '𝒜' },
    { key: [65, 115, 115, 105, 103, 110, 59], value: '≔' },
    { key: [65, 116, 105, 108, 100, 101, 59], value: 'Ã' },
    { key: [65, 117, 109, 108, 59], value: 'Ä' },
    { key: [66, 97, 99, 107, 115, 108, 97, 115, 104, 59], value: '∖' },
    { key: [66, 97, 114, 118, 59], value: '⫧' },
    { key: [66, 97, 114, 119, 101, 100, 59], value: '⌆' },
    { key: [66, 99, 121, 59], value: 'Б' },
    { key: [66, 101, 99, 97, 117, 115, 101, 59], value: '∵' },
    { key: [66, 101, 114, 110, 111, 117, 108, 108, 105, 115, 59], value: 'ℬ' },
    { key: [66, 101, 116, 97, 59], value: 'Β' },
    { key: [66, 102, 114, 59], value: '𝔅' },
    { key: [66, 111, 112, 102, 59], value: '𝔹' },
    { key: [66, 114, 101, 118, 101, 59], value: '˘' },
    { key: [66, 115, 99, 114, 59], value: 'ℬ' },
    { key: [66, 117, 109, 112, 101, 113, 59], value: '≎' },
    { key: [67, 72, 99, 121, 59], value: 'Ч' },
    { key: [67, 79, 80, 89, 59], value: '©' },
    { key: [67, 97, 99, 117, 116, 101, 59], value: 'Ć' },
    { key: [67, 97, 112, 59], value: '⋒' },
    { key: [67, 97, 112, 105, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59], value: 'ⅅ' },
    { key: [67, 97, 121, 108, 101, 121, 115, 59], value: 'ℭ' },
    { key: [67, 99, 97, 114, 111, 110, 59], value: 'Č' },
    { key: [67, 99, 101, 100, 105, 108, 59], value: 'Ç' },
    { key: [67, 99, 105, 114, 99, 59], value: 'Ĉ' },
    { key: [67, 99, 111, 110, 105, 110, 116, 59], value: '∰' },
    { key: [67, 100, 111, 116, 59], value: 'Ċ' },
    { key: [67, 101, 100, 105, 108, 108, 97, 59], value: '¸' },
    { key: [67, 101, 110, 116, 101, 114, 68, 111, 116, 59], value: '·' },
    { key: [67, 102, 114, 59], value: 'ℭ' },
    { key: [67, 104, 105, 59], value: 'Χ' },
    { key: [67, 105, 114, 99, 108, 101, 68, 111, 116, 59], value: '⊙' },
    { key: [67, 105, 114, 99, 108, 101, 77, 105, 110, 117, 115, 59], value: '⊖' },
    { key: [67, 105, 114, 99, 108, 101, 80, 108, 117, 115, 59], value: '⊕' },
    { key: [67, 105, 114, 99, 108, 101, 84, 105, 109, 101, 115, 59], value: '⊗' },
    { key: [67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∲' },
    { key: [67, 108, 111, 115, 101, 67, 117, 114, 108, 121, 68, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59], value: '”' },
    { key: [67, 108, 111, 115, 101, 67, 117, 114, 108, 121, 81, 117, 111, 116, 101, 59], value: '’' },
    { key: [67, 111, 108, 111, 110, 59], value: '∷' },
    { key: [67, 111, 108, 111, 110, 101, 59], value: '⩴' },
    { key: [67, 111, 110, 103, 114, 117, 101, 110, 116, 59], value: '≡' },
    { key: [67, 111, 110, 105, 110, 116, 59], value: '∯' },
    { key: [67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∮' },
    { key: [67, 111, 112, 102, 59], value: 'ℂ' },
    { key: [67, 111, 112, 114, 111, 100, 117, 99, 116, 59], value: '∐' },
    { key: [67, 111, 117, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∳' },
    { key: [67, 114, 111, 115, 115, 59], value: '⨯' },
    { key: [67, 115, 99, 114, 59], value: '𝒞' },
    { key: [67, 117, 112, 59], value: '⋓' },
    { key: [67, 117, 112, 67, 97, 112, 59], value: '≍' },
    { key: [68, 68, 59], value: 'ⅅ' },
    { key: [68, 68, 111, 116, 114, 97, 104, 100, 59], value: '⤑' },
    { key: [68, 74, 99, 121, 59], value: 'Ђ' },
    { key: [68, 83, 99, 121, 59], value: 'Ѕ' },
    { key: [68, 90, 99, 121, 59], value: 'Џ' },
    { key: [68, 97, 103, 103, 101, 114, 59], value: '‡' },
    { key: [68, 97, 114, 114, 59], value: '↡' },
    { key: [68, 97, 115, 104, 118, 59], value: '⫤' },
    { key: [68, 99, 97, 114, 111, 110, 59], value: 'Ď' },
    { key: [68, 99, 121, 59], value: 'Д' },
    { key: [68, 101, 108, 59], value: '∇' },
    { key: [68, 101, 108, 116, 97, 59], value: 'Δ' },
    { key: [68, 102, 114, 59], value: '𝔇' },
    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 65, 99, 117, 116, 101, 59], value: '´' },
    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 68, 111, 116, 59], value: '˙' },
    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 68, 111, 117, 98, 108, 101, 65, 99, 117, 116, 101, 59], value: '˝' },
    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 71, 114, 97, 118, 101, 59], value: '`' },
    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 84, 105, 108, 100, 101, 59], value: '˜' },
    { key: [68, 105, 97, 109, 111, 110, 100, 59], value: '⋄' },
    { key: [68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59], value: 'ⅆ' },
    { key: [68, 111, 112, 102, 59], value: '𝔻' },
    { key: [68, 111, 116, 59], value: '¨' },
    { key: [68, 111, 116, 68, 111, 116, 59], value: '⃜' },
    { key: [68, 111, 116, 69, 113, 117, 97, 108, 59], value: '≐' },
    { key: [68, 111, 117, 98, 108, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∯' },
    { key: [68, 111, 117, 98, 108, 101, 68, 111, 116, 59], value: '¨' },
    { key: [68, 111, 117, 98, 108, 101, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '⇓' },
    { key: [68, 111, 117, 98, 108, 101, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⇐' },
    { key: [68, 111, 117, 98, 108, 101, 76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⇔' },
    { key: [68, 111, 117, 98, 108, 101, 76, 101, 102, 116, 84, 101, 101, 59], value: '⫤' },
    { key: [68, 111, 117, 98, 108, 101, 76, 111, 110, 103, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⟸' },
    { key: [68, 111, 117, 98, 108, 101, 76, 111, 110, 103, 76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟺' },
    { key: [68, 111, 117, 98, 108, 101, 76, 111, 110, 103, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟹' },
    { key: [68, 111, 117, 98, 108, 101, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⇒' },
    { key: [68, 111, 117, 98, 108, 101, 82, 105, 103, 104, 116, 84, 101, 101, 59], value: '⊨' },
    { key: [68, 111, 117, 98, 108, 101, 85, 112, 65, 114, 114, 111, 119, 59], value: '⇑' },
    { key: [68, 111, 117, 98, 108, 101, 85, 112, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '⇕' },
    { key: [68, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∥' },
    { key: [68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '↓' },
    { key: [68, 111, 119, 110, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⤓' },
    { key: [68, 111, 119, 110, 65, 114, 114, 111, 119, 85, 112, 65, 114, 114, 111, 119, 59], value: '⇵' },
    { key: [68, 111, 119, 110, 66, 114, 101, 118, 101, 59], value: '̑' },
    { key: [68, 111, 119, 110, 76, 101, 102, 116, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⥐' },
    { key: [68, 111, 119, 110, 76, 101, 102, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥞' },
    { key: [68, 111, 119, 110, 76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 59], value: '↽' },
    { key: [68, 111, 119, 110, 76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥖' },
    { key: [68, 111, 119, 110, 82, 105, 103, 104, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥟' },
    { key: [68, 111, 119, 110, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⇁' },
    { key: [68, 111, 119, 110, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥗' },
    { key: [68, 111, 119, 110, 84, 101, 101, 59], value: '⊤' },
    { key: [68, 111, 119, 110, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↧' },
    { key: [68, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '⇓' },
    { key: [68, 115, 99, 114, 59], value: '𝒟' },
    { key: [68, 115, 116, 114, 111, 107, 59], value: 'Đ' },
    { key: [69, 78, 71, 59], value: 'Ŋ' },
    { key: [69, 84, 72, 59], value: 'Ð' },
    { key: [69, 97, 99, 117, 116, 101, 59], value: 'É' },
    { key: [69, 99, 97, 114, 111, 110, 59], value: 'Ě' },
    { key: [69, 99, 105, 114, 99, 59], value: 'Ê' },
    { key: [69, 99, 121, 59], value: 'Э' },
    { key: [69, 100, 111, 116, 59], value: 'Ė' },
    { key: [69, 102, 114, 59], value: '𝔈' },
    { key: [69, 103, 114, 97, 118, 101, 59], value: 'È' },
    { key: [69, 108, 101, 109, 101, 110, 116, 59], value: '∈' },
    { key: [69, 109, 97, 99, 114, 59], value: 'Ē' },
    { key: [69, 109, 112, 116, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '◻' },
    { key: [69, 109, 112, 116, 121, 86, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '▫' },
    { key: [69, 111, 103, 111, 110, 59], value: 'Ę' },
    { key: [69, 111, 112, 102, 59], value: '𝔼' },
    { key: [69, 112, 115, 105, 108, 111, 110, 59], value: 'Ε' },
    { key: [69, 113, 117, 97, 108, 59], value: '⩵' },
    { key: [69, 113, 117, 97, 108, 84, 105, 108, 100, 101, 59], value: '≂' },
    { key: [69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⇌' },
    { key: [69, 115, 99, 114, 59], value: 'ℰ' },
    { key: [69, 115, 105, 109, 59], value: '⩳' },
    { key: [69, 116, 97, 59], value: 'Η' },
    { key: [69, 117, 109, 108, 59], value: 'Ë' },
    { key: [69, 120, 105, 115, 116, 115, 59], value: '∃' },
    { key: [69, 120, 112, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59], value: 'ⅇ' },
    { key: [70, 99, 121, 59], value: 'Ф' },
    { key: [70, 102, 114, 59], value: '𝔉' },
    { key: [70, 105, 108, 108, 101, 100, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '◼' },
    { key: [70, 105, 108, 108, 101, 100, 86, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '▪' },
    { key: [70, 111, 112, 102, 59], value: '𝔽' },
    { key: [70, 111, 114, 65, 108, 108, 59], value: '∀' },
    { key: [70, 111, 117, 114, 105, 101, 114, 116, 114, 102, 59], value: 'ℱ' },
    { key: [70, 115, 99, 114, 59], value: 'ℱ' },
    { key: [71, 74, 99, 121, 59], value: 'Ѓ' },
    { key: [71, 84, 59], value: '>' },
    { key: [71, 97, 109, 109, 97, 59], value: 'Γ' },
    { key: [71, 97, 109, 109, 97, 100, 59], value: 'Ϝ' },
    { key: [71, 98, 114, 101, 118, 101, 59], value: 'Ğ' },
    { key: [71, 99, 101, 100, 105, 108, 59], value: 'Ģ' },
    { key: [71, 99, 105, 114, 99, 59], value: 'Ĝ' },
    { key: [71, 99, 121, 59], value: 'Г' },
    { key: [71, 100, 111, 116, 59], value: 'Ġ' },
    { key: [71, 102, 114, 59], value: '𝔊' },
    { key: [71, 103, 59], value: '⋙' },
    { key: [71, 111, 112, 102, 59], value: '𝔾' },
    { key: [71, 114, 101, 97, 116, 101, 114, 69, 113, 117, 97, 108, 59], value: '≥' },
    { key: [71, 114, 101, 97, 116, 101, 114, 69, 113, 117, 97, 108, 76, 101, 115, 115, 59], value: '⋛' },
    { key: [71, 114, 101, 97, 116, 101, 114, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≧' },
    { key: [71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '⪢' },
    { key: [71, 114, 101, 97, 116, 101, 114, 76, 101, 115, 115, 59], value: '≷' },
    { key: [71, 114, 101, 97, 116, 101, 114, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩾' },
    { key: [71, 114, 101, 97, 116, 101, 114, 84, 105, 108, 100, 101, 59], value: '≳' },
    { key: [71, 115, 99, 114, 59], value: '𝒢' },
    { key: [71, 116, 59], value: '≫' },
    { key: [72, 65, 82, 68, 99, 121, 59], value: 'Ъ' },
    { key: [72, 97, 99, 101, 107, 59], value: 'ˇ' },
    { key: [72, 97, 116, 59], value: '^' },
    { key: [72, 99, 105, 114, 99, 59], value: 'Ĥ' },
    { key: [72, 102, 114, 59], value: 'ℌ' },
    { key: [72, 105, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59], value: 'ℋ' },
    { key: [72, 111, 112, 102, 59], value: 'ℍ' },
    { key: [72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59], value: '─' },
    { key: [72, 115, 99, 114, 59], value: 'ℋ' },
    { key: [72, 115, 116, 114, 111, 107, 59], value: 'Ħ' },
    { key: [72, 117, 109, 112, 68, 111, 119, 110, 72, 117, 109, 112, 59], value: '≎' },
    { key: [72, 117, 109, 112, 69, 113, 117, 97, 108, 59], value: '≏' },
    { key: [73, 69, 99, 121, 59], value: 'Е' },
    { key: [73, 74, 108, 105, 103, 59], value: 'Ĳ' },
    { key: [73, 79, 99, 121, 59], value: 'Ё' },
    { key: [73, 97, 99, 117, 116, 101, 59], value: 'Í' },
    { key: [73, 99, 105, 114, 99, 59], value: 'Î' },
    { key: [73, 99, 121, 59], value: 'И' },
    { key: [73, 100, 111, 116, 59], value: 'İ' },
    { key: [73, 102, 114, 59], value: 'ℑ' },
    { key: [73, 103, 114, 97, 118, 101, 59], value: 'Ì' },
    { key: [73, 109, 59], value: 'ℑ' },
    { key: [73, 109, 97, 99, 114, 59], value: 'Ī' },
    { key: [73, 109, 97, 103, 105, 110, 97, 114, 121, 73, 59], value: 'ⅈ' },
    { key: [73, 109, 112, 108, 105, 101, 115, 59], value: '⇒' },
    { key: [73, 110, 116, 59], value: '∬' },
    { key: [73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∫' },
    { key: [73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59], value: '⋂' },
    { key: [73, 110, 118, 105, 115, 105, 98, 108, 101, 67, 111, 109, 109, 97, 59], value: '⁣' },
    { key: [73, 110, 118, 105, 115, 105, 98, 108, 101, 84, 105, 109, 101, 115, 59], value: '⁢' },
    { key: [73, 111, 103, 111, 110, 59], value: 'Į' },
    { key: [73, 111, 112, 102, 59], value: '𝕀' },
    { key: [73, 111, 116, 97, 59], value: 'Ι' },
    { key: [73, 115, 99, 114, 59], value: 'ℐ' },
    { key: [73, 116, 105, 108, 100, 101, 59], value: 'Ĩ' },
    { key: [73, 117, 107, 99, 121, 59], value: 'І' },
    { key: [73, 117, 109, 108, 59], value: 'Ï' },
    { key: [74, 99, 105, 114, 99, 59], value: 'Ĵ' },
    { key: [74, 99, 121, 59], value: 'Й' },
    { key: [74, 102, 114, 59], value: '𝔍' },
    { key: [74, 111, 112, 102, 59], value: '𝕁' },
    { key: [74, 115, 99, 114, 59], value: '𝒥' },
    { key: [74, 115, 101, 114, 99, 121, 59], value: 'Ј' },
    { key: [74, 117, 107, 99, 121, 59], value: 'Є' },
    { key: [75, 72, 99, 121, 59], value: 'Х' },
    { key: [75, 74, 99, 121, 59], value: 'Ќ' },
    { key: [75, 97, 112, 112, 97, 59], value: 'Κ' },
    { key: [75, 99, 101, 100, 105, 108, 59], value: 'Ķ' },
    { key: [75, 99, 121, 59], value: 'К' },
    { key: [75, 102, 114, 59], value: '𝔎' },
    { key: [75, 111, 112, 102, 59], value: '𝕂' },
    { key: [75, 115, 99, 114, 59], value: '𝒦' },
    { key: [76, 74, 99, 121, 59], value: 'Љ' },
    { key: [76, 84, 59], value: '<' },
    { key: [76, 97, 99, 117, 116, 101, 59], value: 'Ĺ' },
    { key: [76, 97, 109, 98, 100, 97, 59], value: 'Λ' },
    { key: [76, 97, 110, 103, 59], value: '⟪' },
    { key: [76, 97, 112, 108, 97, 99, 101, 116, 114, 102, 59], value: 'ℒ' },
    { key: [76, 97, 114, 114, 59], value: '↞' },
    { key: [76, 99, 97, 114, 111, 110, 59], value: 'Ľ' },
    { key: [76, 99, 101, 100, 105, 108, 59], value: 'Ļ' },
    { key: [76, 99, 121, 59], value: 'Л' },
    { key: [76, 101, 102, 116, 65, 110, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟨' },
    { key: [76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '←' },
    { key: [76, 101, 102, 116, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⇤' },
    { key: [76, 101, 102, 116, 65, 114, 114, 111, 119, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⇆' },
    { key: [76, 101, 102, 116, 67, 101, 105, 108, 105, 110, 103, 59], value: '⌈' },
    { key: [76, 101, 102, 116, 68, 111, 117, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟦' },
    { key: [76, 101, 102, 116, 68, 111, 119, 110, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥡' },
    { key: [76, 101, 102, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⇃' },
    { key: [76, 101, 102, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥙' },
    { key: [76, 101, 102, 116, 70, 108, 111, 111, 114, 59], value: '⌊' },
    { key: [76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '↔' },
    { key: [76, 101, 102, 116, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⥎' },
    { key: [76, 101, 102, 116, 84, 101, 101, 59], value: '⊣' },
    { key: [76, 101, 102, 116, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↤' },
    { key: [76, 101, 102, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥚' },
    { key: [76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⊲' },
    { key: [76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧏' },
    { key: [76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⊴' },
    { key: [76, 101, 102, 116, 85, 112, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⥑' },
    { key: [76, 101, 102, 116, 85, 112, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥠' },
    { key: [76, 101, 102, 116, 85, 112, 86, 101, 99, 116, 111, 114, 59], value: '↿' },
    { key: [76, 101, 102, 116, 85, 112, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥘' },
    { key: [76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 59], value: '↼' },
    { key: [76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥒' },
    { key: [76, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⇐' },
    { key: [76, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇔' },
    { key: [76, 101, 115, 115, 69, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59], value: '⋚' },
    { key: [76, 101, 115, 115, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≦' },
    { key: [76, 101, 115, 115, 71, 114, 101, 97, 116, 101, 114, 59], value: '≶' },
    { key: [76, 101, 115, 115, 76, 101, 115, 115, 59], value: '⪡' },
    { key: [76, 101, 115, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩽' },
    { key: [76, 101, 115, 115, 84, 105, 108, 100, 101, 59], value: '≲' },
    { key: [76, 102, 114, 59], value: '𝔏' },
    { key: [76, 108, 59], value: '⋘' },
    { key: [76, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⇚' },
    { key: [76, 109, 105, 100, 111, 116, 59], value: 'Ŀ' },
    { key: [76, 111, 110, 103, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⟵' },
    { key: [76, 111, 110, 103, 76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟷' },
    { key: [76, 111, 110, 103, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟶' },
    { key: [76, 111, 110, 103, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⟸' },
    { key: [76, 111, 110, 103, 108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟺' },
    { key: [76, 111, 110, 103, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟹' },
    { key: [76, 111, 112, 102, 59], value: '𝕃' },
    { key: [76, 111, 119, 101, 114, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '↙' },
    { key: [76, 111, 119, 101, 114, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '↘' },
    { key: [76, 115, 99, 114, 59], value: 'ℒ' },
    { key: [76, 115, 104, 59], value: '↰' },
    { key: [76, 115, 116, 114, 111, 107, 59], value: 'Ł' },
    { key: [76, 116, 59], value: '≪' },
    { key: [77, 97, 112, 59], value: '⤅' },
    { key: [77, 99, 121, 59], value: 'М' },
    { key: [77, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59], value: ' ' },
    { key: [77, 101, 108, 108, 105, 110, 116, 114, 102, 59], value: 'ℳ' },
    { key: [77, 102, 114, 59], value: '𝔐' },
    { key: [77, 105, 110, 117, 115, 80, 108, 117, 115, 59], value: '∓' },
    { key: [77, 111, 112, 102, 59], value: '𝕄' },
    { key: [77, 115, 99, 114, 59], value: 'ℳ' },
    { key: [77, 117, 59], value: 'Μ' },
    { key: [78, 74, 99, 121, 59], value: 'Њ' },
    { key: [78, 97, 99, 117, 116, 101, 59], value: 'Ń' },
    { key: [78, 99, 97, 114, 111, 110, 59], value: 'Ň' },
    { key: [78, 99, 101, 100, 105, 108, 59], value: 'Ņ' },
    { key: [78, 99, 121, 59], value: 'Н' },
    { key: [78, 101, 103, 97, 116, 105, 118, 101, 77, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59], value: '​' },
    { key: [78, 101, 103, 97, 116, 105, 118, 101, 84, 104, 105, 99, 107, 83, 112, 97, 99, 101, 59], value: '​' },
    { key: [78, 101, 103, 97, 116, 105, 118, 101, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: '​' },
    { key: [78, 101, 103, 97, 116, 105, 118, 101, 86, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: '​' },
    { key: [78, 101, 115, 116, 101, 100, 71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '≫' },
    { key: [78, 101, 115, 116, 101, 100, 76, 101, 115, 115, 76, 101, 115, 115, 59], value: '≪' },
    { key: [78, 101, 119, 76, 105, 110, 101, 59], value: '\n' },
    { key: [78, 102, 114, 59], value: '𝔑' },
    { key: [78, 111, 66, 114, 101, 97, 107, 59], value: '⁠' },
    { key: [78, 111, 110, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59], value: ' ' },
    { key: [78, 111, 112, 102, 59], value: 'ℕ' },
    { key: [78, 111, 116, 59], value: '⫬' },
    { key: [78, 111, 116, 67, 111, 110, 103, 114, 117, 101, 110, 116, 59], value: '≢' },
    { key: [78, 111, 116, 67, 117, 112, 67, 97, 112, 59], value: '≭' },
    { key: [78, 111, 116, 68, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∦' },
    { key: [78, 111, 116, 69, 108, 101, 109, 101, 110, 116, 59], value: '∉' },
    { key: [78, 111, 116, 69, 113, 117, 97, 108, 59], value: '≠' },
    { key: [78, 111, 116, 69, 113, 117, 97, 108, 84, 105, 108, 100, 101, 59], value: '≂̸' },
    { key: [78, 111, 116, 69, 120, 105, 115, 116, 115, 59], value: '∄' },
    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 59], value: '≯' },
    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 69, 113, 117, 97, 108, 59], value: '≱' },
    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≧̸' },
    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '≫̸' },
    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 76, 101, 115, 115, 59], value: '≹' },
    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩾̸' },
    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 84, 105, 108, 100, 101, 59], value: '≵' },
    { key: [78, 111, 116, 72, 117, 109, 112, 68, 111, 119, 110, 72, 117, 109, 112, 59], value: '≎̸' },
    { key: [78, 111, 116, 72, 117, 109, 112, 69, 113, 117, 97, 108, 59], value: '≏̸' },
    { key: [78, 111, 116, 76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⋪' },
    { key: [78, 111, 116, 76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧏̸' },
    { key: [78, 111, 116, 76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⋬' },
    { key: [78, 111, 116, 76, 101, 115, 115, 59], value: '≮' },
    { key: [78, 111, 116, 76, 101, 115, 115, 69, 113, 117, 97, 108, 59], value: '≰' },
    { key: [78, 111, 116, 76, 101, 115, 115, 71, 114, 101, 97, 116, 101, 114, 59], value: '≸' },
    { key: [78, 111, 116, 76, 101, 115, 115, 76, 101, 115, 115, 59], value: '≪̸' },
    { key: [78, 111, 116, 76, 101, 115, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩽̸' },
    { key: [78, 111, 116, 76, 101, 115, 115, 84, 105, 108, 100, 101, 59], value: '≴' },
    { key: [78, 111, 116, 78, 101, 115, 116, 101, 100, 71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '⪢̸' },
    { key: [78, 111, 116, 78, 101, 115, 116, 101, 100, 76, 101, 115, 115, 76, 101, 115, 115, 59], value: '⪡̸' },
    { key: [78, 111, 116, 80, 114, 101, 99, 101, 100, 101, 115, 59], value: '⊀' },
    { key: [78, 111, 116, 80, 114, 101, 99, 101, 100, 101, 115, 69, 113, 117, 97, 108, 59], value: '⪯̸' },
    { key: [78, 111, 116, 80, 114, 101, 99, 101, 100, 101, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⋠' },
    { key: [78, 111, 116, 82, 101, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59], value: '∌' },
    { key: [78, 111, 116, 82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⋫' },
    { key: [78, 111, 116, 82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧐̸' },
    { key: [78, 111, 116, 82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⋭' },
    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 59], value: '⊏̸' },
    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⋢' },
    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊐̸' },
    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⋣' },
    { key: [78, 111, 116, 83, 117, 98, 115, 101, 116, 59], value: '⊂⃒' },
    { key: [78, 111, 116, 83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊈' },
    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 59], value: '⊁' },
    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 69, 113, 117, 97, 108, 59], value: '⪰̸' },
    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⋡' },
    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 84, 105, 108, 100, 101, 59], value: '≿̸' },
    { key: [78, 111, 116, 83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊃⃒' },
    { key: [78, 111, 116, 83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊉' },
    { key: [78, 111, 116, 84, 105, 108, 100, 101, 59], value: '≁' },
    { key: [78, 111, 116, 84, 105, 108, 100, 101, 69, 113, 117, 97, 108, 59], value: '≄' },
    { key: [78, 111, 116, 84, 105, 108, 100, 101, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≇' },
    { key: [78, 111, 116, 84, 105, 108, 100, 101, 84, 105, 108, 100, 101, 59], value: '≉' },
    { key: [78, 111, 116, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∤' },
    { key: [78, 115, 99, 114, 59], value: '𝒩' },
    { key: [78, 116, 105, 108, 100, 101, 59], value: 'Ñ' },
    { key: [78, 117, 59], value: 'Ν' },
    { key: [79, 69, 108, 105, 103, 59], value: 'Œ' },
    { key: [79, 97, 99, 117, 116, 101, 59], value: 'Ó' },
    { key: [79, 99, 105, 114, 99, 59], value: 'Ô' },
    { key: [79, 99, 121, 59], value: 'О' },
    { key: [79, 100, 98, 108, 97, 99, 59], value: 'Ő' },
    { key: [79, 102, 114, 59], value: '𝔒' },
    { key: [79, 103, 114, 97, 118, 101, 59], value: 'Ò' },
    { key: [79, 109, 97, 99, 114, 59], value: 'Ō' },
    { key: [79, 109, 101, 103, 97, 59], value: 'Ω' },
    { key: [79, 109, 105, 99, 114, 111, 110, 59], value: 'Ο' },
    { key: [79, 111, 112, 102, 59], value: '𝕆' },
    { key: [79, 112, 101, 110, 67, 117, 114, 108, 121, 68, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59], value: '“' },
    { key: [79, 112, 101, 110, 67, 117, 114, 108, 121, 81, 117, 111, 116, 101, 59], value: '‘' },
    { key: [79, 114, 59], value: '⩔' },
    { key: [79, 115, 99, 114, 59], value: '𝒪' },
    { key: [79, 115, 108, 97, 115, 104, 59], value: 'Ø' },
    { key: [79, 116, 105, 108, 100, 101, 59], value: 'Õ' },
    { key: [79, 116, 105, 109, 101, 115, 59], value: '⨷' },
    { key: [79, 117, 109, 108, 59], value: 'Ö' },
    { key: [79, 118, 101, 114, 66, 97, 114, 59], value: '‾' },
    { key: [79, 118, 101, 114, 66, 114, 97, 99, 101, 59], value: '⏞' },
    { key: [79, 118, 101, 114, 66, 114, 97, 99, 107, 101, 116, 59], value: '⎴' },
    { key: [79, 118, 101, 114, 80, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59], value: '⏜' },
    { key: [80, 97, 114, 116, 105, 97, 108, 68, 59], value: '∂' },
    { key: [80, 99, 121, 59], value: 'П' },
    { key: [80, 102, 114, 59], value: '𝔓' },
    { key: [80, 104, 105, 59], value: 'Φ' },
    { key: [80, 105, 59], value: 'Π' },
    { key: [80, 108, 117, 115, 77, 105, 110, 117, 115, 59], value: '±' },
    { key: [80, 111, 105, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59], value: 'ℌ' },
    { key: [80, 111, 112, 102, 59], value: 'ℙ' },
    { key: [80, 114, 59], value: '⪻' },
    { key: [80, 114, 101, 99, 101, 100, 101, 115, 59], value: '≺' },
    { key: [80, 114, 101, 99, 101, 100, 101, 115, 69, 113, 117, 97, 108, 59], value: '⪯' },
    { key: [80, 114, 101, 99, 101, 100, 101, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '≼' },
    { key: [80, 114, 101, 99, 101, 100, 101, 115, 84, 105, 108, 100, 101, 59], value: '≾' },
    { key: [80, 114, 105, 109, 101, 59], value: '″' },
    { key: [80, 114, 111, 100, 117, 99, 116, 59], value: '∏' },
    { key: [80, 114, 111, 112, 111, 114, 116, 105, 111, 110, 59], value: '∷' },
    { key: [80, 114, 111, 112, 111, 114, 116, 105, 111, 110, 97, 108, 59], value: '∝' },
    { key: [80, 115, 99, 114, 59], value: '𝒫' },
    { key: [80, 115, 105, 59], value: 'Ψ' },
    { key: [81, 85, 79, 84, 59], value: '"' },
    { key: [81, 102, 114, 59], value: '𝔔' },
    { key: [81, 111, 112, 102, 59], value: 'ℚ' },
    { key: [81, 115, 99, 114, 59], value: '𝒬' },
    { key: [82, 66, 97, 114, 114, 59], value: '⤐' },
    { key: [82, 69, 71, 59], value: '®' },
    { key: [82, 97, 99, 117, 116, 101, 59], value: 'Ŕ' },
    { key: [82, 97, 110, 103, 59], value: '⟫' },
    { key: [82, 97, 114, 114, 59], value: '↠' },
    { key: [82, 97, 114, 114, 116, 108, 59], value: '⤖' },
    { key: [82, 99, 97, 114, 111, 110, 59], value: 'Ř' },
    { key: [82, 99, 101, 100, 105, 108, 59], value: 'Ŗ' },
    { key: [82, 99, 121, 59], value: 'Р' },
    { key: [82, 101, 59], value: 'ℜ' },
    { key: [82, 101, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59], value: '∋' },
    { key: [82, 101, 118, 101, 114, 115, 101, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⇋' },
    { key: [82, 101, 118, 101, 114, 115, 101, 85, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⥯' },
    { key: [82, 102, 114, 59], value: 'ℜ' },
    { key: [82, 104, 111, 59], value: 'Ρ' },
    { key: [82, 105, 103, 104, 116, 65, 110, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟩' },
    { key: [82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '→' },
    { key: [82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⇥' },
    { key: [82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⇄' },
    { key: [82, 105, 103, 104, 116, 67, 101, 105, 108, 105, 110, 103, 59], value: '⌉' },
    { key: [82, 105, 103, 104, 116, 68, 111, 117, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟧' },
    { key: [82, 105, 103, 104, 116, 68, 111, 119, 110, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥝' },
    { key: [82, 105, 103, 104, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⇂' },
    { key: [82, 105, 103, 104, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥕' },
    { key: [82, 105, 103, 104, 116, 70, 108, 111, 111, 114, 59], value: '⌋' },
    { key: [82, 105, 103, 104, 116, 84, 101, 101, 59], value: '⊢' },
    { key: [82, 105, 103, 104, 116, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↦' },
    { key: [82, 105, 103, 104, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥛' },
    { key: [82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⊳' },
    { key: [82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧐' },
    { key: [82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⊵' },
    { key: [82, 105, 103, 104, 116, 85, 112, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⥏' },
    { key: [82, 105, 103, 104, 116, 85, 112, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥜' },
    { key: [82, 105, 103, 104, 116, 85, 112, 86, 101, 99, 116, 111, 114, 59], value: '↾' },
    { key: [82, 105, 103, 104, 116, 85, 112, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥔' },
    { key: [82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⇀' },
    { key: [82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥓' },
    { key: [82, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇒' },
    { key: [82, 111, 112, 102, 59], value: 'ℝ' },
    { key: [82, 111, 117, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59], value: '⥰' },
    { key: [82, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇛' },
    { key: [82, 115, 99, 114, 59], value: 'ℛ' },
    { key: [82, 115, 104, 59], value: '↱' },
    { key: [82, 117, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59], value: '⧴' },
    { key: [83, 72, 67, 72, 99, 121, 59], value: 'Щ' },
    { key: [83, 72, 99, 121, 59], value: 'Ш' },
    { key: [83, 79, 70, 84, 99, 121, 59], value: 'Ь' },
    { key: [83, 97, 99, 117, 116, 101, 59], value: 'Ś' },
    { key: [83, 99, 59], value: '⪼' },
    { key: [83, 99, 97, 114, 111, 110, 59], value: 'Š' },
    { key: [83, 99, 101, 100, 105, 108, 59], value: 'Ş' },
    { key: [83, 99, 105, 114, 99, 59], value: 'Ŝ' },
    { key: [83, 99, 121, 59], value: 'С' },
    { key: [83, 102, 114, 59], value: '𝔖' },
    { key: [83, 104, 111, 114, 116, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '↓' },
    { key: [83, 104, 111, 114, 116, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '←' },
    { key: [83, 104, 111, 114, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '→' },
    { key: [83, 104, 111, 114, 116, 85, 112, 65, 114, 114, 111, 119, 59], value: '↑' },
    { key: [83, 105, 103, 109, 97, 59], value: 'Σ' },
    { key: [83, 109, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59], value: '∘' },
    { key: [83, 111, 112, 102, 59], value: '𝕊' },
    { key: [83, 113, 114, 116, 59], value: '√' },
    { key: [83, 113, 117, 97, 114, 101, 59], value: '□' },
    { key: [83, 113, 117, 97, 114, 101, 73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59], value: '⊓' },
    { key: [83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 59], value: '⊏' },
    { key: [83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊑' },
    { key: [83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊐' },
    { key: [83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊒' },
    { key: [83, 113, 117, 97, 114, 101, 85, 110, 105, 111, 110, 59], value: '⊔' },
    { key: [83, 115, 99, 114, 59], value: '𝒮' },
    { key: [83, 116, 97, 114, 59], value: '⋆' },
    { key: [83, 117, 98, 59], value: '⋐' },
    { key: [83, 117, 98, 115, 101, 116, 59], value: '⋐' },
    { key: [83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊆' },
    { key: [83, 117, 99, 99, 101, 101, 100, 115, 59], value: '≻' },
    { key: [83, 117, 99, 99, 101, 101, 100, 115, 69, 113, 117, 97, 108, 59], value: '⪰' },
    { key: [83, 117, 99, 99, 101, 101, 100, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '≽' },
    { key: [83, 117, 99, 99, 101, 101, 100, 115, 84, 105, 108, 100, 101, 59], value: '≿' },
    { key: [83, 117, 99, 104, 84, 104, 97, 116, 59], value: '∋' },
    { key: [83, 117, 109, 59], value: '∑' },
    { key: [83, 117, 112, 59], value: '⋑' },
    { key: [83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊃' },
    { key: [83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊇' },
    { key: [83, 117, 112, 115, 101, 116, 59], value: '⋑' },
    { key: [84, 72, 79, 82, 78, 59], value: 'Þ' },
    { key: [84, 82, 65, 68, 69, 59], value: '™' },
    { key: [84, 83, 72, 99, 121, 59], value: 'Ћ' },
    { key: [84, 83, 99, 121, 59], value: 'Ц' },
    { key: [84, 97, 98, 59], value: '\t' },
    { key: [84, 97, 117, 59], value: 'Τ' },
    { key: [84, 99, 97, 114, 111, 110, 59], value: 'Ť' },
    { key: [84, 99, 101, 100, 105, 108, 59], value: 'Ţ' },
    { key: [84, 99, 121, 59], value: 'Т' },
    { key: [84, 102, 114, 59], value: '𝔗' },
    { key: [84, 104, 101, 114, 101, 102, 111, 114, 101, 59], value: '∴' },
    { key: [84, 104, 101, 116, 97, 59], value: 'Θ' },
    { key: [84, 104, 105, 99, 107, 83, 112, 97, 99, 101, 59], value: '  ' },
    { key: [84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: ' ' },
    { key: [84, 105, 108, 100, 101, 59], value: '∼' },
    { key: [84, 105, 108, 100, 101, 69, 113, 117, 97, 108, 59], value: '≃' },
    { key: [84, 105, 108, 100, 101, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≅' },
    { key: [84, 105, 108, 100, 101, 84, 105, 108, 100, 101, 59], value: '≈' },
    { key: [84, 111, 112, 102, 59], value: '𝕋' },
    { key: [84, 114, 105, 112, 108, 101, 68, 111, 116, 59], value: '⃛' },
    { key: [84, 115, 99, 114, 59], value: '𝒯' },
    { key: [84, 115, 116, 114, 111, 107, 59], value: 'Ŧ' },
    { key: [85, 97, 99, 117, 116, 101, 59], value: 'Ú' },
    { key: [85, 97, 114, 114, 59], value: '↟' },
    { key: [85, 97, 114, 114, 111, 99, 105, 114, 59], value: '⥉' },
    { key: [85, 98, 114, 99, 121, 59], value: 'Ў' },
    { key: [85, 98, 114, 101, 118, 101, 59], value: 'Ŭ' },
    { key: [85, 99, 105, 114, 99, 59], value: 'Û' },
    { key: [85, 99, 121, 59], value: 'У' },
    { key: [85, 100, 98, 108, 97, 99, 59], value: 'Ű' },
    { key: [85, 102, 114, 59], value: '𝔘' },
    { key: [85, 103, 114, 97, 118, 101, 59], value: 'Ù' },
    { key: [85, 109, 97, 99, 114, 59], value: 'Ū' },
    { key: [85, 110, 100, 101, 114, 66, 97, 114, 59], value: '_' },
    { key: [85, 110, 100, 101, 114, 66, 114, 97, 99, 101, 59], value: '⏟' },
    { key: [85, 110, 100, 101, 114, 66, 114, 97, 99, 107, 101, 116, 59], value: '⎵' },
    { key: [85, 110, 100, 101, 114, 80, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59], value: '⏝' },
    { key: [85, 110, 105, 111, 110, 59], value: '⋃' },
    { key: [85, 110, 105, 111, 110, 80, 108, 117, 115, 59], value: '⊎' },
    { key: [85, 111, 103, 111, 110, 59], value: 'Ų' },
    { key: [85, 111, 112, 102, 59], value: '𝕌' },
    { key: [85, 112, 65, 114, 114, 111, 119, 59], value: '↑' },
    { key: [85, 112, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⤒' },
    { key: [85, 112, 65, 114, 114, 111, 119, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '⇅' },
    { key: [85, 112, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '↕' },
    { key: [85, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⥮' },
    { key: [85, 112, 84, 101, 101, 59], value: '⊥' },
    { key: [85, 112, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↥' },
    { key: [85, 112, 97, 114, 114, 111, 119, 59], value: '⇑' },
    { key: [85, 112, 100, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '⇕' },
    { key: [85, 112, 112, 101, 114, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '↖' },
    { key: [85, 112, 112, 101, 114, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '↗' },
    { key: [85, 112, 115, 105, 59], value: 'ϒ' },
    { key: [85, 112, 115, 105, 108, 111, 110, 59], value: 'Υ' },
    { key: [85, 114, 105, 110, 103, 59], value: 'Ů' },
    { key: [85, 115, 99, 114, 59], value: '𝒰' },
    { key: [85, 116, 105, 108, 100, 101, 59], value: 'Ũ' },
    { key: [85, 117, 109, 108, 59], value: 'Ü' },
    { key: [86, 68, 97, 115, 104, 59], value: '⊫' },
    { key: [86, 98, 97, 114, 59], value: '⫫' },
    { key: [86, 99, 121, 59], value: 'В' },
    { key: [86, 100, 97, 115, 104, 59], value: '⊩' },
    { key: [86, 100, 97, 115, 104, 108, 59], value: '⫦' },
    { key: [86, 101, 101, 59], value: '⋁' },
    { key: [86, 101, 114, 98, 97, 114, 59], value: '‖' },
    { key: [86, 101, 114, 116, 59], value: '‖' },
    { key: [86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∣' },
    { key: [86, 101, 114, 116, 105, 99, 97, 108, 76, 105, 110, 101, 59], value: '|' },
    { key: [86, 101, 114, 116, 105, 99, 97, 108, 83, 101, 112, 97, 114, 97, 116, 111, 114, 59], value: '❘' },
    { key: [86, 101, 114, 116, 105, 99, 97, 108, 84, 105, 108, 100, 101, 59], value: '≀' },
    { key: [86, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: ' ' },
    { key: [86, 102, 114, 59], value: '𝔙' },
    { key: [86, 111, 112, 102, 59], value: '𝕍' },
    { key: [86, 115, 99, 114, 59], value: '𝒱' },
    { key: [86, 118, 100, 97, 115, 104, 59], value: '⊪' },
    { key: [87, 99, 105, 114, 99, 59], value: 'Ŵ' },
    { key: [87, 101, 100, 103, 101, 59], value: '⋀' },
    { key: [87, 102, 114, 59], value: '𝔚' },
    { key: [87, 111, 112, 102, 59], value: '𝕎' },
    { key: [87, 115, 99, 114, 59], value: '𝒲' },
    { key: [88, 102, 114, 59], value: '𝔛' },
    { key: [88, 105, 59], value: 'Ξ' },
    { key: [88, 111, 112, 102, 59], value: '𝕏' },
    { key: [88, 115, 99, 114, 59], value: '𝒳' },
    { key: [89, 65, 99, 121, 59], value: 'Я' },
    { key: [89, 73, 99, 121, 59], value: 'Ї' },
    { key: [89, 85, 99, 121, 59], value: 'Ю' },
    { key: [89, 97, 99, 117, 116, 101, 59], value: 'Ý' },
    { key: [89, 99, 105, 114, 99, 59], value: 'Ŷ' },
    { key: [89, 99, 121, 59], value: 'Ы' },
    { key: [89, 102, 114, 59], value: '𝔜' },
    { key: [89, 111, 112, 102, 59], value: '𝕐' },
    { key: [89, 115, 99, 114, 59], value: '𝒴' },
    { key: [89, 117, 109, 108, 59], value: 'Ÿ' },
    { key: [90, 72, 99, 121, 59], value: 'Ж' },
    { key: [90, 97, 99, 117, 116, 101, 59], value: 'Ź' },
    { key: [90, 99, 97, 114, 111, 110, 59], value: 'Ž' },
    { key: [90, 99, 121, 59], value: 'З' },
    { key: [90, 100, 111, 116, 59], value: 'Ż' },
    { key: [90, 101, 114, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59], value: '​' },
    { key: [90, 101, 116, 97, 59], value: 'Ζ' },
    { key: [90, 102, 114, 59], value: 'ℨ' },
    { key: [90, 111, 112, 102, 59], value: 'ℤ' },
    { key: [90, 115, 99, 114, 59], value: '𝒵' },
    { key: [97, 97, 99, 117, 116, 101, 59], value: 'á' },
    { key: [97, 98, 114, 101, 118, 101, 59], value: 'ă' },
    { key: [97, 99, 59], value: '∾' },
    { key: [97, 99, 69, 59], value: '∾̳' },
    { key: [97, 99, 100, 59], value: '∿' },
    { key: [97, 99, 105, 114, 99, 59], value: 'â' },
    { key: [97, 99, 117, 116, 101, 59], value: '´' },
    { key: [97, 99, 121, 59], value: 'а' },
    { key: [97, 101, 108, 105, 103, 59], value: 'æ' },
    { key: [97, 102, 59], value: '⁡' },
    { key: [97, 102, 114, 59], value: '𝔞' },
    { key: [97, 103, 114, 97, 118, 101, 59], value: 'à' },
    { key: [97, 108, 101, 102, 115, 121, 109, 59], value: 'ℵ' },
    { key: [97, 108, 101, 112, 104, 59], value: 'ℵ' },
    { key: [97, 108, 112, 104, 97, 59], value: 'α' },
    { key: [97, 109, 97, 99, 114, 59], value: 'ā' },
    { key: [97, 109, 97, 108, 103, 59], value: '⨿' },
    { key: [97, 109, 112, 59], value: '&' },
    { key: [97, 110, 100, 59], value: '∧' },
    { key: [97, 110, 100, 97, 110, 100, 59], value: '⩕' },
    { key: [97, 110, 100, 100, 59], value: '⩜' },
    { key: [97, 110, 100, 115, 108, 111, 112, 101, 59], value: '⩘' },
    { key: [97, 110, 100, 118, 59], value: '⩚' },
    { key: [97, 110, 103, 59], value: '∠' },
    { key: [97, 110, 103, 101, 59], value: '⦤' },
    { key: [97, 110, 103, 108, 101, 59], value: '∠' },
    { key: [97, 110, 103, 109, 115, 100, 59], value: '∡' },
    { key: [97, 110, 103, 109, 115, 100, 97, 97, 59], value: '⦨' },
    { key: [97, 110, 103, 109, 115, 100, 97, 98, 59], value: '⦩' },
    { key: [97, 110, 103, 109, 115, 100, 97, 99, 59], value: '⦪' },
    { key: [97, 110, 103, 109, 115, 100, 97, 100, 59], value: '⦫' },
    { key: [97, 110, 103, 109, 115, 100, 97, 101, 59], value: '⦬' },
    { key: [97, 110, 103, 109, 115, 100, 97, 102, 59], value: '⦭' },
    { key: [97, 110, 103, 109, 115, 100, 97, 103, 59], value: '⦮' },
    { key: [97, 110, 103, 109, 115, 100, 97, 104, 59], value: '⦯' },
    { key: [97, 110, 103, 114, 116, 59], value: '∟' },
    { key: [97, 110, 103, 114, 116, 118, 98, 59], value: '⊾' },
    { key: [97, 110, 103, 114, 116, 118, 98, 100, 59], value: '⦝' },
    { key: [97, 110, 103, 115, 112, 104, 59], value: '∢' },
    { key: [97, 110, 103, 115, 116, 59], value: 'Å' },
    { key: [97, 110, 103, 122, 97, 114, 114, 59], value: '⍼' },
    { key: [97, 111, 103, 111, 110, 59], value: 'ą' },
    { key: [97, 111, 112, 102, 59], value: '𝕒' },
    { key: [97, 112, 59], value: '≈' },
    { key: [97, 112, 69, 59], value: '⩰' },
    { key: [97, 112, 97, 99, 105, 114, 59], value: '⩯' },
    { key: [97, 112, 101, 59], value: '≊' },
    { key: [97, 112, 105, 100, 59], value: '≋' },
    { key: [97, 112, 111, 115, 59], value: '\'' },
    { key: [97, 112, 112, 114, 111, 120, 59], value: '≈' },
    { key: [97, 112, 112, 114, 111, 120, 101, 113, 59], value: '≊' },
    { key: [97, 114, 105, 110, 103, 59], value: 'å' },
    { key: [97, 115, 99, 114, 59], value: '𝒶' },
    { key: [97, 115, 116, 59], value: '*' },
    { key: [97, 115, 121, 109, 112, 59], value: '≈' },
    { key: [97, 115, 121, 109, 112, 101, 113, 59], value: '≍' },
    { key: [97, 116, 105, 108, 100, 101, 59], value: 'ã' },
    { key: [97, 117, 109, 108, 59], value: 'ä' },
    { key: [97, 119, 99, 111, 110, 105, 110, 116, 59], value: '∳' },
    { key: [97, 119, 105, 110, 116, 59], value: '⨑' },
    { key: [98, 78, 111, 116, 59], value: '⫭' },
    { key: [98, 97, 99, 107, 99, 111, 110, 103, 59], value: '≌' },
    { key: [98, 97, 99, 107, 101, 112, 115, 105, 108, 111, 110, 59], value: '϶' },
    { key: [98, 97, 99, 107, 112, 114, 105, 109, 101, 59], value: '‵' },
    { key: [98, 97, 99, 107, 115, 105, 109, 59], value: '∽' },
    { key: [98, 97, 99, 107, 115, 105, 109, 101, 113, 59], value: '⋍' },
    { key: [98, 97, 114, 118, 101, 101, 59], value: '⊽' },
    { key: [98, 97, 114, 119, 101, 100, 59], value: '⌅' },
    { key: [98, 97, 114, 119, 101, 100, 103, 101, 59], value: '⌅' },
    { key: [98, 98, 114, 107, 59], value: '⎵' },
    { key: [98, 98, 114, 107, 116, 98, 114, 107, 59], value: '⎶' },
    { key: [98, 99, 111, 110, 103, 59], value: '≌' },
    { key: [98, 99, 121, 59], value: 'б' },
    { key: [98, 100, 113, 117, 111, 59], value: '„' },
    { key: [98, 101, 99, 97, 117, 115, 59], value: '∵' },
    { key: [98, 101, 99, 97, 117, 115, 101, 59], value: '∵' },
    { key: [98, 101, 109, 112, 116, 121, 118, 59], value: '⦰' },
    { key: [98, 101, 112, 115, 105, 59], value: '϶' },
    { key: [98, 101, 114, 110, 111, 117, 59], value: 'ℬ' },
    { key: [98, 101, 116, 97, 59], value: 'β' },
    { key: [98, 101, 116, 104, 59], value: 'ℶ' },
    { key: [98, 101, 116, 119, 101, 101, 110, 59], value: '≬' },
    { key: [98, 102, 114, 59], value: '𝔟' },
    { key: [98, 105, 103, 99, 97, 112, 59], value: '⋂' },
    { key: [98, 105, 103, 99, 105, 114, 99, 59], value: '◯' },
    { key: [98, 105, 103, 99, 117, 112, 59], value: '⋃' },
    { key: [98, 105, 103, 111, 100, 111, 116, 59], value: '⨀' },
    { key: [98, 105, 103, 111, 112, 108, 117, 115, 59], value: '⨁' },
    { key: [98, 105, 103, 111, 116, 105, 109, 101, 115, 59], value: '⨂' },
    { key: [98, 105, 103, 115, 113, 99, 117, 112, 59], value: '⨆' },
    { key: [98, 105, 103, 115, 116, 97, 114, 59], value: '★' },
    { key: [98, 105, 103, 116, 114, 105, 97, 110, 103, 108, 101, 100, 111, 119, 110, 59], value: '▽' },
    { key: [98, 105, 103, 116, 114, 105, 97, 110, 103, 108, 101, 117, 112, 59], value: '△' },
    { key: [98, 105, 103, 117, 112, 108, 117, 115, 59], value: '⨄' },
    { key: [98, 105, 103, 118, 101, 101, 59], value: '⋁' },
    { key: [98, 105, 103, 119, 101, 100, 103, 101, 59], value: '⋀' },
    { key: [98, 107, 97, 114, 111, 119, 59], value: '⤍' },
    { key: [98, 108, 97, 99, 107, 108, 111, 122, 101, 110, 103, 101, 59], value: '⧫' },
    { key: [98, 108, 97, 99, 107, 115, 113, 117, 97, 114, 101, 59], value: '▪' },
    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 59], value: '▴' },
    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 100, 111, 119, 110, 59], value: '▾' },
    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '◂' },
    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '▸' },
    { key: [98, 108, 97, 110, 107, 59], value: '␣' },
    { key: [98, 108, 107, 49, 50, 59], value: '▒' },
    { key: [98, 108, 107, 49, 52, 59], value: '░' },
    { key: [98, 108, 107, 51, 52, 59], value: '▓' },
    { key: [98, 108, 111, 99, 107, 59], value: '█' },
    { key: [98, 110, 101, 59], value: '=⃥' },
    { key: [98, 110, 101, 113, 117, 105, 118, 59], value: '≡⃥' },
    { key: [98, 110, 111, 116, 59], value: '⌐' },
    { key: [98, 111, 112, 102, 59], value: '𝕓' },
    { key: [98, 111, 116, 59], value: '⊥' },
    { key: [98, 111, 116, 116, 111, 109, 59], value: '⊥' },
    { key: [98, 111, 119, 116, 105, 101, 59], value: '⋈' },
    { key: [98, 111, 120, 68, 76, 59], value: '╗' },
    { key: [98, 111, 120, 68, 82, 59], value: '╔' },
    { key: [98, 111, 120, 68, 108, 59], value: '╖' },
    { key: [98, 111, 120, 68, 114, 59], value: '╓' },
    { key: [98, 111, 120, 72, 59], value: '═' },
    { key: [98, 111, 120, 72, 68, 59], value: '╦' },
    { key: [98, 111, 120, 72, 85, 59], value: '╩' },
    { key: [98, 111, 120, 72, 100, 59], value: '╤' },
    { key: [98, 111, 120, 72, 117, 59], value: '╧' },
    { key: [98, 111, 120, 85, 76, 59], value: '╝' },
    { key: [98, 111, 120, 85, 82, 59], value: '╚' },
    { key: [98, 111, 120, 85, 108, 59], value: '╜' },
    { key: [98, 111, 120, 85, 114, 59], value: '╙' },
    { key: [98, 111, 120, 86, 59], value: '║' },
    { key: [98, 111, 120, 86, 72, 59], value: '╬' },
    { key: [98, 111, 120, 86, 76, 59], value: '╣' },
    { key: [98, 111, 120, 86, 82, 59], value: '╠' },
    { key: [98, 111, 120, 86, 104, 59], value: '╫' },
    { key: [98, 111, 120, 86, 108, 59], value: '╢' },
    { key: [98, 111, 120, 86, 114, 59], value: '╟' },
    { key: [98, 111, 120, 98, 111, 120, 59], value: '⧉' },
    { key: [98, 111, 120, 100, 76, 59], value: '╕' },
    { key: [98, 111, 120, 100, 82, 59], value: '╒' },
    { key: [98, 111, 120, 100, 108, 59], value: '┐' },
    { key: [98, 111, 120, 100, 114, 59], value: '┌' },
    { key: [98, 111, 120, 104, 59], value: '─' },
    { key: [98, 111, 120, 104, 68, 59], value: '╥' },
    { key: [98, 111, 120, 104, 85, 59], value: '╨' },
    { key: [98, 111, 120, 104, 100, 59], value: '┬' },
    { key: [98, 111, 120, 104, 117, 59], value: '┴' },
    { key: [98, 111, 120, 109, 105, 110, 117, 115, 59], value: '⊟' },
    { key: [98, 111, 120, 112, 108, 117, 115, 59], value: '⊞' },
    { key: [98, 111, 120, 116, 105, 109, 101, 115, 59], value: '⊠' },
    { key: [98, 111, 120, 117, 76, 59], value: '╛' },
    { key: [98, 111, 120, 117, 82, 59], value: '╘' },
    { key: [98, 111, 120, 117, 108, 59], value: '┘' },
    { key: [98, 111, 120, 117, 114, 59], value: '└' },
    { key: [98, 111, 120, 118, 59], value: '│' },
    { key: [98, 111, 120, 118, 72, 59], value: '╪' },
    { key: [98, 111, 120, 118, 76, 59], value: '╡' },
    { key: [98, 111, 120, 118, 82, 59], value: '╞' },
    { key: [98, 111, 120, 118, 104, 59], value: '┼' },
    { key: [98, 111, 120, 118, 108, 59], value: '┤' },
    { key: [98, 111, 120, 118, 114, 59], value: '├' },
    { key: [98, 112, 114, 105, 109, 101, 59], value: '‵' },
    { key: [98, 114, 101, 118, 101, 59], value: '˘' },
    { key: [98, 114, 118, 98, 97, 114, 59], value: '¦' },
    { key: [98, 115, 99, 114, 59], value: '𝒷' },
    { key: [98, 115, 101, 109, 105, 59], value: '⁏' },
    { key: [98, 115, 105, 109, 59], value: '∽' },
    { key: [98, 115, 105, 109, 101, 59], value: '⋍' },
    { key: [98, 115, 111, 108, 59], value: '\\' },
    { key: [98, 115, 111, 108, 98, 59], value: '⧅' },
    { key: [98, 115, 111, 108, 104, 115, 117, 98, 59], value: '⟈' },
    { key: [98, 117, 108, 108, 59], value: '•' },
    { key: [98, 117, 108, 108, 101, 116, 59], value: '•' },
    { key: [98, 117, 109, 112, 59], value: '≎' },
    { key: [98, 117, 109, 112, 69, 59], value: '⪮' },
    { key: [98, 117, 109, 112, 101, 59], value: '≏' },
    { key: [98, 117, 109, 112, 101, 113, 59], value: '≏' },
    { key: [99, 97, 99, 117, 116, 101, 59], value: 'ć' },
    { key: [99, 97, 112, 59], value: '∩' },
    { key: [99, 97, 112, 97, 110, 100, 59], value: '⩄' },
    { key: [99, 97, 112, 98, 114, 99, 117, 112, 59], value: '⩉' },
    { key: [99, 97, 112, 99, 97, 112, 59], value: '⩋' },
    { key: [99, 97, 112, 99, 117, 112, 59], value: '⩇' },
    { key: [99, 97, 112, 100, 111, 116, 59], value: '⩀' },
    { key: [99, 97, 112, 115, 59], value: '∩︀' },
    { key: [99, 97, 114, 101, 116, 59], value: '⁁' },
    { key: [99, 97, 114, 111, 110, 59], value: 'ˇ' },
    { key: [99, 99, 97, 112, 115, 59], value: '⩍' },
    { key: [99, 99, 97, 114, 111, 110, 59], value: 'č' },
    { key: [99, 99, 101, 100, 105, 108, 59], value: 'ç' },
    { key: [99, 99, 105, 114, 99, 59], value: 'ĉ' },
    { key: [99, 99, 117, 112, 115, 59], value: '⩌' },
    { key: [99, 99, 117, 112, 115, 115, 109, 59], value: '⩐' },
    { key: [99, 100, 111, 116, 59], value: 'ċ' },
    { key: [99, 101, 100, 105, 108, 59], value: '¸' },
    { key: [99, 101, 109, 112, 116, 121, 118, 59], value: '⦲' },
    { key: [99, 101, 110, 116, 59], value: '¢' },
    { key: [99, 101, 110, 116, 101, 114, 100, 111, 116, 59], value: '·' },
    { key: [99, 102, 114, 59], value: '𝔠' },
    { key: [99, 104, 99, 121, 59], value: 'ч' },
    { key: [99, 104, 101, 99, 107, 59], value: '✓' },
    { key: [99, 104, 101, 99, 107, 109, 97, 114, 107, 59], value: '✓' },
    { key: [99, 104, 105, 59], value: 'χ' },
    { key: [99, 105, 114, 59], value: '○' },
    { key: [99, 105, 114, 69, 59], value: '⧃' },
    { key: [99, 105, 114, 99, 59], value: 'ˆ' },
    { key: [99, 105, 114, 99, 101, 113, 59], value: '≗' },
    { key: [99, 105, 114, 99, 108, 101, 97, 114, 114, 111, 119, 108, 101, 102, 116, 59], value: '↺' },
    { key: [99, 105, 114, 99, 108, 101, 97, 114, 114, 111, 119, 114, 105, 103, 104, 116, 59], value: '↻' },
    { key: [99, 105, 114, 99, 108, 101, 100, 82, 59], value: '®' },
    { key: [99, 105, 114, 99, 108, 101, 100, 83, 59], value: 'Ⓢ' },
    { key: [99, 105, 114, 99, 108, 101, 100, 97, 115, 116, 59], value: '⊛' },
    { key: [99, 105, 114, 99, 108, 101, 100, 99, 105, 114, 99, 59], value: '⊚' },
    { key: [99, 105, 114, 99, 108, 101, 100, 100, 97, 115, 104, 59], value: '⊝' },
    { key: [99, 105, 114, 101, 59], value: '≗' },
    { key: [99, 105, 114, 102, 110, 105, 110, 116, 59], value: '⨐' },
    { key: [99, 105, 114, 109, 105, 100, 59], value: '⫯' },
    { key: [99, 105, 114, 115, 99, 105, 114, 59], value: '⧂' },
    { key: [99, 108, 117, 98, 115, 59], value: '♣' },
    { key: [99, 108, 117, 98, 115, 117, 105, 116, 59], value: '♣' },
    { key: [99, 111, 108, 111, 110, 59], value: ':' },
    { key: [99, 111, 108, 111, 110, 101, 59], value: '≔' },
    { key: [99, 111, 108, 111, 110, 101, 113, 59], value: '≔' },
    { key: [99, 111, 109, 109, 97, 59], value: ',' },
    { key: [99, 111, 109, 109, 97, 116, 59], value: '@' },
    { key: [99, 111, 109, 112, 59], value: '∁' },
    { key: [99, 111, 109, 112, 102, 110, 59], value: '∘' },
    { key: [99, 111, 109, 112, 108, 101, 109, 101, 110, 116, 59], value: '∁' },
    { key: [99, 111, 109, 112, 108, 101, 120, 101, 115, 59], value: 'ℂ' },
    { key: [99, 111, 110, 103, 59], value: '≅' },
    { key: [99, 111, 110, 103, 100, 111, 116, 59], value: '⩭' },
    { key: [99, 111, 110, 105, 110, 116, 59], value: '∮' },
    { key: [99, 111, 112, 102, 59], value: '𝕔' },
    { key: [99, 111, 112, 114, 111, 100, 59], value: '∐' },
    { key: [99, 111, 112, 121, 59], value: '©' },
    { key: [99, 111, 112, 121, 115, 114, 59], value: '℗' },
    { key: [99, 114, 97, 114, 114, 59], value: '↵' },
    { key: [99, 114, 111, 115, 115, 59], value: '✗' },
    { key: [99, 115, 99, 114, 59], value: '𝒸' },
    { key: [99, 115, 117, 98, 59], value: '⫏' },
    { key: [99, 115, 117, 98, 101, 59], value: '⫑' },
    { key: [99, 115, 117, 112, 59], value: '⫐' },
    { key: [99, 115, 117, 112, 101, 59], value: '⫒' },
    { key: [99, 116, 100, 111, 116, 59], value: '⋯' },
    { key: [99, 117, 100, 97, 114, 114, 108, 59], value: '⤸' },
    { key: [99, 117, 100, 97, 114, 114, 114, 59], value: '⤵' },
    { key: [99, 117, 101, 112, 114, 59], value: '⋞' },
    { key: [99, 117, 101, 115, 99, 59], value: '⋟' },
    { key: [99, 117, 108, 97, 114, 114, 59], value: '↶' },
    { key: [99, 117, 108, 97, 114, 114, 112, 59], value: '⤽' },
    { key: [99, 117, 112, 59], value: '∪' },
    { key: [99, 117, 112, 98, 114, 99, 97, 112, 59], value: '⩈' },
    { key: [99, 117, 112, 99, 97, 112, 59], value: '⩆' },
    { key: [99, 117, 112, 99, 117, 112, 59], value: '⩊' },
    { key: [99, 117, 112, 100, 111, 116, 59], value: '⊍' },
    { key: [99, 117, 112, 111, 114, 59], value: '⩅' },
    { key: [99, 117, 112, 115, 59], value: '∪︀' },
    { key: [99, 117, 114, 97, 114, 114, 59], value: '↷' },
    { key: [99, 117, 114, 97, 114, 114, 109, 59], value: '⤼' },
    { key: [99, 117, 114, 108, 121, 101, 113, 112, 114, 101, 99, 59], value: '⋞' },
    { key: [99, 117, 114, 108, 121, 101, 113, 115, 117, 99, 99, 59], value: '⋟' },
    { key: [99, 117, 114, 108, 121, 118, 101, 101, 59], value: '⋎' },
    { key: [99, 117, 114, 108, 121, 119, 101, 100, 103, 101, 59], value: '⋏' },
    { key: [99, 117, 114, 114, 101, 110, 59], value: '¤' },
    { key: [99, 117, 114, 118, 101, 97, 114, 114, 111, 119, 108, 101, 102, 116, 59], value: '↶' },
    { key: [99, 117, 114, 118, 101, 97, 114, 114, 111, 119, 114, 105, 103, 104, 116, 59], value: '↷' },
    { key: [99, 117, 118, 101, 101, 59], value: '⋎' },
    { key: [99, 117, 119, 101, 100, 59], value: '⋏' },
    { key: [99, 119, 99, 111, 110, 105, 110, 116, 59], value: '∲' },
    { key: [99, 119, 105, 110, 116, 59], value: '∱' },
    { key: [99, 121, 108, 99, 116, 121, 59], value: '⌭' },
    { key: [100, 65, 114, 114, 59], value: '⇓' },
    { key: [100, 72, 97, 114, 59], value: '⥥' },
    { key: [100, 97, 103, 103, 101, 114, 59], value: '†' },
    { key: [100, 97, 108, 101, 116, 104, 59], value: 'ℸ' },
    { key: [100, 97, 114, 114, 59], value: '↓' },
    { key: [100, 97, 115, 104, 59], value: '‐' },
    { key: [100, 97, 115, 104, 118, 59], value: '⊣' },
    { key: [100, 98, 107, 97, 114, 111, 119, 59], value: '⤏' },
    { key: [100, 98, 108, 97, 99, 59], value: '˝' },
    { key: [100, 99, 97, 114, 111, 110, 59], value: 'ď' },
    { key: [100, 99, 121, 59], value: 'д' },
    { key: [100, 100, 59], value: 'ⅆ' },
    { key: [100, 100, 97, 103, 103, 101, 114, 59], value: '‡' },
    { key: [100, 100, 97, 114, 114, 59], value: '⇊' },
    { key: [100, 100, 111, 116, 115, 101, 113, 59], value: '⩷' },
    { key: [100, 101, 103, 59], value: '°' },
    { key: [100, 101, 108, 116, 97, 59], value: 'δ' },
    { key: [100, 101, 109, 112, 116, 121, 118, 59], value: '⦱' },
    { key: [100, 102, 105, 115, 104, 116, 59], value: '⥿' },
    { key: [100, 102, 114, 59], value: '𝔡' },
    { key: [100, 104, 97, 114, 108, 59], value: '⇃' },
    { key: [100, 104, 97, 114, 114, 59], value: '⇂' },
    { key: [100, 105, 97, 109, 59], value: '⋄' },
    { key: [100, 105, 97, 109, 111, 110, 100, 59], value: '⋄' },
    { key: [100, 105, 97, 109, 111, 110, 100, 115, 117, 105, 116, 59], value: '♦' },
    { key: [100, 105, 97, 109, 115, 59], value: '♦' },
    { key: [100, 105, 101, 59], value: '¨' },
    { key: [100, 105, 103, 97, 109, 109, 97, 59], value: 'ϝ' },
    { key: [100, 105, 115, 105, 110, 59], value: '⋲' },
    { key: [100, 105, 118, 59], value: '÷' },
    { key: [100, 105, 118, 105, 100, 101, 59], value: '÷' },
    { key: [100, 105, 118, 105, 100, 101, 111, 110, 116, 105, 109, 101, 115, 59], value: '⋇' },
    { key: [100, 105, 118, 111, 110, 120, 59], value: '⋇' },
    { key: [100, 106, 99, 121, 59], value: 'ђ' },
    { key: [100, 108, 99, 111, 114, 110, 59], value: '⌞' },
    { key: [100, 108, 99, 114, 111, 112, 59], value: '⌍' },
    { key: [100, 111, 108, 108, 97, 114, 59], value: '$' },
    { key: [100, 111, 112, 102, 59], value: '𝕕' },
    { key: [100, 111, 116, 59], value: '˙' },
    { key: [100, 111, 116, 101, 113, 59], value: '≐' },
    { key: [100, 111, 116, 101, 113, 100, 111, 116, 59], value: '≑' },
    { key: [100, 111, 116, 109, 105, 110, 117, 115, 59], value: '∸' },
    { key: [100, 111, 116, 112, 108, 117, 115, 59], value: '∔' },
    { key: [100, 111, 116, 115, 113, 117, 97, 114, 101, 59], value: '⊡' },
    { key: [100, 111, 117, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59], value: '⌆' },
    { key: [100, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '↓' },
    { key: [100, 111, 119, 110, 100, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59], value: '⇊' },
    { key: [100, 111, 119, 110, 104, 97, 114, 112, 111, 111, 110, 108, 101, 102, 116, 59], value: '⇃' },
    { key: [100, 111, 119, 110, 104, 97, 114, 112, 111, 111, 110, 114, 105, 103, 104, 116, 59], value: '⇂' },
    { key: [100, 114, 98, 107, 97, 114, 111, 119, 59], value: '⤐' },
    { key: [100, 114, 99, 111, 114, 110, 59], value: '⌟' },
    { key: [100, 114, 99, 114, 111, 112, 59], value: '⌌' },
    { key: [100, 115, 99, 114, 59], value: '𝒹' },
    { key: [100, 115, 99, 121, 59], value: 'ѕ' },
    { key: [100, 115, 111, 108, 59], value: '⧶' },
    { key: [100, 115, 116, 114, 111, 107, 59], value: 'đ' },
    { key: [100, 116, 100, 111, 116, 59], value: '⋱' },
    { key: [100, 116, 114, 105, 59], value: '▿' },
    { key: [100, 116, 114, 105, 102, 59], value: '▾' },
    { key: [100, 117, 97, 114, 114, 59], value: '⇵' },
    { key: [100, 117, 104, 97, 114, 59], value: '⥯' },
    { key: [100, 119, 97, 110, 103, 108, 101, 59], value: '⦦' },
    { key: [100, 122, 99, 121, 59], value: 'џ' },
    { key: [100, 122, 105, 103, 114, 97, 114, 114, 59], value: '⟿' },
    { key: [101, 68, 68, 111, 116, 59], value: '⩷' },
    { key: [101, 68, 111, 116, 59], value: '≑' },
    { key: [101, 97, 99, 117, 116, 101, 59], value: 'é' },
    { key: [101, 97, 115, 116, 101, 114, 59], value: '⩮' },
    { key: [101, 99, 97, 114, 111, 110, 59], value: 'ě' },
    { key: [101, 99, 105, 114, 59], value: '≖' },
    { key: [101, 99, 105, 114, 99, 59], value: 'ê' },
    { key: [101, 99, 111, 108, 111, 110, 59], value: '≕' },
    { key: [101, 99, 121, 59], value: 'э' },
    { key: [101, 100, 111, 116, 59], value: 'ė' },
    { key: [101, 101, 59], value: 'ⅇ' },
    { key: [101, 102, 68, 111, 116, 59], value: '≒' },
    { key: [101, 102, 114, 59], value: '𝔢' },
    { key: [101, 103, 59], value: '⪚' },
    { key: [101, 103, 114, 97, 118, 101, 59], value: 'è' },
    { key: [101, 103, 115, 59], value: '⪖' },
    { key: [101, 103, 115, 100, 111, 116, 59], value: '⪘' },
    { key: [101, 108, 59], value: '⪙' },
    { key: [101, 108, 105, 110, 116, 101, 114, 115, 59], value: '⏧' },
    { key: [101, 108, 108, 59], value: 'ℓ' },
    { key: [101, 108, 115, 59], value: '⪕' },
    { key: [101, 108, 115, 100, 111, 116, 59], value: '⪗' },
    { key: [101, 109, 97, 99, 114, 59], value: 'ē' },
    { key: [101, 109, 112, 116, 121, 59], value: '∅' },
    { key: [101, 109, 112, 116, 121, 115, 101, 116, 59], value: '∅' },
    { key: [101, 109, 112, 116, 121, 118, 59], value: '∅' },
    { key: [101, 109, 115, 112, 49, 51, 59], value: ' ' },
    { key: [101, 109, 115, 112, 49, 52, 59], value: ' ' },
    { key: [101, 109, 115, 112, 59], value: ' ' },
    { key: [101, 110, 103, 59], value: 'ŋ' },
    { key: [101, 110, 115, 112, 59], value: ' ' },
    { key: [101, 111, 103, 111, 110, 59], value: 'ę' },
    { key: [101, 111, 112, 102, 59], value: '𝕖' },
    { key: [101, 112, 97, 114, 59], value: '⋕' },
    { key: [101, 112, 97, 114, 115, 108, 59], value: '⧣' },
    { key: [101, 112, 108, 117, 115, 59], value: '⩱' },
    { key: [101, 112, 115, 105, 59], value: 'ε' },
    { key: [101, 112, 115, 105, 108, 111, 110, 59], value: 'ε' },
    { key: [101, 112, 115, 105, 118, 59], value: 'ϵ' },
    { key: [101, 113, 99, 105, 114, 99, 59], value: '≖' },
    { key: [101, 113, 99, 111, 108, 111, 110, 59], value: '≕' },
    { key: [101, 113, 115, 105, 109, 59], value: '≂' },
    { key: [101, 113, 115, 108, 97, 110, 116, 103, 116, 114, 59], value: '⪖' },
    { key: [101, 113, 115, 108, 97, 110, 116, 108, 101, 115, 115, 59], value: '⪕' },
    { key: [101, 113, 117, 97, 108, 115, 59], value: '=' },
    { key: [101, 113, 117, 101, 115, 116, 59], value: '≟' },
    { key: [101, 113, 117, 105, 118, 59], value: '≡' },
    { key: [101, 113, 117, 105, 118, 68, 68, 59], value: '⩸' },
    { key: [101, 113, 118, 112, 97, 114, 115, 108, 59], value: '⧥' },
    { key: [101, 114, 68, 111, 116, 59], value: '≓' },
    { key: [101, 114, 97, 114, 114, 59], value: '⥱' },
    { key: [101, 115, 99, 114, 59], value: 'ℯ' },
    { key: [101, 115, 100, 111, 116, 59], value: '≐' },
    { key: [101, 115, 105, 109, 59], value: '≂' },
    { key: [101, 116, 97, 59], value: 'η' },
    { key: [101, 116, 104, 59], value: 'ð' },
    { key: [101, 117, 109, 108, 59], value: 'ë' },
    { key: [101, 117, 114, 111, 59], value: '€' },
    { key: [101, 120, 99, 108, 59], value: '!' },
    { key: [101, 120, 105, 115, 116, 59], value: '∃' },
    { key: [101, 120, 112, 101, 99, 116, 97, 116, 105, 111, 110, 59], value: 'ℰ' },
    { key: [101, 120, 112, 111, 110, 101, 110, 116, 105, 97, 108, 101, 59], value: 'ⅇ' },
    { key: [102, 97, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59], value: '≒' },
    { key: [102, 99, 121, 59], value: 'ф' },
    { key: [102, 101, 109, 97, 108, 101, 59], value: '♀' },
    { key: [102, 102, 105, 108, 105, 103, 59], value: 'ﬃ' },
    { key: [102, 102, 108, 105, 103, 59], value: 'ﬀ' },
    { key: [102, 102, 108, 108, 105, 103, 59], value: 'ﬄ' },
    { key: [102, 102, 114, 59], value: '𝔣' },
    { key: [102, 105, 108, 105, 103, 59], value: 'ﬁ' },
    { key: [102, 106, 108, 105, 103, 59], value: 'fj' },
    { key: [102, 108, 97, 116, 59], value: '♭' },
    { key: [102, 108, 108, 105, 103, 59], value: 'ﬂ' },
    { key: [102, 108, 116, 110, 115, 59], value: '▱' },
    { key: [102, 110, 111, 102, 59], value: 'ƒ' },
    { key: [102, 111, 112, 102, 59], value: '𝕗' },
    { key: [102, 111, 114, 97, 108, 108, 59], value: '∀' },
    { key: [102, 111, 114, 107, 59], value: '⋔' },
    { key: [102, 111, 114, 107, 118, 59], value: '⫙' },
    { key: [102, 112, 97, 114, 116, 105, 110, 116, 59], value: '⨍' },
    { key: [102, 114, 97, 99, 49, 50, 59], value: '½' },
    { key: [102, 114, 97, 99, 49, 51, 59], value: '⅓' },
    { key: [102, 114, 97, 99, 49, 52, 59], value: '¼' },
    { key: [102, 114, 97, 99, 49, 53, 59], value: '⅕' },
    { key: [102, 114, 97, 99, 49, 54, 59], value: '⅙' },
    { key: [102, 114, 97, 99, 49, 56, 59], value: '⅛' },
    { key: [102, 114, 97, 99, 50, 51, 59], value: '⅔' },
    { key: [102, 114, 97, 99, 50, 53, 59], value: '⅖' },
    { key: [102, 114, 97, 99, 51, 52, 59], value: '¾' },
    { key: [102, 114, 97, 99, 51, 53, 59], value: '⅗' },
    { key: [102, 114, 97, 99, 51, 56, 59], value: '⅜' },
    { key: [102, 114, 97, 99, 52, 53, 59], value: '⅘' },
    { key: [102, 114, 97, 99, 53, 54, 59], value: '⅚' },
    { key: [102, 114, 97, 99, 53, 56, 59], value: '⅝' },
    { key: [102, 114, 97, 99, 55, 56, 59], value: '⅞' },
    { key: [102, 114, 97, 115, 108, 59], value: '⁄' },
    { key: [102, 114, 111, 119, 110, 59], value: '⌢' },
    { key: [102, 115, 99, 114, 59], value: '𝒻' },
    { key: [103, 69, 59], value: '≧' },
    { key: [103, 69, 108, 59], value: '⪌' },
    { key: [103, 97, 99, 117, 116, 101, 59], value: 'ǵ' },
    { key: [103, 97, 109, 109, 97, 59], value: 'γ' },
    { key: [103, 97, 109, 109, 97, 100, 59], value: 'ϝ' },
    { key: [103, 97, 112, 59], value: '⪆' },
    { key: [103, 98, 114, 101, 118, 101, 59], value: 'ğ' },
    { key: [103, 99, 105, 114, 99, 59], value: 'ĝ' },
    { key: [103, 99, 121, 59], value: 'г' },
    { key: [103, 100, 111, 116, 59], value: 'ġ' },
    { key: [103, 101, 59], value: '≥' },
    { key: [103, 101, 108, 59], value: '⋛' },
    { key: [103, 101, 113, 59], value: '≥' },
    { key: [103, 101, 113, 113, 59], value: '≧' },
    { key: [103, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩾' },
    { key: [103, 101, 115, 59], value: '⩾' },
    { key: [103, 101, 115, 99, 99, 59], value: '⪩' },
    { key: [103, 101, 115, 100, 111, 116, 59], value: '⪀' },
    { key: [103, 101, 115, 100, 111, 116, 111, 59], value: '⪂' },
    { key: [103, 101, 115, 100, 111, 116, 111, 108, 59], value: '⪄' },
    { key: [103, 101, 115, 108, 59], value: '⋛︀' },
    { key: [103, 101, 115, 108, 101, 115, 59], value: '⪔' },
    { key: [103, 102, 114, 59], value: '𝔤' },
    { key: [103, 103, 59], value: '≫' },
    { key: [103, 103, 103, 59], value: '⋙' },
    { key: [103, 105, 109, 101, 108, 59], value: 'ℷ' },
    { key: [103, 106, 99, 121, 59], value: 'ѓ' },
    { key: [103, 108, 59], value: '≷' },
    { key: [103, 108, 69, 59], value: '⪒' },
    { key: [103, 108, 97, 59], value: '⪥' },
    { key: [103, 108, 106, 59], value: '⪤' },
    { key: [103, 110, 69, 59], value: '≩' },
    { key: [103, 110, 97, 112, 59], value: '⪊' },
    { key: [103, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪊' },
    { key: [103, 110, 101, 59], value: '⪈' },
    { key: [103, 110, 101, 113, 59], value: '⪈' },
    { key: [103, 110, 101, 113, 113, 59], value: '≩' },
    { key: [103, 110, 115, 105, 109, 59], value: '⋧' },
    { key: [103, 111, 112, 102, 59], value: '𝕘' },
    { key: [103, 114, 97, 118, 101, 59], value: '`' },
    { key: [103, 115, 99, 114, 59], value: 'ℊ' },
    { key: [103, 115, 105, 109, 59], value: '≳' },
    { key: [103, 115, 105, 109, 101, 59], value: '⪎' },
    { key: [103, 115, 105, 109, 108, 59], value: '⪐' },
    { key: [103, 116, 59], value: '>' },
    { key: [103, 116, 99, 99, 59], value: '⪧' },
    { key: [103, 116, 99, 105, 114, 59], value: '⩺' },
    { key: [103, 116, 100, 111, 116, 59], value: '⋗' },
    { key: [103, 116, 108, 80, 97, 114, 59], value: '⦕' },
    { key: [103, 116, 113, 117, 101, 115, 116, 59], value: '⩼' },
    { key: [103, 116, 114, 97, 112, 112, 114, 111, 120, 59], value: '⪆' },
    { key: [103, 116, 114, 97, 114, 114, 59], value: '⥸' },
    { key: [103, 116, 114, 100, 111, 116, 59], value: '⋗' },
    { key: [103, 116, 114, 101, 113, 108, 101, 115, 115, 59], value: '⋛' },
    { key: [103, 116, 114, 101, 113, 113, 108, 101, 115, 115, 59], value: '⪌' },
    { key: [103, 116, 114, 108, 101, 115, 115, 59], value: '≷' },
    { key: [103, 116, 114, 115, 105, 109, 59], value: '≳' },
    { key: [103, 118, 101, 114, 116, 110, 101, 113, 113, 59], value: '≩︀' },
    { key: [103, 118, 110, 69, 59], value: '≩︀' },
    { key: [104, 65, 114, 114, 59], value: '⇔' },
    { key: [104, 97, 105, 114, 115, 112, 59], value: ' ' },
    { key: [104, 97, 108, 102, 59], value: '½' },
    { key: [104, 97, 109, 105, 108, 116, 59], value: 'ℋ' },
    { key: [104, 97, 114, 100, 99, 121, 59], value: 'ъ' },
    { key: [104, 97, 114, 114, 59], value: '↔' },
    { key: [104, 97, 114, 114, 99, 105, 114, 59], value: '⥈' },
    { key: [104, 97, 114, 114, 119, 59], value: '↭' },
    { key: [104, 98, 97, 114, 59], value: 'ℏ' },
    { key: [104, 99, 105, 114, 99, 59], value: 'ĥ' },
    { key: [104, 101, 97, 114, 116, 115, 59], value: '♥' },
    { key: [104, 101, 97, 114, 116, 115, 117, 105, 116, 59], value: '♥' },
    { key: [104, 101, 108, 108, 105, 112, 59], value: '…' },
    { key: [104, 101, 114, 99, 111, 110, 59], value: '⊹' },
    { key: [104, 102, 114, 59], value: '𝔥' },
    { key: [104, 107, 115, 101, 97, 114, 111, 119, 59], value: '⤥' },
    { key: [104, 107, 115, 119, 97, 114, 111, 119, 59], value: '⤦' },
    { key: [104, 111, 97, 114, 114, 59], value: '⇿' },
    { key: [104, 111, 109, 116, 104, 116, 59], value: '∻' },
    { key: [104, 111, 111, 107, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '↩' },
    { key: [104, 111, 111, 107, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↪' },
    { key: [104, 111, 112, 102, 59], value: '𝕙' },
    { key: [104, 111, 114, 98, 97, 114, 59], value: '―' },
    { key: [104, 115, 99, 114, 59], value: '𝒽' },
    { key: [104, 115, 108, 97, 115, 104, 59], value: 'ℏ' },
    { key: [104, 115, 116, 114, 111, 107, 59], value: 'ħ' },
    { key: [104, 121, 98, 117, 108, 108, 59], value: '⁃' },
    { key: [104, 121, 112, 104, 101, 110, 59], value: '‐' },
    { key: [105, 97, 99, 117, 116, 101, 59], value: 'í' },
    { key: [105, 99, 59], value: '⁣' },
    { key: [105, 99, 105, 114, 99, 59], value: 'î' },
    { key: [105, 99, 121, 59], value: 'и' },
    { key: [105, 101, 99, 121, 59], value: 'е' },
    { key: [105, 101, 120, 99, 108, 59], value: '¡' },
    { key: [105, 102, 102, 59], value: '⇔' },
    { key: [105, 102, 114, 59], value: '𝔦' },
    { key: [105, 103, 114, 97, 118, 101, 59], value: 'ì' },
    { key: [105, 105, 59], value: 'ⅈ' },
    { key: [105, 105, 105, 105, 110, 116, 59], value: '⨌' },
    { key: [105, 105, 105, 110, 116, 59], value: '∭' },
    { key: [105, 105, 110, 102, 105, 110, 59], value: '⧜' },
    { key: [105, 105, 111, 116, 97, 59], value: '℩' },
    { key: [105, 106, 108, 105, 103, 59], value: 'ĳ' },
    { key: [105, 109, 97, 99, 114, 59], value: 'ī' },
    { key: [105, 109, 97, 103, 101, 59], value: 'ℑ' },
    { key: [105, 109, 97, 103, 108, 105, 110, 101, 59], value: 'ℐ' },
    { key: [105, 109, 97, 103, 112, 97, 114, 116, 59], value: 'ℑ' },
    { key: [105, 109, 97, 116, 104, 59], value: 'ı' },
    { key: [105, 109, 111, 102, 59], value: '⊷' },
    { key: [105, 109, 112, 101, 100, 59], value: 'Ƶ' },
    { key: [105, 110, 59], value: '∈' },
    { key: [105, 110, 99, 97, 114, 101, 59], value: '℅' },
    { key: [105, 110, 102, 105, 110, 59], value: '∞' },
    { key: [105, 110, 102, 105, 110, 116, 105, 101, 59], value: '⧝' },
    { key: [105, 110, 111, 100, 111, 116, 59], value: 'ı' },
    { key: [105, 110, 116, 59], value: '∫' },
    { key: [105, 110, 116, 99, 97, 108, 59], value: '⊺' },
    { key: [105, 110, 116, 101, 103, 101, 114, 115, 59], value: 'ℤ' },
    { key: [105, 110, 116, 101, 114, 99, 97, 108, 59], value: '⊺' },
    { key: [105, 110, 116, 108, 97, 114, 104, 107, 59], value: '⨗' },
    { key: [105, 110, 116, 112, 114, 111, 100, 59], value: '⨼' },
    { key: [105, 111, 99, 121, 59], value: 'ё' },
    { key: [105, 111, 103, 111, 110, 59], value: 'į' },
    { key: [105, 111, 112, 102, 59], value: '𝕚' },
    { key: [105, 111, 116, 97, 59], value: 'ι' },
    { key: [105, 112, 114, 111, 100, 59], value: '⨼' },
    { key: [105, 113, 117, 101, 115, 116, 59], value: '¿' },
    { key: [105, 115, 99, 114, 59], value: '𝒾' },
    { key: [105, 115, 105, 110, 59], value: '∈' },
    { key: [105, 115, 105, 110, 69, 59], value: '⋹' },
    { key: [105, 115, 105, 110, 100, 111, 116, 59], value: '⋵' },
    { key: [105, 115, 105, 110, 115, 59], value: '⋴' },
    { key: [105, 115, 105, 110, 115, 118, 59], value: '⋳' },
    { key: [105, 115, 105, 110, 118, 59], value: '∈' },
    { key: [105, 116, 59], value: '⁢' },
    { key: [105, 116, 105, 108, 100, 101, 59], value: 'ĩ' },
    { key: [105, 117, 107, 99, 121, 59], value: 'і' },
    { key: [105, 117, 109, 108, 59], value: 'ï' },
    { key: [106, 99, 105, 114, 99, 59], value: 'ĵ' },
    { key: [106, 99, 121, 59], value: 'й' },
    { key: [106, 102, 114, 59], value: '𝔧' },
    { key: [106, 109, 97, 116, 104, 59], value: 'ȷ' },
    { key: [106, 111, 112, 102, 59], value: '𝕛' },
    { key: [106, 115, 99, 114, 59], value: '𝒿' },
    { key: [106, 115, 101, 114, 99, 121, 59], value: 'ј' },
    { key: [106, 117, 107, 99, 121, 59], value: 'є' },
    { key: [107, 97, 112, 112, 97, 59], value: 'κ' },
    { key: [107, 97, 112, 112, 97, 118, 59], value: 'ϰ' },
    { key: [107, 99, 101, 100, 105, 108, 59], value: 'ķ' },
    { key: [107, 99, 121, 59], value: 'к' },
    { key: [107, 102, 114, 59], value: '𝔨' },
    { key: [107, 103, 114, 101, 101, 110, 59], value: 'ĸ' },
    { key: [107, 104, 99, 121, 59], value: 'х' },
    { key: [107, 106, 99, 121, 59], value: 'ќ' },
    { key: [107, 111, 112, 102, 59], value: '𝕜' },
    { key: [107, 115, 99, 114, 59], value: '𝓀' },
    { key: [108, 65, 97, 114, 114, 59], value: '⇚' },
    { key: [108, 65, 114, 114, 59], value: '⇐' },
    { key: [108, 65, 116, 97, 105, 108, 59], value: '⤛' },
    { key: [108, 66, 97, 114, 114, 59], value: '⤎' },
    { key: [108, 69, 59], value: '≦' },
    { key: [108, 69, 103, 59], value: '⪋' },
    { key: [108, 72, 97, 114, 59], value: '⥢' },
    { key: [108, 97, 99, 117, 116, 101, 59], value: 'ĺ' },
    { key: [108, 97, 101, 109, 112, 116, 121, 118, 59], value: '⦴' },
    { key: [108, 97, 103, 114, 97, 110, 59], value: 'ℒ' },
    { key: [108, 97, 109, 98, 100, 97, 59], value: 'λ' },
    { key: [108, 97, 110, 103, 59], value: '⟨' },
    { key: [108, 97, 110, 103, 100, 59], value: '⦑' },
    { key: [108, 97, 110, 103, 108, 101, 59], value: '⟨' },
    { key: [108, 97, 112, 59], value: '⪅' },
    { key: [108, 97, 113, 117, 111, 59], value: '«' },
    { key: [108, 97, 114, 114, 59], value: '←' },
    { key: [108, 97, 114, 114, 98, 59], value: '⇤' },
    { key: [108, 97, 114, 114, 98, 102, 115, 59], value: '⤟' },
    { key: [108, 97, 114, 114, 102, 115, 59], value: '⤝' },
    { key: [108, 97, 114, 114, 104, 107, 59], value: '↩' },
    { key: [108, 97, 114, 114, 108, 112, 59], value: '↫' },
    { key: [108, 97, 114, 114, 112, 108, 59], value: '⤹' },
    { key: [108, 97, 114, 114, 115, 105, 109, 59], value: '⥳' },
    { key: [108, 97, 114, 114, 116, 108, 59], value: '↢' },
    { key: [108, 97, 116, 59], value: '⪫' },
    { key: [108, 97, 116, 97, 105, 108, 59], value: '⤙' },
    { key: [108, 97, 116, 101, 59], value: '⪭' },
    { key: [108, 97, 116, 101, 115, 59], value: '⪭︀' },
    { key: [108, 98, 97, 114, 114, 59], value: '⤌' },
    { key: [108, 98, 98, 114, 107, 59], value: '❲' },
    { key: [108, 98, 114, 97, 99, 101, 59], value: '{ ' },
    { key: [108, 98, 114, 97, 99, 107, 59], value: '[' },
    { key: [108, 98, 114, 107, 101, 59], value: '⦋' },
    { key: [108, 98, 114, 107, 115, 108, 100, 59], value: '⦏' },
    { key: [108, 98, 114, 107, 115, 108, 117, 59], value: '⦍' },
    { key: [108, 99, 97, 114, 111, 110, 59], value: 'ľ' },
    { key: [108, 99, 101, 100, 105, 108, 59], value: 'ļ' },
    { key: [108, 99, 101, 105, 108, 59], value: '⌈' },
    { key: [108, 99, 117, 98, 59], value: '{ ' },
    { key: [108, 99, 121, 59], value: 'л' },
    { key: [108, 100, 99, 97, 59], value: '⤶' },
    { key: [108, 100, 113, 117, 111, 59], value: '“' },
    { key: [108, 100, 113, 117, 111, 114, 59], value: '„' },
    { key: [108, 100, 114, 100, 104, 97, 114, 59], value: '⥧' },
    { key: [108, 100, 114, 117, 115, 104, 97, 114, 59], value: '⥋' },
    { key: [108, 100, 115, 104, 59], value: '↲' },
    { key: [108, 101, 59], value: '≤' },
    { key: [108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '←' },
    { key: [108, 101, 102, 116, 97, 114, 114, 111, 119, 116, 97, 105, 108, 59], value: '↢' },
    { key: [108, 101, 102, 116, 104, 97, 114, 112, 111, 111, 110, 100, 111, 119, 110, 59], value: '↽' },
    { key: [108, 101, 102, 116, 104, 97, 114, 112, 111, 111, 110, 117, 112, 59], value: '↼' },
    { key: [108, 101, 102, 116, 108, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇇' },
    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↔' },
    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇆' },
    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 104, 97, 114, 112, 111, 111, 110, 115, 59], value: '⇋' },
    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 115, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59], value: '↭' },
    { key: [108, 101, 102, 116, 116, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59], value: '⋋' },
    { key: [108, 101, 103, 59], value: '⋚' },
    { key: [108, 101, 113, 59], value: '≤' },
    { key: [108, 101, 113, 113, 59], value: '≦' },
    { key: [108, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩽' },
    { key: [108, 101, 115, 59], value: '⩽' },
    { key: [108, 101, 115, 99, 99, 59], value: '⪨' },
    { key: [108, 101, 115, 100, 111, 116, 59], value: '⩿' },
    { key: [108, 101, 115, 100, 111, 116, 111, 59], value: '⪁' },
    { key: [108, 101, 115, 100, 111, 116, 111, 114, 59], value: '⪃' },
    { key: [108, 101, 115, 103, 59], value: '⋚︀' },
    { key: [108, 101, 115, 103, 101, 115, 59], value: '⪓' },
    { key: [108, 101, 115, 115, 97, 112, 112, 114, 111, 120, 59], value: '⪅' },
    { key: [108, 101, 115, 115, 100, 111, 116, 59], value: '⋖' },
    { key: [108, 101, 115, 115, 101, 113, 103, 116, 114, 59], value: '⋚' },
    { key: [108, 101, 115, 115, 101, 113, 113, 103, 116, 114, 59], value: '⪋' },
    { key: [108, 101, 115, 115, 103, 116, 114, 59], value: '≶' },
    { key: [108, 101, 115, 115, 115, 105, 109, 59], value: '≲' },
    { key: [108, 102, 105, 115, 104, 116, 59], value: '⥼' },
    { key: [108, 102, 108, 111, 111, 114, 59], value: '⌊' },
    { key: [108, 102, 114, 59], value: '𝔩' },
    { key: [108, 103, 59], value: '≶' },
    { key: [108, 103, 69, 59], value: '⪑' },
    { key: [108, 104, 97, 114, 100, 59], value: '↽' },
    { key: [108, 104, 97, 114, 117, 59], value: '↼' },
    { key: [108, 104, 97, 114, 117, 108, 59], value: '⥪' },
    { key: [108, 104, 98, 108, 107, 59], value: '▄' },
    { key: [108, 106, 99, 121, 59], value: 'љ' },
    { key: [108, 108, 59], value: '≪' },
    { key: [108, 108, 97, 114, 114, 59], value: '⇇' },
    { key: [108, 108, 99, 111, 114, 110, 101, 114, 59], value: '⌞' },
    { key: [108, 108, 104, 97, 114, 100, 59], value: '⥫' },
    { key: [108, 108, 116, 114, 105, 59], value: '◺' },
    { key: [108, 109, 105, 100, 111, 116, 59], value: 'ŀ' },
    { key: [108, 109, 111, 117, 115, 116, 59], value: '⎰' },
    { key: [108, 109, 111, 117, 115, 116, 97, 99, 104, 101, 59], value: '⎰' },
    { key: [108, 110, 69, 59], value: '≨' },
    { key: [108, 110, 97, 112, 59], value: '⪉' },
    { key: [108, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪉' },
    { key: [108, 110, 101, 59], value: '⪇' },
    { key: [108, 110, 101, 113, 59], value: '⪇' },
    { key: [108, 110, 101, 113, 113, 59], value: '≨' },
    { key: [108, 110, 115, 105, 109, 59], value: '⋦' },
    { key: [108, 111, 97, 110, 103, 59], value: '⟬' },
    { key: [108, 111, 97, 114, 114, 59], value: '⇽' },
    { key: [108, 111, 98, 114, 107, 59], value: '⟦' },
    { key: [108, 111, 110, 103, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⟵' },
    { key: [108, 111, 110, 103, 108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟷' },
    { key: [108, 111, 110, 103, 109, 97, 112, 115, 116, 111, 59], value: '⟼' },
    { key: [108, 111, 110, 103, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟶' },
    { key: [108, 111, 111, 112, 97, 114, 114, 111, 119, 108, 101, 102, 116, 59], value: '↫' },
    { key: [108, 111, 111, 112, 97, 114, 114, 111, 119, 114, 105, 103, 104, 116, 59], value: '↬' },
    { key: [108, 111, 112, 97, 114, 59], value: '⦅' },
    { key: [108, 111, 112, 102, 59], value: '𝕝' },
    { key: [108, 111, 112, 108, 117, 115, 59], value: '⨭' },
    { key: [108, 111, 116, 105, 109, 101, 115, 59], value: '⨴' },
    { key: [108, 111, 119, 97, 115, 116, 59], value: '∗' },
    { key: [108, 111, 119, 98, 97, 114, 59], value: '_' },
    { key: [108, 111, 122, 59], value: '◊' },
    { key: [108, 111, 122, 101, 110, 103, 101, 59], value: '◊' },
    { key: [108, 111, 122, 102, 59], value: '⧫' },
    { key: [108, 112, 97, 114, 59], value: '(' },
    { key: [108, 112, 97, 114, 108, 116, 59], value: '⦓' },
    { key: [108, 114, 97, 114, 114, 59], value: '⇆' },
    { key: [108, 114, 99, 111, 114, 110, 101, 114, 59], value: '⌟' },
    { key: [108, 114, 104, 97, 114, 59], value: '⇋' },
    { key: [108, 114, 104, 97, 114, 100, 59], value: '⥭' },
    { key: [108, 114, 109, 59], value: '‎' },
    { key: [108, 114, 116, 114, 105, 59], value: '⊿' },
    { key: [108, 115, 97, 113, 117, 111, 59], value: '‹' },
    { key: [108, 115, 99, 114, 59], value: '𝓁' },
    { key: [108, 115, 104, 59], value: '↰' },
    { key: [108, 115, 105, 109, 59], value: '≲' },
    { key: [108, 115, 105, 109, 101, 59], value: '⪍' },
    { key: [108, 115, 105, 109, 103, 59], value: '⪏' },
    { key: [108, 115, 113, 98, 59], value: '[' },
    { key: [108, 115, 113, 117, 111, 59], value: '‘' },
    { key: [108, 115, 113, 117, 111, 114, 59], value: '‚' },
    { key: [108, 115, 116, 114, 111, 107, 59], value: 'ł' },
    { key: [108, 116, 59], value: '<' },
    { key: [108, 116, 99, 99, 59], value: '⪦' },
    { key: [108, 116, 99, 105, 114, 59], value: '⩹' },
    { key: [108, 116, 100, 111, 116, 59], value: '⋖' },
    { key: [108, 116, 104, 114, 101, 101, 59], value: '⋋' },
    { key: [108, 116, 105, 109, 101, 115, 59], value: '⋉' },
    { key: [108, 116, 108, 97, 114, 114, 59], value: '⥶' },
    { key: [108, 116, 113, 117, 101, 115, 116, 59], value: '⩻' },
    { key: [108, 116, 114, 80, 97, 114, 59], value: '⦖' },
    { key: [108, 116, 114, 105, 59], value: '◃' },
    { key: [108, 116, 114, 105, 101, 59], value: '⊴' },
    { key: [108, 116, 114, 105, 102, 59], value: '◂' },
    { key: [108, 117, 114, 100, 115, 104, 97, 114, 59], value: '⥊' },
    { key: [108, 117, 114, 117, 104, 97, 114, 59], value: '⥦' },
    { key: [108, 118, 101, 114, 116, 110, 101, 113, 113, 59], value: '≨︀' },
    { key: [108, 118, 110, 69, 59], value: '≨︀' },
    { key: [109, 68, 68, 111, 116, 59], value: '∺' },
    { key: [109, 97, 99, 114, 59], value: '¯' },
    { key: [109, 97, 108, 101, 59], value: '♂' },
    { key: [109, 97, 108, 116, 59], value: '✠' },
    { key: [109, 97, 108, 116, 101, 115, 101, 59], value: '✠' },
    { key: [109, 97, 112, 59], value: '↦' },
    { key: [109, 97, 112, 115, 116, 111, 59], value: '↦' },
    { key: [109, 97, 112, 115, 116, 111, 100, 111, 119, 110, 59], value: '↧' },
    { key: [109, 97, 112, 115, 116, 111, 108, 101, 102, 116, 59], value: '↤' },
    { key: [109, 97, 112, 115, 116, 111, 117, 112, 59], value: '↥' },
    { key: [109, 97, 114, 107, 101, 114, 59], value: '▮' },
    { key: [109, 99, 111, 109, 109, 97, 59], value: '⨩' },
    { key: [109, 99, 121, 59], value: 'м' },
    { key: [109, 100, 97, 115, 104, 59], value: '—' },
    { key: [109, 101, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59], value: '∡' },
    { key: [109, 102, 114, 59], value: '𝔪' },
    { key: [109, 104, 111, 59], value: '℧' },
    { key: [109, 105, 99, 114, 111, 59], value: 'µ' },
    { key: [109, 105, 100, 59], value: '∣' },
    { key: [109, 105, 100, 97, 115, 116, 59], value: '*' },
    { key: [109, 105, 100, 99, 105, 114, 59], value: '⫰' },
    { key: [109, 105, 100, 100, 111, 116, 59], value: '·' },
    { key: [109, 105, 110, 117, 115, 59], value: '−' },
    { key: [109, 105, 110, 117, 115, 98, 59], value: '⊟' },
    { key: [109, 105, 110, 117, 115, 100, 59], value: '∸' },
    { key: [109, 105, 110, 117, 115, 100, 117, 59], value: '⨪' },
    { key: [109, 108, 99, 112, 59], value: '⫛' },
    { key: [109, 108, 100, 114, 59], value: '…' },
    { key: [109, 110, 112, 108, 117, 115, 59], value: '∓' },
    { key: [109, 111, 100, 101, 108, 115, 59], value: '⊧' },
    { key: [109, 111, 112, 102, 59], value: '𝕞' },
    { key: [109, 112, 59], value: '∓' },
    { key: [109, 115, 99, 114, 59], value: '𝓂' },
    { key: [109, 115, 116, 112, 111, 115, 59], value: '∾' },
    { key: [109, 117, 59], value: 'μ' },
    { key: [109, 117, 108, 116, 105, 109, 97, 112, 59], value: '⊸' },
    { key: [109, 117, 109, 97, 112, 59], value: '⊸' },
    { key: [110, 71, 103, 59], value: '⋙̸' },
    { key: [110, 71, 116, 59], value: '≫⃒' },
    { key: [110, 71, 116, 118, 59], value: '≫̸' },
    { key: [110, 76, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⇍' },
    { key: [110, 76, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇎' },
    { key: [110, 76, 108, 59], value: '⋘̸' },
    { key: [110, 76, 116, 59], value: '≪⃒' },
    { key: [110, 76, 116, 118, 59], value: '≪̸' },
    { key: [110, 82, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇏' },
    { key: [110, 86, 68, 97, 115, 104, 59], value: '⊯' },
    { key: [110, 86, 100, 97, 115, 104, 59], value: '⊮' },
    { key: [110, 97, 98, 108, 97, 59], value: '∇' },
    { key: [110, 97, 99, 117, 116, 101, 59], value: 'ń' },
    { key: [110, 97, 110, 103, 59], value: '∠⃒' },
    { key: [110, 97, 112, 59], value: '≉' },
    { key: [110, 97, 112, 69, 59], value: '⩰̸' },
    { key: [110, 97, 112, 105, 100, 59], value: '≋̸' },
    { key: [110, 97, 112, 111, 115, 59], value: 'ŉ' },
    { key: [110, 97, 112, 112, 114, 111, 120, 59], value: '≉' },
    { key: [110, 97, 116, 117, 114, 59], value: '♮' },
    { key: [110, 97, 116, 117, 114, 97, 108, 59], value: '♮' },
    { key: [110, 97, 116, 117, 114, 97, 108, 115, 59], value: 'ℕ' },
    { key: [110, 98, 115, 112, 59], value: ' ' },
    { key: [110, 98, 117, 109, 112, 59], value: '≎̸' },
    { key: [110, 98, 117, 109, 112, 101, 59], value: '≏̸' },
    { key: [110, 99, 97, 112, 59], value: '⩃' },
    { key: [110, 99, 97, 114, 111, 110, 59], value: 'ň' },
    { key: [110, 99, 101, 100, 105, 108, 59], value: 'ņ' },
    { key: [110, 99, 111, 110, 103, 59], value: '≇' },
    { key: [110, 99, 111, 110, 103, 100, 111, 116, 59], value: '⩭̸' },
    { key: [110, 99, 117, 112, 59], value: '⩂' },
    { key: [110, 99, 121, 59], value: 'н' },
    { key: [110, 100, 97, 115, 104, 59], value: '–' },
    { key: [110, 101, 59], value: '≠' },
    { key: [110, 101, 65, 114, 114, 59], value: '⇗' },
    { key: [110, 101, 97, 114, 104, 107, 59], value: '⤤' },
    { key: [110, 101, 97, 114, 114, 59], value: '↗' },
    { key: [110, 101, 97, 114, 114, 111, 119, 59], value: '↗' },
    { key: [110, 101, 100, 111, 116, 59], value: '≐̸' },
    { key: [110, 101, 113, 117, 105, 118, 59], value: '≢' },
    { key: [110, 101, 115, 101, 97, 114, 59], value: '⤨' },
    { key: [110, 101, 115, 105, 109, 59], value: '≂̸' },
    { key: [110, 101, 120, 105, 115, 116, 59], value: '∄' },
    { key: [110, 101, 120, 105, 115, 116, 115, 59], value: '∄' },
    { key: [110, 102, 114, 59], value: '𝔫' },
    { key: [110, 103, 69, 59], value: '≧̸' },
    { key: [110, 103, 101, 59], value: '≱' },
    { key: [110, 103, 101, 113, 59], value: '≱' },
    { key: [110, 103, 101, 113, 113, 59], value: '≧̸' },
    { key: [110, 103, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩾̸' },
    { key: [110, 103, 101, 115, 59], value: '⩾̸' },
    { key: [110, 103, 115, 105, 109, 59], value: '≵' },
    { key: [110, 103, 116, 59], value: '≯' },
    { key: [110, 103, 116, 114, 59], value: '≯' },
    { key: [110, 104, 65, 114, 114, 59], value: '⇎' },
    { key: [110, 104, 97, 114, 114, 59], value: '↮' },
    { key: [110, 104, 112, 97, 114, 59], value: '⫲' },
    { key: [110, 105, 59], value: '∋' },
    { key: [110, 105, 115, 59], value: '⋼' },
    { key: [110, 105, 115, 100, 59], value: '⋺' },
    { key: [110, 105, 118, 59], value: '∋' },
    { key: [110, 106, 99, 121, 59], value: 'њ' },
    { key: [110, 108, 65, 114, 114, 59], value: '⇍' },
    { key: [110, 108, 69, 59], value: '≦̸' },
    { key: [110, 108, 97, 114, 114, 59], value: '↚' },
    { key: [110, 108, 100, 114, 59], value: '‥' },
    { key: [110, 108, 101, 59], value: '≰' },
    { key: [110, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '↚' },
    { key: [110, 108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↮' },
    { key: [110, 108, 101, 113, 59], value: '≰' },
    { key: [110, 108, 101, 113, 113, 59], value: '≦̸' },
    { key: [110, 108, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩽̸' },
    { key: [110, 108, 101, 115, 59], value: '⩽̸' },
    { key: [110, 108, 101, 115, 115, 59], value: '≮' },
    { key: [110, 108, 115, 105, 109, 59], value: '≴' },
    { key: [110, 108, 116, 59], value: '≮' },
    { key: [110, 108, 116, 114, 105, 59], value: '⋪' },
    { key: [110, 108, 116, 114, 105, 101, 59], value: '⋬' },
    { key: [110, 109, 105, 100, 59], value: '∤' },
    { key: [110, 111, 112, 102, 59], value: '𝕟' },
    { key: [110, 111, 116, 59], value: '¬' },
    { key: [110, 111, 116, 105, 110, 59], value: '∉' },
    { key: [110, 111, 116, 105, 110, 69, 59], value: '⋹̸' },
    { key: [110, 111, 116, 105, 110, 100, 111, 116, 59], value: '⋵̸' },
    { key: [110, 111, 116, 105, 110, 118, 97, 59], value: '∉' },
    { key: [110, 111, 116, 105, 110, 118, 98, 59], value: '⋷' },
    { key: [110, 111, 116, 105, 110, 118, 99, 59], value: '⋶' },
    { key: [110, 111, 116, 110, 105, 59], value: '∌' },
    { key: [110, 111, 116, 110, 105, 118, 97, 59], value: '∌' },
    { key: [110, 111, 116, 110, 105, 118, 98, 59], value: '⋾' },
    { key: [110, 111, 116, 110, 105, 118, 99, 59], value: '⋽' },
    { key: [110, 112, 97, 114, 59], value: '∦' },
    { key: [110, 112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∦' },
    { key: [110, 112, 97, 114, 115, 108, 59], value: '⫽⃥' },
    { key: [110, 112, 97, 114, 116, 59], value: '∂̸' },
    { key: [110, 112, 111, 108, 105, 110, 116, 59], value: '⨔' },
    { key: [110, 112, 114, 59], value: '⊀' },
    { key: [110, 112, 114, 99, 117, 101, 59], value: '⋠' },
    { key: [110, 112, 114, 101, 59], value: '⪯̸' },
    { key: [110, 112, 114, 101, 99, 59], value: '⊀' },
    { key: [110, 112, 114, 101, 99, 101, 113, 59], value: '⪯̸' },
    { key: [110, 114, 65, 114, 114, 59], value: '⇏' },
    { key: [110, 114, 97, 114, 114, 59], value: '↛' },
    { key: [110, 114, 97, 114, 114, 99, 59], value: '⤳̸' },
    { key: [110, 114, 97, 114, 114, 119, 59], value: '↝̸' },
    { key: [110, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↛' },
    { key: [110, 114, 116, 114, 105, 59], value: '⋫' },
    { key: [110, 114, 116, 114, 105, 101, 59], value: '⋭' },
    { key: [110, 115, 99, 59], value: '⊁' },
    { key: [110, 115, 99, 99, 117, 101, 59], value: '⋡' },
    { key: [110, 115, 99, 101, 59], value: '⪰̸' },
    { key: [110, 115, 99, 114, 59], value: '𝓃' },
    { key: [110, 115, 104, 111, 114, 116, 109, 105, 100, 59], value: '∤' },
    { key: [110, 115, 104, 111, 114, 116, 112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∦' },
    { key: [110, 115, 105, 109, 59], value: '≁' },
    { key: [110, 115, 105, 109, 101, 59], value: '≄' },
    { key: [110, 115, 105, 109, 101, 113, 59], value: '≄' },
    { key: [110, 115, 109, 105, 100, 59], value: '∤' },
    { key: [110, 115, 112, 97, 114, 59], value: '∦' },
    { key: [110, 115, 113, 115, 117, 98, 101, 59], value: '⋢' },
    { key: [110, 115, 113, 115, 117, 112, 101, 59], value: '⋣' },
    { key: [110, 115, 117, 98, 59], value: '⊄' },
    { key: [110, 115, 117, 98, 69, 59], value: '⫅̸' },
    { key: [110, 115, 117, 98, 101, 59], value: '⊈' },
    { key: [110, 115, 117, 98, 115, 101, 116, 59], value: '⊂⃒' },
    { key: [110, 115, 117, 98, 115, 101, 116, 101, 113, 59], value: '⊈' },
    { key: [110, 115, 117, 98, 115, 101, 116, 101, 113, 113, 59], value: '⫅̸' },
    { key: [110, 115, 117, 99, 99, 59], value: '⊁' },
    { key: [110, 115, 117, 99, 99, 101, 113, 59], value: '⪰̸' },
    { key: [110, 115, 117, 112, 59], value: '⊅' },
    { key: [110, 115, 117, 112, 69, 59], value: '⫆̸' },
    { key: [110, 115, 117, 112, 101, 59], value: '⊉' },
    { key: [110, 115, 117, 112, 115, 101, 116, 59], value: '⊃⃒' },
    { key: [110, 115, 117, 112, 115, 101, 116, 101, 113, 59], value: '⊉' },
    { key: [110, 115, 117, 112, 115, 101, 116, 101, 113, 113, 59], value: '⫆̸' },
    { key: [110, 116, 103, 108, 59], value: '≹' },
    { key: [110, 116, 105, 108, 100, 101, 59], value: 'ñ' },
    { key: [110, 116, 108, 103, 59], value: '≸' },
    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '⋪' },
    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 101, 113, 59], value: '⋬' },
    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '⋫' },
    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 101, 113, 59], value: '⋭' },
    { key: [110, 117, 59], value: 'ν' },
    { key: [110, 117, 109, 59], value: '#' },
    { key: [110, 117, 109, 101, 114, 111, 59], value: '№' },
    { key: [110, 117, 109, 115, 112, 59], value: ' ' },
    { key: [110, 118, 68, 97, 115, 104, 59], value: '⊭' },
    { key: [110, 118, 72, 97, 114, 114, 59], value: '⤄' },
    { key: [110, 118, 97, 112, 59], value: '≍⃒' },
    { key: [110, 118, 100, 97, 115, 104, 59], value: '⊬' },
    { key: [110, 118, 103, 101, 59], value: '≥⃒' },
    { key: [110, 118, 103, 116, 59], value: '>⃒' },
    { key: [110, 118, 105, 110, 102, 105, 110, 59], value: '⧞' },
    { key: [110, 118, 108, 65, 114, 114, 59], value: '⤂' },
    { key: [110, 118, 108, 101, 59], value: '≤⃒' },
    { key: [110, 118, 108, 116, 59], value: '<⃒' },
    { key: [110, 118, 108, 116, 114, 105, 101, 59], value: '⊴⃒' },
    { key: [110, 118, 114, 65, 114, 114, 59], value: '⤃' },
    { key: [110, 118, 114, 116, 114, 105, 101, 59], value: '⊵⃒' },
    { key: [110, 118, 115, 105, 109, 59], value: '∼⃒' },
    { key: [110, 119, 65, 114, 114, 59], value: '⇖' },
    { key: [110, 119, 97, 114, 104, 107, 59], value: '⤣' },
    { key: [110, 119, 97, 114, 114, 59], value: '↖' },
    { key: [110, 119, 97, 114, 114, 111, 119, 59], value: '↖' },
    { key: [110, 119, 110, 101, 97, 114, 59], value: '⤧' },
    { key: [111, 83, 59], value: 'Ⓢ' },
    { key: [111, 97, 99, 117, 116, 101, 59], value: 'ó' },
    { key: [111, 97, 115, 116, 59], value: '⊛' },
    { key: [111, 99, 105, 114, 59], value: '⊚' },
    { key: [111, 99, 105, 114, 99, 59], value: 'ô' },
    { key: [111, 99, 121, 59], value: 'о' },
    { key: [111, 100, 97, 115, 104, 59], value: '⊝' },
    { key: [111, 100, 98, 108, 97, 99, 59], value: 'ő' },
    { key: [111, 100, 105, 118, 59], value: '⨸' },
    { key: [111, 100, 111, 116, 59], value: '⊙' },
    { key: [111, 100, 115, 111, 108, 100, 59], value: '⦼' },
    { key: [111, 101, 108, 105, 103, 59], value: 'œ' },
    { key: [111, 102, 99, 105, 114, 59], value: '⦿' },
    { key: [111, 102, 114, 59], value: '𝔬' },
    { key: [111, 103, 111, 110, 59], value: '˛' },
    { key: [111, 103, 114, 97, 118, 101, 59], value: 'ò' },
    { key: [111, 103, 116, 59], value: '⧁' },
    { key: [111, 104, 98, 97, 114, 59], value: '⦵' },
    { key: [111, 104, 109, 59], value: 'Ω' },
    { key: [111, 105, 110, 116, 59], value: '∮' },
    { key: [111, 108, 97, 114, 114, 59], value: '↺' },
    { key: [111, 108, 99, 105, 114, 59], value: '⦾' },
    { key: [111, 108, 99, 114, 111, 115, 115, 59], value: '⦻' },
    { key: [111, 108, 105, 110, 101, 59], value: '‾' },
    { key: [111, 108, 116, 59], value: '⧀' },
    { key: [111, 109, 97, 99, 114, 59], value: 'ō' },
    { key: [111, 109, 101, 103, 97, 59], value: 'ω' },
    { key: [111, 109, 105, 99, 114, 111, 110, 59], value: 'ο' },
    { key: [111, 109, 105, 100, 59], value: '⦶' },
    { key: [111, 109, 105, 110, 117, 115, 59], value: '⊖' },
    { key: [111, 111, 112, 102, 59], value: '𝕠' },
    { key: [111, 112, 97, 114, 59], value: '⦷' },
    { key: [111, 112, 101, 114, 112, 59], value: '⦹' },
    { key: [111, 112, 108, 117, 115, 59], value: '⊕' },
    { key: [111, 114, 59], value: '∨' },
    { key: [111, 114, 97, 114, 114, 59], value: '↻' },
    { key: [111, 114, 100, 59], value: '⩝' },
    { key: [111, 114, 100, 101, 114, 59], value: 'ℴ' },
    { key: [111, 114, 100, 101, 114, 111, 102, 59], value: 'ℴ' },
    { key: [111, 114, 100, 102, 59], value: 'ª' },
    { key: [111, 114, 100, 109, 59], value: 'º' },
    { key: [111, 114, 105, 103, 111, 102, 59], value: '⊶' },
    { key: [111, 114, 111, 114, 59], value: '⩖' },
    { key: [111, 114, 115, 108, 111, 112, 101, 59], value: '⩗' },
    { key: [111, 114, 118, 59], value: '⩛' },
    { key: [111, 115, 99, 114, 59], value: 'ℴ' },
    { key: [111, 115, 108, 97, 115, 104, 59], value: 'ø' },
    { key: [111, 115, 111, 108, 59], value: '⊘' },
    { key: [111, 116, 105, 108, 100, 101, 59], value: 'õ' },
    { key: [111, 116, 105, 109, 101, 115, 59], value: '⊗' },
    { key: [111, 116, 105, 109, 101, 115, 97, 115, 59], value: '⨶' },
    { key: [111, 117, 109, 108, 59], value: 'ö' },
    { key: [111, 118, 98, 97, 114, 59], value: '⌽' },
    { key: [112, 97, 114, 59], value: '∥' },
    { key: [112, 97, 114, 97, 59], value: '¶' },
    { key: [112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∥' },
    { key: [112, 97, 114, 115, 105, 109, 59], value: '⫳' },
    { key: [112, 97, 114, 115, 108, 59], value: '⫽' },
    { key: [112, 97, 114, 116, 59], value: '∂' },
    { key: [112, 99, 121, 59], value: 'п' },
    { key: [112, 101, 114, 99, 110, 116, 59], value: '%' },
    { key: [112, 101, 114, 105, 111, 100, 59], value: '.' },
    { key: [112, 101, 114, 109, 105, 108, 59], value: '‰' },
    { key: [112, 101, 114, 112, 59], value: '⊥' },
    { key: [112, 101, 114, 116, 101, 110, 107, 59], value: '‱' },
    { key: [112, 102, 114, 59], value: '𝔭' },
    { key: [112, 104, 105, 59], value: 'φ' },
    { key: [112, 104, 105, 118, 59], value: 'ϕ' },
    { key: [112, 104, 109, 109, 97, 116, 59], value: 'ℳ' },
    { key: [112, 104, 111, 110, 101, 59], value: '☎' },
    { key: [112, 105, 59], value: 'π' },
    { key: [112, 105, 116, 99, 104, 102, 111, 114, 107, 59], value: '⋔' },
    { key: [112, 105, 118, 59], value: 'ϖ' },
    { key: [112, 108, 97, 110, 99, 107, 59], value: 'ℏ' },
    { key: [112, 108, 97, 110, 99, 107, 104, 59], value: 'ℎ' },
    { key: [112, 108, 97, 110, 107, 118, 59], value: 'ℏ' },
    { key: [112, 108, 117, 115, 59], value: '+' },
    { key: [112, 108, 117, 115, 97, 99, 105, 114, 59], value: '⨣' },
    { key: [112, 108, 117, 115, 98, 59], value: '⊞' },
    { key: [112, 108, 117, 115, 99, 105, 114, 59], value: '⨢' },
    { key: [112, 108, 117, 115, 100, 111, 59], value: '∔' },
    { key: [112, 108, 117, 115, 100, 117, 59], value: '⨥' },
    { key: [112, 108, 117, 115, 101, 59], value: '⩲' },
    { key: [112, 108, 117, 115, 109, 110, 59], value: '±' },
    { key: [112, 108, 117, 115, 115, 105, 109, 59], value: '⨦' },
    { key: [112, 108, 117, 115, 116, 119, 111, 59], value: '⨧' },
    { key: [112, 109, 59], value: '±' },
    { key: [112, 111, 105, 110, 116, 105, 110, 116, 59], value: '⨕' },
    { key: [112, 111, 112, 102, 59], value: '𝕡' },
    { key: [112, 111, 117, 110, 100, 59], value: '£' },
    { key: [112, 114, 59], value: '≺' },
    { key: [112, 114, 69, 59], value: '⪳' },
    { key: [112, 114, 97, 112, 59], value: '⪷' },
    { key: [112, 114, 99, 117, 101, 59], value: '≼' },
    { key: [112, 114, 101, 59], value: '⪯' },
    { key: [112, 114, 101, 99, 59], value: '≺' },
    { key: [112, 114, 101, 99, 97, 112, 112, 114, 111, 120, 59], value: '⪷' },
    { key: [112, 114, 101, 99, 99, 117, 114, 108, 121, 101, 113, 59], value: '≼' },
    { key: [112, 114, 101, 99, 101, 113, 59], value: '⪯' },
    { key: [112, 114, 101, 99, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪹' },
    { key: [112, 114, 101, 99, 110, 101, 113, 113, 59], value: '⪵' },
    { key: [112, 114, 101, 99, 110, 115, 105, 109, 59], value: '⋨' },
    { key: [112, 114, 101, 99, 115, 105, 109, 59], value: '≾' },
    { key: [112, 114, 105, 109, 101, 59], value: '′' },
    { key: [112, 114, 105, 109, 101, 115, 59], value: 'ℙ' },
    { key: [112, 114, 110, 69, 59], value: '⪵' },
    { key: [112, 114, 110, 97, 112, 59], value: '⪹' },
    { key: [112, 114, 110, 115, 105, 109, 59], value: '⋨' },
    { key: [112, 114, 111, 100, 59], value: '∏' },
    { key: [112, 114, 111, 102, 97, 108, 97, 114, 59], value: '⌮' },
    { key: [112, 114, 111, 102, 108, 105, 110, 101, 59], value: '⌒' },
    { key: [112, 114, 111, 102, 115, 117, 114, 102, 59], value: '⌓' },
    { key: [112, 114, 111, 112, 59], value: '∝' },
    { key: [112, 114, 111, 112, 116, 111, 59], value: '∝' },
    { key: [112, 114, 115, 105, 109, 59], value: '≾' },
    { key: [112, 114, 117, 114, 101, 108, 59], value: '⊰' },
    { key: [112, 115, 99, 114, 59], value: '𝓅' },
    { key: [112, 115, 105, 59], value: 'ψ' },
    { key: [112, 117, 110, 99, 115, 112, 59], value: ' ' },
    { key: [113, 102, 114, 59], value: '𝔮' },
    { key: [113, 105, 110, 116, 59], value: '⨌' },
    { key: [113, 111, 112, 102, 59], value: '𝕢' },
    { key: [113, 112, 114, 105, 109, 101, 59], value: '⁗' },
    { key: [113, 115, 99, 114, 59], value: '𝓆' },
    { key: [113, 117, 97, 116, 101, 114, 110, 105, 111, 110, 115, 59], value: 'ℍ' },
    { key: [113, 117, 97, 116, 105, 110, 116, 59], value: '⨖' },
    { key: [113, 117, 101, 115, 116, 59], value: '?' },
    { key: [113, 117, 101, 115, 116, 101, 113, 59], value: '≟' },
    { key: [113, 117, 111, 116, 59], value: '"' },
    { key: [114, 65, 97, 114, 114, 59], value: '⇛' },
    { key: [114, 65, 114, 114, 59], value: '⇒' },
    { key: [114, 65, 116, 97, 105, 108, 59], value: '⤜' },
    { key: [114, 66, 97, 114, 114, 59], value: '⤏' },
    { key: [114, 72, 97, 114, 59], value: '⥤' },
    { key: [114, 97, 99, 101, 59], value: '∽̱' },
    { key: [114, 97, 99, 117, 116, 101, 59], value: 'ŕ' },
    { key: [114, 97, 100, 105, 99, 59], value: '√' },
    { key: [114, 97, 101, 109, 112, 116, 121, 118, 59], value: '⦳' },
    { key: [114, 97, 110, 103, 59], value: '⟩' },
    { key: [114, 97, 110, 103, 100, 59], value: '⦒' },
    { key: [114, 97, 110, 103, 101, 59], value: '⦥' },
    { key: [114, 97, 110, 103, 108, 101, 59], value: '⟩' },
    { key: [114, 97, 113, 117, 111, 59], value: '»' },
    { key: [114, 97, 114, 114, 59], value: '→' },
    { key: [114, 97, 114, 114, 97, 112, 59], value: '⥵' },
    { key: [114, 97, 114, 114, 98, 59], value: '⇥' },
    { key: [114, 97, 114, 114, 98, 102, 115, 59], value: '⤠' },
    { key: [114, 97, 114, 114, 99, 59], value: '⤳' },
    { key: [114, 97, 114, 114, 102, 115, 59], value: '⤞' },
    { key: [114, 97, 114, 114, 104, 107, 59], value: '↪' },
    { key: [114, 97, 114, 114, 108, 112, 59], value: '↬' },
    { key: [114, 97, 114, 114, 112, 108, 59], value: '⥅' },
    { key: [114, 97, 114, 114, 115, 105, 109, 59], value: '⥴' },
    { key: [114, 97, 114, 114, 116, 108, 59], value: '↣' },
    { key: [114, 97, 114, 114, 119, 59], value: '↝' },
    { key: [114, 97, 116, 97, 105, 108, 59], value: '⤚' },
    { key: [114, 97, 116, 105, 111, 59], value: '∶' },
    { key: [114, 97, 116, 105, 111, 110, 97, 108, 115, 59], value: 'ℚ' },
    { key: [114, 98, 97, 114, 114, 59], value: '⤍' },
    { key: [114, 98, 98, 114, 107, 59], value: '❳' },
    { key: [114, 98, 114, 97, 99, 101, 59], value: ' }' },
    { key: [114, 98, 114, 97, 99, 107, 59], value: ']' },
    { key: [114, 98, 114, 107, 101, 59], value: '⦌' },
    { key: [114, 98, 114, 107, 115, 108, 100, 59], value: '⦎' },
    { key: [114, 98, 114, 107, 115, 108, 117, 59], value: '⦐' },
    { key: [114, 99, 97, 114, 111, 110, 59], value: 'ř' },
    { key: [114, 99, 101, 100, 105, 108, 59], value: 'ŗ' },
    { key: [114, 99, 101, 105, 108, 59], value: '⌉' },
    { key: [114, 99, 117, 98, 59], value: ' }' },
    { key: [114, 99, 121, 59], value: 'р' },
    { key: [114, 100, 99, 97, 59], value: '⤷' },
    { key: [114, 100, 108, 100, 104, 97, 114, 59], value: '⥩' },
    { key: [114, 100, 113, 117, 111, 59], value: '”' },
    { key: [114, 100, 113, 117, 111, 114, 59], value: '”' },
    { key: [114, 100, 115, 104, 59], value: '↳' },
    { key: [114, 101, 97, 108, 59], value: 'ℜ' },
    { key: [114, 101, 97, 108, 105, 110, 101, 59], value: 'ℛ' },
    { key: [114, 101, 97, 108, 112, 97, 114, 116, 59], value: 'ℜ' },
    { key: [114, 101, 97, 108, 115, 59], value: 'ℝ' },
    { key: [114, 101, 99, 116, 59], value: '▭' },
    { key: [114, 101, 103, 59], value: '®' },
    { key: [114, 102, 105, 115, 104, 116, 59], value: '⥽' },
    { key: [114, 102, 108, 111, 111, 114, 59], value: '⌋' },
    { key: [114, 102, 114, 59], value: '𝔯' },
    { key: [114, 104, 97, 114, 100, 59], value: '⇁' },
    { key: [114, 104, 97, 114, 117, 59], value: '⇀' },
    { key: [114, 104, 97, 114, 117, 108, 59], value: '⥬' },
    { key: [114, 104, 111, 59], value: 'ρ' },
    { key: [114, 104, 111, 118, 59], value: 'ϱ' },
    { key: [114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '→' },
    { key: [114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 116, 97, 105, 108, 59], value: '↣' },
    { key: [114, 105, 103, 104, 116, 104, 97, 114, 112, 111, 111, 110, 100, 111, 119, 110, 59], value: '⇁' },
    { key: [114, 105, 103, 104, 116, 104, 97, 114, 112, 111, 111, 110, 117, 112, 59], value: '⇀' },
    { key: [114, 105, 103, 104, 116, 108, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇄' },
    { key: [114, 105, 103, 104, 116, 108, 101, 102, 116, 104, 97, 114, 112, 111, 111, 110, 115, 59], value: '⇌' },
    { key: [114, 105, 103, 104, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇉' },
    { key: [114, 105, 103, 104, 116, 115, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59], value: '↝' },
    { key: [114, 105, 103, 104, 116, 116, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59], value: '⋌' },
    { key: [114, 105, 110, 103, 59], value: '˚' },
    { key: [114, 105, 115, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59], value: '≓' },
    { key: [114, 108, 97, 114, 114, 59], value: '⇄' },
    { key: [114, 108, 104, 97, 114, 59], value: '⇌' },
    { key: [114, 108, 109, 59], value: '‏' },
    { key: [114, 109, 111, 117, 115, 116, 59], value: '⎱' },
    { key: [114, 109, 111, 117, 115, 116, 97, 99, 104, 101, 59], value: '⎱' },
    { key: [114, 110, 109, 105, 100, 59], value: '⫮' },
    { key: [114, 111, 97, 110, 103, 59], value: '⟭' },
    { key: [114, 111, 97, 114, 114, 59], value: '⇾' },
    { key: [114, 111, 98, 114, 107, 59], value: '⟧' },
    { key: [114, 111, 112, 97, 114, 59], value: '⦆' },
    { key: [114, 111, 112, 102, 59], value: '𝕣' },
    { key: [114, 111, 112, 108, 117, 115, 59], value: '⨮' },
    { key: [114, 111, 116, 105, 109, 101, 115, 59], value: '⨵' },
    { key: [114, 112, 97, 114, 59], value: ')' },
    { key: [114, 112, 97, 114, 103, 116, 59], value: '⦔' },
    { key: [114, 112, 112, 111, 108, 105, 110, 116, 59], value: '⨒' },
    { key: [114, 114, 97, 114, 114, 59], value: '⇉' },
    { key: [114, 115, 97, 113, 117, 111, 59], value: '›' },
    { key: [114, 115, 99, 114, 59], value: '𝓇' },
    { key: [114, 115, 104, 59], value: '↱' },
    { key: [114, 115, 113, 98, 59], value: ']' },
    { key: [114, 115, 113, 117, 111, 59], value: '’' },
    { key: [114, 115, 113, 117, 111, 114, 59], value: '’' },
    { key: [114, 116, 104, 114, 101, 101, 59], value: '⋌' },
    { key: [114, 116, 105, 109, 101, 115, 59], value: '⋊' },
    { key: [114, 116, 114, 105, 59], value: '▹' },
    { key: [114, 116, 114, 105, 101, 59], value: '⊵' },
    { key: [114, 116, 114, 105, 102, 59], value: '▸' },
    { key: [114, 116, 114, 105, 108, 116, 114, 105, 59], value: '⧎' },
    { key: [114, 117, 108, 117, 104, 97, 114, 59], value: '⥨' },
    { key: [114, 120, 59], value: '℞' },
    { key: [115, 97, 99, 117, 116, 101, 59], value: 'ś' },
    { key: [115, 98, 113, 117, 111, 59], value: '‚' },
    { key: [115, 99, 59], value: '≻' },
    { key: [115, 99, 69, 59], value: '⪴' },
    { key: [115, 99, 97, 112, 59], value: '⪸' },
    { key: [115, 99, 97, 114, 111, 110, 59], value: 'š' },
    { key: [115, 99, 99, 117, 101, 59], value: '≽' },
    { key: [115, 99, 101, 59], value: '⪰' },
    { key: [115, 99, 101, 100, 105, 108, 59], value: 'ş' },
    { key: [115, 99, 105, 114, 99, 59], value: 'ŝ' },
    { key: [115, 99, 110, 69, 59], value: '⪶' },
    { key: [115, 99, 110, 97, 112, 59], value: '⪺' },
    { key: [115, 99, 110, 115, 105, 109, 59], value: '⋩' },
    { key: [115, 99, 112, 111, 108, 105, 110, 116, 59], value: '⨓' },
    { key: [115, 99, 115, 105, 109, 59], value: '≿' },
    { key: [115, 99, 121, 59], value: 'с' },
    { key: [115, 100, 111, 116, 59], value: '⋅' },
    { key: [115, 100, 111, 116, 98, 59], value: '⊡' },
    { key: [115, 100, 111, 116, 101, 59], value: '⩦' },
    { key: [115, 101, 65, 114, 114, 59], value: '⇘' },
    { key: [115, 101, 97, 114, 104, 107, 59], value: '⤥' },
    { key: [115, 101, 97, 114, 114, 59], value: '↘' },
    { key: [115, 101, 97, 114, 114, 111, 119, 59], value: '↘' },
    { key: [115, 101, 99, 116, 59], value: '§' },
    { key: [115, 101, 109, 105, 59], value: ';' },
    { key: [115, 101, 115, 119, 97, 114, 59], value: '⤩' },
    { key: [115, 101, 116, 109, 105, 110, 117, 115, 59], value: '∖' },
    { key: [115, 101, 116, 109, 110, 59], value: '∖' },
    { key: [115, 101, 120, 116, 59], value: '✶' },
    { key: [115, 102, 114, 59], value: '𝔰' },
    { key: [115, 102, 114, 111, 119, 110, 59], value: '⌢' },
    { key: [115, 104, 97, 114, 112, 59], value: '♯' },
    { key: [115, 104, 99, 104, 99, 121, 59], value: 'щ' },
    { key: [115, 104, 99, 121, 59], value: 'ш' },
    { key: [115, 104, 111, 114, 116, 109, 105, 100, 59], value: '∣' },
    { key: [115, 104, 111, 114, 116, 112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∥' },
    { key: [115, 104, 121, 59], value: '­' },
    { key: [115, 105, 103, 109, 97, 59], value: 'σ' },
    { key: [115, 105, 103, 109, 97, 102, 59], value: 'ς' },
    { key: [115, 105, 103, 109, 97, 118, 59], value: 'ς' },
    { key: [115, 105, 109, 59], value: '∼' },
    { key: [115, 105, 109, 100, 111, 116, 59], value: '⩪' },
    { key: [115, 105, 109, 101, 59], value: '≃' },
    { key: [115, 105, 109, 101, 113, 59], value: '≃' },
    { key: [115, 105, 109, 103, 59], value: '⪞' },
    { key: [115, 105, 109, 103, 69, 59], value: '⪠' },
    { key: [115, 105, 109, 108, 59], value: '⪝' },
    { key: [115, 105, 109, 108, 69, 59], value: '⪟' },
    { key: [115, 105, 109, 110, 101, 59], value: '≆' },
    { key: [115, 105, 109, 112, 108, 117, 115, 59], value: '⨤' },
    { key: [115, 105, 109, 114, 97, 114, 114, 59], value: '⥲' },
    { key: [115, 108, 97, 114, 114, 59], value: '←' },
    { key: [115, 109, 97, 108, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59], value: '∖' },
    { key: [115, 109, 97, 115, 104, 112, 59], value: '⨳' },
    { key: [115, 109, 101, 112, 97, 114, 115, 108, 59], value: '⧤' },
    { key: [115, 109, 105, 100, 59], value: '∣' },
    { key: [115, 109, 105, 108, 101, 59], value: '⌣' },
    { key: [115, 109, 116, 59], value: '⪪' },
    { key: [115, 109, 116, 101, 59], value: '⪬' },
    { key: [115, 109, 116, 101, 115, 59], value: '⪬︀' },
    { key: [115, 111, 102, 116, 99, 121, 59], value: 'ь' },
    { key: [115, 111, 108, 59], value: '/' },
    { key: [115, 111, 108, 98, 59], value: '⧄' },
    { key: [115, 111, 108, 98, 97, 114, 59], value: '⌿' },
    { key: [115, 111, 112, 102, 59], value: '𝕤' },
    { key: [115, 112, 97, 100, 101, 115, 59], value: '♠' },
    { key: [115, 112, 97, 100, 101, 115, 117, 105, 116, 59], value: '♠' },
    { key: [115, 112, 97, 114, 59], value: '∥' },
    { key: [115, 113, 99, 97, 112, 59], value: '⊓' },
    { key: [115, 113, 99, 97, 112, 115, 59], value: '⊓︀' },
    { key: [115, 113, 99, 117, 112, 59], value: '⊔' },
    { key: [115, 113, 99, 117, 112, 115, 59], value: '⊔︀' },
    { key: [115, 113, 115, 117, 98, 59], value: '⊏' },
    { key: [115, 113, 115, 117, 98, 101, 59], value: '⊑' },
    { key: [115, 113, 115, 117, 98, 115, 101, 116, 59], value: '⊏' },
    { key: [115, 113, 115, 117, 98, 115, 101, 116, 101, 113, 59], value: '⊑' },
    { key: [115, 113, 115, 117, 112, 59], value: '⊐' },
    { key: [115, 113, 115, 117, 112, 101, 59], value: '⊒' },
    { key: [115, 113, 115, 117, 112, 115, 101, 116, 59], value: '⊐' },
    { key: [115, 113, 115, 117, 112, 115, 101, 116, 101, 113, 59], value: '⊒' },
    { key: [115, 113, 117, 59], value: '□' },
    { key: [115, 113, 117, 97, 114, 101, 59], value: '□' },
    { key: [115, 113, 117, 97, 114, 102, 59], value: '▪' },
    { key: [115, 113, 117, 102, 59], value: '▪' },
    { key: [115, 114, 97, 114, 114, 59], value: '→' },
    { key: [115, 115, 99, 114, 59], value: '𝓈' },
    { key: [115, 115, 101, 116, 109, 110, 59], value: '∖' },
    { key: [115, 115, 109, 105, 108, 101, 59], value: '⌣' },
    { key: [115, 115, 116, 97, 114, 102, 59], value: '⋆' },
    { key: [115, 116, 97, 114, 59], value: '☆' },
    { key: [115, 116, 97, 114, 102, 59], value: '★' },
    { key: [115, 116, 114, 97, 105, 103, 104, 116, 101, 112, 115, 105, 108, 111, 110, 59], value: 'ϵ' },
    { key: [115, 116, 114, 97, 105, 103, 104, 116, 112, 104, 105, 59], value: 'ϕ' },
    { key: [115, 116, 114, 110, 115, 59], value: '¯' },
    { key: [115, 117, 98, 59], value: '⊂' },
    { key: [115, 117, 98, 69, 59], value: '⫅' },
    { key: [115, 117, 98, 100, 111, 116, 59], value: '⪽' },
    { key: [115, 117, 98, 101, 59], value: '⊆' },
    { key: [115, 117, 98, 101, 100, 111, 116, 59], value: '⫃' },
    { key: [115, 117, 98, 109, 117, 108, 116, 59], value: '⫁' },
    { key: [115, 117, 98, 110, 69, 59], value: '⫋' },
    { key: [115, 117, 98, 110, 101, 59], value: '⊊' },
    { key: [115, 117, 98, 112, 108, 117, 115, 59], value: '⪿' },
    { key: [115, 117, 98, 114, 97, 114, 114, 59], value: '⥹' },
    { key: [115, 117, 98, 115, 101, 116, 59], value: '⊂' },
    { key: [115, 117, 98, 115, 101, 116, 101, 113, 59], value: '⊆' },
    { key: [115, 117, 98, 115, 101, 116, 101, 113, 113, 59], value: '⫅' },
    { key: [115, 117, 98, 115, 101, 116, 110, 101, 113, 59], value: '⊊' },
    { key: [115, 117, 98, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫋' },
    { key: [115, 117, 98, 115, 105, 109, 59], value: '⫇' },
    { key: [115, 117, 98, 115, 117, 98, 59], value: '⫕' },
    { key: [115, 117, 98, 115, 117, 112, 59], value: '⫓' },
    { key: [115, 117, 99, 99, 59], value: '≻' },
    { key: [115, 117, 99, 99, 97, 112, 112, 114, 111, 120, 59], value: '⪸' },
    { key: [115, 117, 99, 99, 99, 117, 114, 108, 121, 101, 113, 59], value: '≽' },
    { key: [115, 117, 99, 99, 101, 113, 59], value: '⪰' },
    { key: [115, 117, 99, 99, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪺' },
    { key: [115, 117, 99, 99, 110, 101, 113, 113, 59], value: '⪶' },
    { key: [115, 117, 99, 99, 110, 115, 105, 109, 59], value: '⋩' },
    { key: [115, 117, 99, 99, 115, 105, 109, 59], value: '≿' },
    { key: [115, 117, 109, 59], value: '∑' },
    { key: [115, 117, 110, 103, 59], value: '♪' },
    { key: [115, 117, 112, 49, 59], value: '¹' },
    { key: [115, 117, 112, 50, 59], value: '²' },
    { key: [115, 117, 112, 51, 59], value: '³' },
    { key: [115, 117, 112, 59], value: '⊃' },
    { key: [115, 117, 112, 69, 59], value: '⫆' },
    { key: [115, 117, 112, 100, 111, 116, 59], value: '⪾' },
    { key: [115, 117, 112, 100, 115, 117, 98, 59], value: '⫘' },
    { key: [115, 117, 112, 101, 59], value: '⊇' },
    { key: [115, 117, 112, 101, 100, 111, 116, 59], value: '⫄' },
    { key: [115, 117, 112, 104, 115, 111, 108, 59], value: '⟉' },
    { key: [115, 117, 112, 104, 115, 117, 98, 59], value: '⫗' },
    { key: [115, 117, 112, 108, 97, 114, 114, 59], value: '⥻' },
    { key: [115, 117, 112, 109, 117, 108, 116, 59], value: '⫂' },
    { key: [115, 117, 112, 110, 69, 59], value: '⫌' },
    { key: [115, 117, 112, 110, 101, 59], value: '⊋' },
    { key: [115, 117, 112, 112, 108, 117, 115, 59], value: '⫀' },
    { key: [115, 117, 112, 115, 101, 116, 59], value: '⊃' },
    { key: [115, 117, 112, 115, 101, 116, 101, 113, 59], value: '⊇' },
    { key: [115, 117, 112, 115, 101, 116, 101, 113, 113, 59], value: '⫆' },
    { key: [115, 117, 112, 115, 101, 116, 110, 101, 113, 59], value: '⊋' },
    { key: [115, 117, 112, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫌' },
    { key: [115, 117, 112, 115, 105, 109, 59], value: '⫈' },
    { key: [115, 117, 112, 115, 117, 98, 59], value: '⫔' },
    { key: [115, 117, 112, 115, 117, 112, 59], value: '⫖' },
    { key: [115, 119, 65, 114, 114, 59], value: '⇙' },
    { key: [115, 119, 97, 114, 104, 107, 59], value: '⤦' },
    { key: [115, 119, 97, 114, 114, 59], value: '↙' },
    { key: [115, 119, 97, 114, 114, 111, 119, 59], value: '↙' },
    { key: [115, 119, 110, 119, 97, 114, 59], value: '⤪' },
    { key: [115, 122, 108, 105, 103, 59], value: 'ß' },
    { key: [116, 97, 114, 103, 101, 116, 59], value: '⌖' },
    { key: [116, 97, 117, 59], value: 'τ' },
    { key: [116, 98, 114, 107, 59], value: '⎴' },
    { key: [116, 99, 97, 114, 111, 110, 59], value: 'ť' },
    { key: [116, 99, 101, 100, 105, 108, 59], value: 'ţ' },
    { key: [116, 99, 121, 59], value: 'т' },
    { key: [116, 100, 111, 116, 59], value: '⃛' },
    { key: [116, 101, 108, 114, 101, 99, 59], value: '⌕' },
    { key: [116, 102, 114, 59], value: '𝔱' },
    { key: [116, 104, 101, 114, 101, 52, 59], value: '∴' },
    { key: [116, 104, 101, 114, 101, 102, 111, 114, 101, 59], value: '∴' },
    { key: [116, 104, 101, 116, 97, 59], value: 'θ' },
    { key: [116, 104, 101, 116, 97, 115, 121, 109, 59], value: 'ϑ' },
    { key: [116, 104, 101, 116, 97, 118, 59], value: 'ϑ' },
    { key: [116, 104, 105, 99, 107, 97, 112, 112, 114, 111, 120, 59], value: '≈' },
    { key: [116, 104, 105, 99, 107, 115, 105, 109, 59], value: '∼' },
    { key: [116, 104, 105, 110, 115, 112, 59], value: ' ' },
    { key: [116, 104, 107, 97, 112, 59], value: '≈' },
    { key: [116, 104, 107, 115, 105, 109, 59], value: '∼' },
    { key: [116, 104, 111, 114, 110, 59], value: 'þ' },
    { key: [116, 105, 108, 100, 101, 59], value: '˜' },
    { key: [116, 105, 109, 101, 115, 59], value: '×' },
    { key: [116, 105, 109, 101, 115, 98, 59], value: '⊠' },
    { key: [116, 105, 109, 101, 115, 98, 97, 114, 59], value: '⨱' },
    { key: [116, 105, 109, 101, 115, 100, 59], value: '⨰' },
    { key: [116, 105, 110, 116, 59], value: '∭' },
    { key: [116, 111, 101, 97, 59], value: '⤨' },
    { key: [116, 111, 112, 59], value: '⊤' },
    { key: [116, 111, 112, 98, 111, 116, 59], value: '⌶' },
    { key: [116, 111, 112, 99, 105, 114, 59], value: '⫱' },
    { key: [116, 111, 112, 102, 59], value: '𝕥' },
    { key: [116, 111, 112, 102, 111, 114, 107, 59], value: '⫚' },
    { key: [116, 111, 115, 97, 59], value: '⤩' },
    { key: [116, 112, 114, 105, 109, 101, 59], value: '‴' },
    { key: [116, 114, 97, 100, 101, 59], value: '™' },
    { key: [116, 114, 105, 97, 110, 103, 108, 101, 59], value: '▵' },
    { key: [116, 114, 105, 97, 110, 103, 108, 101, 100, 111, 119, 110, 59], value: '▿' },
    { key: [116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '◃' },
    { key: [116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 101, 113, 59], value: '⊴' },
    { key: [116, 114, 105, 97, 110, 103, 108, 101, 113, 59], value: '≜' },
    { key: [116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '▹' },
    { key: [116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 101, 113, 59], value: '⊵' },
    { key: [116, 114, 105, 100, 111, 116, 59], value: '◬' },
    { key: [116, 114, 105, 101, 59], value: '≜' },
    { key: [116, 114, 105, 109, 105, 110, 117, 115, 59], value: '⨺' },
    { key: [116, 114, 105, 112, 108, 117, 115, 59], value: '⨹' },
    { key: [116, 114, 105, 115, 98, 59], value: '⧍' },
    { key: [116, 114, 105, 116, 105, 109, 101, 59], value: '⨻' },
    { key: [116, 114, 112, 101, 122, 105, 117, 109, 59], value: '⏢' },
    { key: [116, 115, 99, 114, 59], value: '𝓉' },
    { key: [116, 115, 99, 121, 59], value: 'ц' },
    { key: [116, 115, 104, 99, 121, 59], value: 'ћ' },
    { key: [116, 115, 116, 114, 111, 107, 59], value: 'ŧ' },
    { key: [116, 119, 105, 120, 116, 59], value: '≬' },
    { key: [116, 119, 111, 104, 101, 97, 100, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '↞' },
    { key: [116, 119, 111, 104, 101, 97, 100, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↠' },
    { key: [117, 65, 114, 114, 59], value: '⇑' },
    { key: [117, 72, 97, 114, 59], value: '⥣' },
    { key: [117, 97, 99, 117, 116, 101, 59], value: 'ú' },
    { key: [117, 97, 114, 114, 59], value: '↑' },
    { key: [117, 98, 114, 99, 121, 59], value: 'ў' },
    { key: [117, 98, 114, 101, 118, 101, 59], value: 'ŭ' },
    { key: [117, 99, 105, 114, 99, 59], value: 'û' },
    { key: [117, 99, 121, 59], value: 'у' },
    { key: [117, 100, 97, 114, 114, 59], value: '⇅' },
    { key: [117, 100, 98, 108, 97, 99, 59], value: 'ű' },
    { key: [117, 100, 104, 97, 114, 59], value: '⥮' },
    { key: [117, 102, 105, 115, 104, 116, 59], value: '⥾' },
    { key: [117, 102, 114, 59], value: '𝔲' },
    { key: [117, 103, 114, 97, 118, 101, 59], value: 'ù' },
    { key: [117, 104, 97, 114, 108, 59], value: '↿' },
    { key: [117, 104, 97, 114, 114, 59], value: '↾' },
    { key: [117, 104, 98, 108, 107, 59], value: '▀' },
    { key: [117, 108, 99, 111, 114, 110, 59], value: '⌜' },
    { key: [117, 108, 99, 111, 114, 110, 101, 114, 59], value: '⌜' },
    { key: [117, 108, 99, 114, 111, 112, 59], value: '⌏' },
    { key: [117, 108, 116, 114, 105, 59], value: '◸' },
    { key: [117, 109, 97, 99, 114, 59], value: 'ū' },
    { key: [117, 109, 108, 59], value: '¨' },
    { key: [117, 111, 103, 111, 110, 59], value: 'ų' },
    { key: [117, 111, 112, 102, 59], value: '𝕦' },
    { key: [117, 112, 97, 114, 114, 111, 119, 59], value: '↑' },
    { key: [117, 112, 100, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '↕' },
    { key: [117, 112, 104, 97, 114, 112, 111, 111, 110, 108, 101, 102, 116, 59], value: '↿' },
    { key: [117, 112, 104, 97, 114, 112, 111, 111, 110, 114, 105, 103, 104, 116, 59], value: '↾' },
    { key: [117, 112, 108, 117, 115, 59], value: '⊎' },
    { key: [117, 112, 115, 105, 59], value: 'υ' },
    { key: [117, 112, 115, 105, 104, 59], value: 'ϒ' },
    { key: [117, 112, 115, 105, 108, 111, 110, 59], value: 'υ' },
    { key: [117, 112, 117, 112, 97, 114, 114, 111, 119, 115, 59], value: '⇈' },
    { key: [117, 114, 99, 111, 114, 110, 59], value: '⌝' },
    { key: [117, 114, 99, 111, 114, 110, 101, 114, 59], value: '⌝' },
    { key: [117, 114, 99, 114, 111, 112, 59], value: '⌎' },
    { key: [117, 114, 105, 110, 103, 59], value: 'ů' },
    { key: [117, 114, 116, 114, 105, 59], value: '◹' },
    { key: [117, 115, 99, 114, 59], value: '𝓊' },
    { key: [117, 116, 100, 111, 116, 59], value: '⋰' },
    { key: [117, 116, 105, 108, 100, 101, 59], value: 'ũ' },
    { key: [117, 116, 114, 105, 59], value: '▵' },
    { key: [117, 116, 114, 105, 102, 59], value: '▴' },
    { key: [117, 117, 97, 114, 114, 59], value: '⇈' },
    { key: [117, 117, 109, 108, 59], value: 'ü' },
    { key: [117, 119, 97, 110, 103, 108, 101, 59], value: '⦧' },
    { key: [118, 65, 114, 114, 59], value: '⇕' },
    { key: [118, 66, 97, 114, 59], value: '⫨' },
    { key: [118, 66, 97, 114, 118, 59], value: '⫩' },
    { key: [118, 68, 97, 115, 104, 59], value: '⊨' },
    { key: [118, 97, 110, 103, 114, 116, 59], value: '⦜' },
    { key: [118, 97, 114, 101, 112, 115, 105, 108, 111, 110, 59], value: 'ϵ' },
    { key: [118, 97, 114, 107, 97, 112, 112, 97, 59], value: 'ϰ' },
    { key: [118, 97, 114, 110, 111, 116, 104, 105, 110, 103, 59], value: '∅' },
    { key: [118, 97, 114, 112, 104, 105, 59], value: 'ϕ' },
    { key: [118, 97, 114, 112, 105, 59], value: 'ϖ' },
    { key: [118, 97, 114, 112, 114, 111, 112, 116, 111, 59], value: '∝' },
    { key: [118, 97, 114, 114, 59], value: '↕' },
    { key: [118, 97, 114, 114, 104, 111, 59], value: 'ϱ' },
    { key: [118, 97, 114, 115, 105, 103, 109, 97, 59], value: 'ς' },
    { key: [118, 97, 114, 115, 117, 98, 115, 101, 116, 110, 101, 113, 59], value: '⊊︀' },
    { key: [118, 97, 114, 115, 117, 98, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫋︀' },
    { key: [118, 97, 114, 115, 117, 112, 115, 101, 116, 110, 101, 113, 59], value: '⊋︀' },
    { key: [118, 97, 114, 115, 117, 112, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫌︀' },
    { key: [118, 97, 114, 116, 104, 101, 116, 97, 59], value: 'ϑ' },
    { key: [118, 97, 114, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '⊲' },
    { key: [118, 97, 114, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '⊳' },
    { key: [118, 99, 121, 59], value: 'в' },
    { key: [118, 100, 97, 115, 104, 59], value: '⊢' },
    { key: [118, 101, 101, 59], value: '∨' },
    { key: [118, 101, 101, 98, 97, 114, 59], value: '⊻' },
    { key: [118, 101, 101, 101, 113, 59], value: '≚' },
    { key: [118, 101, 108, 108, 105, 112, 59], value: '⋮' },
    { key: [118, 101, 114, 98, 97, 114, 59], value: '|' },
    { key: [118, 101, 114, 116, 59], value: '|' },
    { key: [118, 102, 114, 59], value: '𝔳' },
    { key: [118, 108, 116, 114, 105, 59], value: '⊲' },
    { key: [118, 110, 115, 117, 98, 59], value: '⊂⃒' },
    { key: [118, 110, 115, 117, 112, 59], value: '⊃⃒' },
    { key: [118, 111, 112, 102, 59], value: '𝕧' },
    { key: [118, 112, 114, 111, 112, 59], value: '∝' },
    { key: [118, 114, 116, 114, 105, 59], value: '⊳' },
    { key: [118, 115, 99, 114, 59], value: '𝓋' },
    { key: [118, 115, 117, 98, 110, 69, 59], value: '⫋︀' },
    { key: [118, 115, 117, 98, 110, 101, 59], value: '⊊︀' },
    { key: [118, 115, 117, 112, 110, 69, 59], value: '⫌︀' },
    { key: [118, 115, 117, 112, 110, 101, 59], value: '⊋︀' },
    { key: [118, 122, 105, 103, 122, 97, 103, 59], value: '⦚' },
    { key: [119, 99, 105, 114, 99, 59], value: 'ŵ' },
    { key: [119, 101, 100, 98, 97, 114, 59], value: '⩟' },
    { key: [119, 101, 100, 103, 101, 59], value: '∧' },
    { key: [119, 101, 100, 103, 101, 113, 59], value: '≙' },
    { key: [119, 101, 105, 101, 114, 112, 59], value: '℘' },
    { key: [119, 102, 114, 59], value: '𝔴' },
    { key: [119, 111, 112, 102, 59], value: '𝕨' },
    { key: [119, 112, 59], value: '℘' },
    { key: [119, 114, 59], value: '≀' },
    { key: [119, 114, 101, 97, 116, 104, 59], value: '≀' },
    { key: [119, 115, 99, 114, 59], value: '𝓌' },
    { key: [120, 99, 97, 112, 59], value: '⋂' },
    { key: [120, 99, 105, 114, 99, 59], value: '◯' },
    { key: [120, 99, 117, 112, 59], value: '⋃' },
    { key: [120, 100, 116, 114, 105, 59], value: '▽' },
    { key: [120, 102, 114, 59], value: '𝔵' },
    { key: [120, 104, 65, 114, 114, 59], value: '⟺' },
    { key: [120, 104, 97, 114, 114, 59], value: '⟷' },
    { key: [120, 105, 59], value: 'ξ' },
    { key: [120, 108, 65, 114, 114, 59], value: '⟸' },
    { key: [120, 108, 97, 114, 114, 59], value: '⟵' },
    { key: [120, 109, 97, 112, 59], value: '⟼' },
    { key: [120, 110, 105, 115, 59], value: '⋻' },
    { key: [120, 111, 100, 111, 116, 59], value: '⨀' },
    { key: [120, 111, 112, 102, 59], value: '𝕩' },
    { key: [120, 111, 112, 108, 117, 115, 59], value: '⨁' },
    { key: [120, 111, 116, 105, 109, 101, 59], value: '⨂' },
    { key: [120, 114, 65, 114, 114, 59], value: '⟹' },
    { key: [120, 114, 97, 114, 114, 59], value: '⟶' },
    { key: [120, 115, 99, 114, 59], value: '𝓍' },
    { key: [120, 115, 113, 99, 117, 112, 59], value: '⨆' },
    { key: [120, 117, 112, 108, 117, 115, 59], value: '⨄' },
    { key: [120, 117, 116, 114, 105, 59], value: '△' },
    { key: [120, 118, 101, 101, 59], value: '⋁' },
    { key: [120, 119, 101, 100, 103, 101, 59], value: '⋀' },
    { key: [121, 97, 99, 117, 116, 101, 59], value: 'ý' },
    { key: [121, 97, 99, 121, 59], value: 'я' },
    { key: [121, 99, 105, 114, 99, 59], value: 'ŷ' },
    { key: [121, 99, 121, 59], value: 'ы' },
    { key: [121, 101, 110, 59], value: '¥' },
    { key: [121, 102, 114, 59], value: '𝔶' },
    { key: [121, 105, 99, 121, 59], value: 'ї' },
    { key: [121, 111, 112, 102, 59], value: '𝕪' },
    { key: [121, 115, 99, 114, 59], value: '𝓎' },
    { key: [121, 117, 99, 121, 59], value: 'ю' },
    { key: [121, 117, 109, 108, 59], value: 'ÿ' },
    { key: [122, 97, 99, 117, 116, 101, 59], value: 'ź' },
    { key: [122, 99, 97, 114, 111, 110, 59], value: 'ž' },
    { key: [122, 99, 121, 59], value: 'з' },
    { key: [122, 100, 111, 116, 59], value: 'ż' },
    { key: [122, 101, 101, 116, 114, 102, 59], value: 'ℨ' },
    { key: [122, 101, 116, 97, 59], value: 'ζ' },
    { key: [122, 102, 114, 59], value: '𝔷' },
    { key: [122, 104, 99, 121, 59], value: 'ж' },
    { key: [122, 105, 103, 114, 97, 114, 114, 59], value: '⇝' },
    { key: [122, 111, 112, 102, 59], value: '𝕫' },
    { key: [122, 115, 99, 114, 59], value: '𝓏' },
    { key: [122, 119, 106, 59], value: '‍' },
    { key: [122, 119, 110, 106, 59], value: '‌' }
];

exports.UnicodePcCodePoint = void 0;
(function (UnicodePcCodePoint) {
    UnicodePcCodePoint[UnicodePcCodePoint["LOW_LINE"] = 95] = "LOW_LINE";
    UnicodePcCodePoint[UnicodePcCodePoint["UNDERTIE"] = 8255] = "UNDERTIE";
    UnicodePcCodePoint[UnicodePcCodePoint["CHARACTER_TIE"] = 8256] = "CHARACTER_TIE";
    UnicodePcCodePoint[UnicodePcCodePoint["INVERTED_UNDERTIE"] = 8276] = "INVERTED_UNDERTIE";
    UnicodePcCodePoint[UnicodePcCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LOW_LINE"] = 65075] = "PRESENTATION_FORM_FOR_VERTICAL_LOW_LINE";
    UnicodePcCodePoint[UnicodePcCodePoint["PRESENTATION_FORM_FOR_VERTICAL_WAVY_LOW_LINE"] = 65076] = "PRESENTATION_FORM_FOR_VERTICAL_WAVY_LOW_LINE";
    UnicodePcCodePoint[UnicodePcCodePoint["DASHED_LOW_LINE"] = 65101] = "DASHED_LOW_LINE";
    UnicodePcCodePoint[UnicodePcCodePoint["CENTRELINE_LOW_LINE"] = 65102] = "CENTRELINE_LOW_LINE";
    UnicodePcCodePoint[UnicodePcCodePoint["WAVY_LOW_LINE"] = 65103] = "WAVY_LOW_LINE";
    UnicodePcCodePoint[UnicodePcCodePoint["FULLWIDTH_LOW_LINE"] = 65343] = "FULLWIDTH_LOW_LINE";
})(exports.UnicodePcCodePoint || (exports.UnicodePcCodePoint = {}));

exports.UnicodePdCodePoint = void 0;
(function (UnicodePdCodePoint) {
    UnicodePdCodePoint[UnicodePdCodePoint["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
    UnicodePdCodePoint[UnicodePdCodePoint["ARMENIAN_HYPHEN"] = 1418] = "ARMENIAN_HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["HEBREW_PUNCTUATION_MAQAF"] = 1470] = "HEBREW_PUNCTUATION_MAQAF";
    UnicodePdCodePoint[UnicodePdCodePoint["CANADIAN_SYLLABICS_HYPHEN"] = 5120] = "CANADIAN_SYLLABICS_HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["MONGOLIAN_TODO_SOFT_HYPHEN"] = 6150] = "MONGOLIAN_TODO_SOFT_HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["HYPHEN"] = 8208] = "HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["NON_BREAKING_HYPHEN"] = 8209] = "NON_BREAKING_HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["FIGURE_DASH"] = 8210] = "FIGURE_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["EN_DASH"] = 8211] = "EN_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["EM_DASH"] = 8212] = "EM_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["HORIZONTAL_BAR"] = 8213] = "HORIZONTAL_BAR";
    UnicodePdCodePoint[UnicodePdCodePoint["DOUBLE_OBLIQUE_HYPHEN"] = 11799] = "DOUBLE_OBLIQUE_HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["HYPHEN_WITH_DIAERESIS"] = 11802] = "HYPHEN_WITH_DIAERESIS";
    UnicodePdCodePoint[UnicodePdCodePoint["TWO_EM_DASH"] = 11834] = "TWO_EM_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["THREE_EM_DASH"] = 11835] = "THREE_EM_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["DOUBLE_HYPHEN"] = 11840] = "DOUBLE_HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["WAVE_DASH"] = 12316] = "WAVE_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["WAVY_DASH"] = 12336] = "WAVY_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["KATAKANA_HIRAGANA_DOUBLE_HYPHEN"] = 12448] = "KATAKANA_HIRAGANA_DOUBLE_HYPHEN";
    UnicodePdCodePoint[UnicodePdCodePoint["PRESENTATION_FORM_FOR_VERTICAL_EM_DASH"] = 65073] = "PRESENTATION_FORM_FOR_VERTICAL_EM_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["PRESENTATION_FORM_FOR_VERTICAL_EN_DASH"] = 65074] = "PRESENTATION_FORM_FOR_VERTICAL_EN_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["SMALL_EM_DASH"] = 65112] = "SMALL_EM_DASH";
    UnicodePdCodePoint[UnicodePdCodePoint["SMALL_HYPHEN_MINUS"] = 65123] = "SMALL_HYPHEN_MINUS";
    UnicodePdCodePoint[UnicodePdCodePoint["FULLWIDTH_HYPHEN_MINUS"] = 65293] = "FULLWIDTH_HYPHEN_MINUS";
    UnicodePdCodePoint[UnicodePdCodePoint["YEZIDI_HYPHENATION_MARK"] = 69293] = "YEZIDI_HYPHENATION_MARK";
})(exports.UnicodePdCodePoint || (exports.UnicodePdCodePoint = {}));

exports.UnicodePeCodePoint = void 0;
(function (UnicodePeCodePoint) {
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_PARENTHESIS"] = 41] = "RIGHT_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_CURLY_BRACKET"] = 125] = "RIGHT_CURLY_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["TIBETAN_MARK_GUG_RTAGS_GYAS"] = 3899] = "TIBETAN_MARK_GUG_RTAGS_GYAS";
    UnicodePeCodePoint[UnicodePeCodePoint["TIBETAN_MARK_ANG_KHANG_GYAS"] = 3901] = "TIBETAN_MARK_ANG_KHANG_GYAS";
    UnicodePeCodePoint[UnicodePeCodePoint["OGHAM_REVERSED_FEATHER_MARK"] = 5788] = "OGHAM_REVERSED_FEATHER_MARK";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_SQUARE_BRACKET_WITH_QUILL"] = 8262] = "RIGHT_SQUARE_BRACKET_WITH_QUILL";
    UnicodePeCodePoint[UnicodePeCodePoint["SUPERSCRIPT_RIGHT_PARENTHESIS"] = 8318] = "SUPERSCRIPT_RIGHT_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["SUBSCRIPT_RIGHT_PARENTHESIS"] = 8334] = "SUBSCRIPT_RIGHT_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_CEILING"] = 8969] = "RIGHT_CEILING";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_FLOOR"] = 8971] = "RIGHT_FLOOR";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_POINTING_ANGLE_BRACKET"] = 9002] = "RIGHT_POINTING_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["MEDIUM_RIGHT_PARENTHESIS_ORNAMENT"] = 10089] = "MEDIUM_RIGHT_PARENTHESIS_ORNAMENT";
    UnicodePeCodePoint[UnicodePeCodePoint["MEDIUM_FLATTENED_RIGHT_PARENTHESIS_ORNAMENT"] = 10091] = "MEDIUM_FLATTENED_RIGHT_PARENTHESIS_ORNAMENT";
    UnicodePeCodePoint[UnicodePeCodePoint["MEDIUM_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT"] = 10093] = "MEDIUM_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT";
    UnicodePeCodePoint[UnicodePeCodePoint["HEAVY_RIGHT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT"] = 10095] = "HEAVY_RIGHT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT";
    UnicodePeCodePoint[UnicodePeCodePoint["HEAVY_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT"] = 10097] = "HEAVY_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT";
    UnicodePeCodePoint[UnicodePeCodePoint["LIGHT_RIGHT_TORTOISE_SHELL_BRACKET_ORNAMENT"] = 10099] = "LIGHT_RIGHT_TORTOISE_SHELL_BRACKET_ORNAMENT";
    UnicodePeCodePoint[UnicodePeCodePoint["MEDIUM_RIGHT_CURLY_BRACKET_ORNAMENT"] = 10101] = "MEDIUM_RIGHT_CURLY_BRACKET_ORNAMENT";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_S_SHAPED_BAG_DELIMITER"] = 10182] = "RIGHT_S_SHAPED_BAG_DELIMITER";
    UnicodePeCodePoint[UnicodePeCodePoint["MATHEMATICAL_RIGHT_WHITE_SQUARE_BRACKET"] = 10215] = "MATHEMATICAL_RIGHT_WHITE_SQUARE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["MATHEMATICAL_RIGHT_ANGLE_BRACKET"] = 10217] = "MATHEMATICAL_RIGHT_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["MATHEMATICAL_RIGHT_DOUBLE_ANGLE_BRACKET"] = 10219] = "MATHEMATICAL_RIGHT_DOUBLE_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["MATHEMATICAL_RIGHT_WHITE_TORTOISE_SHELL_BRACKET"] = 10221] = "MATHEMATICAL_RIGHT_WHITE_TORTOISE_SHELL_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["MATHEMATICAL_RIGHT_FLATTENED_PARENTHESIS"] = 10223] = "MATHEMATICAL_RIGHT_FLATTENED_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_WHITE_CURLY_BRACKET"] = 10628] = "RIGHT_WHITE_CURLY_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_WHITE_PARENTHESIS"] = 10630] = "RIGHT_WHITE_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["Z_NOTATION_RIGHT_IMAGE_BRACKET"] = 10632] = "Z_NOTATION_RIGHT_IMAGE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["Z_NOTATION_RIGHT_BINDING_BRACKET"] = 10634] = "Z_NOTATION_RIGHT_BINDING_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_SQUARE_BRACKET_WITH_UNDERBAR"] = 10636] = "RIGHT_SQUARE_BRACKET_WITH_UNDERBAR";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER"] = 10638] = "RIGHT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER"] = 10640] = "RIGHT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_ANGLE_BRACKET_WITH_DOT"] = 10642] = "RIGHT_ANGLE_BRACKET_WITH_DOT";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_ARC_GREATER_THAN_BRACKET"] = 10644] = "RIGHT_ARC_GREATER_THAN_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["DOUBLE_RIGHT_ARC_LESS_THAN_BRACKET"] = 10646] = "DOUBLE_RIGHT_ARC_LESS_THAN_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_BLACK_TORTOISE_SHELL_BRACKET"] = 10648] = "RIGHT_BLACK_TORTOISE_SHELL_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_WIGGLY_FENCE"] = 10713] = "RIGHT_WIGGLY_FENCE";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_DOUBLE_WIGGLY_FENCE"] = 10715] = "RIGHT_DOUBLE_WIGGLY_FENCE";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_POINTING_CURVED_ANGLE_BRACKET"] = 10749] = "RIGHT_POINTING_CURVED_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["TOP_RIGHT_HALF_BRACKET"] = 11811] = "TOP_RIGHT_HALF_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["BOTTOM_RIGHT_HALF_BRACKET"] = 11813] = "BOTTOM_RIGHT_HALF_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_SIDEWAYS_U_BRACKET"] = 11815] = "RIGHT_SIDEWAYS_U_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_DOUBLE_PARENTHESIS"] = 11817] = "RIGHT_DOUBLE_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_ANGLE_BRACKET"] = 12297] = "RIGHT_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_DOUBLE_ANGLE_BRACKET"] = 12299] = "RIGHT_DOUBLE_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_CORNER_BRACKET"] = 12301] = "RIGHT_CORNER_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_WHITE_CORNER_BRACKET"] = 12303] = "RIGHT_WHITE_CORNER_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_BLACK_LENTICULAR_BRACKET"] = 12305] = "RIGHT_BLACK_LENTICULAR_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_TORTOISE_SHELL_BRACKET"] = 12309] = "RIGHT_TORTOISE_SHELL_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_WHITE_LENTICULAR_BRACKET"] = 12311] = "RIGHT_WHITE_LENTICULAR_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_WHITE_TORTOISE_SHELL_BRACKET"] = 12313] = "RIGHT_WHITE_TORTOISE_SHELL_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["RIGHT_WHITE_SQUARE_BRACKET"] = 12315] = "RIGHT_WHITE_SQUARE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["DOUBLE_PRIME_QUOTATION_MARK"] = 12318] = "DOUBLE_PRIME_QUOTATION_MARK";
    UnicodePeCodePoint[UnicodePeCodePoint["LOW_DOUBLE_PRIME_QUOTATION_MARK"] = 12319] = "LOW_DOUBLE_PRIME_QUOTATION_MARK";
    UnicodePeCodePoint[UnicodePeCodePoint["ORNATE_LEFT_PARENTHESIS"] = 64830] = "ORNATE_LEFT_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_LENTICULAR_BRAKCET"] = 65048] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_LENTICULAR_BRAKCET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_PARENTHESIS"] = 65078] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CURLY_BRACKET"] = 65080] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CURLY_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_TORTOISE_SHELL_BRACKET"] = 65082] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_TORTOISE_SHELL_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_BLACK_LENTICULAR_BRACKET"] = 65084] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_BLACK_LENTICULAR_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_DOUBLE_ANGLE_BRACKET"] = 65086] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_DOUBLE_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_ANGLE_BRACKET"] = 65088] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_ANGLE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CORNER_BRACKET"] = 65090] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CORNER_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_CORNER_BRACKET"] = 65092] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_CORNER_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["PRESENTATION_FORM_FOR_VERTICAL_RIGHT_SQUARE_BRACKET"] = 65096] = "PRESENTATION_FORM_FOR_VERTICAL_RIGHT_SQUARE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["SMALL_RIGHT_PARENTHESIS"] = 65114] = "SMALL_RIGHT_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["SMALL_RIGHT_CURLY_BRACKET"] = 65116] = "SMALL_RIGHT_CURLY_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["SMALL_RIGHT_TORTOISE_SHELL_BRACKET"] = 65118] = "SMALL_RIGHT_TORTOISE_SHELL_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["FULLWIDTH_RIGHT_PARENTHESIS"] = 65289] = "FULLWIDTH_RIGHT_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["FULLWIDTH_RIGHT_SQUARE_BRACKET"] = 65341] = "FULLWIDTH_RIGHT_SQUARE_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["FULLWIDTH_RIGHT_CURLY_BRACKET"] = 65373] = "FULLWIDTH_RIGHT_CURLY_BRACKET";
    UnicodePeCodePoint[UnicodePeCodePoint["FULLWIDTH_RIGHT_WHITE_PARENTHESIS"] = 65376] = "FULLWIDTH_RIGHT_WHITE_PARENTHESIS";
    UnicodePeCodePoint[UnicodePeCodePoint["HALFWIDTH_RIGHT_CORNER_BRACKET"] = 65379] = "HALFWIDTH_RIGHT_CORNER_BRACKET";
})(exports.UnicodePeCodePoint || (exports.UnicodePeCodePoint = {}));

exports.UnicodePfCodePoint = void 0;
(function (UnicodePfCodePoint) {
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK"] = 187] = "RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_SINGLE_QUOTATION_MARK"] = 8217] = "RIGHT_SINGLE_QUOTATION_MARK";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_DOUBLE_QUOTATION_MARK"] = 8221] = "RIGHT_DOUBLE_QUOTATION_MARK";
    UnicodePfCodePoint[UnicodePfCodePoint["SINGLE_RIGHT_POINTING_ANGLE_QUOTATION_MARK"] = 8250] = "SINGLE_RIGHT_POINTING_ANGLE_QUOTATION_MARK";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_SUBSTITUTION_BRACKET"] = 11779] = "RIGHT_SUBSTITUTION_BRACKET";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_DOTTED_SUBSTITUTION_BRACKET"] = 11781] = "RIGHT_DOTTED_SUBSTITUTION_BRACKET";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_TRANSPOSITION_BRACKET"] = 11786] = "RIGHT_TRANSPOSITION_BRACKET";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_RAISED_OMISSION_BRACKET"] = 11789] = "RIGHT_RAISED_OMISSION_BRACKET";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_LOW_PARAPHRASE_BRACKET"] = 11805] = "RIGHT_LOW_PARAPHRASE_BRACKET";
    UnicodePfCodePoint[UnicodePfCodePoint["RIGHT_VERTICAL_BAR_WITH_QUILL"] = 11809] = "RIGHT_VERTICAL_BAR_WITH_QUILL";
})(exports.UnicodePfCodePoint || (exports.UnicodePfCodePoint = {}));

exports.UnicodePiCodePoint = void 0;
(function (UnicodePiCodePoint) {
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK"] = 171] = "LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_SINGLE_QUOTATION_MARK"] = 8216] = "LEFT_SINGLE_QUOTATION_MARK";
    UnicodePiCodePoint[UnicodePiCodePoint["SINGLE_HIGH_REVERSED_9_QUOTATION_MARK"] = 8219] = "SINGLE_HIGH_REVERSED_9_QUOTATION_MARK";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_DOUBLE_QUOTATION_MARK"] = 8220] = "LEFT_DOUBLE_QUOTATION_MARK";
    UnicodePiCodePoint[UnicodePiCodePoint["DOUBLE_HIGH_REVERSED_9_QUOTATION_MARK"] = 8223] = "DOUBLE_HIGH_REVERSED_9_QUOTATION_MARK";
    UnicodePiCodePoint[UnicodePiCodePoint["SINGLE_LEFT_POINTING_ANGLE_QUOTATION_MARK"] = 8249] = "SINGLE_LEFT_POINTING_ANGLE_QUOTATION_MARK";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_SUBSTITUTION_BRACKET"] = 11778] = "LEFT_SUBSTITUTION_BRACKET";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_DOTTED_SUBSTITUTION_BRACKET"] = 11780] = "LEFT_DOTTED_SUBSTITUTION_BRACKET";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_TRANSPOSITION_BRACKET"] = 11785] = "LEFT_TRANSPOSITION_BRACKET";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_RAISED_OMISSION_BRACKET"] = 11788] = "LEFT_RAISED_OMISSION_BRACKET";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_LOW_PARAPHRASE_BRACKET"] = 11804] = "LEFT_LOW_PARAPHRASE_BRACKET";
    UnicodePiCodePoint[UnicodePiCodePoint["LEFT_VERTICAL_BAR_WITH_QUILL"] = 11808] = "LEFT_VERTICAL_BAR_WITH_QUILL";
})(exports.UnicodePiCodePoint || (exports.UnicodePiCodePoint = {}));

exports.UnicodePoCodePoint = void 0;
(function (UnicodePoCodePoint) {
    UnicodePoCodePoint[UnicodePoCodePoint["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["PERCENT_SIGN"] = 37] = "PERCENT_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["AMPERSAND"] = 38] = "AMPERSAND";
    UnicodePoCodePoint[UnicodePoCodePoint["APOSTROPHE"] = 39] = "APOSTROPHE";
    UnicodePoCodePoint[UnicodePoCodePoint["ASTERISK"] = 42] = "ASTERISK";
    UnicodePoCodePoint[UnicodePoCodePoint["COMMA"] = 44] = "COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["FULL_STOP"] = 46] = "FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["SOLIDUS"] = 47] = "SOLIDUS";
    UnicodePoCodePoint[UnicodePoCodePoint["COLON"] = 58] = "COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SEMICOLON"] = 59] = "SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["QUESTION_MARK"] = 63] = "QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["COMMERCIAL_AT"] = 64] = "COMMERCIAL_AT";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSE_SOLIDUS"] = 92] = "REVERSE_SOLIDUS";
    UnicodePoCodePoint[UnicodePoCodePoint["INVERTED_EXCLAMATION_MARK"] = 161] = "INVERTED_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SECTION_SIGN"] = 167] = "SECTION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["PILCROW_SIGN"] = 182] = "PILCROW_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["MIDDLE_DOT"] = 183] = "MIDDLE_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["INVERTED_QUESTION_MARK"] = 191] = "INVERTED_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["GREEK_QUESTION_MARK"] = 894] = "GREEK_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["GREEK_ANO_TELEIA"] = 903] = "GREEK_ANO_TELEIA";
    UnicodePoCodePoint[UnicodePoCodePoint["ARMENIAN_APOSTROPHE"] = 1370] = "ARMENIAN_APOSTROPHE";
    UnicodePoCodePoint[UnicodePoCodePoint["ARMENIAN_EMPHASIS_MARK"] = 1371] = "ARMENIAN_EMPHASIS_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ARMENIAN_EXCLAMATION_MARK"] = 1372] = "ARMENIAN_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ARMENIAN_COMMA"] = 1373] = "ARMENIAN_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["ARMENIAN_QUESTION_MARK"] = 1374] = "ARMENIAN_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ARMENIAN_ABBREVIATION_MARK"] = 1375] = "ARMENIAN_ABBREVIATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ARMENIAN_FULL_STOP"] = 1417] = "ARMENIAN_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["HEBREW_PUNCTUATION_PASEQ"] = 1472] = "HEBREW_PUNCTUATION_PASEQ";
    UnicodePoCodePoint[UnicodePoCodePoint["HEBREW_PUNCTUATION_SOF_PASUQ"] = 1475] = "HEBREW_PUNCTUATION_SOF_PASUQ";
    UnicodePoCodePoint[UnicodePoCodePoint["HEBREW_PUNCTUATION_NUN_HAFUKHA"] = 1478] = "HEBREW_PUNCTUATION_NUN_HAFUKHA";
    UnicodePoCodePoint[UnicodePoCodePoint["HEBREW_PUNCTUATION_GERESH"] = 1523] = "HEBREW_PUNCTUATION_GERESH";
    UnicodePoCodePoint[UnicodePoCodePoint["HEBREW_PUNCTUATION_GERSHAYIM"] = 1524] = "HEBREW_PUNCTUATION_GERSHAYIM";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_INDIC_PER_MILLE_SIGN"] = 1545] = "ARABIC_INDIC_PER_MILLE_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_INDIC_PER_TEN_THOUSAND_SIGN"] = 1546] = "ARABIC_INDIC_PER_TEN_THOUSAND_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_COMMA"] = 1548] = "ARABIC_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_DATE_SEPARATOR"] = 1549] = "ARABIC_DATE_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_SEMICOLON"] = 1563] = "ARABIC_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_TRIPLE_DOT_PUNCTUATION_MARK"] = 1566] = "ARABIC_TRIPLE_DOT_PUNCTUATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_QUESTION_MARK"] = 1567] = "ARABIC_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_PERCENT_SIGN"] = 1642] = "ARABIC_PERCENT_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_DECIMAL_SEPARATOR"] = 1643] = "ARABIC_DECIMAL_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_THOUSANDS_SEPARATOR"] = 1644] = "ARABIC_THOUSANDS_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_FIVE_POINTED_STAR"] = 1645] = "ARABIC_FIVE_POINTED_STAR";
    UnicodePoCodePoint[UnicodePoCodePoint["ARABIC_FULL_STOP"] = 1748] = "ARABIC_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_END_OF_PARAGRAPH"] = 1792] = "SYRIAC_END_OF_PARAGRAPH";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_SUPRALINEAR_FULL_STOP"] = 1793] = "SYRIAC_SUPRALINEAR_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_SUBLINEAR_FULL_STOP"] = 1794] = "SYRIAC_SUBLINEAR_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_SUPRALINEAR_COLON"] = 1795] = "SYRIAC_SUPRALINEAR_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_SUBLINEAR_COLON"] = 1796] = "SYRIAC_SUBLINEAR_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_HORIZONTAL_COLON"] = 1797] = "SYRIAC_HORIZONTAL_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_COLON_SKEWED_LEFT"] = 1798] = "SYRIAC_COLON_SKEWED_LEFT";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_COLON_SKEWED_RIGHT"] = 1799] = "SYRIAC_COLON_SKEWED_RIGHT";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_SUPRALINEAR_COLON_SKEWED_LEFT"] = 1800] = "SYRIAC_SUPRALINEAR_COLON_SKEWED_LEFT";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_SUBLINEAR_COLON_SKEWED_RIGHT"] = 1801] = "SYRIAC_SUBLINEAR_COLON_SKEWED_RIGHT";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_CONTRACTION"] = 1802] = "SYRIAC_CONTRACTION";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_HARKLEAN_OBELUS"] = 1803] = "SYRIAC_HARKLEAN_OBELUS";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_HARKLEAN_METOBELUS"] = 1804] = "SYRIAC_HARKLEAN_METOBELUS";
    UnicodePoCodePoint[UnicodePoCodePoint["SYRIAC_HARKLEAN_ASTERISCUS"] = 1805] = "SYRIAC_HARKLEAN_ASTERISCUS";
    UnicodePoCodePoint[UnicodePoCodePoint["NKO_SYMBOL_GBAKURUNEN"] = 2039] = "NKO_SYMBOL_GBAKURUNEN";
    UnicodePoCodePoint[UnicodePoCodePoint["NKO_COMMA"] = 2040] = "NKO_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["NKO_EXCLAMATION_MARK"] = 2041] = "NKO_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_NEQUDAA"] = 2096] = "SAMARITAN_PUNCTUATION_NEQUDAA";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_AFSAAQ"] = 2097] = "SAMARITAN_PUNCTUATION_AFSAAQ";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_ANGED"] = 2098] = "SAMARITAN_PUNCTUATION_ANGED";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_BAU"] = 2099] = "SAMARITAN_PUNCTUATION_BAU";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_ATMAAU"] = 2100] = "SAMARITAN_PUNCTUATION_ATMAAU";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_SHIYYAALAA"] = 2101] = "SAMARITAN_PUNCTUATION_SHIYYAALAA";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_ABBREVIATION_MARK"] = 2102] = "SAMARITAN_ABBREVIATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_MELODIC_QITSA"] = 2103] = "SAMARITAN_PUNCTUATION_MELODIC_QITSA";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_ZIQAA"] = 2104] = "SAMARITAN_PUNCTUATION_ZIQAA";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_QITSA"] = 2105] = "SAMARITAN_PUNCTUATION_QITSA";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_ZAEF"] = 2106] = "SAMARITAN_PUNCTUATION_ZAEF";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_TURU"] = 2107] = "SAMARITAN_PUNCTUATION_TURU";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_ARKAANU"] = 2108] = "SAMARITAN_PUNCTUATION_ARKAANU";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_SOF_MASHFAAT"] = 2109] = "SAMARITAN_PUNCTUATION_SOF_MASHFAAT";
    UnicodePoCodePoint[UnicodePoCodePoint["SAMARITAN_PUNCTUATION_ANNAAU"] = 2110] = "SAMARITAN_PUNCTUATION_ANNAAU";
    UnicodePoCodePoint[UnicodePoCodePoint["MANDAIC_PUNCTUATION"] = 2142] = "MANDAIC_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["DEVANAGARI_DANDA"] = 2404] = "DEVANAGARI_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["DEVANAGARI_DOUBLE_DANDA"] = 2405] = "DEVANAGARI_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["DEVANAGARI_ABBREVIATION_SIGN"] = 2416] = "DEVANAGARI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["BENGALI_ABBREVIATION_SIGN"] = 2557] = "BENGALI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["GURMUKHI_ABBREVIATION_SIGN"] = 2678] = "GURMUKHI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["GUJARATI_ABBREVIATION_SIGN"] = 2800] = "GUJARATI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["TELUGU_SIGN_SIDDHAM"] = 3191] = "TELUGU_SIGN_SIDDHAM";
    UnicodePoCodePoint[UnicodePoCodePoint["KANNADA_SIGN_SIDDHAM"] = 3204] = "KANNADA_SIGN_SIDDHAM";
    UnicodePoCodePoint[UnicodePoCodePoint["SINHALA_PUNCTUATION_KUNDDALIYA"] = 3572] = "SINHALA_PUNCTUATION_KUNDDALIYA";
    UnicodePoCodePoint[UnicodePoCodePoint["THAI_CHARACTER_FONGMAN"] = 3663] = "THAI_CHARACTER_FONGMAN";
    UnicodePoCodePoint[UnicodePoCodePoint["THAI_CHARACTER_ANGKHANKHU"] = 3674] = "THAI_CHARACTER_ANGKHANKHU";
    UnicodePoCodePoint[UnicodePoCodePoint["THAI_CHARACTER_KHOMUT"] = 3675] = "THAI_CHARACTER_KHOMUT";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_INITIAL_YIG_MGO_MDUN_MA"] = 3844] = "TIBETAN_MARK_INITIAL_YIG_MGO_MDUN_MA";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_CLOSING_YIG_MGO_SGAB_MA"] = 3845] = "TIBETAN_MARK_CLOSING_YIG_MGO_SGAB_MA";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_CARET_YIG_MGO_PHUR_SHAD_MA"] = 3846] = "TIBETAN_MARK_CARET_YIG_MGO_PHUR_SHAD_MA";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_YIG_MGO_TSHEG_SHAD_MA"] = 3847] = "TIBETAN_MARK_YIG_MGO_TSHEG_SHAD_MA";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_SBRUL_SHAD"] = 3848] = "TIBETAN_MARK_SBRUL_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_BSKUR_YIG_MGO"] = 3849] = "TIBETAN_MARK_BSKUR_YIG_MGO";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_BKA__SHOG_YIG_MGO"] = 3850] = "TIBETAN_MARK_BKA__SHOG_YIG_MGO";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_INTERSYLLABIC_TSHEG"] = 3851] = "TIBETAN_MARK_INTERSYLLABIC_TSHEG";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_DELIMITER_TSHEG_BSTAR"] = 3852] = "TIBETAN_MARK_DELIMITER_TSHEG_BSTAR";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_SHAD"] = 3853] = "TIBETAN_MARK_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_NYIS_SHAD"] = 3854] = "TIBETAN_MARK_NYIS_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_TSHEG_SHAD"] = 3855] = "TIBETAN_MARK_TSHEG_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_NYIS_TSHEG_SHAD"] = 3856] = "TIBETAN_MARK_NYIS_TSHEG_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_RIN_CHEN_SPUNGS_SHAD"] = 3857] = "TIBETAN_MARK_RIN_CHEN_SPUNGS_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_RGYA_GRAM_SHAD"] = 3858] = "TIBETAN_MARK_RGYA_GRAM_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_GTER_TSHEG"] = 3860] = "TIBETAN_MARK_GTER_TSHEG";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_PALUTA"] = 3973] = "TIBETAN_MARK_PALUTA";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_BSKA__SHOG_GI_MGO_RGYAN"] = 4048] = "TIBETAN_MARK_BSKA__SHOG_GI_MGO_RGYAN";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_MNYAM_YIG_GI_MGO_RGYAN"] = 4049] = "TIBETAN_MARK_MNYAM_YIG_GI_MGO_RGYAN";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_NYIS_TSHEG"] = 4050] = "TIBETAN_MARK_NYIS_TSHEG";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_INITIAL_BRDA_RNYING_YIG_MGO_MDUN_MA"] = 4051] = "TIBETAN_MARK_INITIAL_BRDA_RNYING_YIG_MGO_MDUN_MA";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_CLOSING_BRDA_RNYING_YIG_MGO_SGAB_MA"] = 4052] = "TIBETAN_MARK_CLOSING_BRDA_RNYING_YIG_MGO_SGAB_MA";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_LEADING_MCHAN_RTAGS"] = 4057] = "TIBETAN_MARK_LEADING_MCHAN_RTAGS";
    UnicodePoCodePoint[UnicodePoCodePoint["TIBETAN_MARK_TRAILING_MCHAN_RTAGS"] = 4058] = "TIBETAN_MARK_TRAILING_MCHAN_RTAGS";
    UnicodePoCodePoint[UnicodePoCodePoint["MYANMAR_SIGN_LITTLE_SECTION"] = 4170] = "MYANMAR_SIGN_LITTLE_SECTION";
    UnicodePoCodePoint[UnicodePoCodePoint["MYANMAR_SIGN_SECTION"] = 4171] = "MYANMAR_SIGN_SECTION";
    UnicodePoCodePoint[UnicodePoCodePoint["MYANMAR_SYMBOL_LOCATIVE"] = 4172] = "MYANMAR_SYMBOL_LOCATIVE";
    UnicodePoCodePoint[UnicodePoCodePoint["MYANMAR_SYMBOL_COMPLETED"] = 4173] = "MYANMAR_SYMBOL_COMPLETED";
    UnicodePoCodePoint[UnicodePoCodePoint["MYANMAR_SYMBOL_AFOREMENTIONED"] = 4174] = "MYANMAR_SYMBOL_AFOREMENTIONED";
    UnicodePoCodePoint[UnicodePoCodePoint["MYANMAR_SYMBOL_GENITIVE"] = 4175] = "MYANMAR_SYMBOL_GENITIVE";
    UnicodePoCodePoint[UnicodePoCodePoint["GEORGIAN_PARAGRAPH_SEPARATOR"] = 4347] = "GEORGIAN_PARAGRAPH_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_SECTION_MARK"] = 4960] = "ETHIOPIC_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_WORDSPACE"] = 4961] = "ETHIOPIC_WORDSPACE";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_FULL_STOP"] = 4962] = "ETHIOPIC_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_COMMA"] = 4963] = "ETHIOPIC_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_SEMICOLON"] = 4964] = "ETHIOPIC_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_COLON"] = 4965] = "ETHIOPIC_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_PREFACE_COLON"] = 4966] = "ETHIOPIC_PREFACE_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_QUESTION_MARK"] = 4967] = "ETHIOPIC_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ETHIOPIC_PARAGRAPH_SEPARATOR"] = 4968] = "ETHIOPIC_PARAGRAPH_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["CANADIAN_SYLLABICS_FULL_STOP"] = 5742] = "CANADIAN_SYLLABICS_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["RUNIC_SINGLE_PUNCTUATION"] = 5867] = "RUNIC_SINGLE_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["RUNIC_MULTIPLE_PUNCTUATION"] = 5868] = "RUNIC_MULTIPLE_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["RUNIC_CROSS_PUNCTUATION"] = 5869] = "RUNIC_CROSS_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["PHILIPPINE_SINGLE_PUNCTUATION"] = 5941] = "PHILIPPINE_SINGLE_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["PHILIPPINE_DOUBLE_PUNCTUATION"] = 5942] = "PHILIPPINE_DOUBLE_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["KHMER_SIGN_KHAN"] = 6100] = "KHMER_SIGN_KHAN";
    UnicodePoCodePoint[UnicodePoCodePoint["KHMER_SIGN_BARIYOOSAN"] = 6101] = "KHMER_SIGN_BARIYOOSAN";
    UnicodePoCodePoint[UnicodePoCodePoint["KHMER_SIGN_CAMNUC_PII_KUUH"] = 6102] = "KHMER_SIGN_CAMNUC_PII_KUUH";
    UnicodePoCodePoint[UnicodePoCodePoint["KHMER_SIGN_BEYYAL"] = 6104] = "KHMER_SIGN_BEYYAL";
    UnicodePoCodePoint[UnicodePoCodePoint["KHMER_SIGN_PHNAEK_MUAN"] = 6105] = "KHMER_SIGN_PHNAEK_MUAN";
    UnicodePoCodePoint[UnicodePoCodePoint["KHMER_SIGN_KOOMUUT"] = 6106] = "KHMER_SIGN_KOOMUUT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_BIRGA"] = 6144] = "MONGOLIAN_BIRGA";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_ELLIPSIS"] = 6145] = "MONGOLIAN_ELLIPSIS";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_COMMA"] = 6146] = "MONGOLIAN_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_FULL_STOP"] = 6147] = "MONGOLIAN_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_COLON"] = 6148] = "MONGOLIAN_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_FOUR_DOTS"] = 6149] = "MONGOLIAN_FOUR_DOTS";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_SIBE_SYLLABLE_BOUNDARY_MARKER"] = 6151] = "MONGOLIAN_SIBE_SYLLABLE_BOUNDARY_MARKER";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_MANCHU_COMMA"] = 6152] = "MONGOLIAN_MANCHU_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_MANCHU_FULL_STOP"] = 6153] = "MONGOLIAN_MANCHU_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_NIRUGU"] = 6154] = "MONGOLIAN_NIRUGU";
    UnicodePoCodePoint[UnicodePoCodePoint["LIMBU_EXCLAMATION_MARK"] = 6468] = "LIMBU_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["LIMBU_QUESTION_MARK"] = 6469] = "LIMBU_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["BUGINESE_PALLAWA"] = 6686] = "BUGINESE_PALLAWA";
    UnicodePoCodePoint[UnicodePoCodePoint["BUGINESE_END_OF_SECTION"] = 6687] = "BUGINESE_END_OF_SECTION";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_WIANG"] = 6816] = "TAI_THAM_SIGN_WIANG";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_WIANGWAAK"] = 6817] = "TAI_THAM_SIGN_WIANGWAAK";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_SAWAN"] = 6818] = "TAI_THAM_SIGN_SAWAN";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_KEOW"] = 6819] = "TAI_THAM_SIGN_KEOW";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_HOY"] = 6820] = "TAI_THAM_SIGN_HOY";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_DOKMAI"] = 6821] = "TAI_THAM_SIGN_DOKMAI";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_REVERSED_ROTATED_RANA"] = 6822] = "TAI_THAM_SIGN_REVERSED_ROTATED_RANA";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_KAAN"] = 6824] = "TAI_THAM_SIGN_KAAN";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_KAANKUU"] = 6825] = "TAI_THAM_SIGN_KAANKUU";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_SATKAAN"] = 6826] = "TAI_THAM_SIGN_SATKAAN";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_SATKAANKUU"] = 6827] = "TAI_THAM_SIGN_SATKAANKUU";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_HANG"] = 6828] = "TAI_THAM_SIGN_HANG";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_THAM_SIGN_CAANG"] = 6829] = "TAI_THAM_SIGN_CAANG";
    UnicodePoCodePoint[UnicodePoCodePoint["BALINESE_PANTI"] = 7002] = "BALINESE_PANTI";
    UnicodePoCodePoint[UnicodePoCodePoint["BALINESE_PAMADA"] = 7003] = "BALINESE_PAMADA";
    UnicodePoCodePoint[UnicodePoCodePoint["BALINESE_WINDU"] = 7004] = "BALINESE_WINDU";
    UnicodePoCodePoint[UnicodePoCodePoint["BALINESE_CARIK_PAMUNGKAH"] = 7005] = "BALINESE_CARIK_PAMUNGKAH";
    UnicodePoCodePoint[UnicodePoCodePoint["BALINESE_CARIK_SIKI"] = 7006] = "BALINESE_CARIK_SIKI";
    UnicodePoCodePoint[UnicodePoCodePoint["BALINESE_CARIK_PAREREN"] = 7007] = "BALINESE_CARIK_PAREREN";
    UnicodePoCodePoint[UnicodePoCodePoint["BALINESE_PAMENENG"] = 7008] = "BALINESE_PAMENENG";
    UnicodePoCodePoint[UnicodePoCodePoint["BATAK_SYMBOL_BINDU_NA_METEK"] = 7164] = "BATAK_SYMBOL_BINDU_NA_METEK";
    UnicodePoCodePoint[UnicodePoCodePoint["BATAK_SYMBOL_BINDU_PINARBORAS"] = 7165] = "BATAK_SYMBOL_BINDU_PINARBORAS";
    UnicodePoCodePoint[UnicodePoCodePoint["BATAK_SYMBOL_BINDU_JUDUL"] = 7166] = "BATAK_SYMBOL_BINDU_JUDUL";
    UnicodePoCodePoint[UnicodePoCodePoint["BATAK_SYMBOL_BINDU_PANGOLAT"] = 7167] = "BATAK_SYMBOL_BINDU_PANGOLAT";
    UnicodePoCodePoint[UnicodePoCodePoint["LEPCHA_PUNCTUATION_TA_ROL"] = 7227] = "LEPCHA_PUNCTUATION_TA_ROL";
    UnicodePoCodePoint[UnicodePoCodePoint["LEPCHA_PUNCTUATION_NYET_THYOOM_TA_ROL"] = 7228] = "LEPCHA_PUNCTUATION_NYET_THYOOM_TA_ROL";
    UnicodePoCodePoint[UnicodePoCodePoint["LEPCHA_PUNCTUATION_CER_WA"] = 7229] = "LEPCHA_PUNCTUATION_CER_WA";
    UnicodePoCodePoint[UnicodePoCodePoint["LEPCHA_PUNCTUATION_TSHOOK_CER_WA"] = 7230] = "LEPCHA_PUNCTUATION_TSHOOK_CER_WA";
    UnicodePoCodePoint[UnicodePoCodePoint["LEPCHA_PUNCTUATION_TSHOOK"] = 7231] = "LEPCHA_PUNCTUATION_TSHOOK";
    UnicodePoCodePoint[UnicodePoCodePoint["OL_CHIKI_PUNCTUATION_MUCAAD"] = 7294] = "OL_CHIKI_PUNCTUATION_MUCAAD";
    UnicodePoCodePoint[UnicodePoCodePoint["OL_CHIKI_PUNCTUATION_DOUBLE_MUCAAD"] = 7295] = "OL_CHIKI_PUNCTUATION_DOUBLE_MUCAAD";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_SURYA"] = 7360] = "SUNDANESE_PUNCTUATION_BINDU_SURYA";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_PANGLONG"] = 7361] = "SUNDANESE_PUNCTUATION_BINDU_PANGLONG";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_PURNAMA"] = 7362] = "SUNDANESE_PUNCTUATION_BINDU_PURNAMA";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_CAKRA"] = 7363] = "SUNDANESE_PUNCTUATION_BINDU_CAKRA";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_LEU_SATANGA"] = 7364] = "SUNDANESE_PUNCTUATION_BINDU_LEU_SATANGA";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_KA_SATANGA"] = 7365] = "SUNDANESE_PUNCTUATION_BINDU_KA_SATANGA";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_DA_SATANGA"] = 7366] = "SUNDANESE_PUNCTUATION_BINDU_DA_SATANGA";
    UnicodePoCodePoint[UnicodePoCodePoint["SUNDANESE_PUNCTUATION_BINDU_BA_SATANGA"] = 7367] = "SUNDANESE_PUNCTUATION_BINDU_BA_SATANGA";
    UnicodePoCodePoint[UnicodePoCodePoint["VEDIC_SIGN_NIHSHVASA"] = 7379] = "VEDIC_SIGN_NIHSHVASA";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_VERTICAL_LINE"] = 8214] = "DOUBLE_VERTICAL_LINE";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_LOW_LINE"] = 8215] = "DOUBLE_LOW_LINE";
    UnicodePoCodePoint[UnicodePoCodePoint["DAGGER"] = 8224] = "DAGGER";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_DAGGER"] = 8225] = "DOUBLE_DAGGER";
    UnicodePoCodePoint[UnicodePoCodePoint["BULLET"] = 8226] = "BULLET";
    UnicodePoCodePoint[UnicodePoCodePoint["TRIANGULAR_BULLET"] = 8227] = "TRIANGULAR_BULLET";
    UnicodePoCodePoint[UnicodePoCodePoint["ONE_DOT_LEADER"] = 8228] = "ONE_DOT_LEADER";
    UnicodePoCodePoint[UnicodePoCodePoint["TWO_DOT_LEADER"] = 8229] = "TWO_DOT_LEADER";
    UnicodePoCodePoint[UnicodePoCodePoint["HORIZONTAL_ELLIPSIS"] = 8230] = "HORIZONTAL_ELLIPSIS";
    UnicodePoCodePoint[UnicodePoCodePoint["HYPHENATION_POINT"] = 8231] = "HYPHENATION_POINT";
    UnicodePoCodePoint[UnicodePoCodePoint["PER_MILLE_SIGN"] = 8240] = "PER_MILLE_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["PER_TEN_THOUSAND_SIGN"] = 8241] = "PER_TEN_THOUSAND_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["PRIME"] = 8242] = "PRIME";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_PRIME"] = 8243] = "DOUBLE_PRIME";
    UnicodePoCodePoint[UnicodePoCodePoint["TRIPLE_PRIME"] = 8244] = "TRIPLE_PRIME";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_PRIME"] = 8245] = "REVERSED_PRIME";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_DOUBLE_PRIME"] = 8246] = "REVERSED_DOUBLE_PRIME";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_TRIPLE_PRIME"] = 8247] = "REVERSED_TRIPLE_PRIME";
    UnicodePoCodePoint[UnicodePoCodePoint["CARET"] = 8248] = "CARET";
    UnicodePoCodePoint[UnicodePoCodePoint["REFERENCE_MARK"] = 8251] = "REFERENCE_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_EXCLAMATION_MARK"] = 8252] = "DOUBLE_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["INTERROBANG"] = 8253] = "INTERROBANG";
    UnicodePoCodePoint[UnicodePoCodePoint["OVERLINE"] = 8254] = "OVERLINE";
    UnicodePoCodePoint[UnicodePoCodePoint["CARET_INSERTION_POINT"] = 8257] = "CARET_INSERTION_POINT";
    UnicodePoCodePoint[UnicodePoCodePoint["ASTERISM"] = 8258] = "ASTERISM";
    UnicodePoCodePoint[UnicodePoCodePoint["HYPHEN_BULLET"] = 8259] = "HYPHEN_BULLET";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_QUESTION_MARK"] = 8263] = "DOUBLE_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["QUESTION_EXCLAMATION_MARK"] = 8264] = "QUESTION_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["EXCLAMATION_QUESTION_MARK"] = 8265] = "EXCLAMATION_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["TIRONIAN_SIGN_ET"] = 8266] = "TIRONIAN_SIGN_ET";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_PILCROW_SIGN"] = 8267] = "REVERSED_PILCROW_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["BLACK_LEFTWARDS_BULLET"] = 8268] = "BLACK_LEFTWARDS_BULLET";
    UnicodePoCodePoint[UnicodePoCodePoint["BLACK_RIGHTWARDS_BULLET"] = 8269] = "BLACK_RIGHTWARDS_BULLET";
    UnicodePoCodePoint[UnicodePoCodePoint["LOW_ASTERISK"] = 8270] = "LOW_ASTERISK";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_SEMICOLON"] = 8271] = "REVERSED_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["CLOSE_UP"] = 8272] = "CLOSE_UP";
    UnicodePoCodePoint[UnicodePoCodePoint["TWO_ASTERISKS_ALIGNED_VERTICALLY"] = 8273] = "TWO_ASTERISKS_ALIGNED_VERTICALLY";
    UnicodePoCodePoint[UnicodePoCodePoint["SWUNG_DASH"] = 8275] = "SWUNG_DASH";
    UnicodePoCodePoint[UnicodePoCodePoint["FLOWER_PUNCTUATION_MARK"] = 8277] = "FLOWER_PUNCTUATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["THREE_DOT_PUNCTUATION"] = 8278] = "THREE_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["QUADRUPLE_PRIME"] = 8279] = "QUADRUPLE_PRIME";
    UnicodePoCodePoint[UnicodePoCodePoint["FOUR_DOT_PUNCTUATION"] = 8280] = "FOUR_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["FIVE_DOT_PUNCTUATION"] = 8281] = "FIVE_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["TWO_DOT_PUNCTUATION"] = 8282] = "TWO_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["FOUR_DOT_MARK"] = 8283] = "FOUR_DOT_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["DOTTED_CROSS"] = 8284] = "DOTTED_CROSS";
    UnicodePoCodePoint[UnicodePoCodePoint["TRICOLON"] = 8285] = "TRICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["VERTICAL_FOUR_DOTS"] = 8286] = "VERTICAL_FOUR_DOTS";
    UnicodePoCodePoint[UnicodePoCodePoint["COPTIC_OLD_NUBIAN_FULL_STOP"] = 11513] = "COPTIC_OLD_NUBIAN_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["COPTIC_OLD_NUBIAN_DIRECT_QUESTION_MARK"] = 11514] = "COPTIC_OLD_NUBIAN_DIRECT_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["COPTIC_OLD_NUBIAN_INDIRECT_QUESTION_MARK"] = 11515] = "COPTIC_OLD_NUBIAN_INDIRECT_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["COPTIC_OLD_NUBIAN_VERSE_DIVIDER"] = 11516] = "COPTIC_OLD_NUBIAN_VERSE_DIVIDER";
    UnicodePoCodePoint[UnicodePoCodePoint["COPTIC_FULL_STOP"] = 11518] = "COPTIC_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["COPTIC_MORPHOLOGICAL_DIVIDER"] = 11519] = "COPTIC_MORPHOLOGICAL_DIVIDER";
    UnicodePoCodePoint[UnicodePoCodePoint["TIFINAGH_SEPARATOR_MARK"] = 11632] = "TIFINAGH_SEPARATOR_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["RIGHT_ANGLE_SUBSTITUTION_MARKER"] = 11776] = "RIGHT_ANGLE_SUBSTITUTION_MARKER";
    UnicodePoCodePoint[UnicodePoCodePoint["RIGHT_ANGLE_DOTTED_SUBSTITUTION_MARKER"] = 11777] = "RIGHT_ANGLE_DOTTED_SUBSTITUTION_MARKER";
    UnicodePoCodePoint[UnicodePoCodePoint["RAISED_INTERPOLATION_MARKER"] = 11782] = "RAISED_INTERPOLATION_MARKER";
    UnicodePoCodePoint[UnicodePoCodePoint["RAISED_DOTTED_INTERPOLATION_MARKER"] = 11783] = "RAISED_DOTTED_INTERPOLATION_MARKER";
    UnicodePoCodePoint[UnicodePoCodePoint["DOTTED_TRANSPOSITION_MARKER"] = 11784] = "DOTTED_TRANSPOSITION_MARKER";
    UnicodePoCodePoint[UnicodePoCodePoint["RAISED_SQUARE"] = 11787] = "RAISED_SQUARE";
    UnicodePoCodePoint[UnicodePoCodePoint["EDITORIAL_CORONIS"] = 11790] = "EDITORIAL_CORONIS";
    UnicodePoCodePoint[UnicodePoCodePoint["PARAGRAPHOS"] = 11791] = "PARAGRAPHOS";
    UnicodePoCodePoint[UnicodePoCodePoint["FORKED_PARAGRAPHOS"] = 11792] = "FORKED_PARAGRAPHOS";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_FORKED_PARAGRAPHOS"] = 11793] = "REVERSED_FORKED_PARAGRAPHOS";
    UnicodePoCodePoint[UnicodePoCodePoint["HYPODIASTOLE"] = 11794] = "HYPODIASTOLE";
    UnicodePoCodePoint[UnicodePoCodePoint["DOTTED_OBELOS"] = 11795] = "DOTTED_OBELOS";
    UnicodePoCodePoint[UnicodePoCodePoint["DOWNWARDS_ANCORA"] = 11796] = "DOWNWARDS_ANCORA";
    UnicodePoCodePoint[UnicodePoCodePoint["UPWARDS_ANCORA"] = 11797] = "UPWARDS_ANCORA";
    UnicodePoCodePoint[UnicodePoCodePoint["DOTTED_RIGHT_POINTING_ANGLE"] = 11798] = "DOTTED_RIGHT_POINTING_ANGLE";
    UnicodePoCodePoint[UnicodePoCodePoint["INVERTED_INTERROBANG"] = 11800] = "INVERTED_INTERROBANG";
    UnicodePoCodePoint[UnicodePoCodePoint["PALM_BRANCH"] = 11801] = "PALM_BRANCH";
    UnicodePoCodePoint[UnicodePoCodePoint["TILDE_WITH_RING_ABOVE"] = 11803] = "TILDE_WITH_RING_ABOVE";
    UnicodePoCodePoint[UnicodePoCodePoint["TILDE_WITH_DOT_ABOVE"] = 11806] = "TILDE_WITH_DOT_ABOVE";
    UnicodePoCodePoint[UnicodePoCodePoint["TILDE_WITH_DOT_BELOW"] = 11807] = "TILDE_WITH_DOT_BELOW";
    UnicodePoCodePoint[UnicodePoCodePoint["TWO_DOTS_OVER_ONE_DOT_PUNCTUATION"] = 11818] = "TWO_DOTS_OVER_ONE_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["ONE_DOT_OVER_TWO_DOTS_PUNCTUATION"] = 11819] = "ONE_DOT_OVER_TWO_DOTS_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["SQUARED_FOUR_DOT_PUNCTUATION"] = 11820] = "SQUARED_FOUR_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["FIVE_DOT_MARK"] = 11821] = "FIVE_DOT_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_QUESTION_MARK"] = 11822] = "REVERSED_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["RING_POINT"] = 11824] = "RING_POINT";
    UnicodePoCodePoint[UnicodePoCodePoint["WORD_SEPARATOR_MIDDLE_DOT"] = 11825] = "WORD_SEPARATOR_MIDDLE_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["TURNED_COMMA"] = 11826] = "TURNED_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["RAISED_DOT"] = 11827] = "RAISED_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["RAISED_COMMA"] = 11828] = "RAISED_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["TURNED_SEMICOLON"] = 11829] = "TURNED_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["DAGGER_WITH_LEFT_GUARD"] = 11830] = "DAGGER_WITH_LEFT_GUARD";
    UnicodePoCodePoint[UnicodePoCodePoint["DAGGER_WITH_RIGHT_GUARD"] = 11831] = "DAGGER_WITH_RIGHT_GUARD";
    UnicodePoCodePoint[UnicodePoCodePoint["TURNED_DAGGER"] = 11832] = "TURNED_DAGGER";
    UnicodePoCodePoint[UnicodePoCodePoint["TOP_HALF_SECTION_SIGN"] = 11833] = "TOP_HALF_SECTION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["STENOGRAPHIC_FULL_STOP"] = 11836] = "STENOGRAPHIC_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["VERTICAL_SIX_DOTS"] = 11837] = "VERTICAL_SIX_DOTS";
    UnicodePoCodePoint[UnicodePoCodePoint["WIGGLY_VERTICAL_LINE"] = 11838] = "WIGGLY_VERTICAL_LINE";
    UnicodePoCodePoint[UnicodePoCodePoint["CAPITULUM"] = 11839] = "CAPITULUM";
    UnicodePoCodePoint[UnicodePoCodePoint["REVERSED_COMMA"] = 11841] = "REVERSED_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["DASH_WITH_LEFT_UPTURN"] = 11843] = "DASH_WITH_LEFT_UPTURN";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_SUSPENSION_MARK"] = 11844] = "DOUBLE_SUSPENSION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["INVERTED_LOW_KAVYKA"] = 11845] = "INVERTED_LOW_KAVYKA";
    UnicodePoCodePoint[UnicodePoCodePoint["INVERTED_LOW_KAVYKA_WITH_KAVYKA_ABOVE"] = 11846] = "INVERTED_LOW_KAVYKA_WITH_KAVYKA_ABOVE";
    UnicodePoCodePoint[UnicodePoCodePoint["LOW_KAVYKA"] = 11847] = "LOW_KAVYKA";
    UnicodePoCodePoint[UnicodePoCodePoint["LOW_KAVYKA_WITH_DOT"] = 11848] = "LOW_KAVYKA_WITH_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_STACKED_COMMA"] = 11849] = "DOUBLE_STACKED_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["DOTTED_SOLIDUS"] = 11850] = "DOTTED_SOLIDUS";
    UnicodePoCodePoint[UnicodePoCodePoint["TRIPLE_DAGGER"] = 11851] = "TRIPLE_DAGGER";
    UnicodePoCodePoint[UnicodePoCodePoint["MEDIEVAL_COMMA"] = 11852] = "MEDIEVAL_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["PARAGRAPHUS_MARK"] = 11853] = "PARAGRAPHUS_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PUNCTUS_ELEVATUS_MARK"] = 11854] = "PUNCTUS_ELEVATUS_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["CORNISH_VERSE_DIVIDER"] = 11855] = "CORNISH_VERSE_DIVIDER";
    UnicodePoCodePoint[UnicodePoCodePoint["TIRONIAN_SIGN_CAPITAL_ET"] = 11858] = "TIRONIAN_SIGN_CAPITAL_ET";
    UnicodePoCodePoint[UnicodePoCodePoint["IDEOGRAPHIC_COMMA"] = 12289] = "IDEOGRAPHIC_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["IDEOGRAPHIC_FULL_STOP"] = 12290] = "IDEOGRAPHIC_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["DITTO_MARK"] = 12291] = "DITTO_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PART_ALTERNATION_MARK"] = 12349] = "PART_ALTERNATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["KATAKANA_MIDDLE_DOT"] = 12539] = "KATAKANA_MIDDLE_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["LISU_PUNCTUATION_COMMA"] = 42238] = "LISU_PUNCTUATION_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["LISU_PUNCTUATION_FULL_STOP"] = 42239] = "LISU_PUNCTUATION_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["VAI_COMMA"] = 42509] = "VAI_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["VAI_FULL_STOP"] = 42510] = "VAI_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["VAI_QUESTION_MARK"] = 42511] = "VAI_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SLAVONIC_ASTERISK"] = 42611] = "SLAVONIC_ASTERISK";
    UnicodePoCodePoint[UnicodePoCodePoint["CYRILLIC_KAVYKA"] = 42622] = "CYRILLIC_KAVYKA";
    UnicodePoCodePoint[UnicodePoCodePoint["BAMUM_NJAEMLI"] = 42738] = "BAMUM_NJAEMLI";
    UnicodePoCodePoint[UnicodePoCodePoint["BAMUM_FULL_STOP"] = 42739] = "BAMUM_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["BAMUM_COLON"] = 42740] = "BAMUM_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["BAMUM_COMMA"] = 42741] = "BAMUM_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["BAMUM_SEMICOLON"] = 42742] = "BAMUM_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["BAMUM_QUESTION_MARK"] = 42743] = "BAMUM_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PHAGS_PA_SINGLE_HEAD_MARK"] = 43124] = "PHAGS_PA_SINGLE_HEAD_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PHAGS_PA_DOUBLE_HEAD_MARK"] = 43125] = "PHAGS_PA_DOUBLE_HEAD_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PHAGS_PA_MARK_SHAD"] = 43126] = "PHAGS_PA_MARK_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["PHAGS_PA_MARK_DOUBLE_SHAD"] = 43127] = "PHAGS_PA_MARK_DOUBLE_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["SAURASHTRA_DANDA"] = 43214] = "SAURASHTRA_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["SAURASHTRA_DOUBLE_DANDA"] = 43215] = "SAURASHTRA_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["DEVANAGARI_SIGN_PUSHPIKA"] = 43256] = "DEVANAGARI_SIGN_PUSHPIKA";
    UnicodePoCodePoint[UnicodePoCodePoint["DEVANAGARI_GAP_FILLER"] = 43257] = "DEVANAGARI_GAP_FILLER";
    UnicodePoCodePoint[UnicodePoCodePoint["DEVANAGARI_CARET"] = 43258] = "DEVANAGARI_CARET";
    UnicodePoCodePoint[UnicodePoCodePoint["DEVANAGARI_SIGN_SIDDHAM"] = 43260] = "DEVANAGARI_SIGN_SIDDHAM";
    UnicodePoCodePoint[UnicodePoCodePoint["KAYAH_LI_SIGN_CWI"] = 43310] = "KAYAH_LI_SIGN_CWI";
    UnicodePoCodePoint[UnicodePoCodePoint["KAYAH_LI_SIGN_SHYA"] = 43311] = "KAYAH_LI_SIGN_SHYA";
    UnicodePoCodePoint[UnicodePoCodePoint["REJANG_SECTION_MARK"] = 43359] = "REJANG_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_LEFT_RERENGGAN"] = 43457] = "JAVANESE_LEFT_RERENGGAN";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_RIGHT_RERENGGAN"] = 43458] = "JAVANESE_RIGHT_RERENGGAN";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_ANDAP"] = 43459] = "JAVANESE_PADA_ANDAP";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_MADYA"] = 43460] = "JAVANESE_PADA_MADYA";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_LUHUR"] = 43461] = "JAVANESE_PADA_LUHUR";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_WINDU"] = 43462] = "JAVANESE_PADA_WINDU";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_PANGKAT"] = 43463] = "JAVANESE_PADA_PANGKAT";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_LINGSA"] = 43464] = "JAVANESE_PADA_LINGSA";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_LUNGSI"] = 43465] = "JAVANESE_PADA_LUNGSI";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_ADEG"] = 43466] = "JAVANESE_PADA_ADEG";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_ADEG_ADEG"] = 43467] = "JAVANESE_PADA_ADEG_ADEG";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_PISELEH"] = 43468] = "JAVANESE_PADA_PISELEH";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_TURNED_PADA_PISELEH"] = 43469] = "JAVANESE_TURNED_PADA_PISELEH";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_TIRTA_TUMETES"] = 43486] = "JAVANESE_PADA_TIRTA_TUMETES";
    UnicodePoCodePoint[UnicodePoCodePoint["JAVANESE_PADA_ISEN_ISEN"] = 43487] = "JAVANESE_PADA_ISEN_ISEN";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAM_PUNCTUATION_SPIRAL"] = 43612] = "CHAM_PUNCTUATION_SPIRAL";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAM_PUNCTUATION_DANDA"] = 43613] = "CHAM_PUNCTUATION_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAM_PUNCTUATION_DOUBLE_DANDA"] = 43614] = "CHAM_PUNCTUATION_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAM_PUNCTUATION_TRIPLE_DANDA"] = 43615] = "CHAM_PUNCTUATION_TRIPLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_VIET_SYMBOL_HO_HOI"] = 43742] = "TAI_VIET_SYMBOL_HO_HOI";
    UnicodePoCodePoint[UnicodePoCodePoint["TAI_VIET_SYMBOL_KOI_KOI"] = 43743] = "TAI_VIET_SYMBOL_KOI_KOI";
    UnicodePoCodePoint[UnicodePoCodePoint["MEETEI_MAYEK_CHEIKHAN"] = 43760] = "MEETEI_MAYEK_CHEIKHAN";
    UnicodePoCodePoint[UnicodePoCodePoint["MEETEI_MAYEK_AHANG_KHUDAM"] = 43761] = "MEETEI_MAYEK_AHANG_KHUDAM";
    UnicodePoCodePoint[UnicodePoCodePoint["MEETEI_MAYEK_CHEIKHEI"] = 44011] = "MEETEI_MAYEK_CHEIKHEI";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_COMMA"] = 65040] = "PRESENTATION_FORM_FOR_VERTICAL_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_COMMA"] = 65041] = "PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_FULL_STOP"] = 65042] = "PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_COLON"] = 65043] = "PRESENTATION_FORM_FOR_VERTICAL_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_SEMICOLON"] = 65044] = "PRESENTATION_FORM_FOR_VERTICAL_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_EXCLAMATION_MARK"] = 65045] = "PRESENTATION_FORM_FOR_VERTICAL_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_QUESTION_MARK"] = 65046] = "PRESENTATION_FORM_FOR_VERTICAL_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_HORIZONTAL_ELLIPSIS"] = 65049] = "PRESENTATION_FORM_FOR_VERTICAL_HORIZONTAL_ELLIPSIS";
    UnicodePoCodePoint[UnicodePoCodePoint["PRESENTATION_FORM_FOR_VERTICAL_TWO_DOT_LEADER"] = 65072] = "PRESENTATION_FORM_FOR_VERTICAL_TWO_DOT_LEADER";
    UnicodePoCodePoint[UnicodePoCodePoint["SESAME_DOT"] = 65093] = "SESAME_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["WHITE_SESAME_DOT"] = 65094] = "WHITE_SESAME_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["DASHED_OVERLINE"] = 65097] = "DASHED_OVERLINE";
    UnicodePoCodePoint[UnicodePoCodePoint["CENTRELINE_OVERLINE"] = 65098] = "CENTRELINE_OVERLINE";
    UnicodePoCodePoint[UnicodePoCodePoint["WAVY_OVERLINE"] = 65099] = "WAVY_OVERLINE";
    UnicodePoCodePoint[UnicodePoCodePoint["DOUBLE_WAVY_OVERLINE"] = 65100] = "DOUBLE_WAVY_OVERLINE";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_COMMA"] = 65104] = "SMALL_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_IDEOGRAPHIC_COMMA"] = 65105] = "SMALL_IDEOGRAPHIC_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_FULL_STOP"] = 65106] = "SMALL_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_SEMICOLON"] = 65108] = "SMALL_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_COLON"] = 65109] = "SMALL_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_QUESTION_MARK"] = 65110] = "SMALL_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_EXCLAMATION_MARK"] = 65111] = "SMALL_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_NUMBER_SIGN"] = 65119] = "SMALL_NUMBER_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_AMPERSAND"] = 65120] = "SMALL_AMPERSAND";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_ASTERISK"] = 65121] = "SMALL_ASTERISK";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_REVERSE_SOLIDUS"] = 65128] = "SMALL_REVERSE_SOLIDUS";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_PERCENT_SIGN"] = 65130] = "SMALL_PERCENT_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_COMMERCIAL_AT"] = 65131] = "SMALL_COMMERCIAL_AT";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_EXCLAMATION_MARK"] = 65281] = "FULLWIDTH_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_QUOTATION_MARK"] = 65282] = "FULLWIDTH_QUOTATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_NUMBER_SIGN"] = 65283] = "FULLWIDTH_NUMBER_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_PERCENT_SIGN"] = 65285] = "FULLWIDTH_PERCENT_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_AMPERSAND"] = 65286] = "FULLWIDTH_AMPERSAND";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_APOSTROPHE"] = 65287] = "FULLWIDTH_APOSTROPHE";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_ASTERISK"] = 65290] = "FULLWIDTH_ASTERISK";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_COMMA"] = 65292] = "FULLWIDTH_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_FULL_STOP"] = 65294] = "FULLWIDTH_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_SOLIDUS"] = 65295] = "FULLWIDTH_SOLIDUS";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_COLON"] = 65306] = "FULLWIDTH_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_SEMICOLON"] = 65307] = "FULLWIDTH_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_QUESTION_MARK"] = 65311] = "FULLWIDTH_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_COMMERCIAL_AT"] = 65312] = "FULLWIDTH_COMMERCIAL_AT";
    UnicodePoCodePoint[UnicodePoCodePoint["FULLWIDTH_REVERSE_SOLIDUS"] = 65340] = "FULLWIDTH_REVERSE_SOLIDUS";
    UnicodePoCodePoint[UnicodePoCodePoint["HALFWIDTH_IDEOGRAPHIC_FULL_STOP"] = 65377] = "HALFWIDTH_IDEOGRAPHIC_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["HALFWIDTH_IDEOGRAPHIC_COMMA"] = 65380] = "HALFWIDTH_IDEOGRAPHIC_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["HALFWIDTH_KATAKANA_MIDDLE_DOT"] = 65381] = "HALFWIDTH_KATAKANA_MIDDLE_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["AEGEAN_WORD_SEPARATOR_LINE"] = 65792] = "AEGEAN_WORD_SEPARATOR_LINE";
    UnicodePoCodePoint[UnicodePoCodePoint["AEGEAN_WORD_SEPARATOR_DOT"] = 65793] = "AEGEAN_WORD_SEPARATOR_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["AEGEAN_CHECK_MARK"] = 65794] = "AEGEAN_CHECK_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["UGARITIC_WORD_DIVIDER"] = 66463] = "UGARITIC_WORD_DIVIDER";
    UnicodePoCodePoint[UnicodePoCodePoint["OLD_PERSIAN_WORD_DIVIDER"] = 66512] = "OLD_PERSIAN_WORD_DIVIDER";
    UnicodePoCodePoint[UnicodePoCodePoint["CAUCASIAN_ALBANIAN_CITATION_MARK"] = 66927] = "CAUCASIAN_ALBANIAN_CITATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["IMPERIAL_ARAMAIC_SECTION_SIGN"] = 67671] = "IMPERIAL_ARAMAIC_SECTION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["PHOENICIAN_WORD_SEPARATOR"] = 67871] = "PHOENICIAN_WORD_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["LYDIAN_TRIANGULAR_MARK"] = 67903] = "LYDIAN_TRIANGULAR_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_DOT"] = 68176] = "KHAROSHTHI_PUNCTUATION_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_SMALL_CIRCLE"] = 68177] = "KHAROSHTHI_PUNCTUATION_SMALL_CIRCLE";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_CIRCLE"] = 68178] = "KHAROSHTHI_PUNCTUATION_CIRCLE";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_CRESCENT_BAR"] = 68179] = "KHAROSHTHI_PUNCTUATION_CRESCENT_BAR";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_MANGALAM"] = 68180] = "KHAROSHTHI_PUNCTUATION_MANGALAM";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_LOTUS"] = 68181] = "KHAROSHTHI_PUNCTUATION_LOTUS";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_DANDA"] = 68182] = "KHAROSHTHI_PUNCTUATION_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_DOUBLE_DANDA"] = 68183] = "KHAROSHTHI_PUNCTUATION_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["KHAROSHTHI_PUNCTUATION_LINES"] = 68184] = "KHAROSHTHI_PUNCTUATION_LINES";
    UnicodePoCodePoint[UnicodePoCodePoint["OLD_SOUTH_ARABIAN_NUMERIC_INDICATOR"] = 68223] = "OLD_SOUTH_ARABIAN_NUMERIC_INDICATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["MANICHAEAN_PUNCTUATION_STAR"] = 68336] = "MANICHAEAN_PUNCTUATION_STAR";
    UnicodePoCodePoint[UnicodePoCodePoint["MANICHAEAN_PUNCTUATION_FLEURON"] = 68337] = "MANICHAEAN_PUNCTUATION_FLEURON";
    UnicodePoCodePoint[UnicodePoCodePoint["MANICHAEAN_PUNCTUATION_DOUBLE_DOT_WITHIN_DOT"] = 68338] = "MANICHAEAN_PUNCTUATION_DOUBLE_DOT_WITHIN_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["MANICHAEAN_PUNCTUATION_DOT_WITHIN_DOT"] = 68339] = "MANICHAEAN_PUNCTUATION_DOT_WITHIN_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["MANICHAEAN_PUNCTUATION_DOT"] = 68340] = "MANICHAEAN_PUNCTUATION_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["MANICHAEAN_PUNCTUATION_TWO_DOTS"] = 68341] = "MANICHAEAN_PUNCTUATION_TWO_DOTS";
    UnicodePoCodePoint[UnicodePoCodePoint["MANICHAEAN_PUNCTUATION_LINE_FILLER"] = 68342] = "MANICHAEAN_PUNCTUATION_LINE_FILLER";
    UnicodePoCodePoint[UnicodePoCodePoint["AVESTAN_ABBREVIATION_MARK"] = 68409] = "AVESTAN_ABBREVIATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["TINY_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION"] = 68410] = "TINY_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["SMALL_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION"] = 68411] = "SMALL_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["LARGE_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION"] = 68412] = "LARGE_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["LARGE_ONE_DOT_OVER_TWO_DOTS_PUNCTUATION"] = 68413] = "LARGE_ONE_DOT_OVER_TWO_DOTS_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["LARGE_TWO_RINGS_OVER_ONE_RING_PUNCTUATION"] = 68414] = "LARGE_TWO_RINGS_OVER_ONE_RING_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["LARGE_ONE_RING_OVER_TWO_RINGS_PUNCTUATION"] = 68415] = "LARGE_ONE_RING_OVER_TWO_RINGS_PUNCTUATION";
    UnicodePoCodePoint[UnicodePoCodePoint["PSALTER_PAHLAVI_SECTION_MARK"] = 68505] = "PSALTER_PAHLAVI_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PSALTER_PAHLAVI_TURNED_SECTION_MARK"] = 68506] = "PSALTER_PAHLAVI_TURNED_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["PSALTER_PAHLAVI_FOUR_DOTS_WITH_CROSS"] = 68507] = "PSALTER_PAHLAVI_FOUR_DOTS_WITH_CROSS";
    UnicodePoCodePoint[UnicodePoCodePoint["PSALTER_PAHLAVI_FOUR_DOTS_WITH_DOT"] = 68508] = "PSALTER_PAHLAVI_FOUR_DOTS_WITH_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS"] = 69461] = "SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS";
    UnicodePoCodePoint[UnicodePoCodePoint["SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS_WITH_DOTS"] = 69462] = "SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS_WITH_DOTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SOGDIAN_PUNCTUATION_CIRCLE_WITH_DOT"] = 69463] = "SOGDIAN_PUNCTUATION_CIRCLE_WITH_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["SOGDIAN_PUNCTUATION_TWO_CIRCLES_WITH_DOTS"] = 69464] = "SOGDIAN_PUNCTUATION_TWO_CIRCLES_WITH_DOTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SOGDIAN_PUNCTUATION_HALF_CIRCLE_WITH_DOT"] = 69465] = "SOGDIAN_PUNCTUATION_HALF_CIRCLE_WITH_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["BRAHMI_DANDA"] = 69703] = "BRAHMI_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["BRAHMI_DOUBLE_DANDA"] = 69704] = "BRAHMI_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["BRAHMI_PUNCTUATION_DOT"] = 69705] = "BRAHMI_PUNCTUATION_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["BRAHMI_PUNCTUATION_DOUBLE_DOT"] = 69706] = "BRAHMI_PUNCTUATION_DOUBLE_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["BRAHMI_PUNCTUATION_LINE"] = 69707] = "BRAHMI_PUNCTUATION_LINE";
    UnicodePoCodePoint[UnicodePoCodePoint["BRAHMI_PUNCTUATION_CRESCENT_BAR"] = 69708] = "BRAHMI_PUNCTUATION_CRESCENT_BAR";
    UnicodePoCodePoint[UnicodePoCodePoint["BRAHMI_PUNCTUATION_LOTUS"] = 69709] = "BRAHMI_PUNCTUATION_LOTUS";
    UnicodePoCodePoint[UnicodePoCodePoint["KAITHI_ABBREVIATION_SIGN"] = 69819] = "KAITHI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["KAITHI_ENUMERATION_SIGN"] = 69820] = "KAITHI_ENUMERATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["KAITHI_SECTION_MARK"] = 69822] = "KAITHI_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["KAITHI_DOUBLE_SECTION_MARK"] = 69823] = "KAITHI_DOUBLE_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["KAITHI_DANDA"] = 69824] = "KAITHI_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["KAITHI_DOUBLE_DANDA"] = 69825] = "KAITHI_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAKMA_SECTION_MARK"] = 69952] = "CHAKMA_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAKMA_DANDA"] = 69953] = "CHAKMA_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAKMA_DOUBLE_DANDA"] = 69954] = "CHAKMA_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["CHAKMA_QUESTION_MARK"] = 69955] = "CHAKMA_QUESTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["MAHAJANI_ABBREVIATION_SIGN"] = 70004] = "MAHAJANI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["MAHAJANI_SECTION_MARK"] = 70005] = "MAHAJANI_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_DANDA"] = 70085] = "SHARADA_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_DOUBLE_DANDA"] = 70086] = "SHARADA_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_ABBREVIATION_SIGN"] = 70087] = "SHARADA_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_SEPARATOR"] = 70088] = "SHARADA_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_SUTRA_MARK"] = 70093] = "SHARADA_SUTRA_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_SIGN_SIDDHAM"] = 70107] = "SHARADA_SIGN_SIDDHAM";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_CONTINUATION_SIGN"] = 70109] = "SHARADA_CONTINUATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_SECTION_MARK_1"] = 70110] = "SHARADA_SECTION_MARK_1";
    UnicodePoCodePoint[UnicodePoCodePoint["SHARADA_SECTION_MARK_2"] = 70111] = "SHARADA_SECTION_MARK_2";
    UnicodePoCodePoint[UnicodePoCodePoint["KHOJKI_DANDA"] = 70200] = "KHOJKI_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["KHOJKI_DOUBLE_DANDA"] = 70201] = "KHOJKI_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["KHOJKI_WORD_SEPARATOR"] = 70202] = "KHOJKI_WORD_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["KHOJKI_SECTION_MARK"] = 70203] = "KHOJKI_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["KHOJKI_DOUBLE_SECTION_MARK"] = 70204] = "KHOJKI_DOUBLE_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["KHOJKI_ABBREVIATION_SIGN"] = 70205] = "KHOJKI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["MULTANI_SECTION_MARK"] = 70313] = "MULTANI_SECTION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_DANDA"] = 70731] = "NEWA_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_DOUBLE_DANDA"] = 70732] = "NEWA_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_COMMA"] = 70733] = "NEWA_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_GAP_FILLER"] = 70734] = "NEWA_GAP_FILLER";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_ABBREVIATION_SIGN"] = 70735] = "NEWA_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_DOUBLE_COMMA"] = 70746] = "NEWA_DOUBLE_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_PLACEHOLDER_MARK"] = 70747] = "NEWA_PLACEHOLDER_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["NEWA_INSERTION_SIGN"] = 70749] = "NEWA_INSERTION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["TIRHUTA_ABBREVIATION_SIGN"] = 70854] = "TIRHUTA_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SIGN_SIDDHAM"] = 71105] = "SIDDHAM_SIGN_SIDDHAM";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_DANDA"] = 71106] = "SIDDHAM_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_DOUBLE_DANDA"] = 71107] = "SIDDHAM_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SEPARATOR_DOT"] = 71108] = "SIDDHAM_SEPARATOR_DOT";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SEPARATOR_BAR"] = 71109] = "SIDDHAM_SEPARATOR_BAR";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_REPETITION_MARK_1"] = 71110] = "SIDDHAM_REPETITION_MARK_1";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_REPETITION_MARK_2"] = 71111] = "SIDDHAM_REPETITION_MARK_2";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_REPETITION_MARK_3"] = 71112] = "SIDDHAM_REPETITION_MARK_3";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_END_OF_TEXT_MARK"] = 71113] = "SIDDHAM_END_OF_TEXT_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_U_SHAPED_ORNAMENTS"] = 71114] = "SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_U_SHAPED_ORNAMENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_DOTTED_CRESCENTS"] = 71115] = "SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_DOTTED_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_CRESCENTS"] = 71116] = "SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_DOUBLE_CRESCENTS"] = 71117] = "SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_DOUBLE_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_TRIPLE_CRESCENTS"] = 71118] = "SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_TRIPLE_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_DOUBLE_RING"] = 71119] = "SIDDHAM_SECTION_MARK_DOUBLE_RING";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_DOUBLE_RING_WITH_RAYS"] = 71120] = "SIDDHAM_SECTION_MARK_DOUBLE_RING_WITH_RAYS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_DOUBLE_CRESCENTS"] = 71121] = "SIDDHAM_SECTION_MARK_WITH_DOUBLE_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_TRIPLE_CRESCENTS"] = 71122] = "SIDDHAM_SECTION_MARK_WITH_TRIPLE_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_QUADRUPLE_CRESCENTS"] = 71123] = "SIDDHAM_SECTION_MARK_WITH_QUADRUPLE_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_SEPTUPLE_CRESCENTS"] = 71124] = "SIDDHAM_SECTION_MARK_WITH_SEPTUPLE_CRESCENTS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_RAYS"] = 71125] = "SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_RAYS";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_TWO_ENCLOSURES"] = 71126] = "SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_TWO_ENCLOSURES";
    UnicodePoCodePoint[UnicodePoCodePoint["SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_FOUR_ENCLOSURES"] = 71127] = "SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_FOUR_ENCLOSURES";
    UnicodePoCodePoint[UnicodePoCodePoint["MODI_DANDA"] = 71233] = "MODI_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["MODI_DOUBLE_DANDA"] = 71234] = "MODI_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["MODI_ABBREVIATION_SIGN"] = 71235] = "MODI_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_BIRGA_WITH_ORNAMENT"] = 71264] = "MONGOLIAN_BIRGA_WITH_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_ROTATED_BIRGA"] = 71265] = "MONGOLIAN_ROTATED_BIRGA";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_DOUBLE_BIRGA_WITH_ORNAMENT"] = 71266] = "MONGOLIAN_DOUBLE_BIRGA_WITH_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_TRIPLE_BIRGA_WITH_ORNAMENT"] = 71267] = "MONGOLIAN_TRIPLE_BIRGA_WITH_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_BIRGA_WITH_DOUBLE_ORNAMENT"] = 71268] = "MONGOLIAN_BIRGA_WITH_DOUBLE_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_ROTATED_BIRGA_WITH_ORNAMENT"] = 71269] = "MONGOLIAN_ROTATED_BIRGA_WITH_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_ROTATED_BIRGA_WITH_DOUBLE_ORNAMENT"] = 71270] = "MONGOLIAN_ROTATED_BIRGA_WITH_DOUBLE_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_INVERTED_BIRGA"] = 71271] = "MONGOLIAN_INVERTED_BIRGA";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_INVERTED_BIRGA_WITH_DOUBLE_ORNAMENT"] = 71272] = "MONGOLIAN_INVERTED_BIRGA_WITH_DOUBLE_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_SWIRL_BIRGA"] = 71273] = "MONGOLIAN_SWIRL_BIRGA";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_SWIRL_BIRGA_WITH_ORNAMENT"] = 71274] = "MONGOLIAN_SWIRL_BIRGA_WITH_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT"] = 71275] = "MONGOLIAN_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["MONGOLIAN_TURNED_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT"] = 71276] = "MONGOLIAN_TURNED_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT";
    UnicodePoCodePoint[UnicodePoCodePoint["AHOM_SIGN_SMALL_SECTION"] = 71484] = "AHOM_SIGN_SMALL_SECTION";
    UnicodePoCodePoint[UnicodePoCodePoint["AHOM_SIGN_SECTION"] = 71485] = "AHOM_SIGN_SECTION";
    UnicodePoCodePoint[UnicodePoCodePoint["AHOM_SIGN_RULAI"] = 71486] = "AHOM_SIGN_RULAI";
    UnicodePoCodePoint[UnicodePoCodePoint["DOGRA_ABBREVIATION_SIGN"] = 71739] = "DOGRA_ABBREVIATION_SIGN";
    UnicodePoCodePoint[UnicodePoCodePoint["DIVES_AKURU_DOUBLE_DANDA"] = 72004] = "DIVES_AKURU_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["DIVES_AKURU_GAP_FILLER"] = 72005] = "DIVES_AKURU_GAP_FILLER";
    UnicodePoCodePoint[UnicodePoCodePoint["DIVES_AKURU_END_OF_TEXT_MARK"] = 72006] = "DIVES_AKURU_END_OF_TEXT_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["NANDINAGARI_SIGN_SIDDHAM"] = 72162] = "NANDINAGARI_SIGN_SIDDHAM";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_INITIAL_HEAD_MARK"] = 72255] = "ZANABAZAR_SQUARE_INITIAL_HEAD_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_CLOSING_HEAD_MARK"] = 72256] = "ZANABAZAR_SQUARE_CLOSING_HEAD_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_MARK_TSHEG"] = 72257] = "ZANABAZAR_SQUARE_MARK_TSHEG";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_MARK_SHAD"] = 72258] = "ZANABAZAR_SQUARE_MARK_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_MARK_DOUBLE_SHAD"] = 72259] = "ZANABAZAR_SQUARE_MARK_DOUBLE_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_MARK_LONG_TSHEG"] = 72260] = "ZANABAZAR_SQUARE_MARK_LONG_TSHEG";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_INITIAL_DOUBLE_LINED_HEAD_MARK"] = 72261] = "ZANABAZAR_SQUARE_INITIAL_DOUBLE_LINED_HEAD_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ZANABAZAR_SQUARE_CLOSING_DOUBLE_LINED_HEAD_MARK"] = 72262] = "ZANABAZAR_SQUARE_CLOSING_DOUBLE_LINED_HEAD_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_MARK_TSHEG"] = 72346] = "SOYOMBO_MARK_TSHEG";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_MARK_SHAD"] = 72347] = "SOYOMBO_MARK_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_MARK_DOUBLE_SHAD"] = 72348] = "SOYOMBO_MARK_DOUBLE_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_TRIPLE_FLAME"] = 72350] = "SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_TRIPLE_FLAME";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_FLAME"] = 72351] = "SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_FLAME";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN"] = 72352] = "SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_TERMINAL_MARK_1"] = 72353] = "SOYOMBO_TERMINAL_MARK_1";
    UnicodePoCodePoint[UnicodePoCodePoint["SOYOMBO_TERMINAL_MARK_2"] = 72354] = "SOYOMBO_TERMINAL_MARK_2";
    UnicodePoCodePoint[UnicodePoCodePoint["BHAIKSUKI_DANDA"] = 72769] = "BHAIKSUKI_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["BHAIKSUKI_DOUBLE_DANDA"] = 72770] = "BHAIKSUKI_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["BHAIKSUKI_WORD_SEPARATOR"] = 72771] = "BHAIKSUKI_WORD_SEPARATOR";
    UnicodePoCodePoint[UnicodePoCodePoint["BHAIKSUKI_GAP_FILLER_1"] = 72772] = "BHAIKSUKI_GAP_FILLER_1";
    UnicodePoCodePoint[UnicodePoCodePoint["BHAIKSUKI_GAP_FILLER_2"] = 72773] = "BHAIKSUKI_GAP_FILLER_2";
    UnicodePoCodePoint[UnicodePoCodePoint["MARCHEN_HEAD_MARK"] = 72816] = "MARCHEN_HEAD_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["MARCHEN_MARK_SHAD"] = 72817] = "MARCHEN_MARK_SHAD";
    UnicodePoCodePoint[UnicodePoCodePoint["MAKASAR_PASSIMBANG"] = 73463] = "MAKASAR_PASSIMBANG";
    UnicodePoCodePoint[UnicodePoCodePoint["MAKASAR_END_OF_SECTION"] = 73464] = "MAKASAR_END_OF_SECTION";
    UnicodePoCodePoint[UnicodePoCodePoint["TAMIL_PUNCTUATION_END_OF_TEXT"] = 73727] = "TAMIL_PUNCTUATION_END_OF_TEXT";
    UnicodePoCodePoint[UnicodePoCodePoint["CUNEIFORM_PUNCTUATION_SIGN_OLD_ASSYRIAN_WORD_DIVIDER"] = 74864] = "CUNEIFORM_PUNCTUATION_SIGN_OLD_ASSYRIAN_WORD_DIVIDER";
    UnicodePoCodePoint[UnicodePoCodePoint["CUNEIFORM_PUNCTUATION_SIGN_VERTICAL_COLON"] = 74865] = "CUNEIFORM_PUNCTUATION_SIGN_VERTICAL_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_COLON"] = 74866] = "CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_TRICOLON"] = 74867] = "CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_TRICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_QUADCOLON"] = 74868] = "CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_QUADCOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["MRO_DANDA"] = 92782] = "MRO_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["MRO_DOUBLE_DANDA"] = 92783] = "MRO_DOUBLE_DANDA";
    UnicodePoCodePoint[UnicodePoCodePoint["BASSA_VAH_FULL_STOP"] = 92917] = "BASSA_VAH_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["PAHAWH_HMONG_SIGN_VOS_THOM"] = 92983] = "PAHAWH_HMONG_SIGN_VOS_THOM";
    UnicodePoCodePoint[UnicodePoCodePoint["PAHAWH_HMONG_SIGN_VOS_TSHAB_CEEB"] = 92984] = "PAHAWH_HMONG_SIGN_VOS_TSHAB_CEEB";
    UnicodePoCodePoint[UnicodePoCodePoint["PAHAWH_HMONG_SIGN_CIM_CHEEM"] = 92985] = "PAHAWH_HMONG_SIGN_CIM_CHEEM";
    UnicodePoCodePoint[UnicodePoCodePoint["PAHAWH_HMONG_SIGN_VOS_THIAB"] = 92986] = "PAHAWH_HMONG_SIGN_VOS_THIAB";
    UnicodePoCodePoint[UnicodePoCodePoint["PAHAWH_HMONG_SIGN_VOS_FEEM"] = 92987] = "PAHAWH_HMONG_SIGN_VOS_FEEM";
    UnicodePoCodePoint[UnicodePoCodePoint["PAHAWH_HMONG_SIGN_XAUS"] = 92996] = "PAHAWH_HMONG_SIGN_XAUS";
    UnicodePoCodePoint[UnicodePoCodePoint["MEDEFAIDRIN_COMMA"] = 93847] = "MEDEFAIDRIN_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["MEDEFAIDRIN_FULL_STOP"] = 93848] = "MEDEFAIDRIN_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["MEDEFAIDRIN_SYMBOL_AIVA"] = 93849] = "MEDEFAIDRIN_SYMBOL_AIVA";
    UnicodePoCodePoint[UnicodePoCodePoint["MEDEFAIDRIN_EXCLAMATION_OH"] = 93850] = "MEDEFAIDRIN_EXCLAMATION_OH";
    UnicodePoCodePoint[UnicodePoCodePoint["OLD_CHINESE_HOOK_MARK"] = 94178] = "OLD_CHINESE_HOOK_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["DUPLOYAN_PUNCTUATION_CHINOOK_FULL_STOP"] = 113823] = "DUPLOYAN_PUNCTUATION_CHINOOK_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["SIGNWRITING_COMMA"] = 121479] = "SIGNWRITING_COMMA";
    UnicodePoCodePoint[UnicodePoCodePoint["SIGNWRITING_FULL_STOP"] = 121480] = "SIGNWRITING_FULL_STOP";
    UnicodePoCodePoint[UnicodePoCodePoint["SIGNWRITING_SEMICOLON"] = 121481] = "SIGNWRITING_SEMICOLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SIGNWRITING_COLON"] = 121482] = "SIGNWRITING_COLON";
    UnicodePoCodePoint[UnicodePoCodePoint["SIGNWRITING_PARENTHESIS"] = 121483] = "SIGNWRITING_PARENTHESIS";
    UnicodePoCodePoint[UnicodePoCodePoint["ADLAM_INITIAL_EXCLAMATION_MARK"] = 125278] = "ADLAM_INITIAL_EXCLAMATION_MARK";
    UnicodePoCodePoint[UnicodePoCodePoint["ADLAM_INITIAL_QUESTION_MARK"] = 125279] = "ADLAM_INITIAL_QUESTION_MARK";
})(exports.UnicodePoCodePoint || (exports.UnicodePoCodePoint = {}));

exports.UnicodePsCodePoint = void 0;
(function (UnicodePsCodePoint) {
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_PARENTHESIS"] = 40] = "LEFT_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_SQUARE_BRACKET"] = 91] = "LEFT_SQUARE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_CURLY_BRACKET"] = 123] = "LEFT_CURLY_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["TIBETAN_MARK_GUG_RTAGS_GYON"] = 3898] = "TIBETAN_MARK_GUG_RTAGS_GYON";
    UnicodePsCodePoint[UnicodePsCodePoint["TIBETAN_MARK_ANG_KHANG_GYON"] = 3900] = "TIBETAN_MARK_ANG_KHANG_GYON";
    UnicodePsCodePoint[UnicodePsCodePoint["OGHAM_FEATHER_MARK"] = 5787] = "OGHAM_FEATHER_MARK";
    UnicodePsCodePoint[UnicodePsCodePoint["SINGLE_LOW_9_QUOTATION_MARK"] = 8218] = "SINGLE_LOW_9_QUOTATION_MARK";
    UnicodePsCodePoint[UnicodePsCodePoint["DOUBLE_LOW_9_QUOTATION_MARK"] = 8222] = "DOUBLE_LOW_9_QUOTATION_MARK";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_SQUARE_BRACKET_WITH_QUILL"] = 8261] = "LEFT_SQUARE_BRACKET_WITH_QUILL";
    UnicodePsCodePoint[UnicodePsCodePoint["SUPERSCRIPT_LEFT_PARENTHESIS"] = 8317] = "SUPERSCRIPT_LEFT_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["SUBSCRIPT_LEFT_PARENTHESIS"] = 8333] = "SUBSCRIPT_LEFT_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_CEILING"] = 8968] = "LEFT_CEILING";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_FLOOR"] = 8970] = "LEFT_FLOOR";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_POINTING_ANGLE_BRACKET"] = 9001] = "LEFT_POINTING_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["MEDIUM_LEFT_PARENTHESIS_ORNAMENT"] = 10088] = "MEDIUM_LEFT_PARENTHESIS_ORNAMENT";
    UnicodePsCodePoint[UnicodePsCodePoint["MEDIUM_FLATTENED_LEFT_PARENTHESIS_ORNAMENT"] = 10090] = "MEDIUM_FLATTENED_LEFT_PARENTHESIS_ORNAMENT";
    UnicodePsCodePoint[UnicodePsCodePoint["MEDIUM_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT"] = 10092] = "MEDIUM_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT";
    UnicodePsCodePoint[UnicodePsCodePoint["HEAVY_LEFT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT"] = 10094] = "HEAVY_LEFT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT";
    UnicodePsCodePoint[UnicodePsCodePoint["HEAVY_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT"] = 10096] = "HEAVY_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT";
    UnicodePsCodePoint[UnicodePsCodePoint["LIGHT_LEFT_TORTOISE_SHELL_BRACKET_ORNAMENT"] = 10098] = "LIGHT_LEFT_TORTOISE_SHELL_BRACKET_ORNAMENT";
    UnicodePsCodePoint[UnicodePsCodePoint["MEDIUM_LEFT_CURLY_BRACKET_ORNAMENT"] = 10100] = "MEDIUM_LEFT_CURLY_BRACKET_ORNAMENT";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_S_SHAPED_BAG_DELIMITER"] = 10181] = "LEFT_S_SHAPED_BAG_DELIMITER";
    UnicodePsCodePoint[UnicodePsCodePoint["MATHEMATICAL_LEFT_WHITE_SQUARE_BRACKET"] = 10214] = "MATHEMATICAL_LEFT_WHITE_SQUARE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["MATHEMATICAL_LEFT_ANGLE_BRACKET"] = 10216] = "MATHEMATICAL_LEFT_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["MATHEMATICAL_LEFT_DOUBLE_ANGLE_BRACKET"] = 10218] = "MATHEMATICAL_LEFT_DOUBLE_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["MATHEMATICAL_LEFT_WHITE_TORTOISE_SHELL_BRACKET"] = 10220] = "MATHEMATICAL_LEFT_WHITE_TORTOISE_SHELL_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["MATHEMATICAL_LEFT_FLATTENED_PARENTHESIS"] = 10222] = "MATHEMATICAL_LEFT_FLATTENED_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_WHITE_CURLY_BRACKET"] = 10627] = "LEFT_WHITE_CURLY_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_WHITE_PARENTHESIS"] = 10629] = "LEFT_WHITE_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["Z_NOTATION_LEFT_IMAGE_BRACKET"] = 10631] = "Z_NOTATION_LEFT_IMAGE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["Z_NOTATION_LEFT_BINDING_BRACKET"] = 10633] = "Z_NOTATION_LEFT_BINDING_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_SQUARE_BRACKET_WITH_UNDERBAR"] = 10635] = "LEFT_SQUARE_BRACKET_WITH_UNDERBAR";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER"] = 10637] = "LEFT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER"] = 10639] = "LEFT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_ANGLE_BRACKET_WITH_DOT"] = 10641] = "LEFT_ANGLE_BRACKET_WITH_DOT";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_ARC_LESS_THAN_BRACKET"] = 10643] = "LEFT_ARC_LESS_THAN_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["DOUBLE_LEFT_ARC_GREATER_THAN_BRACKET"] = 10645] = "DOUBLE_LEFT_ARC_GREATER_THAN_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_BLACK_TORTOISE_SHELL_BRACKET"] = 10647] = "LEFT_BLACK_TORTOISE_SHELL_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_WIGGLY_FENCE"] = 10712] = "LEFT_WIGGLY_FENCE";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_DOUBLE_WIGGLY_FENCE"] = 10714] = "LEFT_DOUBLE_WIGGLY_FENCE";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_POINTING_CURVED_ANGLE_BRACKET"] = 10748] = "LEFT_POINTING_CURVED_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["TOP_LEFT_HALF_BRACKET"] = 11810] = "TOP_LEFT_HALF_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["BOTTOM_LEFT_HALF_BRACKET"] = 11812] = "BOTTOM_LEFT_HALF_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_SIDEWAYS_U_BRACKET"] = 11814] = "LEFT_SIDEWAYS_U_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_DOUBLE_PARENTHESIS"] = 11816] = "LEFT_DOUBLE_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["DOUBLE_LOW_REVERSED_9_QUOTATION_MARK"] = 11842] = "DOUBLE_LOW_REVERSED_9_QUOTATION_MARK";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_ANGLE_BRACKET"] = 12296] = "LEFT_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_DOUBLE_ANGLE_BRACKET"] = 12298] = "LEFT_DOUBLE_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_CORNER_BRACKET"] = 12300] = "LEFT_CORNER_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_WHITE_CORNER_BRACKET"] = 12302] = "LEFT_WHITE_CORNER_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_BLACK_LENTICULAR_BRACKET"] = 12304] = "LEFT_BLACK_LENTICULAR_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_TORTOISE_SHELL_BRACKET"] = 12308] = "LEFT_TORTOISE_SHELL_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_WHITE_LENTICULAR_BRACKET"] = 12310] = "LEFT_WHITE_LENTICULAR_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_WHITE_TORTOISE_SHELL_BRACKET"] = 12312] = "LEFT_WHITE_TORTOISE_SHELL_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["LEFT_WHITE_SQUARE_BRACKET"] = 12314] = "LEFT_WHITE_SQUARE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["REVERSED_DOUBLE_PRIME_QUOTATION_MARK"] = 12317] = "REVERSED_DOUBLE_PRIME_QUOTATION_MARK";
    UnicodePsCodePoint[UnicodePsCodePoint["ORNATE_RIGHT_PARENTHESIS"] = 64831] = "ORNATE_RIGHT_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_LENTICULAR_BRACKET"] = 65047] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_LENTICULAR_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_PARENTHESIS"] = 65077] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_CURLY_BRACKET"] = 65079] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_CURLY_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_TORTOISE_SHELL_BRACKET"] = 65081] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_TORTOISE_SHELL_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_BLACK_LENTICULAR_BRACKET"] = 65083] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_BLACK_LENTICULAR_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_DOUBLE_ANGLE_BRACKET"] = 65085] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_DOUBLE_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_ANGLE_BRACKET"] = 65087] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_ANGLE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_CORNER_BRACKET"] = 65089] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_CORNER_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_CORNER_BRACKET"] = 65091] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_CORNER_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["PRESENTATION_FORM_FOR_VERTICAL_LEFT_SQUARE_BRACKET"] = 65095] = "PRESENTATION_FORM_FOR_VERTICAL_LEFT_SQUARE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["SMALL_LEFT_PARENTHESIS"] = 65113] = "SMALL_LEFT_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["SMALL_LEFT_CURLY_BRACKET"] = 65115] = "SMALL_LEFT_CURLY_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["SMALL_LEFT_TORTOISE_SHELL_BRACKET"] = 65117] = "SMALL_LEFT_TORTOISE_SHELL_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["FULLWIDTH_LEFT_PARENTHESIS"] = 65288] = "FULLWIDTH_LEFT_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["FULLWIDTH_LEFT_SQUARE_BRACKET"] = 65339] = "FULLWIDTH_LEFT_SQUARE_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["FULLWIDTH_LEFT_CURLY_BRACKET"] = 65371] = "FULLWIDTH_LEFT_CURLY_BRACKET";
    UnicodePsCodePoint[UnicodePsCodePoint["FULLWIDTH_LEFT_WHITE_PARENTHESIS"] = 65375] = "FULLWIDTH_LEFT_WHITE_PARENTHESIS";
    UnicodePsCodePoint[UnicodePsCodePoint["HALFWIDTH_LEFT_CORNER_BRACKET"] = 65378] = "HALFWIDTH_LEFT_CORNER_BRACKET";
})(exports.UnicodePsCodePoint || (exports.UnicodePsCodePoint = {}));

exports.UnicodeZsCodePoint = void 0;
(function (UnicodeZsCodePoint) {
    UnicodeZsCodePoint[UnicodeZsCodePoint["SPACE"] = 32] = "SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["NO_BREAK_SPACE"] = 160] = "NO_BREAK_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["OGHAM_SPACE_MARK"] = 5760] = "OGHAM_SPACE_MARK";
    UnicodeZsCodePoint[UnicodeZsCodePoint["EN_QUAD"] = 8192] = "EN_QUAD";
    UnicodeZsCodePoint[UnicodeZsCodePoint["EM_QUAD"] = 8193] = "EM_QUAD";
    UnicodeZsCodePoint[UnicodeZsCodePoint["EN_SPACE"] = 8194] = "EN_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["EM_SPACE"] = 8195] = "EM_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["THREE_PER_EM_SPACE"] = 8196] = "THREE_PER_EM_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["FOUR_PER_EM_SPACE"] = 8197] = "FOUR_PER_EM_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["SIX_PER_EM_SPACE"] = 8198] = "SIX_PER_EM_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["FIGURE_SPACE"] = 8199] = "FIGURE_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["PUNCTUATION_SPACE"] = 8200] = "PUNCTUATION_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["THIN_SPACE"] = 8201] = "THIN_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["HAIR_SPACE"] = 8202] = "HAIR_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["NARROW_NO_BREAK_SPACE"] = 8239] = "NARROW_NO_BREAK_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["MEDIUM_MATHEMATICAL_SPACE"] = 8287] = "MEDIUM_MATHEMATICAL_SPACE";
    UnicodeZsCodePoint[UnicodeZsCodePoint["IDEOGRAPHIC_SPACE"] = 12288] = "IDEOGRAPHIC_SPACE";
})(exports.UnicodeZsCodePoint || (exports.UnicodeZsCodePoint = {}));

exports.VirtualCodePoint = void 0;
(function (VirtualCodePoint) {
    VirtualCodePoint[VirtualCodePoint["LINE_END"] = -1] = "LINE_END";
    VirtualCodePoint[VirtualCodePoint["SPACE"] = -2] = "SPACE";
})(exports.VirtualCodePoint || (exports.VirtualCodePoint = {}));

function createCodePointSearcher(codePoints) {
    const orderedCodePoints = [...new Set(codePoints)].sort((x, y) => x - y);
    const size = orderedCodePoints.length;
    if (size < 8) {
        return [
            (codePoint) => {
                for (let i = 0; i < orderedCodePoints.length; ++i) {
                    if (codePoint === orderedCodePoints[i])
                        return true;
                }
                return false;
            },
            [...orderedCodePoints],
        ];
    }
    const orderedRangeCodePoints = [];
    for (let i = 0, j; i < size; i += j) {
        const c = orderedCodePoints[i];
        for (j = 1; i + j < size; ++j) {
            if (orderedCodePoints[i + j] > c + j)
                break;
        }
        orderedRangeCodePoints.push(c, c + j);
    }
    if (orderedRangeCodePoints.length * 1.5 < size) {
        const rangeSize = orderedRangeCodePoints.length;
        if (rangeSize < 8) {
            return [
                (codePoint) => {
                    for (let i = 0; i < rangeSize; i += 2) {
                        const lft = orderedRangeCodePoints[i];
                        const rht = orderedRangeCodePoints[i + 1];
                        if (lft <= codePoint && codePoint < rht)
                            return true;
                    }
                    return false;
                },
                orderedCodePoints,
            ];
        }
        return [
            (codePoint) => {
                let lft = 0, rht = rangeSize;
                while (lft < rht) {
                    const mid = (lft + rht) >>> 1;
                    if (codePoint < orderedRangeCodePoints[mid])
                        rht = mid;
                    else
                        lft = mid + 1;
                }
                return Boolean(rht & 1);
            },
            orderedCodePoints,
        ];
    }
    return [
        (codePoint) => {
            let lft = 0, rht = size;
            while (lft < rht) {
                const mid = (lft + rht) >>> 1;
                if (codePoint < orderedCodePoints[mid])
                    rht = mid;
                else
                    lft = mid + 1;
            }
            if (rht <= 0)
                return false;
            return orderedCodePoints[rht - 1] === codePoint;
        },
        [...orderedCodePoints],
    ];
}
function collectCodePointsFromEnum(_enum) {
    return Object.values(_enum).filter((v) => typeof v === 'number');
}

const [isAsciiWhitespaceCharacter, asciiWhitespaceCharacters] = createCodePointSearcher([
    exports.AsciiCodePoint.HT,
    exports.AsciiCodePoint.LF,
    exports.AsciiCodePoint.VT,
    exports.AsciiCodePoint.FF,
    exports.AsciiCodePoint.CR,
    exports.AsciiCodePoint.SPACE,
]);
const [isAsciiPunctuationCharacter, asciiPunctuationCharacters] = createCodePointSearcher([
    exports.AsciiCodePoint.EXCLAMATION_MARK,
    exports.AsciiCodePoint.DOUBLE_QUOTE,
    exports.AsciiCodePoint.NUMBER_SIGN,
    exports.AsciiCodePoint.DOLLAR_SIGN,
    exports.AsciiCodePoint.PERCENT_SIGN,
    exports.AsciiCodePoint.AMPERSAND,
    exports.AsciiCodePoint.SINGLE_QUOTE,
    exports.AsciiCodePoint.OPEN_PARENTHESIS,
    exports.AsciiCodePoint.CLOSE_PARENTHESIS,
    exports.AsciiCodePoint.ASTERISK,
    exports.AsciiCodePoint.PLUS_SIGN,
    exports.AsciiCodePoint.COMMA,
    exports.AsciiCodePoint.MINUS_SIGN,
    exports.AsciiCodePoint.DOT,
    exports.AsciiCodePoint.SLASH,
    exports.AsciiCodePoint.COLON,
    exports.AsciiCodePoint.SEMICOLON,
    exports.AsciiCodePoint.OPEN_ANGLE,
    exports.AsciiCodePoint.EQUALS_SIGN,
    exports.AsciiCodePoint.CLOSE_ANGLE,
    exports.AsciiCodePoint.QUESTION_MARK,
    exports.AsciiCodePoint.AT_SIGN,
    exports.AsciiCodePoint.OPEN_BRACKET,
    exports.AsciiCodePoint.BACKSLASH,
    exports.AsciiCodePoint.CLOSE_BRACKET,
    exports.AsciiCodePoint.CARET,
    exports.AsciiCodePoint.UNDERSCORE,
    exports.AsciiCodePoint.BACKTICK,
    exports.AsciiCodePoint.OPEN_BRACE,
    exports.AsciiCodePoint.VERTICAL_SLASH,
    exports.AsciiCodePoint.CLOSE_BRACE,
    exports.AsciiCodePoint.TILDE,
]);
const isAsciiDigitCharacter = (codePoint) => codePoint >= exports.AsciiCodePoint.DIGIT0 && codePoint <= exports.AsciiCodePoint.DIGIT9;
const isAsciiLowerLetter = (codePoint) => codePoint >= exports.AsciiCodePoint.LOWERCASE_A && codePoint <= exports.AsciiCodePoint.LOWERCASE_Z;
const isAsciiUpperLetter = (codePoint) => codePoint >= exports.AsciiCodePoint.UPPERCASE_A && codePoint <= exports.AsciiCodePoint.UPPERCASE_Z;
const isAsciiLetter = (codePoint) => isAsciiLowerLetter(codePoint) || isAsciiUpperLetter(codePoint);
const isAlphanumeric = (codePoint) => isAsciiLowerLetter(codePoint) || isAsciiUpperLetter(codePoint) || isAsciiDigitCharacter(codePoint);
const isAsciiCharacter = (codePoint) => codePoint >= exports.AsciiCodePoint.NUL && codePoint <= exports.AsciiCodePoint.DELETE;
const [isAsciiControlCharacter, asciiControlCharacters] = createCodePointSearcher([
    exports.AsciiCodePoint.NUL,
    exports.AsciiCodePoint.SOH,
    exports.AsciiCodePoint.STX,
    exports.AsciiCodePoint.ETX,
    exports.AsciiCodePoint.EOT,
    exports.AsciiCodePoint.ENQ,
    exports.AsciiCodePoint.ACK,
    exports.AsciiCodePoint.BEL,
    exports.AsciiCodePoint.BS,
    exports.AsciiCodePoint.HT,
    exports.AsciiCodePoint.LF,
    exports.AsciiCodePoint.VT,
    exports.AsciiCodePoint.FF,
    exports.AsciiCodePoint.CR,
    exports.AsciiCodePoint.SO,
    exports.AsciiCodePoint.SI,
    exports.AsciiCodePoint.DLE,
    exports.AsciiCodePoint.DC1,
    exports.AsciiCodePoint.DC2,
    exports.AsciiCodePoint.DC3,
    exports.AsciiCodePoint.DC4,
    exports.AsciiCodePoint.NAK,
    exports.AsciiCodePoint.SYN,
    exports.AsciiCodePoint.ETB,
    exports.AsciiCodePoint.CAN,
    exports.AsciiCodePoint.EM,
    exports.AsciiCodePoint.SUB,
    exports.AsciiCodePoint.ESC,
    exports.AsciiCodePoint.FS,
    exports.AsciiCodePoint.GS,
    exports.AsciiCodePoint.RS,
    exports.AsciiCodePoint.US,
    exports.AsciiCodePoint.DELETE,
]);

const [isWhitespaceCharacter, whitespaceCharacters] = createCodePointSearcher([
    exports.AsciiCodePoint.VT,
    exports.AsciiCodePoint.FF,
    exports.AsciiCodePoint.SPACE,
    exports.VirtualCodePoint.SPACE,
    exports.VirtualCodePoint.LINE_END,
]);
const spaceCharacters = [exports.AsciiCodePoint.SPACE, exports.VirtualCodePoint.SPACE];
const isSpaceCharacter = (codePoint) => {
    return codePoint === exports.AsciiCodePoint.SPACE || codePoint === exports.VirtualCodePoint.SPACE;
};
const isLineEnding = (codePoint) => {
    return codePoint === exports.VirtualCodePoint.LINE_END;
};
const [isPunctuationCharacter, punctuationCharacters] = createCodePointSearcher([
    ...asciiPunctuationCharacters,
    ...collectCodePointsFromEnum(exports.UnicodePcCodePoint),
    ...collectCodePointsFromEnum(exports.UnicodePdCodePoint),
    ...collectCodePointsFromEnum(exports.UnicodePeCodePoint),
    ...collectCodePointsFromEnum(exports.UnicodePfCodePoint),
    ...collectCodePointsFromEnum(exports.UnicodePiCodePoint),
    ...collectCodePointsFromEnum(exports.UnicodePoCodePoint),
    ...collectCodePointsFromEnum(exports.UnicodePsCodePoint),
]);
const controlCharacters = asciiControlCharacters;
const isControlCharacter = isAsciiControlCharacter;
const isSpaceLike = (c) => isSpaceCharacter(c) || isLineEnding(c);

const [isUnicodeWhitespaceCharacter, unicodeWhitespaceCharacters] = createCodePointSearcher([
    exports.AsciiCodePoint.HT,
    exports.AsciiCodePoint.LF,
    exports.AsciiCodePoint.FF,
    exports.AsciiCodePoint.CR,
    exports.VirtualCodePoint.SPACE,
    exports.VirtualCodePoint.LINE_END,
    ...collectCodePointsFromEnum(exports.UnicodeZsCodePoint),
]);

var UnicodeCodePoint;
(function (UnicodeCodePoint) {
    UnicodeCodePoint[UnicodeCodePoint["REPLACEMENT_CHARACTER"] = 65533] = "REPLACEMENT_CHARACTER";
})(UnicodeCodePoint || (UnicodeCodePoint = {}));

function createEntityReferenceTrie() {
    const upperBound = (nodes, key) => {
        if (nodes.length <= 4) {
            for (let i = 0; i < nodes.length; ++i) {
                if (nodes[i].key >= key)
                    return i;
            }
            return nodes.length;
        }
        let lft = 0, rht = nodes.length;
        while (lft < rht) {
            const mid = (lft + rht) >>> 1;
            const o = nodes[mid];
            if (o.key < key)
                lft = mid + 1;
            else
                rht = mid;
        }
        return lft;
    };
    const root = { key: 0, children: [] };
    const insert = (keys, value) => {
        let u = root;
        for (const key of keys) {
            const index = upperBound(u.children, key);
            if (index >= u.children.length) {
                const v = { key, children: [] };
                u.children.push(v);
                u = v;
                continue;
            }
            let v = u.children[index];
            if (v.key === key) {
                u = v;
                continue;
            }
            v = { key, children: [] };
            u.children.splice(index, 0, v);
            u = v;
        }
        u.value = value;
    };
    const search = (nodePoints, startIndex, endIndex) => {
        let u = root;
        for (let i = startIndex; i < endIndex; ++i) {
            const key = nodePoints[i].codePoint;
            const index = upperBound(u.children, key);
            if (index >= u.children.length)
                return null;
            const v = u.children[index];
            if (v.key !== key)
                return null;
            if (v.value != null)
                return { nextIndex: i + 1, value: v.value };
            u = v;
        }
        return null;
    };
    return { insert, search };
}
const entityReferenceTrie = createEntityReferenceTrie();
entityReferences.forEach(entity => entityReferenceTrie.insert(entity.key, entity.value));
function eatEntityReference(nodePoints, startIndex, endIndex) {
    if (startIndex + 1 >= endIndex)
        return null;
    const result = entityReferenceTrie.search(nodePoints, startIndex, endIndex);
    if (result != null)
        return result;
    if (nodePoints[startIndex].codePoint !== exports.AsciiCodePoint.NUMBER_SIGN)
        return null;
    let val = 0, i = startIndex + 1;
    if (nodePoints[i].codePoint === exports.AsciiCodePoint.LOWERCASE_X ||
        nodePoints[i].codePoint === exports.AsciiCodePoint.UPPERCASE_X) {
        i += 1;
        for (let cnt = 1; cnt <= 6 && i < endIndex; ++cnt, ++i) {
            const c = nodePoints[i].codePoint;
            if (isAsciiDigitCharacter(c)) {
                val = (val << 4) + (c - exports.AsciiCodePoint.DIGIT0);
                continue;
            }
            if (c >= exports.AsciiCodePoint.UPPERCASE_A && c <= exports.AsciiCodePoint.UPPERCASE_F) {
                val = (val << 4) + (c - exports.AsciiCodePoint.UPPERCASE_A + 10);
                continue;
            }
            if (c >= exports.AsciiCodePoint.LOWERCASE_A && c <= exports.AsciiCodePoint.LOWERCASE_F) {
                val = (val << 4) + (c - exports.AsciiCodePoint.LOWERCASE_A + 10);
                continue;
            }
            break;
        }
    }
    else {
        for (let cnt = 1; cnt <= 7 && i < endIndex; ++cnt, ++i) {
            const c = nodePoints[i].codePoint;
            if (!isAsciiDigitCharacter(c))
                break;
            val = val * 10 + (c - exports.AsciiCodePoint.DIGIT0);
        }
    }
    if (i >= endIndex || nodePoints[i].codePoint !== exports.AsciiCodePoint.SEMICOLON)
        return null;
    let value;
    try {
        if (val === 0)
            val = UnicodeCodePoint.REPLACEMENT_CHARACTER;
        value = String.fromCodePoint(val);
    }
    catch (error) {
        value = String.fromCodePoint(UnicodeCodePoint.REPLACEMENT_CHARACTER);
    }
    return { nextIndex: i + 1, value };
}

function foldCase(text) {
    return Array.from(text)
        .map(c => { var _a; return (_a = foldingCaseCodeMap[c]) !== null && _a !== void 0 ? _a : c; })
        .join('');
}

const stripChineseCharacters = (() => {
    try {
        const pattern = /\p{Script=Han}|[\u{3002}\u{ff1f}\u{ff01}\u{ff0c}\u{3001}\u{ff1b}\u{ff1a}\u{201c}\u{201d}\u{2018}\u{2019}\u{ff08}\u{ff09}\u{300a}\u{300b}\u{3008}\u{3009}\u{3010}\u{3011}\u{300e}\u{300f}\u{300c}\u{300d}\u{fe43}\u{fe44}\u{3014}\u{3015}\u{2026}\u{2014}\u{ff5e}\u{fe4f}\u{ffe5}]/u
            .source;
        const regex = new RegExp(`(${pattern})\\n+(${pattern})`, 'gu');
        return (value) => value.replace(regex, '$1$2');
    }
    catch (_a) {
        const pattern = /[\u{4E00}-\u{9FCC}\u{3400}-\u{4DB5}\u{FA0E}\u{FA0F}\u{FA11}\u{FA13}\u{FA14}\u{FA1F}\u{FA21}\u{FA23}\u{FA24}\u{FA27}-\u{FA29}]|[\u{d840}-\u{d868}][\u{dc00}-\u{dfff}]|\u{d869}[\u{dc00}-\u{ded6}\u{df00}-\u{dfff}]|[\u{d86a}-\u{d86c}][\u{dc00}-\u{dfff}]|\u{d86d}[\u{dc00}-\u{df34}\u{df40}-\u{dfff}]|\u{d86e}[\u{dc00}-\u{dc1d}]/u
            .source;
        const regex = new RegExp(`(${pattern})\\n+(${pattern})`, 'gu');
        return (value) => value.replace(regex, '$1$2');
    }
})();
const tightenChineseCharacters = (() => {
    try {
        const pattern = /\p{Script=Han}|[\u{3002}\u{ff1f}\u{ff01}\u{ff0c}\u{3001}\u{ff1b}\u{ff1a}\u{201c}\u{201d}\u{2018}\u{2019}\u{ff08}\u{ff09}\u{300a}\u{300b}\u{3008}\u{3009}\u{3010}\u{3011}\u{300e}\u{300f}\u{300c}\u{300d}\u{fe43}\u{fe44}\u{3014}\u{3015}\u{2026}\u{2014}\u{ff5e}\u{fe4f}\u{ffe5}]/u
            .source;
        const regex = new RegExp(`(${pattern})[\\s\\n]+(${pattern})`, 'gu');
        return (value) => value.replace(regex, '$1$2');
    }
    catch (_a) {
        const pattern = /[\u{4E00}-\u{9FCC}\u{3400}-\u{4DB5}\u{FA0E}\u{FA0F}\u{FA11}\u{FA13}\u{FA14}\u{FA1F}\u{FA21}\u{FA23}\u{FA24}\u{FA27}-\u{FA29}]|[\u{d840}-\u{d868}][\u{dc00}-\u{dfff}]|\u{d869}[\u{dc00}-\u{ded6}\u{df00}-\u{dfff}]|[\u{d86a}-\u{d86c}][\u{dc00}-\u{dfff}]|\u{d86d}[\u{dc00}-\u{df34}\u{df40}-\u{dfff}]|\u{d86e}[\u{dc00}-\u{dc1d}]/u
            .source;
        const regex = new RegExp(`(${pattern})[\\s\\n]+(${pattern})`, 'gu');
        return (value) => value.replace(regex, '$1$2');
    }
})();

function* createNodePointGenerator(literalStrings) {
    let offset = 0;
    let column = 1;
    let line = 1;
    const contents = typeof literalStrings === 'string' ? [literalStrings] : literalStrings;
    for (const content of contents) {
        const codePoints = [];
        for (const c of content) {
            const codePoint = c.codePointAt(0);
            codePoints.push(codePoint);
        }
        const nodePoints = [];
        const endIndex = codePoints.length;
        for (let i = 0; i < endIndex; ++i) {
            const codePoint = codePoints[i];
            switch (codePoint) {
                case exports.AsciiCodePoint.HT:
                    for (let i = 0; i < 4; ++i) {
                        nodePoints.push({
                            line,
                            column,
                            offset,
                            codePoint: exports.VirtualCodePoint.SPACE,
                        });
                    }
                    offset += 1;
                    column += 1;
                    break;
                case exports.AsciiCodePoint.LF:
                    nodePoints.push({
                        line,
                        column,
                        offset,
                        codePoint: exports.VirtualCodePoint.LINE_END,
                    });
                    offset += 1;
                    column = 1;
                    line += 1;
                    break;
                case exports.AsciiCodePoint.CR:
                    nodePoints.push({
                        line,
                        column,
                        offset,
                        codePoint: exports.VirtualCodePoint.LINE_END,
                    });
                    offset += 1;
                    column = 1;
                    line += 1;
                    if (i + 1 < endIndex && codePoints[i + 1] === exports.AsciiCodePoint.LF) {
                        offset += 1;
                        i += 1;
                    }
                    break;
                case exports.AsciiCodePoint.NUL:
                    nodePoints.push({
                        line,
                        column,
                        offset,
                        codePoint: UnicodeCodePoint.REPLACEMENT_CHARACTER,
                    });
                    offset += 1;
                    column += 1;
                    break;
                default:
                    nodePoints.push({ line, column, offset, codePoint });
                    offset += 1;
                    column += 1;
                    break;
            }
        }
        yield nodePoints;
    }
    return;
}
function calcStringFromNodePoints(nodePoints, startIndex = 0, endIndex = nodePoints.length, trim = false) {
    if (trim) {
        [startIndex, endIndex] = calcTrimBoundaryOfCodePoints(nodePoints, startIndex, endIndex);
    }
    let result = '';
    for (let i = startIndex, j; i < endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        switch (c) {
            case exports.VirtualCodePoint.SPACE: {
                for (j = i + 1; j < endIndex; ++j) {
                    if (nodePoints[j].codePoint !== exports.VirtualCodePoint.SPACE)
                        break;
                }
                const tabCount = (j - i) >> 2;
                const spaceCount = (j - i) & 3;
                for (let k = 0; k < spaceCount; ++k)
                    result += ' ';
                for (let k = 0; k < tabCount; ++k)
                    result += '\t';
                i = j - 1;
                break;
            }
            case exports.VirtualCodePoint.LINE_END: {
                result += '\n';
                break;
            }
            default:
                result += String.fromCodePoint(c);
        }
    }
    return result;
}
function calcEscapedStringFromNodePoints(nodePoints, startIndex = 0, endIndex = nodePoints.length, trim = false) {
    if (trim) {
        [startIndex, endIndex] = calcTrimBoundaryOfCodePoints(nodePoints, startIndex, endIndex);
    }
    let result = '';
    for (let i = startIndex, j; i < endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        if (c === exports.AsciiCodePoint.BACKSLASH && i + 1 < endIndex) {
            const d = nodePoints[i + 1].codePoint;
            if (isAsciiPunctuationCharacter(d)) {
                i += 1;
                result += String.fromCodePoint(d);
            }
            else {
                result += '\\';
            }
            continue;
        }
        switch (c) {
            case exports.VirtualCodePoint.SPACE: {
                for (j = i + 1; j < endIndex; ++j) {
                    if (nodePoints[j].codePoint !== exports.VirtualCodePoint.SPACE)
                        break;
                }
                const tabCount = (j - i) >> 2;
                const spaceCount = (j - i) & 3;
                for (let k = 0; k < spaceCount; ++k)
                    result += ' ';
                for (let k = 0; k < tabCount; ++k)
                    result += '\t';
                i = j - 1;
                break;
            }
            case exports.VirtualCodePoint.LINE_END: {
                result += '\n';
                break;
            }
            case exports.AsciiCodePoint.AMPERSAND: {
                const entityReference = eatEntityReference(nodePoints, i + 1, endIndex);
                if (entityReference == null)
                    result += '&';
                else {
                    result += entityReference.value;
                    i = entityReference.nextIndex - 1;
                }
                break;
            }
            default:
                result += String.fromCodePoint(c);
        }
    }
    return result;
}
function calcTrimBoundaryOfCodePoints(nodePoints, startIndex = 0, endIndex = nodePoints.length) {
    let leftIndex = startIndex, rightIndex = endIndex - 1;
    for (; leftIndex <= rightIndex; ++leftIndex) {
        const p = nodePoints[leftIndex];
        if (!isWhitespaceCharacter(p.codePoint))
            break;
    }
    for (; leftIndex <= rightIndex; --rightIndex) {
        const p = nodePoints[rightIndex];
        if (!isWhitespaceCharacter(p.codePoint))
            break;
    }
    return [leftIndex, rightIndex + 1];
}

exports.asciiControlCharacters = asciiControlCharacters;
exports.asciiPunctuationCharacters = asciiPunctuationCharacters;
exports.asciiWhitespaceCharacters = asciiWhitespaceCharacters;
exports.calcEscapedStringFromNodePoints = calcEscapedStringFromNodePoints;
exports.calcStringFromNodePoints = calcStringFromNodePoints;
exports.calcTrimBoundaryOfCodePoints = calcTrimBoundaryOfCodePoints;
exports.collectCodePointsFromEnum = collectCodePointsFromEnum;
exports.controlCharacters = controlCharacters;
exports.createCodePointSearcher = createCodePointSearcher;
exports.createEntityReferenceTrie = createEntityReferenceTrie;
exports.createNodePointGenerator = createNodePointGenerator;
exports.eatEntityReference = eatEntityReference;
exports.entityReferenceTrie = entityReferenceTrie;
exports.entityReferences = entityReferences;
exports.foldCase = foldCase;
exports.foldingCaseCodeMap = foldingCaseCodeMap;
exports.isAlphanumeric = isAlphanumeric;
exports.isAsciiCharacter = isAsciiCharacter;
exports.isAsciiControlCharacter = isAsciiControlCharacter;
exports.isAsciiDigitCharacter = isAsciiDigitCharacter;
exports.isAsciiLetter = isAsciiLetter;
exports.isAsciiLowerLetter = isAsciiLowerLetter;
exports.isAsciiPunctuationCharacter = isAsciiPunctuationCharacter;
exports.isAsciiUpperLetter = isAsciiUpperLetter;
exports.isAsciiWhitespaceCharacter = isAsciiWhitespaceCharacter;
exports.isControlCharacter = isControlCharacter;
exports.isLineEnding = isLineEnding;
exports.isPunctuationCharacter = isPunctuationCharacter;
exports.isSpaceCharacter = isSpaceCharacter;
exports.isSpaceLike = isSpaceLike;
exports.isUnicodeWhitespaceCharacter = isUnicodeWhitespaceCharacter;
exports.isWhitespaceCharacter = isWhitespaceCharacter;
exports.punctuationCharacters = punctuationCharacters;
exports.spaceCharacters = spaceCharacters;
exports.stripChineseCharacters = stripChineseCharacters;
exports.tightenChineseCharacters = tightenChineseCharacters;
exports.unicodeWhitespaceCharacters = unicodeWhitespaceCharacters;
exports.whitespaceCharacters = whitespaceCharacters;


/***/ }),

/***/ 3206:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var invariant = __nccwpck_require__(8018);

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);

const createBlockContentProcessor = (hooks, fallbackHook) => {
    const root = {
        _tokenizer: 'root',
        nodeType: 'root',
        position: {
            start: { line: 1, column: 1, offset: 0 },
            end: { line: 1, column: 1, offset: 0 },
        },
        children: [],
    };
    const stateStack = [];
    stateStack.push({
        hook: { isContainingBlock: true },
        token: root,
    });
    let currentStackIndex = 0;
    const refreshPosition = (endPoint) => {
        for (let sIndex = currentStackIndex; sIndex >= 0; --sIndex) {
            const o = stateStack[sIndex];
            o.token.position.end = Object.assign({}, endPoint);
        }
    };
    const createRollbackProcessor = (hook, lines) => {
        if (lines.length <= 0)
            return null;
        const candidateHooks = hooks.filter(h => h != hook);
        const processor = createBlockContentProcessor(candidateHooks, fallbackHook);
        for (const line of lines) {
            processor.consume(line);
        }
        return processor;
    };
    const popup = () => {
        const topState = stateStack.pop();
        if (topState == null)
            return undefined;
        if (stateStack.length > 0) {
            const parent = stateStack[stateStack.length - 1];
            if (topState.hook.onClose != null) {
                const result = topState.hook.onClose(topState.token);
                if (result != null) {
                    switch (result.status) {
                        case 'closingAndRollback': {
                            const processor = createRollbackProcessor(topState.hook, result.lines);
                            if (processor == null)
                                break;
                            const internalRoot = processor.done();
                            parent.token.children.push(...internalRoot.children);
                            break;
                        }
                        case 'failedAndRollback': {
                            parent.token.children.pop();
                            const processor = createRollbackProcessor(topState.hook, result.lines);
                            if (processor == null)
                                break;
                            const internalRoot = processor.done();
                            parent.token.children.push(...internalRoot.children);
                            break;
                        }
                    }
                }
            }
        }
        if (currentStackIndex >= stateStack.length) {
            currentStackIndex = stateStack.length - 1;
        }
        return topState;
    };
    const cutStaleBranch = (nextTopIndex) => {
        while (stateStack.length > nextTopIndex)
            popup();
    };
    const push = (hook, nextToken, saturated) => {
        cutStaleBranch(currentStackIndex + 1);
        const parent = stateStack[currentStackIndex];
        parent.token.children.push(nextToken);
        refreshPosition(nextToken.position.end);
        currentStackIndex += 1;
        stateStack.push({ hook, token: nextToken });
        if (saturated) {
            popup();
        }
    };
    const rollback = (hook, lines, parent) => {
        const processor = createRollbackProcessor(hook, lines);
        if (processor == null)
            return false;
        const internalStateStack = processor.shallowSnapshot();
        const internalStateRoot = internalStateStack[0];
        if (internalStateRoot.token.children != null) {
            parent.token.children.push(...internalStateRoot.token.children);
        }
        refreshPosition(internalStateRoot.token.position.end);
        for (let i = 1; i < internalStateStack.length; ++i) {
            const internalState = internalStateStack[i];
            stateStack.push(internalState);
        }
        currentStackIndex = stateStack.length - 1;
        return true;
    };
    const consume = (line) => {
        const { nodePoints, startIndex: startIndexOfLine, endIndex: endIndexOfLine } = line;
        let { firstNonWhitespaceIndex, countOfPrecedeSpaces, startIndex: i } = line;
        const getEatingInfo = () => ({
            nodePoints,
            startIndex: i,
            endIndex: endIndexOfLine,
            firstNonWhitespaceIndex,
            countOfPrecedeSpaces,
        });
        const moveForward = (nextIndex, shouldRefreshPosition) => {
            invariant__default["default"](i <= nextIndex, `[DBTContext#moveForward] nextIndex(${nextIndex}) is behind i(${i}).`);
            if (shouldRefreshPosition) {
                const endPoint = coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1);
                refreshPosition(endPoint);
            }
            if (i === nextIndex)
                return;
            i = nextIndex;
            countOfPrecedeSpaces = 0;
            firstNonWhitespaceIndex = nextIndex;
            for (; firstNonWhitespaceIndex < endIndexOfLine; ++firstNonWhitespaceIndex) {
                const c = nodePoints[firstNonWhitespaceIndex].codePoint;
                if (character.isSpaceCharacter(c)) {
                    countOfPrecedeSpaces += 1;
                    continue;
                }
                if (!character.isWhitespaceCharacter(c))
                    break;
            }
        };
        const consumeNewOpener = (hook, line) => {
            const { token: parentToken } = stateStack[currentStackIndex];
            const result = hook.eatOpener(line, parentToken);
            if (result == null)
                return false;
            invariant__default["default"](result.nextIndex > i, '[consumeNewOpener] The marker of the new data node cannot be empty.\n' +
                ` tokenizer(${result.token._tokenizer})`);
            moveForward(result.nextIndex, false);
            const nextToken = result.token;
            nextToken._tokenizer = hook.name;
            push(hook, nextToken, Boolean(result.saturated));
            return true;
        };
        const interruptSibling = (hook, line) => {
            if (hook.eatAndInterruptPreviousSibling == null)
                return false;
            const { hook: siblingHook, token: siblingToken } = stateStack[currentStackIndex];
            const { token: parentToken } = stateStack[currentStackIndex - 1];
            if (hook.priority <= siblingHook.priority)
                return false;
            const result = hook.eatAndInterruptPreviousSibling(line, siblingToken, parentToken);
            if (result == null)
                return false;
            cutStaleBranch(currentStackIndex);
            parentToken.children.pop();
            if (result.remainingSibling != null) {
                if (Array.isArray(result.remainingSibling)) {
                    parentToken.children.push(...result.remainingSibling);
                }
                else {
                    parentToken.children.push(result.remainingSibling);
                }
            }
            moveForward(result.nextIndex, false);
            const nextToken = result.token;
            nextToken._tokenizer = hook.name;
            push(hook, nextToken, Boolean(result.saturated));
            return true;
        };
        const step1 = () => {
            currentStackIndex = 1;
            if (stateStack.length < 2)
                return;
            let { token: parentToken } = stateStack[currentStackIndex - 1];
            while (i < endIndexOfLine && currentStackIndex < stateStack.length) {
                const currentStateItem = stateStack[currentStackIndex];
                const currentHook = currentStateItem.hook;
                const eatingInfo = getEatingInfo();
                if (hooks.some(hook => hook !== currentHook && interruptSibling(hook, eatingInfo))) {
                    break;
                }
                const result = currentHook.eatContinuationText == null
                    ? { status: 'notMatched' }
                    : currentHook.eatContinuationText(eatingInfo, currentStateItem.token, parentToken);
                let finished = false, rolledBack = false;
                switch (result.status) {
                    case 'failedAndRollback': {
                        parentToken.children.pop();
                        stateStack.length = currentStackIndex;
                        currentStackIndex -= 1;
                        if (result.lines.length > 0) {
                            const parent = stateStack[currentStackIndex];
                            if (rollback(currentHook, result.lines, parent)) {
                                rolledBack = true;
                                break;
                            }
                        }
                        finished = true;
                        break;
                    }
                    case 'closingAndRollback': {
                        cutStaleBranch(currentStackIndex);
                        if (result.lines.length > 0) {
                            const parent = stateStack[currentStackIndex];
                            if (rollback(currentHook, result.lines, parent)) {
                                rolledBack = true;
                                break;
                            }
                        }
                        finished = true;
                        break;
                    }
                    case 'notMatched': {
                        currentStackIndex -= 1;
                        finished = true;
                        break;
                    }
                    case 'closing': {
                        moveForward(result.nextIndex, true);
                        currentStackIndex -= 1;
                        finished = true;
                        break;
                    }
                    case 'opening': {
                        moveForward(result.nextIndex, true);
                        break;
                    }
                    default:
                        throw new TypeError(`[eatContinuationText] unexpected status (${result.status}).`);
                }
                if (finished)
                    break;
                if (rolledBack)
                    continue;
                currentStackIndex += 1;
                parentToken = currentStateItem.token;
            }
        };
        const step2 = () => {
            if (i >= endIndexOfLine)
                return;
            if (currentStackIndex < stateStack.length) {
                const lastChild = stateStack[stateStack.length - 1];
                if (lastChild.hook.eatLazyContinuationText != null) {
                    const eatingInfo = getEatingInfo();
                    if (eatingInfo.countOfPrecedeSpaces >= 4)
                        return;
                }
            }
            else {
                currentStackIndex = stateStack.length - 1;
            }
            while (i < endIndexOfLine && stateStack[currentStackIndex].hook.isContainingBlock) {
                let hasNewOpener = false;
                const eatingInfo = getEatingInfo();
                for (const hook of hooks) {
                    if (consumeNewOpener(hook, eatingInfo)) {
                        hasNewOpener = true;
                        break;
                    }
                }
                if (!hasNewOpener)
                    break;
            }
        };
        const step3 = () => {
            if (i >= endIndexOfLine || currentStackIndex + 1 >= stateStack.length)
                return false;
            const { hook, token } = stateStack[stateStack.length - 1];
            if (hook.eatLazyContinuationText == null)
                return false;
            const { token: parentToken } = stateStack[stateStack.length - 2];
            const eatingInfo = getEatingInfo();
            const result = hook.eatLazyContinuationText(eatingInfo, token, parentToken);
            switch (result.status) {
                case 'notMatched': {
                    return false;
                }
                case 'opening': {
                    currentStackIndex = stateStack.length - 1;
                    moveForward(result.nextIndex, true);
                    currentStackIndex = stateStack.length - 1;
                    return true;
                }
                default:
                    throw new TypeError(`[eatLazyContinuationText] unexpected status (${result.status}).`);
            }
        };
        step1();
        step2();
        if (!step3()) {
            cutStaleBranch(currentStackIndex + 1);
        }
        if (fallbackHook != null && i < endIndexOfLine) {
            const eatingInfo = getEatingInfo();
            consumeNewOpener(fallbackHook, eatingInfo);
        }
        invariant__default["default"](firstNonWhitespaceIndex >= endIndexOfLine, '[IBlockContentProcessor] there is still unprocessed contents.' +
            ` startIndexOfLine(${startIndexOfLine}), endIndexOfLine(${endIndexOfLine})`);
    };
    const done = () => {
        while (stateStack.length > 1)
            popup();
        return root;
    };
    return {
        consume,
        done,
        shallowSnapshot: () => [...stateStack],
    };
};

const createSinglePriorityDelimiterProcessor = () => {
    let htIndex = 0;
    const higherPriorityTokens = [];
    const delimiterStack = [];
    const tokenStack = [];
    const cutStaleBranch = (startStackIndex) => {
        let top = startStackIndex - 1;
        while (top >= 0 && delimiterStack[top].inactive)
            top -= 1;
        delimiterStack.length = top + 1;
    };
    const push = (hook, delimiter) => {
        delimiterStack.push({
            hook,
            delimiter,
            inactive: false,
            tokenStackIndex: tokenStack.length,
        });
    };
    const findNearestPairedDelimiter = (hook, closerDelimiter) => {
        if (delimiterStack.length <= 0)
            return null;
        let item = null;
        for (let i = delimiterStack.length - 1; i >= 0; --i) {
            item = delimiterStack[i];
            if (item.inactive || item.hook !== hook)
                continue;
            const openerDelimiter = item.delimiter;
            const result = hook.isDelimiterPair(openerDelimiter, closerDelimiter, higherPriorityTokens);
            if (result.paired)
                return openerDelimiter;
            if (!result.closer)
                return null;
        }
        return null;
    };
    const consume = (hook, closerDelimiter) => {
        if (delimiterStack.length <= 0)
            return closerDelimiter;
        let remainOpenerDelimiter;
        let remainCloserDelimiter = closerDelimiter;
        let internalTokens = [];
        for (let i = delimiterStack.length - 1; i >= 0; --i) {
            const item = delimiterStack[i];
            if (item.hook !== hook || item.inactive)
                continue;
            const openerTokenStackIndex = item.tokenStackIndex;
            if (openerTokenStackIndex < tokenStack.length) {
                internalTokens = tokenStack.splice(openerTokenStackIndex).concat(internalTokens);
            }
            remainOpenerDelimiter = item.delimiter;
            while (remainOpenerDelimiter != null && remainCloserDelimiter != null) {
                if (remainCloserDelimiter.type === 'opener') {
                    push(hook, remainCloserDelimiter);
                    remainCloserDelimiter = undefined;
                    break;
                }
                if (remainCloserDelimiter.type === 'full')
                    break;
                const prePairResult = hook.isDelimiterPair(remainOpenerDelimiter, remainCloserDelimiter, internalTokens);
                if (!prePairResult.paired) {
                    if (!prePairResult.opener) {
                        const tokens = hook.processSingleDelimiter(remainOpenerDelimiter);
                        if (tokens.length > 0) {
                            for (const token of tokens)
                                token._tokenizer = hook.name;
                            internalTokens.unshift(...tokens);
                        }
                        remainOpenerDelimiter = undefined;
                        item.inactive = true;
                    }
                    if (!prePairResult.closer) {
                        const tokens = hook.processSingleDelimiter(remainCloserDelimiter);
                        if (tokens.length > 0) {
                            for (const token of tokens)
                                token._tokenizer = hook.name;
                            internalTokens.push(...tokens);
                        }
                        remainCloserDelimiter = undefined;
                    }
                    break;
                }
                const result = hook.processDelimiterPair(remainOpenerDelimiter, remainCloserDelimiter, internalTokens);
                {
                    for (const token of result.tokens) {
                        if (token._tokenizer == null)
                            token._tokenizer = hook.name;
                    }
                    internalTokens = result.tokens;
                }
                remainOpenerDelimiter = result.remainOpenerDelimiter;
                remainCloserDelimiter = result.remainCloserDelimiter;
                cutStaleBranch(i);
                i = Math.min(i, delimiterStack.length);
                if (remainOpenerDelimiter != null)
                    push(hook, remainOpenerDelimiter);
            }
            if (remainCloserDelimiter == null || remainCloserDelimiter.type === 'full') {
                break;
            }
        }
        tokenStack.push(...internalTokens);
        if (remainCloserDelimiter == null)
            return null;
        if (remainCloserDelimiter.type === 'full' || remainCloserDelimiter.type === 'closer') {
            const tokens = hook.processSingleDelimiter(remainCloserDelimiter);
            for (const token of tokens) {
                token._tokenizer = hook.name;
                tokenStack.push(token);
            }
            return null;
        }
        return remainCloserDelimiter;
    };
    const process = (hook, delimiter) => {
        for (; htIndex < higherPriorityTokens.length; ++htIndex) {
            const token = higherPriorityTokens[htIndex];
            if (token.startIndex >= delimiter.endIndex)
                break;
            if (token.startIndex >= delimiter.startIndex)
                continue;
            tokenStack.push(token);
        }
        switch (delimiter.type) {
            case 'opener': {
                push(hook, delimiter);
                break;
            }
            case 'both': {
                const remainDelimiter = consume(hook, delimiter);
                if (remainDelimiter != null)
                    push(hook, remainDelimiter);
                break;
            }
            case 'closer': {
                consume(hook, delimiter);
                break;
            }
            case 'full': {
                const tokens = hook.processSingleDelimiter(delimiter);
                for (const token of tokens) {
                    token._tokenizer = hook.name;
                    tokenStack.push(token);
                }
                break;
            }
            default:
                throw new TypeError(`Unexpected delimiter type(${delimiter.type}) from ${hook.name}.`);
        }
    };
    const done = () => {
        const tokens = [];
        for (const { delimiter, hook } of delimiterStack) {
            const result = hook.processSingleDelimiter(delimiter);
            for (const token of result) {
                token._tokenizer = hook.name;
                tokens.push(token);
            }
        }
        delimiterStack.length = 0;
        if (tokens.length > 0) {
            const nextTokenStack = mergeSortedTokenStack(tokenStack, tokens);
            tokenStack.length = 0;
            tokenStack.push(...nextTokenStack);
        }
        const result = tokenStack.concat(higherPriorityTokens.slice(htIndex));
        return result;
    };
    const reset = (_higherPriorityTokens) => {
        higherPriorityTokens.length = _higherPriorityTokens.length;
        for (let i = 0; i < _higherPriorityTokens.length; ++i) {
            higherPriorityTokens[i] = _higherPriorityTokens[i];
        }
        htIndex = 0;
        delimiterStack.length = 0;
        tokenStack.length = 0;
    };
    return {
        process,
        done,
        reset,
        findNearestPairedDelimiter,
    };
};
const mergeSortedTokenStack = (tokens1, tokens2) => {
    if (tokens1.length <= 0)
        return tokens2;
    if (tokens2.length <= 0)
        return tokens1;
    const tokens = [];
    let i1 = 0;
    let i2 = 0;
    for (; i1 < tokens1.length && i2 < tokens2.length;) {
        if (tokens1[i1].startIndex < tokens2[i2].startIndex) {
            tokens.push(tokens1[i1]);
            i1 += 1;
        }
        else {
            tokens.push(tokens2[i2]);
            i2 += 1;
        }
    }
    for (; i1 < tokens1.length; ++i1)
        tokens.push(tokens1[i1]);
    for (; i2 < tokens2.length; ++i2)
        tokens.push(tokens2[i2]);
    return tokens;
};

const createPhrasingContentProcessor = (hookGroups, hookGroupIndex) => {
    const findNearestDelimiters = (startIndex, endIndex, hooks) => {
        let nearestDelimiters = [];
        let nearestDelimiterStartIndex = null;
        const rangeIndex = [startIndex, endIndex];
        for (const hook of hooks) {
            const delimiter = hook.findDelimiter(rangeIndex);
            if (delimiter == null)
                continue;
            if (nearestDelimiterStartIndex != null) {
                if (delimiter.startIndex > nearestDelimiterStartIndex)
                    continue;
                if (delimiter.startIndex < nearestDelimiterStartIndex) {
                    nearestDelimiters = [];
                }
            }
            nearestDelimiterStartIndex = delimiter.startIndex;
            nearestDelimiters.push({ hook, delimiter });
        }
        if (nearestDelimiters.length <= 0)
            return { items: [], nextIndex: -1 };
        const nextIndex = nearestDelimiterStartIndex + 1;
        if (nearestDelimiters.length > 1) {
            let potentialCloserCount = 0;
            for (const item of nearestDelimiters) {
                const dType = item.delimiter.type;
                if (dType === 'full')
                    return { items: [item], nextIndex: item.delimiter.endIndex };
                if (dType === 'both' || dType === 'closer')
                    potentialCloserCount += 1;
            }
            if (potentialCloserCount > 1) {
                let validCloserIndex = -1;
                let validPairedOpenerStartIndex = -1;
                for (let index = 0; index < nearestDelimiters.length; ++index) {
                    const { hook, delimiter } = nearestDelimiters[index];
                    if (delimiter.type === 'both' || delimiter.type === 'closer') {
                        const openerDelimiter = processor.findNearestPairedDelimiter(hook, delimiter);
                        if (openerDelimiter != null) {
                            if (validPairedOpenerStartIndex < openerDelimiter.startIndex) {
                                validCloserIndex = index;
                                validPairedOpenerStartIndex = openerDelimiter.startIndex;
                            }
                        }
                    }
                }
                const items = validCloserIndex > -1
                    ? [nearestDelimiters[validCloserIndex]]
                    : nearestDelimiters.filter(item => item.delimiter.type !== 'closer');
                return { items, nextIndex };
            }
        }
        return { items: nearestDelimiters, nextIndex };
    };
    const processor = createSinglePriorityDelimiterProcessor();
    const process = (higherPriorityTokens, _startIndex, _endIndex) => {
        let tokens = higherPriorityTokens;
        for (let hgIndex = hookGroupIndex; hgIndex < hookGroups.length; ++hgIndex) {
            const hooks = hookGroups[hgIndex];
            for (const hook of hooks)
                hook.reset();
            let tokenIndex = 0;
            processor.reset(tokens);
            for (let i = _startIndex; i < _endIndex;) {
                let endIndex = _endIndex;
                for (; tokenIndex < tokens.length; ++tokenIndex) {
                    const token = tokens[tokenIndex];
                    if (i < token.startIndex) {
                        endIndex = token.startIndex;
                        break;
                    }
                    if (i < token.endIndex)
                        i = token.endIndex;
                }
                const { items, nextIndex } = findNearestDelimiters(i, endIndex, hooks);
                if (nextIndex < 0 || items.length <= 0) {
                    i = nextIndex < 0 ? endIndex : nextIndex;
                    continue;
                }
                i += 1;
                for (const { hook, delimiter } of items) {
                    i = Math.max(i, delimiter.endIndex);
                    processor.process(hook, delimiter);
                }
            }
            tokens = processor.done();
        }
        return tokens;
    };
    return { process };
};
const createProcessorHookGroups = (tokenizers, matchInlineApi, resolveFallbackTokens) => {
    const hookGroups = [];
    for (let i = 0; i < tokenizers.length;) {
        const hookGroup = [];
        hookGroups.push(hookGroup);
        const processor = createPhrasingContentProcessor(hookGroups, hookGroups.length);
        const api = Object.freeze(Object.assign(Object.assign({}, matchInlineApi), { resolveInternalTokens: (higherPriorityTokens, startIndex, endIndex) => {
                let tokens = processor.process(higherPriorityTokens, startIndex, endIndex);
                tokens = resolveFallbackTokens(tokens, startIndex, endIndex);
                return tokens;
            } }));
        const currentPriority = tokenizers[i].priority;
        for (; i < tokenizers.length; ++i) {
            const hook = tokenizers[i];
            if (hook.priority !== currentPriority)
                break;
            const processorHook = createProcessorHook(hook, api);
            hookGroup.push(processorHook);
        }
    }
    return hookGroups;
};
const createProcessorHook = (tokenizer, api) => {
    let _findDelimiter;
    const hook = tokenizer.match(api);
    return Object.assign(Object.assign({ isDelimiterPair: () => ({ paired: true }), processDelimiterPair: (_1, _2, internalTokens) => ({ tokens: internalTokens }), processSingleDelimiter: () => [] }, hook), { name: tokenizer.name, priority: tokenizer.priority, findDelimiter: rangeIndex => _findDelimiter.next(rangeIndex).value, reset: () => {
            _findDelimiter = hook.findDelimiter();
            _findDelimiter.next();
        } });
};

function createProcessor(options) {
    const { inlineTokenizers, inlineTokenizerMap, blockTokenizers, blockTokenizerMap, blockFallbackTokenizer, inlineFallbackTokenizer, shouldReservePosition, presetDefinitions, presetFootnoteDefinitions, } = options;
    let isIdentifierRegisterAvailable = false;
    const definitionIdentifierSet = new Set();
    const footnoteIdentifierSet = new Set();
    let _nodePoints = [];
    let _blockStartIndex = -1;
    let _blockEndIndex = -1;
    const apis = Object.freeze({
        matchBlockApi: {
            extractPhrasingLines,
            rollbackPhrasingLines,
            registerDefinitionIdentifier: (identifier) => {
                if (isIdentifierRegisterAvailable)
                    definitionIdentifierSet.add(identifier);
            },
            registerFootnoteDefinitionIdentifier: (identifier) => {
                if (isIdentifierRegisterAvailable)
                    footnoteIdentifierSet.add(identifier);
            },
        },
        parseBlockApi: {
            shouldReservePosition,
            processInlines,
            parseBlockTokens,
        },
        matchInlineApi: {
            hasDefinition: identifier => definitionIdentifierSet.has(identifier),
            hasFootnoteDefinition: identifier => footnoteIdentifierSet.has(identifier),
            getNodePoints: () => _nodePoints,
            getBlockStartIndex: () => _blockStartIndex,
            getBlockEndIndex: () => _blockEndIndex,
            resolveFallbackTokens,
        },
        parseInlineApi: {
            shouldReservePosition,
            getNodePoints: () => _nodePoints,
            hasDefinition: identifier => definitionIdentifierSet.has(identifier),
            hasFootnoteDefinition: identifier => footnoteIdentifierSet.has(identifier),
            parseInlineTokens,
            calcPosition: token => ({
                start: coreTokenizer.calcStartPoint(_nodePoints, token.startIndex),
                end: coreTokenizer.calcEndPoint(_nodePoints, token.endIndex - 1),
            }),
        },
    });
    const matchBlockHooks = blockTokenizers.map(tokenizer => (Object.assign(Object.assign({}, tokenizer.match(apis.matchBlockApi)), { name: tokenizer.name, priority: tokenizer.priority })));
    const parseBlockHookMap = new Map(Array.from(blockTokenizerMap.entries()).map(entry => [
        entry[0],
        entry[1].parse(apis.parseBlockApi),
    ]));
    const blockFallbackHook = blockFallbackTokenizer
        ? Object.assign(Object.assign({}, blockFallbackTokenizer.match(apis.matchBlockApi)), { name: blockFallbackTokenizer.name, priority: blockFallbackTokenizer.priority }) : null;
    const matchInlineHookGroups = createProcessorHookGroups(inlineTokenizers, apis.matchInlineApi, resolveFallbackTokens);
    const parseInlineHookMap = new Map(Array.from(inlineTokenizerMap.entries()).map(entry => [
        entry[0],
        entry[1].parse(apis.parseInlineApi),
    ]));
    const phrasingContentProcessor = createPhrasingContentProcessor(matchInlineHookGroups, 0);
    return { process };
    function process(lines) {
        definitionIdentifierSet.clear();
        footnoteIdentifierSet.clear();
        isIdentifierRegisterAvailable = true;
        const blockTokenTree = matchBlockTokens(lines);
        isIdentifierRegisterAvailable = false;
        for (const definition of presetDefinitions) {
            definitionIdentifierSet.add(definition.identifier);
        }
        for (const footnoteDefinition of presetFootnoteDefinitions) {
            footnoteIdentifierSet.add(footnoteDefinition.identifier);
        }
        const children = parseBlockTokens(blockTokenTree.children);
        const ast = shouldReservePosition
            ? { type: 'root', position: blockTokenTree.position, children }
            : { type: 'root', children };
        return ast;
    }
    function extractPhrasingLines(token) {
        var _a;
        const tokenizer = blockTokenizerMap.get(token._tokenizer);
        return (_a = tokenizer === null || tokenizer === void 0 ? void 0 : tokenizer.extractPhrasingContentLines(token)) !== null && _a !== void 0 ? _a : null;
    }
    function rollbackPhrasingLines(lines, originalToken) {
        if (originalToken != null) {
            const tokenizer = blockTokenizerMap.get(originalToken._tokenizer);
            if (tokenizer !== undefined && tokenizer.buildBlockToken != null) {
                const token = tokenizer.buildBlockToken(lines, originalToken);
                if (token !== null) {
                    token._tokenizer = tokenizer.name;
                    return [token];
                }
            }
        }
        const tokenTree = matchBlockTokens([lines]);
        return tokenTree.children;
    }
    function resolveFallbackTokens(tokens, tokenStartIndex, tokenEndIndex) {
        if (inlineFallbackTokenizer == null)
            return tokens;
        let i = tokenStartIndex;
        const results = [];
        for (const token of tokens) {
            if (i < token.startIndex) {
                const fallbackToken = inlineFallbackTokenizer.findAndHandleDelimiter(i, token.startIndex, apis.matchInlineApi);
                fallbackToken._tokenizer = inlineFallbackTokenizer.name;
                results.push(fallbackToken);
            }
            results.push(token);
            i = token.endIndex;
        }
        if (i < tokenEndIndex) {
            const fallbackToken = inlineFallbackTokenizer.findAndHandleDelimiter(i, tokenEndIndex, apis.matchInlineApi);
            fallbackToken._tokenizer = inlineFallbackTokenizer.name;
            results.push(fallbackToken);
        }
        return results;
    }
    function matchBlockTokens(linesIterator) {
        const processor = createBlockContentProcessor(matchBlockHooks, blockFallbackHook);
        for (const lines of linesIterator) {
            for (const line of lines) {
                processor.consume(line);
            }
        }
        const root = processor.done();
        return root;
    }
    function parseBlockTokens(tokens) {
        if (tokens === undefined || tokens.length <= 0)
            return [];
        const results = [];
        for (let i0 = 0, i1; i0 < tokens.length; i0 = i1) {
            const _tokenizer = tokens[i0]._tokenizer;
            for (i1 = i0 + 1; i1 < tokens.length && tokens[i1]._tokenizer === _tokenizer;)
                i1 += 1;
            const hook = parseBlockHookMap.get(_tokenizer);
            invariant__default["default"](hook !== undefined, `[parseBlock] tokenizer '${_tokenizer}' not found`);
            const nodes = hook.parse(tokens.slice(i0, i1));
            results.push(...nodes);
        }
        return results;
    }
    function processInlines(nodePoints) {
        if (nodePoints.length <= 0)
            return [];
        const inlineTokens = matchInlineTokens(nodePoints, 0, nodePoints.length);
        const inlineNodes = parseInlineTokens(inlineTokens);
        return inlineNodes;
    }
    function matchInlineTokens(nodePoints, startIndexOfBlock, endIndexOfBlock) {
        _nodePoints = nodePoints;
        _blockStartIndex = startIndexOfBlock;
        _blockEndIndex = endIndexOfBlock;
        const tokensStack = phrasingContentProcessor.process([], startIndexOfBlock, endIndexOfBlock);
        const tokens = resolveFallbackTokens(tokensStack, startIndexOfBlock, endIndexOfBlock);
        return tokens;
    }
    function parseInlineTokens(tokens) {
        if (tokens === undefined || tokens.length <= 0)
            return [];
        const results = [];
        for (let i0 = 0, i1; i0 < tokens.length; i0 = i1) {
            const _tokenizer = tokens[i0]._tokenizer;
            for (i1 = i0 + 1; i1 < tokens.length && tokens[i1]._tokenizer === _tokenizer;)
                i1 += 1;
            const hook = parseInlineHookMap.get(_tokenizer);
            invariant__default["default"](hook !== undefined, `[parseBlock] tokenizer '${_tokenizer}' not found`);
            const nodes = hook.parse(tokens.slice(i0, i1));
            results.push(...nodes);
        }
        return results;
    }
}

function* createPhrasingLineGenerator(nodePointsList) {
    const allNodePoints = [];
    let startIndex = 0;
    let firstNonWhitespaceIndex = 0;
    let countOfPrecedeSpaces = 0;
    for (const nodePoints of nodePointsList) {
        const lines = [];
        for (const p of nodePoints) {
            const c = p.codePoint;
            if (firstNonWhitespaceIndex === allNodePoints.length) {
                if (character.isSpaceCharacter(c)) {
                    countOfPrecedeSpaces += 1;
                    firstNonWhitespaceIndex += 1;
                }
            }
            allNodePoints.push(p);
            if (character.isLineEnding(c)) {
                if (firstNonWhitespaceIndex + 1 === allNodePoints.length) {
                    firstNonWhitespaceIndex += 1;
                }
                const line = {
                    nodePoints: allNodePoints,
                    startIndex,
                    endIndex: allNodePoints.length,
                    firstNonWhitespaceIndex,
                    countOfPrecedeSpaces,
                };
                lines.push(line);
                startIndex = allNodePoints.length;
                firstNonWhitespaceIndex = allNodePoints.length;
                countOfPrecedeSpaces = 0;
            }
        }
        yield lines;
    }
    if (startIndex < allNodePoints.length) {
        const line = {
            nodePoints: allNodePoints,
            startIndex,
            endIndex: allNodePoints.length,
            firstNonWhitespaceIndex,
            countOfPrecedeSpaces,
        };
        yield [line];
    }
    return allNodePoints;
}

class DefaultParser {
    constructor(props) {
        this.blockFallbackTokenizer = null;
        this.inlineFallbackTokenizer = null;
        this.defaultParseOptions = null;
        this.inlineTokenizers = [];
        this.inlineTokenizerMap = new Map();
        this.blockTokenizers = [];
        this.blockTokenizerMap = new Map();
        this.setDefaultParseOptions(props.defaultParseOptions);
        if (props.blockFallbackTokenizer)
            this.useFallbackTokenizer(props.blockFallbackTokenizer);
        if (props.inlineFallbackTokenizer)
            this.useFallbackTokenizer(props.inlineFallbackTokenizer);
    }
    useTokenizer(tokenizer, registerBeforeTokenizer) {
        const tokenizers = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizers : this.inlineTokenizers;
        const tokenizerMap = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizerMap : this.inlineTokenizerMap;
        this._registerTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer);
        return this;
    }
    replaceTokenizer(tokenizer, registerBeforeTokenizer) {
        const tokenizers = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizers : this.inlineTokenizers;
        const tokenizerMap = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizerMap : this.inlineTokenizerMap;
        this._replaceTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer);
        return this;
    }
    unmountTokenizer(tokenizerOrName) {
        this._unregisterTokenizer(this.inlineTokenizers, this.inlineTokenizerMap, tokenizerOrName);
        this._unregisterTokenizer(this.blockTokenizers, this.blockTokenizerMap, tokenizerOrName);
        return this;
    }
    useFallbackTokenizer(fallbackTokenizer) {
        switch (fallbackTokenizer.type) {
            case coreTokenizer.TokenizerType.BLOCK:
                if (this.blockFallbackTokenizer) {
                    this.unmountTokenizer(this.blockFallbackTokenizer);
                }
                this.blockTokenizerMap.set(fallbackTokenizer.name, fallbackTokenizer);
                this.blockFallbackTokenizer = fallbackTokenizer;
                break;
            case coreTokenizer.TokenizerType.INLINE:
                if (this.inlineFallbackTokenizer) {
                    this.unmountTokenizer(this.inlineFallbackTokenizer);
                }
                this.inlineTokenizerMap.set(fallbackTokenizer.name, fallbackTokenizer);
                this.inlineFallbackTokenizer = fallbackTokenizer;
                break;
        }
        return this;
    }
    setDefaultParseOptions(options = {}) {
        this.defaultParseOptions = Object.assign({ presetDefinitions: [], presetFootnoteDefinitions: [], shouldReservePosition: false }, options);
    }
    parse(contents, options = {}) {
        const { shouldReservePosition, presetDefinitions, presetFootnoteDefinitions } = Object.assign(Object.assign({}, this.defaultParseOptions), options);
        const nodePointsIterator = character.createNodePointGenerator(contents);
        const linesIterator = createPhrasingLineGenerator(nodePointsIterator);
        const processor = createProcessor({
            inlineTokenizers: this.inlineTokenizers,
            inlineTokenizerMap: this.inlineTokenizerMap,
            blockTokenizers: this.blockTokenizers,
            blockTokenizerMap: this.blockTokenizerMap,
            blockFallbackTokenizer: this.blockFallbackTokenizer,
            inlineFallbackTokenizer: this.inlineFallbackTokenizer,
            shouldReservePosition,
            presetDefinitions,
            presetFootnoteDefinitions,
        });
        const root = processor.process(linesIterator);
        return root;
    }
    _replaceTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer) {
        this._unregisterTokenizer(tokenizers, tokenizerMap, tokenizer.name);
        this._registerTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer);
    }
    _registerTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer) {
        if (tokenizerMap.has(tokenizer.name)) {
            const olderTokenizer = tokenizerMap.get(tokenizer.name);
            if (olderTokenizer != null) {
                throw new TypeError(`[useTokenizer] Name(${tokenizer.name}) has been registered.`);
            }
        }
        tokenizerMap.set(tokenizer.name, tokenizer);
        let index = 0;
        for (; index < tokenizers.length; ++index) {
            const t = tokenizers[index];
            if (registerBeforeTokenizer === t.name)
                break;
            if (tokenizer.priority > t.priority)
                break;
        }
        if (index < 0 || index >= tokenizers.length)
            tokenizers.push(tokenizer);
        else
            tokenizers.splice(index, 0, tokenizer);
    }
    _unregisterTokenizer(tokenizers, tokenizerMap, tokenizerOrName) {
        var _a, _b;
        const tokenizerName = typeof tokenizerOrName === 'string' ? tokenizerOrName : tokenizerOrName.name;
        const existed = tokenizerMap.delete(tokenizerName);
        if (!existed)
            return;
        if (((_a = this.blockFallbackTokenizer) === null || _a === void 0 ? void 0 : _a.name) === tokenizerName)
            this.blockFallbackTokenizer = null;
        if (((_b = this.inlineFallbackTokenizer) === null || _b === void 0 ? void 0 : _b.name) === tokenizerName)
            this.inlineFallbackTokenizer = null;
        const index = tokenizers.findIndex(tokenizer => tokenizer.name === tokenizerName);
        if (index >= 0)
            tokenizers.splice(index, 1);
    }
}

exports.DefaultParser = DefaultParser;
exports.createBlockContentProcessor = createBlockContentProcessor;
exports.createPhrasingContentProcessor = createPhrasingContentProcessor;
exports.createProcessor = createProcessor;
exports.createProcessorHook = createProcessorHook;
exports.createProcessorHookGroups = createProcessorHookGroups;


/***/ }),

/***/ 9618:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var ast = __nccwpck_require__(395);

exports.TokenizerType = void 0;
(function (TokenizerType) {
    TokenizerType["BLOCK"] = "block";
    TokenizerType["INLINE"] = "inline";
})(exports.TokenizerType || (exports.TokenizerType = {}));
exports.TokenizerPriority = void 0;
(function (TokenizerPriority) {
    TokenizerPriority[TokenizerPriority["ATOMIC"] = 10] = "ATOMIC";
    TokenizerPriority[TokenizerPriority["FENCED_BLOCK"] = 10] = "FENCED_BLOCK";
    TokenizerPriority[TokenizerPriority["CONTAINING_BLOCK"] = 10] = "CONTAINING_BLOCK";
    TokenizerPriority[TokenizerPriority["INTERRUPTABLE_BLOCK"] = 2] = "INTERRUPTABLE_BLOCK";
    TokenizerPriority[TokenizerPriority["IMAGES"] = 4] = "IMAGES";
    TokenizerPriority[TokenizerPriority["LINKS"] = 3] = "LINKS";
    TokenizerPriority[TokenizerPriority["CONTAINING_INLINE"] = 2] = "CONTAINING_INLINE";
    TokenizerPriority[TokenizerPriority["SOFT_INLINE"] = 1] = "SOFT_INLINE";
    TokenizerPriority[TokenizerPriority["FALLBACK"] = -1] = "FALLBACK";
})(exports.TokenizerPriority || (exports.TokenizerPriority = {}));

class BaseInlineTokenizer {
    constructor(props) {
        this.type = exports.TokenizerType.INLINE;
        this.name = props.name;
        this.priority = props.priority;
    }
    toString() {
        return this.name;
    }
}
function* genFindDelimiter(_findDelimiter) {
    let lastEndIndex = -1;
    let delimiter = null;
    while (true) {
        const [startIndex, endIndex] = yield delimiter;
        if (lastEndIndex === endIndex) {
            if (delimiter == null || delimiter.startIndex >= startIndex)
                continue;
        }
        lastEndIndex = endIndex;
        delimiter = _findDelimiter(startIndex, endIndex);
    }
}

class BaseBlockTokenizer {
    constructor(props) {
        this.type = exports.TokenizerType.BLOCK;
        this.name = props.name;
        this.priority = props.priority;
    }
    extractPhrasingContentLines(_token) {
        return null;
    }
    buildBlockToken(_lines, _originalToken) {
        return null;
    }
    toString() {
        return this.name;
    }
}

function calcStartPoint(nodePoints, index) {
    const { line, column, offset } = nodePoints[index];
    return { line, column, offset };
}
function calcEndPoint(nodePoints, index) {
    const { line, column, offset } = nodePoints[index];
    return { line, column: column + 1, offset: offset + 1 };
}

function calcPositionFromPhrasingContentLines(lines) {
    const firstLine = lines[0];
    const lastLine = lines[lines.length - 1];
    const position = {
        start: calcStartPoint(firstLine.nodePoints, firstLine.startIndex),
        end: calcEndPoint(lastLine.nodePoints, lastLine.endIndex - 1),
    };
    return position;
}
function mergeContentLinesFaithfully(lines, startLineIndex = 0, endLineIndex = lines.length) {
    if (startLineIndex >= endLineIndex || startLineIndex < 0 || endLineIndex > lines.length)
        return [];
    const contents = [];
    for (let i = startLineIndex; i < endLineIndex; ++i) {
        const { nodePoints, startIndex, endIndex } = lines[i];
        for (let i = startIndex; i < endIndex; ++i) {
            contents.push(nodePoints[i]);
        }
    }
    return contents;
}
function mergeAndStripContentLines(lines, startLineIndex = 0, endLineIndex = lines.length) {
    const contents = [];
    if (startLineIndex >= endLineIndex || startLineIndex < 0 || endLineIndex > lines.length)
        return [];
    for (let i = startLineIndex; i + 1 < endLineIndex; ++i) {
        const { nodePoints, endIndex, firstNonWhitespaceIndex } = lines[i];
        for (let i = firstNonWhitespaceIndex; i < endIndex; ++i) {
            contents.push(nodePoints[i]);
        }
    }
    const { nodePoints, endIndex, firstNonWhitespaceIndex } = lines[endLineIndex - 1];
    let lastNonWhitespaceIndex = endIndex - 1;
    for (; lastNonWhitespaceIndex >= 0; --lastNonWhitespaceIndex) {
        const p = nodePoints[lastNonWhitespaceIndex];
        if (!character.isWhitespaceCharacter(p.codePoint))
            break;
    }
    for (let i = firstNonWhitespaceIndex; i <= lastNonWhitespaceIndex; ++i) {
        contents.push(nodePoints[i]);
    }
    return contents;
}

function encodeLinkDestination(destination) {
    const uri = decodeURI(destination);
    const result = encodeURI(uri);
    return result;
}
function resolveLabelToIdentifier(label) {
    const identifier = label.trim().replace(/\s+/gu, ' ').toLowerCase();
    return character.foldCase(identifier);
}
function resolveLinkLabelAndIdentifier(nodePoints, startIndex, endIndex) {
    const label = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex, true);
    if (label.length <= 0)
        return null;
    const identifier = resolveLabelToIdentifier(label);
    return { label, identifier };
}
function eatLinkLabel(nodePoints, startIndex, _endIndex) {
    let i = startIndex + 1;
    const endIndex = Math.min(i + 1000, _endIndex);
    for (; i < endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        switch (c) {
            case character.AsciiCodePoint.BACKSLASH:
                i += 1;
                break;
            case character.AsciiCodePoint.OPEN_BRACKET:
                return { nextIndex: -1, labelAndIdentifier: null };
            case character.AsciiCodePoint.CLOSE_BRACKET: {
                const labelAndIdentifier = resolveLinkLabelAndIdentifier(nodePoints, startIndex + 1, i);
                return { nextIndex: i + 1, labelAndIdentifier };
            }
        }
    }
    return { nextIndex: -1, labelAndIdentifier: null };
}
function isLinkToken(token) {
    return token.nodeType === ast.LinkType || token.nodeType === ast.LinkReferenceType;
}
function isValidLinkText(nodePoints, startIndex, endIndex, internalTokens) {
    return false;
}

function eatOptionalCharacters(nodePoints, startIndex, endIndex, codePoint) {
    let i = startIndex;
    while (i < endIndex && nodePoints[i].codePoint === codePoint)
        i += 1;
    return i;
}
function eatOptionalWhitespaces(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    while (i < endIndex && character.isWhitespaceCharacter(nodePoints[i].codePoint))
        i += 1;
    return i;
}
function eatOptionalBlankLines(nodePoints, startIndex, endIndex) {
    let result = startIndex;
    for (let i = startIndex; i < endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        if (character.isSpaceCharacter(c))
            continue;
        if (character.isLineEnding(c)) {
            result = i + 1;
            continue;
        }
        break;
    }
    return result;
}
function trimBlankLines(lines) {
    if (lines.length <= 0)
        return [];
    let startLineIndex = 0;
    for (; startLineIndex < lines.length; ++startLineIndex) {
        const line = lines[startLineIndex];
        if (line.firstNonWhitespaceIndex < line.endIndex)
            break;
    }
    let endLineIndex = lines.length - 1;
    for (; endLineIndex > startLineIndex; --endLineIndex) {
        const line = lines[endLineIndex];
        if (line.firstNonWhitespaceIndex < line.endIndex)
            break;
    }
    if (startLineIndex > endLineIndex)
        return [];
    return lines.slice(startLineIndex, endLineIndex + 1);
}

exports.BaseBlockTokenizer = BaseBlockTokenizer;
exports.BaseInlineTokenizer = BaseInlineTokenizer;
exports.calcEndPoint = calcEndPoint;
exports.calcPositionFromPhrasingContentLines = calcPositionFromPhrasingContentLines;
exports.calcStartPoint = calcStartPoint;
exports.eatLinkLabel = eatLinkLabel;
exports.eatOptionalBlankLines = eatOptionalBlankLines;
exports.eatOptionalCharacters = eatOptionalCharacters;
exports.eatOptionalWhitespaces = eatOptionalWhitespaces;
exports.encodeLinkDestination = encodeLinkDestination;
exports.genFindDelimiter = genFindDelimiter;
exports.isLinkToken = isLinkToken;
exports.isValidLinkText = isValidLinkText;
exports.mergeAndStripContentLines = mergeAndStripContentLines;
exports.mergeContentLinesFaithfully = mergeContentLinesFaithfully;
exports.resolveLabelToIdentifier = resolveLabelToIdentifier;
exports.resolveLinkLabelAndIdentifier = resolveLinkLabelAndIdentifier;
exports.trimBlankLines = trimBlankLines;


/***/ }),

/***/ 8018:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

const isProduction = process.env.NODE_ENV === 'production';
const prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition)
        return;
    if (isProduction)
        throw new Error(prefix);
    if (message == null)
        throw new Error(prefix + ': ');
    throw new Error(prefix + ': ' + (message instanceof Function ? message() : message));
}

exports["default"] = invariant;
exports.invariant = invariant;


/***/ }),

/***/ 1977:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var coreParser = __nccwpck_require__(3206);
var AutolinkTokenizer = __nccwpck_require__(2289);
var AutolinkExtensionTokenizer = __nccwpck_require__(9571);
var BlockquoteTokenizer = __nccwpck_require__(9485);
var BreakTokenizer = __nccwpck_require__(7460);
var DefinitionTokenizer = __nccwpck_require__(208);
var DeleteTokenizer = __nccwpck_require__(1744);
var EmphasisTokenizer = __nccwpck_require__(6203);
var FencedCodeTokenizer = __nccwpck_require__(2961);
var HeadingTokenizer = __nccwpck_require__(1158);
var HtmlBlockTokenizer = __nccwpck_require__(593);
var HtmlInlineTokenizer = __nccwpck_require__(1630);
var ImageTokenizer = __nccwpck_require__(5623);
var ImageReferenceTokenizer = __nccwpck_require__(6400);
var IndentedCodeTokenizer = __nccwpck_require__(4477);
var InlineCodeTokenizer = __nccwpck_require__(6202);
var LinkTokenizer = __nccwpck_require__(6087);
var LinkReferenceTokenizer = __nccwpck_require__(4444);
var ListTokenizer = __nccwpck_require__(9382);
var ParagraphTokenizer = __nccwpck_require__(3834);
var SetextHeadingTokenizer = __nccwpck_require__(1898);
var TableTokenizer = __nccwpck_require__(6051);
var TextTokenizer = __nccwpck_require__(2156);
var ThematicBreakTokenizer = __nccwpck_require__(5484);

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var AutolinkTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(AutolinkTokenizer);
var AutolinkExtensionTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(AutolinkExtensionTokenizer);
var BlockquoteTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(BlockquoteTokenizer);
var BreakTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(BreakTokenizer);
var DefinitionTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(DefinitionTokenizer);
var DeleteTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(DeleteTokenizer);
var EmphasisTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(EmphasisTokenizer);
var FencedCodeTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(FencedCodeTokenizer);
var HeadingTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(HeadingTokenizer);
var HtmlBlockTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(HtmlBlockTokenizer);
var HtmlInlineTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(HtmlInlineTokenizer);
var ImageTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ImageTokenizer);
var ImageReferenceTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ImageReferenceTokenizer);
var IndentedCodeTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(IndentedCodeTokenizer);
var InlineCodeTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(InlineCodeTokenizer);
var LinkTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(LinkTokenizer);
var LinkReferenceTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(LinkReferenceTokenizer);
var ListTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ListTokenizer);
var ParagraphTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ParagraphTokenizer);
var SetextHeadingTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(SetextHeadingTokenizer);
var TableTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(TableTokenizer);
var TextTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(TextTokenizer);
var ThematicBreakTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ThematicBreakTokenizer);

class GfmExParser extends coreParser.DefaultParser {
    constructor(props = {}) {
        var _a, _b;
        super(Object.assign(Object.assign({}, props), { blockFallbackTokenizer: (_a = props.blockFallbackTokenizer) !== null && _a !== void 0 ? _a : new ParagraphTokenizer__default["default"](), inlineFallbackTokenizer: (_b = props.inlineFallbackTokenizer) !== null && _b !== void 0 ? _b : new TextTokenizer__default["default"]() }));
        this
            .useTokenizer(new IndentedCodeTokenizer__default["default"]())
            .useTokenizer(new HtmlBlockTokenizer__default["default"]())
            .useTokenizer(new SetextHeadingTokenizer__default["default"]())
            .useTokenizer(new ThematicBreakTokenizer__default["default"]())
            .useTokenizer(new BlockquoteTokenizer__default["default"]())
            .useTokenizer(new ListTokenizer__default["default"]({ enableTaskListItem: true }))
            .useTokenizer(new HeadingTokenizer__default["default"]())
            .useTokenizer(new FencedCodeTokenizer__default["default"]())
            .useTokenizer(new DefinitionTokenizer__default["default"]())
            .useTokenizer(new TableTokenizer__default["default"]())
            .useTokenizer(new HtmlInlineTokenizer__default["default"]())
            .useTokenizer(new InlineCodeTokenizer__default["default"]())
            .useTokenizer(new AutolinkTokenizer__default["default"]())
            .useTokenizer(new AutolinkExtensionTokenizer__default["default"]())
            .useTokenizer(new BreakTokenizer__default["default"]())
            .useTokenizer(new ImageTokenizer__default["default"]())
            .useTokenizer(new ImageReferenceTokenizer__default["default"]())
            .useTokenizer(new LinkTokenizer__default["default"]())
            .useTokenizer(new LinkReferenceTokenizer__default["default"]())
            .useTokenizer(new EmphasisTokenizer__default["default"]())
            .useTokenizer(new DeleteTokenizer__default["default"]());
    }
}

exports.GfmExParser = GfmExParser;
exports["default"] = GfmExParser;


/***/ }),

/***/ 9571:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var tokenizerAutolink = __nccwpck_require__(2289);
var ast = __nccwpck_require__(395);
var coreTokenizer = __nccwpck_require__(9618);

function eatExtendEmailAddress(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    if (i >= endIndex || !character.isAlphanumeric(nodePoints[i].codePoint)) {
        return { valid: false, nextIndex: i + 1 };
    }
    for (i += 1; i < endIndex; i += 1) {
        const c = nodePoints[i].codePoint;
        if (character.isAlphanumeric(c) ||
            c === character.AsciiCodePoint.DOT ||
            c === character.AsciiCodePoint.MINUS_SIGN ||
            c === character.AsciiCodePoint.UNDERSCORE ||
            c === character.AsciiCodePoint.PLUS_SIGN)
            continue;
        break;
    }
    if (i === startIndex ||
        i + 2 >= endIndex ||
        nodePoints[i].codePoint !== character.AsciiCodePoint.AT_SIGN ||
        !character.isAlphanumeric(nodePoints[i + 1].codePoint))
        return { valid: false, nextIndex: i + 1 };
    let countOfPeriod = 0;
    for (i += 2; i < endIndex; i += 1) {
        const c = nodePoints[i].codePoint;
        if (c === character.AsciiCodePoint.DOT) {
            countOfPeriod += 1;
            continue;
        }
        if (character.isAlphanumeric(c) || c === character.AsciiCodePoint.MINUS_SIGN || c === character.AsciiCodePoint.UNDERSCORE)
            continue;
        break;
    }
    const lastCharacter = nodePoints[i - 1].codePoint;
    if (lastCharacter === character.AsciiCodePoint.MINUS_SIGN || lastCharacter === character.AsciiCodePoint.UNDERSCORE)
        return { valid: false, nextIndex: i };
    if (lastCharacter === character.AsciiCodePoint.DOT) {
        i -= 1;
        countOfPeriod -= 1;
    }
    if (countOfPeriod <= 0)
        return { valid: false, nextIndex: i };
    return { valid: true, nextIndex: i };
}

function eatExtendedUrl(nodePoints, startIndex, endIndex) {
    const schema = tokenizerAutolink.eatAutolinkSchema(nodePoints, startIndex, endIndex);
    const { nextIndex } = schema;
    if (!schema.valid ||
        nextIndex + 3 >= endIndex ||
        nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.COLON ||
        nodePoints[nextIndex + 1].codePoint !== character.AsciiCodePoint.SLASH ||
        nodePoints[nextIndex + 2].codePoint !== character.AsciiCodePoint.SLASH)
        return { valid: false, nextIndex: nextIndex + 1 };
    const result = eatValidDomain(nodePoints, nextIndex + 3, endIndex);
    result.nextIndex = eatOptionalDomainFollows(nodePoints, result.nextIndex, endIndex);
    return result;
}
function eatWWWDomain(nodePoints, startIndex, endIndex) {
    const segment = eatDomainSegment(nodePoints, startIndex, endIndex);
    const nextIndex = segment.nextIndex;
    if (!segment.valid ||
        nextIndex >= endIndex ||
        nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.DOT ||
        nextIndex - startIndex !== 3)
        return { valid: false, nextIndex };
    for (let i = startIndex; i < nextIndex; ++i) {
        const c = nodePoints[i].codePoint;
        if (c !== character.AsciiCodePoint.LOWERCASE_W && c !== character.AsciiCodePoint.UPPERCASE_W)
            return { valid: false, nextIndex };
    }
    const result = eatValidDomain(nodePoints, nextIndex + 1, endIndex);
    result.nextIndex = eatOptionalDomainFollows(nodePoints, result.nextIndex, endIndex);
    return result;
}
function eatOptionalDomainFollows(nodePoints, startIndex, endIndex) {
    let nextIndex = startIndex;
    for (; nextIndex < endIndex; ++nextIndex) {
        const c = nodePoints[nextIndex].codePoint;
        if (character.isWhitespaceCharacter(c) || c === character.AsciiCodePoint.OPEN_ANGLE)
            break;
    }
    for (nextIndex -= 1; nextIndex >= startIndex; nextIndex -= 1) {
        const c = nodePoints[nextIndex].codePoint;
        if (character.isPunctuationCharacter(c) ||
            c === character.AsciiCodePoint.QUESTION_MARK ||
            c === character.AsciiCodePoint.EXCLAMATION_MARK ||
            c === character.AsciiCodePoint.DOT ||
            c === character.AsciiCodePoint.COMMA ||
            c === character.AsciiCodePoint.COLON ||
            c === character.AsciiCodePoint.ASTERISK ||
            c === character.AsciiCodePoint.UNDERSCORE ||
            c === character.AsciiCodePoint.TILDE)
            continue;
        break;
    }
    if (nextIndex >= startIndex &&
        nextIndex + 1 < endIndex &&
        nodePoints[nextIndex + 1].codePoint === character.AsciiCodePoint.CLOSE_PARENTHESIS) {
        let countOfOpenParenthesis = 0;
        for (let i = startIndex; i < nextIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.OPEN_PARENTHESIS:
                    countOfOpenParenthesis += 1;
                    break;
                case character.AsciiCodePoint.CLOSE_PARENTHESIS:
                    countOfOpenParenthesis -= 1;
                    break;
            }
        }
        if (countOfOpenParenthesis > 0) {
            nextIndex += 2;
            countOfOpenParenthesis -= 1;
            for (; nextIndex < endIndex && countOfOpenParenthesis > 0;) {
                const c = nodePoints[nextIndex].codePoint;
                if (c !== character.AsciiCodePoint.CLOSE_PARENTHESIS)
                    break;
                countOfOpenParenthesis -= 1;
                nextIndex += 1;
            }
            nextIndex -= 1;
        }
    }
    if (nextIndex + 1 < endIndex &&
        nodePoints[nextIndex + 1].codePoint === character.AsciiCodePoint.SEMICOLON) {
        let i = nextIndex;
        for (; i >= startIndex; --i) {
            const c = nodePoints[i].codePoint;
            if (!character.isAlphanumeric(c))
                break;
        }
        if (i >= startIndex && nodePoints[i].codePoint === character.AsciiCodePoint.AMPERSAND)
            nextIndex = i - 1;
    }
    return nextIndex + 1;
}
function eatValidDomain(nodePoints, startIndex, endIndex) {
    const segment = eatDomainSegment(nodePoints, startIndex, endIndex);
    if (!segment.valid || segment.nextIndex >= endIndex) {
        return { valid: false, nextIndex: segment.nextIndex };
    }
    let nextIndex = segment.nextIndex, countOfPeriod = 0;
    let countOfUnderscoreOfLastTwoSegment = segment.hasUnderscore ? 2 : 0;
    for (; nextIndex < endIndex;) {
        if (nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.DOT)
            break;
        const segment = eatDomainSegment(nodePoints, nextIndex + 1, endIndex);
        if (!segment.valid)
            break;
        nextIndex = segment.nextIndex;
        countOfPeriod += 1;
        countOfUnderscoreOfLastTwoSegment >>>= 1;
        countOfUnderscoreOfLastTwoSegment |= segment.hasUnderscore ? 2 : 0;
    }
    if (countOfPeriod <= 0 && countOfUnderscoreOfLastTwoSegment === 0) {
        return { valid: false, nextIndex };
    }
    return { valid: true, nextIndex };
}
function eatDomainSegment(nodePoints, startIndex, endIndex) {
    let i = startIndex, hasUnderscore = false;
    for (; i < endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        if (c === character.AsciiCodePoint.UNDERSCORE) {
            hasUnderscore = true;
            continue;
        }
        if (!character.isAlphanumeric(c) && c !== character.AsciiCodePoint.MINUS_SIGN)
            break;
    }
    if (i > startIndex)
        return { valid: true, nextIndex: i, hasUnderscore };
    return { valid: false, nextIndex: i, hasUnderscore };
}

const helpers = [
    { contentType: 'uri', eat: eatExtendedUrl },
    { contentType: 'uri-www', eat: eatWWWDomain },
    { contentType: 'email', eat: eatExtendEmailAddress },
];
const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        processSingleDelimiter,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        const blockStartIndex = api.getBlockStartIndex();
        for (let i = startIndex; i < endIndex; ++i) {
            {
                let j = i;
                let flag = false;
                for (; j < endIndex; ++j) {
                    const c = nodePoints[j].codePoint;
                    if (character.isWhitespaceCharacter(c) ||
                        c === character.AsciiCodePoint.ASTERISK ||
                        c === character.AsciiCodePoint.UNDERSCORE ||
                        c === character.AsciiCodePoint.TILDE ||
                        c === character.AsciiCodePoint.OPEN_PARENTHESIS) {
                        flag = true;
                        continue;
                    }
                    if (flag || j === blockStartIndex)
                        break;
                    flag = false;
                }
                if (j >= endIndex)
                    break;
                i = j;
            }
            let nextIndex = endIndex;
            let contentType = null;
            for (const helper of helpers) {
                const eatResult = helper.eat(nodePoints, i, endIndex);
                nextIndex = Math.min(nextIndex, eatResult.nextIndex);
                if (eatResult.valid) {
                    contentType = helper.contentType;
                    nextIndex = eatResult.nextIndex;
                    break;
                }
            }
            if (contentType == null) {
                i = Math.max(i, nextIndex - 1);
                continue;
            }
            if (nextIndex <= endIndex) {
                return {
                    type: 'full',
                    startIndex: i,
                    endIndex: nextIndex,
                    contentType,
                };
            }
            i = nextIndex - 1;
        }
        return null;
    }
    function processSingleDelimiter(delimiter) {
        const token = {
            nodeType: ast.LinkType,
            startIndex: delimiter.startIndex,
            endIndex: delimiter.endIndex,
            contentType: delimiter.contentType,
            children: api.resolveFallbackTokens([], delimiter.startIndex, delimiter.endIndex),
        };
        return [token];
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const nodePoints = api.getNodePoints();
            let url = character.calcStringFromNodePoints(nodePoints, token.startIndex, token.endIndex);
            switch (token.contentType) {
                case 'email':
                    url = 'mailto:' + url;
                    break;
                case 'uri-www':
                    url = 'http://' + url;
                    break;
            }
            const children = api.parseInlineTokens(token.children);
            const node = api.shouldReservePosition
                ? { type: ast.LinkType, position: api.calcPosition(token), url, children }
                : { type: ast.LinkType, url, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-autolink-extension';

class AutolinkExtensionTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.AutolinkExtensionTokenizer = AutolinkExtensionTokenizer;
exports.AutolinkExtensionTokenizerName = uniqueName;
exports.autolinkExtensionMatch = match;
exports.autolinkExtensionParse = parse;
exports["default"] = AutolinkExtensionTokenizer;
exports.eatDomainSegment = eatDomainSegment;
exports.eatExtendEmailAddress = eatExtendEmailAddress;
exports.eatExtendedUrl = eatExtendedUrl;
exports.eatOptionalDomainFollows = eatOptionalDomainFollows;
exports.eatValidDomain = eatValidDomain;
exports.eatWWWDomain = eatWWWDomain;


/***/ }),

/***/ 2289:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var ast = __nccwpck_require__(395);
var coreTokenizer = __nccwpck_require__(9618);

function eatEmailAddress(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    for (; i < endIndex; i += 1) {
        const c = nodePoints[i].codePoint;
        if (character.isAsciiLetter(c) || character.isAsciiDigitCharacter(c))
            continue;
        if (c !== character.AsciiCodePoint.DOT &&
            c !== character.AsciiCodePoint.EXCLAMATION_MARK &&
            c !== character.AsciiCodePoint.NUMBER_SIGN &&
            c !== character.AsciiCodePoint.DOLLAR_SIGN &&
            c !== character.AsciiCodePoint.PERCENT_SIGN &&
            c !== character.AsciiCodePoint.AMPERSAND &&
            c !== character.AsciiCodePoint.SINGLE_QUOTE &&
            c !== character.AsciiCodePoint.ASTERISK &&
            c !== character.AsciiCodePoint.PLUS_SIGN &&
            c !== character.AsciiCodePoint.SLASH &&
            c !== character.AsciiCodePoint.EQUALS_SIGN &&
            c !== character.AsciiCodePoint.QUESTION_MARK &&
            c !== character.AsciiCodePoint.CARET &&
            c !== character.AsciiCodePoint.UNDERSCORE &&
            c !== character.AsciiCodePoint.BACKTICK &&
            c !== character.AsciiCodePoint.OPEN_BRACE &&
            c !== character.AsciiCodePoint.VERTICAL_SLASH &&
            c !== character.AsciiCodePoint.CLOSE_BRACE &&
            c !== character.AsciiCodePoint.TILDE &&
            c !== character.AsciiCodePoint.MINUS_SIGN)
            break;
    }
    if (i === startIndex ||
        i + 1 >= endIndex ||
        nodePoints[i].codePoint !== character.AsciiCodePoint.AT_SIGN ||
        !character.isAlphanumeric(nodePoints[i + 1].codePoint))
        return { valid: false, nextIndex: i + 1 };
    i = eatAddressPart0(nodePoints, i + 2, endIndex);
    for (; i + 1 < endIndex;) {
        let c = nodePoints[i].codePoint;
        if (c !== character.AsciiCodePoint.DOT)
            break;
        c = nodePoints[i + 1].codePoint;
        if (!character.isAsciiLetter(c) && !character.isAsciiDigitCharacter(c))
            break;
        i = eatAddressPart0(nodePoints, i + 2, endIndex);
    }
    return { valid: true, nextIndex: i };
}
function eatAddressPart0(nodePoints, startIndex, endIndex) {
    let i = startIndex, result = -1;
    for (let _endIndex = Math.min(endIndex, i + 62); i < _endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        if (character.isAsciiLetter(c) || character.isAsciiDigitCharacter(c)) {
            result = i;
            continue;
        }
        if (c !== character.AsciiCodePoint.MINUS_SIGN)
            break;
    }
    return result >= startIndex ? result + 1 : startIndex;
}

function eatAbsoluteUri(nodePoints, startIndex, endIndex) {
    const schema = eatAutolinkSchema(nodePoints, startIndex, endIndex);
    let { nextIndex } = schema;
    if (!schema.valid ||
        nextIndex >= endIndex ||
        nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.COLON)
        return { valid: false, nextIndex };
    for (nextIndex += 1; nextIndex < endIndex; ++nextIndex) {
        const c = nodePoints[nextIndex].codePoint;
        if (!character.isAsciiCharacter(c) ||
            character.isWhitespaceCharacter(c) ||
            character.isAsciiControlCharacter(c) ||
            c === character.AsciiCodePoint.OPEN_ANGLE ||
            c === character.AsciiCodePoint.CLOSE_ANGLE)
            break;
    }
    return { valid: true, nextIndex };
}
function eatAutolinkSchema(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    const c = nodePoints[i].codePoint;
    if (!character.isAsciiLetter(c))
        return { valid: false, nextIndex: i + 1 };
    for (i += 1; i < endIndex; ++i) {
        const d = nodePoints[i].codePoint;
        if (character.isAlphanumeric(d) ||
            d === character.AsciiCodePoint.PLUS_SIGN ||
            d === character.AsciiCodePoint.DOT ||
            d === character.AsciiCodePoint.MINUS_SIGN)
            continue;
        break;
    }
    const count = i - startIndex;
    if (count < 2 || count > 32)
        return { valid: false, nextIndex: i + 1 };
    return { valid: true, nextIndex: i };
}

const helpers = [
    { contentType: 'uri', eat: eatAbsoluteUri },
    { contentType: 'email', eat: eatEmailAddress },
];
const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        processSingleDelimiter,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        for (let i = startIndex; i < endIndex; ++i) {
            if (nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_ANGLE)
                continue;
            let nextIndex = endIndex;
            let contentType = null;
            for (const helper of helpers) {
                const eatResult = helper.eat(nodePoints, i + 1, endIndex);
                nextIndex = Math.min(nextIndex, eatResult.nextIndex);
                if (eatResult.valid) {
                    contentType = helper.contentType;
                    nextIndex = eatResult.nextIndex;
                    break;
                }
            }
            if (contentType == null) {
                i = Math.max(i, nextIndex - 1);
                continue;
            }
            if (nextIndex < endIndex && nodePoints[nextIndex].codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {
                return {
                    type: 'full',
                    startIndex: i,
                    endIndex: nextIndex + 1,
                    contentType,
                };
            }
            i = nextIndex - 1;
        }
        return null;
    }
    function processSingleDelimiter(delimiter) {
        const token = {
            nodeType: ast.LinkType,
            startIndex: delimiter.startIndex,
            endIndex: delimiter.endIndex,
            contentType: delimiter.contentType,
            children: api.resolveFallbackTokens([], delimiter.startIndex + 1, delimiter.endIndex - 1),
        };
        return [token];
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const nodePoints = api.getNodePoints();
            let url = character.calcStringFromNodePoints(nodePoints, token.startIndex + 1, token.endIndex - 1);
            if (token.contentType === 'email') {
                url = 'mailto:' + url;
            }
            const encodedUrl = coreTokenizer.encodeLinkDestination(url);
            const children = api.parseInlineTokens(token.children);
            const node = api.shouldReservePosition
                ? { type: ast.LinkType, position: api.calcPosition(token), url: encodedUrl, children }
                : { type: ast.LinkType, url: encodedUrl, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-autolink';

class AutolinkTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.AutolinkTokenizer = AutolinkTokenizer;
exports.AutolinkTokenizerName = uniqueName;
exports.autolinkMatch = match;
exports.autolinkParse = parse;
exports["default"] = AutolinkTokenizer;
exports.eatAbsoluteUri = eatAbsoluteUri;
exports.eatAutolinkSchema = eatAutolinkSchema;
exports.eatEmailAddress = eatEmailAddress;


/***/ }),

/***/ 9485:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function () {
    return {
        isContainingBlock: true,
        eatOpener,
        eatAndInterruptPreviousSibling,
        eatContinuationText,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex ||
            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)
            return null;
        let nextIndex = firstNonWhitespaceIndex + 1;
        if (nextIndex < endIndex && character.isSpaceCharacter(nodePoints[nextIndex].codePoint)) {
            nextIndex += 1;
            if (nextIndex < endIndex && nodePoints[nextIndex].codePoint === character.VirtualCodePoint.SPACE) {
                nextIndex += 1;
            }
        }
        const token = {
            nodeType: ast.BlockquoteType,
            position: {
                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            children: [],
        };
        return { token, nextIndex };
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        const result = eatOpener(line);
        if (result == null)
            return null;
        return {
            token: result.token,
            nextIndex: result.nextIndex,
            remainingSibling: prevSiblingToken,
        };
    }
    function eatContinuationText(line, token, parentToken) {
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;
        if (countOfPrecedeSpaces >= 4 ||
            firstNonWhitespaceIndex >= endIndex ||
            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE) {
            if (parentToken.nodeType === ast.BlockquoteType) {
                return { status: 'opening', nextIndex: startIndex };
            }
            return { status: 'notMatched' };
        }
        const nextIndex = firstNonWhitespaceIndex + 1 < endIndex &&
            character.isSpaceCharacter(nodePoints[firstNonWhitespaceIndex + 1].codePoint)
            ? firstNonWhitespaceIndex + 2
            : firstNonWhitespaceIndex + 1;
        return { status: 'opening', nextIndex };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const children = api.parseBlockTokens(token.children);
            const node = api.shouldReservePosition
                ? { type: ast.BlockquoteType, position: token.position, children }
                : { type: ast.BlockquoteType, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-blockquote';

class BlockquoteTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_BLOCK,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.BlockquoteTokenizer = BlockquoteTokenizer;
exports.BlockquoteTokenizerName = uniqueName;
exports.blockquoteMatch = match;
exports.blockquoteParse = parse;
exports["default"] = BlockquoteTokenizer;


/***/ }),

/***/ 7460:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const uniqueName = '@yozora/tokenizer-break';
var BreakTokenMarkerType;
(function (BreakTokenMarkerType) {
    BreakTokenMarkerType["BACKSLASH"] = "backslash";
    BreakTokenMarkerType["MORE_THAN_TWO_SPACES"] = "more-than-two-spaces";
})(BreakTokenMarkerType || (BreakTokenMarkerType = {}));

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        processSingleDelimiter,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        for (let i = startIndex + 1; i < endIndex; ++i) {
            if (nodePoints[i].codePoint !== character.VirtualCodePoint.LINE_END)
                continue;
            const c = nodePoints[i - 1].codePoint;
            let _start = null;
            let markerType = null;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH: {
                    let x = i - 2;
                    for (; x >= startIndex; x -= 1) {
                        if (nodePoints[x].codePoint !== character.AsciiCodePoint.BACKSLASH)
                            break;
                    }
                    if (((i - x) & 1) === 0) {
                        _start = i - 1;
                        markerType = BreakTokenMarkerType.BACKSLASH;
                    }
                    break;
                }
                case character.AsciiCodePoint.SPACE: {
                    let x = i - 2;
                    for (; x >= startIndex; x -= 1) {
                        if (nodePoints[x].codePoint !== character.AsciiCodePoint.SPACE)
                            break;
                    }
                    if (i - x > 2) {
                        _start = x + 1;
                        markerType = BreakTokenMarkerType.MORE_THAN_TWO_SPACES;
                    }
                    break;
                }
            }
            if (_start == null || markerType == null)
                continue;
            return {
                type: 'full',
                markerType,
                startIndex: _start,
                endIndex: i,
            };
        }
        return null;
    }
    function processSingleDelimiter(delimiter) {
        const token = {
            nodeType: ast.BreakType,
            startIndex: delimiter.startIndex,
            endIndex: delimiter.endIndex,
        };
        return [token];
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const node = api.shouldReservePosition
                ? { type: ast.BreakType, position: api.calcPosition(token) }
                : { type: ast.BreakType };
            return node;
        }),
    };
};

class BreakTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.SOFT_INLINE,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.BreakTokenizer = BreakTokenizer;
exports.BreakTokenizerName = uniqueName;
exports.breakMatch = match;
exports.breakParse = parse;
exports["default"] = BreakTokenizer;


/***/ }),

/***/ 208:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var ast = __nccwpck_require__(395);

function eatAndCollectLinkDestination(nodePoints, startIndex, endIndex, state) {
    let i = startIndex;
    if (state == null) {
        state = {
            saturated: false,
            nodePoints: [],
            hasOpenAngleBracket: false,
            openParensCount: 0,
        };
    }
    const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
    if (firstNonWhitespaceIndex >= endIndex)
        return { nextIndex: -1, state: state };
    if (state.nodePoints.length <= 0) {
        i = firstNonWhitespaceIndex;
        const p = nodePoints[i];
        if (p.codePoint === character.AsciiCodePoint.OPEN_ANGLE) {
            i += 1;
            state.hasOpenAngleBracket = true;
            state.nodePoints.push(p);
        }
    }
    if (state.hasOpenAngleBracket) {
        for (; i < endIndex; ++i) {
            const p = nodePoints[i];
            switch (p.codePoint) {
                case character.AsciiCodePoint.BACKSLASH:
                    if (i + 1 < endIndex) {
                        state.nodePoints.push(p);
                        state.nodePoints.push(nodePoints[i + 1]);
                    }
                    i += 1;
                    break;
                case character.AsciiCodePoint.OPEN_ANGLE:
                case character.VirtualCodePoint.LINE_END:
                    return { nextIndex: -1, state: state };
                case character.AsciiCodePoint.CLOSE_ANGLE:
                    state.saturated = true;
                    state.nodePoints.push(p);
                    return { nextIndex: i + 1, state: state };
                default:
                    state.nodePoints.push(p);
            }
        }
        return { nextIndex: i, state: state };
    }
    for (; i < endIndex; ++i) {
        const p = nodePoints[i];
        switch (p.codePoint) {
            case character.AsciiCodePoint.BACKSLASH:
                if (i + 1 < endIndex) {
                    state.nodePoints.push(p);
                    state.nodePoints.push(nodePoints[i + 1]);
                }
                i += 1;
                break;
            case character.AsciiCodePoint.OPEN_PARENTHESIS:
                state.openParensCount += 1;
                state.nodePoints.push(p);
                break;
            case character.AsciiCodePoint.CLOSE_PARENTHESIS:
                state.openParensCount -= 1;
                state.nodePoints.push(p);
                if (state.openParensCount < 0) {
                    return { nextIndex: i, state: state };
                }
                break;
            default:
                if (character.isWhitespaceCharacter(p.codePoint) || character.isAsciiControlCharacter(p.codePoint)) {
                    state.saturated = true;
                    return { nextIndex: i, state: state };
                }
                state.nodePoints.push(p);
                break;
        }
    }
    state.saturated = true;
    return { nextIndex: i, state: state };
}

function eatAndCollectLinkLabel(nodePoints, startIndex, endIndex, state) {
    let i = startIndex;
    if (state == null) {
        state = {
            saturated: false,
            nodePoints: [],
            hasNonWhitespaceCharacter: false,
        };
    }
    const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
    if (firstNonWhitespaceIndex >= endIndex)
        return { nextIndex: -1, state: state };
    if (state.nodePoints.length <= 0) {
        i = firstNonWhitespaceIndex;
        const p = nodePoints[i];
        if (p.codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {
            return { nextIndex: -1, state: state };
        }
        i += 1;
        state.nodePoints.push(p);
    }
    for (; i < endIndex; ++i) {
        const p = nodePoints[i];
        switch (p.codePoint) {
            case character.AsciiCodePoint.BACKSLASH:
                state.hasNonWhitespaceCharacter = true;
                if (i + 1 < endIndex) {
                    state.nodePoints.push(p);
                    state.nodePoints.push(nodePoints[i + 1]);
                }
                i += 1;
                break;
            case character.AsciiCodePoint.OPEN_BRACKET:
                return { nextIndex: -1, state: state };
            case character.AsciiCodePoint.CLOSE_BRACKET:
                state.nodePoints.push(p);
                if (state.hasNonWhitespaceCharacter) {
                    state.saturated = true;
                    return { nextIndex: i + 1, state: state };
                }
                return { nextIndex: -1, state: state };
            default:
                if (!character.isWhitespaceCharacter(p.codePoint)) {
                    state.hasNonWhitespaceCharacter = true;
                }
                state.nodePoints.push(p);
        }
    }
    return { nextIndex: 1, state: state };
}

function eatAndCollectLinkTitle(nodePoints, startIndex, endIndex, state) {
    let i = startIndex;
    if (state == null) {
        state = {
            saturated: false,
            nodePoints: [],
            wrapSymbol: null,
        };
    }
    const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
    if (firstNonWhitespaceIndex >= endIndex)
        return { nextIndex: -1, state: state };
    if (state.nodePoints.length <= 0) {
        i = firstNonWhitespaceIndex;
        const p = nodePoints[i];
        switch (p.codePoint) {
            case character.AsciiCodePoint.DOUBLE_QUOTE:
            case character.AsciiCodePoint.SINGLE_QUOTE:
            case character.AsciiCodePoint.OPEN_PARENTHESIS:
                state.wrapSymbol = p.codePoint;
                state.nodePoints.push(p);
                i += 1;
                break;
            default:
                return { nextIndex: -1, state: state };
        }
    }
    if (state.wrapSymbol == null)
        return { nextIndex: -1, state: state };
    switch (state.wrapSymbol) {
        case character.AsciiCodePoint.DOUBLE_QUOTE:
        case character.AsciiCodePoint.SINGLE_QUOTE: {
            for (; i < endIndex; ++i) {
                const p = nodePoints[i];
                switch (p.codePoint) {
                    case character.AsciiCodePoint.BACKSLASH:
                        if (i + 1 < endIndex) {
                            state.nodePoints.push(p);
                            state.nodePoints.push(nodePoints[i + 1]);
                        }
                        i += 1;
                        break;
                    case state.wrapSymbol:
                        state.saturated = true;
                        state.nodePoints.push(p);
                        return { nextIndex: i + 1, state: state };
                    default:
                        state.nodePoints.push(p);
                }
            }
            break;
        }
        case character.AsciiCodePoint.OPEN_PARENTHESIS: {
            for (; i < endIndex; ++i) {
                const p = nodePoints[i];
                switch (p.codePoint) {
                    case character.AsciiCodePoint.BACKSLASH:
                        if (i + 1 < endIndex) {
                            state.nodePoints.push(p);
                            state.nodePoints.push(nodePoints[i + 1]);
                        }
                        i += 1;
                        break;
                    case character.AsciiCodePoint.OPEN_PARENTHESIS:
                        return { nextIndex: -1, state: state };
                    case character.AsciiCodePoint.CLOSE_PARENTHESIS:
                        if (i + 1 >= endIndex || nodePoints[i + 1].codePoint === character.VirtualCodePoint.LINE_END) {
                            state.nodePoints.push(p);
                            state.saturated = true;
                            break;
                        }
                        return { nextIndex: -1, state: state };
                    default:
                        state.nodePoints.push(p);
                }
            }
            break;
        }
    }
    return { nextIndex: endIndex, state: state };
}

const match = function (api) {
    return {
        isContainingBlock: false,
        eatOpener,
        eatContinuationText,
        onClose,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex)
            return null;
        let i = firstNonWhitespaceIndex;
        const { nextIndex: labelEndIndex, state: labelState } = eatAndCollectLinkLabel(nodePoints, i, endIndex, null);
        if (labelEndIndex < 0)
            return null;
        const lineNo = nodePoints[startIndex].line;
        const createInitState = () => {
            const token = {
                nodeType: ast.DefinitionType,
                position: {
                    start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                    end: coreTokenizer.calcEndPoint(nodePoints, endIndex - 1),
                },
                label: labelState,
                destination: null,
                title: null,
                lineNoOfLabel: lineNo,
                lineNoOfDestination: -1,
                lineNoOfTitle: -1,
                lines: [line],
            };
            return token;
        };
        if (!labelState.saturated) {
            const token = createInitState();
            return { token, nextIndex: endIndex };
        }
        if (labelEndIndex < 0 ||
            labelEndIndex + 1 >= endIndex ||
            nodePoints[labelEndIndex].codePoint !== character.AsciiCodePoint.COLON)
            return null;
        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, labelEndIndex + 1, endIndex);
        if (i >= endIndex) {
            const token = createInitState();
            return { token, nextIndex: endIndex };
        }
        const { nextIndex: destinationEndIndex, state: destinationState } = eatAndCollectLinkDestination(nodePoints, i, endIndex, null);
        if (destinationEndIndex < 0)
            return null;
        if (!destinationState.saturated && destinationEndIndex !== endIndex)
            return null;
        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, endIndex);
        if (i >= endIndex) {
            const token = createInitState();
            token.destination = destinationState;
            token.lineNoOfDestination = lineNo;
            return { token, nextIndex: endIndex };
        }
        if (i === destinationEndIndex)
            return null;
        const { nextIndex: titleEndIndex, state: titleState } = eatAndCollectLinkTitle(nodePoints, i, endIndex, null);
        if (titleEndIndex >= 0)
            i = titleEndIndex;
        if (i < endIndex) {
            const k = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
            if (k < endIndex)
                return null;
        }
        const token = createInitState();
        token.destination = destinationState;
        token.title = titleState;
        token.lineNoOfDestination = lineNo;
        token.lineNoOfTitle = lineNo;
        return { token, nextIndex: endIndex };
    }
    function eatContinuationText(line, token) {
        var _a;
        if (token.title != null && token.title.saturated)
            return { status: 'notMatched' };
        const { nodePoints, startIndex, firstNonWhitespaceIndex, endIndex } = line;
        const lineNo = nodePoints[startIndex].line;
        let i = firstNonWhitespaceIndex;
        if (!token.label.saturated) {
            const { nextIndex: labelEndIndex, state: labelState } = eatAndCollectLinkLabel(nodePoints, i, endIndex, token.label);
            if (labelEndIndex < 0) {
                return { status: 'failedAndRollback', lines: token.lines };
            }
            if (!labelState.saturated) {
                token.lines.push(line);
                return { status: 'opening', nextIndex: endIndex };
            }
            if (labelEndIndex + 1 >= endIndex ||
                nodePoints[labelEndIndex].codePoint !== character.AsciiCodePoint.COLON) {
                return { status: 'failedAndRollback', lines: token.lines };
            }
            i = labelEndIndex + 1;
        }
        if (token.destination == null) {
            i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
            if (i >= endIndex) {
                return { status: 'failedAndRollback', lines: token.lines };
            }
            const { nextIndex: destinationEndIndex, state: destinationState } = eatAndCollectLinkDestination(nodePoints, i, endIndex, null);
            if (destinationEndIndex < 0 || !destinationState.saturated) {
                return { status: 'failedAndRollback', lines: token.lines };
            }
            i = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, endIndex);
            if (i >= endIndex) {
                token.destination = destinationState;
                token.lines.push(line);
                return { status: 'opening', nextIndex: endIndex };
            }
            token.lineNoOfDestination = lineNo;
            token.lineNoOfTitle = lineNo;
        }
        if (token.lineNoOfTitle < 0) {
            token.lineNoOfTitle = lineNo;
        }
        const { nextIndex: titleEndIndex, state: titleState } = eatAndCollectLinkTitle(nodePoints, i, endIndex, token.title);
        token.title = titleState;
        if (titleEndIndex < 0 ||
            titleState.nodePoints.length <= 0 ||
            (titleState.saturated &&
                coreTokenizer.eatOptionalWhitespaces(nodePoints, titleEndIndex, endIndex) < endIndex)) {
            if (token.lineNoOfDestination === token.lineNoOfTitle) {
                return { status: 'failedAndRollback', lines: token.lines };
            }
            const lastLine = token.lines[token.lines.length - 1];
            token.title = null;
            token.position.end = coreTokenizer.calcEndPoint(lastLine.nodePoints, lastLine.endIndex - 1);
            return {
                status: 'closingAndRollback',
                lines: token.lines.slice(token.lineNoOfTitle - 1),
            };
        }
        token.lines.push(line);
        const saturated = (_a = token.title) === null || _a === void 0 ? void 0 : _a.saturated;
        return { status: saturated ? 'closing' : 'opening', nextIndex: endIndex };
    }
    function onClose(token) {
        let result;
        if (token.title == null || !token.title.saturated) {
            if (!token.label.saturated) {
                return { status: 'failedAndRollback', lines: token.lines };
            }
            if (token.destination == null || !token.destination.saturated) {
                return { status: 'failedAndRollback', lines: token.lines };
            }
            if (token.title != null && !token.title.saturated) {
                if (token.lineNoOfDestination === token.lineNoOfTitle) {
                    return { status: 'failedAndRollback', lines: token.lines };
                }
                const lines = token.lines.splice(token.lineNoOfTitle - 1);
                const lastLine = token.lines[token.lines.length - 1];
                token.title = null;
                token.position.end = coreTokenizer.calcEndPoint(lastLine.nodePoints, lastLine.endIndex - 1);
                result = { status: 'closingAndRollback', lines };
            }
        }
        const labelPoints = token.label.nodePoints;
        const label = character.calcStringFromNodePoints(labelPoints, 1, labelPoints.length - 1);
        const identifier = coreTokenizer.resolveLabelToIdentifier(label);
        api.registerDefinitionIdentifier(identifier);
        token._label = label;
        token._identifier = identifier;
        return result;
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const label = token._label;
            const identifier = token._identifier;
            const destinationPoints = token.destination.nodePoints;
            const destination = destinationPoints[0].codePoint === character.AsciiCodePoint.OPEN_ANGLE
                ? character.calcEscapedStringFromNodePoints(destinationPoints, 1, destinationPoints.length - 1, true)
                : character.calcEscapedStringFromNodePoints(destinationPoints, 0, destinationPoints.length, true);
            const url = coreTokenizer.encodeLinkDestination(destination);
            const title = token.title == null
                ? undefined
                : character.calcEscapedStringFromNodePoints(token.title.nodePoints, 1, token.title.nodePoints.length - 1);
            const node = api.shouldReservePosition
                ? { type: ast.DefinitionType, position: token.position, identifier, label, url, title }
                : { type: ast.DefinitionType, identifier, label, url, title };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-definition';

class DefinitionTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.DefinitionTokenizer = DefinitionTokenizer;
exports.DefinitionTokenizerName = uniqueName;
exports["default"] = DefinitionTokenizer;
exports.definitionMatch = match;
exports.definitionParse = parse;
exports.eatAndCollectLinkDestination = eatAndCollectLinkDestination;
exports.eatAndCollectLinkLabel = eatAndCollectLinkLabel;
exports.eatAndCollectLinkTitle = eatAndCollectLinkTitle;


/***/ }),

/***/ 1744:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        processDelimiterPair,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        for (let i = startIndex; i < endIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.TILDE: {
                    const _startIndex = i;
                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, endIndex, c) - 1;
                    if (i - _startIndex !== 1)
                        break;
                    let delimiterType = 'both';
                    const preceding = _startIndex === startIndex ? null : nodePoints[_startIndex - 1];
                    if (preceding != null && character.isWhitespaceCharacter(preceding.codePoint)) {
                        delimiterType = 'opener';
                    }
                    const following = i + 1 === endIndex ? null : nodePoints[i + 1];
                    if (following != null && character.isWhitespaceCharacter(following.codePoint)) {
                        if (delimiterType !== 'both')
                            break;
                        delimiterType = 'closer';
                    }
                    return {
                        type: delimiterType,
                        startIndex: _startIndex,
                        endIndex: i + 1,
                    };
                }
            }
        }
        return null;
    }
    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        internalTokens = api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex);
        const token = {
            nodeType: ast.DeleteType,
            startIndex: openerDelimiter.startIndex,
            endIndex: closerDelimiter.endIndex,
            children: internalTokens,
        };
        return { tokens: [token] };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const children = api.parseInlineTokens(token.children);
            const node = api.shouldReservePosition
                ? { type: ast.DeleteType, position: api.calcPosition(token), children }
                : { type: ast.DeleteType, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-delete';

class DeleteTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_INLINE,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.DeleteTokenizer = DeleteTokenizer;
exports.DeleteTokenizerName = uniqueName;
exports["default"] = DeleteTokenizer;
exports.deleteMatch = match;
exports.deleteParse = parse;


/***/ }),

/***/ 6203:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        isDelimiterPair,
        processDelimiterPair,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        const blockStartIndex = api.getBlockStartIndex();
        const blockEndIndex = api.getBlockEndIndex();
        const isOpenerDelimiter = (delimiterStartIndex, delimiterEndIndex) => {
            if (delimiterEndIndex === blockEndIndex)
                return false;
            if (delimiterEndIndex === endIndex)
                return true;
            const nextCodePosition = nodePoints[delimiterEndIndex];
            if (character.isUnicodeWhitespaceCharacter(nextCodePosition.codePoint))
                return false;
            if (!character.isPunctuationCharacter(nextCodePosition.codePoint))
                return true;
            if (delimiterStartIndex <= startIndex)
                return true;
            const prevCodePosition = nodePoints[delimiterStartIndex - 1];
            return (character.isUnicodeWhitespaceCharacter(prevCodePosition.codePoint) ||
                character.isPunctuationCharacter(prevCodePosition.codePoint));
        };
        const isCloserDelimiter = (delimiterStartIndex, delimiterEndIndex) => {
            if (delimiterStartIndex === blockStartIndex)
                return false;
            if (delimiterStartIndex === startIndex)
                return true;
            const prevCodePosition = nodePoints[delimiterStartIndex - 1];
            if (character.isUnicodeWhitespaceCharacter(prevCodePosition.codePoint))
                return false;
            if (!character.isPunctuationCharacter(prevCodePosition.codePoint))
                return true;
            if (delimiterEndIndex >= endIndex)
                return true;
            const nextCodePosition = nodePoints[delimiterEndIndex];
            return (character.isUnicodeWhitespaceCharacter(nextCodePosition.codePoint) ||
                character.isPunctuationCharacter(nextCodePosition.codePoint));
        };
        for (let i = startIndex; i < endIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.ASTERISK:
                case character.AsciiCodePoint.UNDERSCORE: {
                    const _startIndex = i;
                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, endIndex, c) - 1;
                    const _endIndex = i + 1;
                    const isLeftFlankingDelimiterRun = isOpenerDelimiter(_startIndex, _endIndex);
                    const isRightFlankingDelimiterRun = isCloserDelimiter(_startIndex, _endIndex);
                    let isOpener = isLeftFlankingDelimiterRun;
                    let isCloser = isRightFlankingDelimiterRun;
                    if (c === character.AsciiCodePoint.UNDERSCORE) {
                        if (isLeftFlankingDelimiterRun && isRightFlankingDelimiterRun) {
                            if (_startIndex > startIndex &&
                                !character.isPunctuationCharacter(nodePoints[_startIndex - 1].codePoint)) {
                                isOpener = false;
                            }
                            const nextCodePosition = nodePoints[_endIndex];
                            if (!character.isPunctuationCharacter(nextCodePosition.codePoint)) {
                                isCloser = false;
                            }
                        }
                    }
                    if (!isOpener && !isCloser)
                        break;
                    const thickness = _endIndex - _startIndex;
                    return {
                        type: isOpener ? (isCloser ? 'both' : 'opener') : 'closer',
                        startIndex: _startIndex,
                        endIndex: _endIndex,
                        thickness,
                        originalThickness: thickness,
                    };
                }
            }
        }
        return null;
    }
    function isDelimiterPair(openerDelimiter, closerDelimiter) {
        const nodePoints = api.getNodePoints();
        if (nodePoints[openerDelimiter.startIndex].codePoint !==
            nodePoints[closerDelimiter.startIndex].codePoint ||
            ((openerDelimiter.type === 'both' || closerDelimiter.type === 'both') &&
                (openerDelimiter.originalThickness + closerDelimiter.originalThickness) % 3 === 0 &&
                openerDelimiter.originalThickness % 3 !== 0)) {
            return { paired: false, opener: true, closer: true };
        }
        return { paired: true };
    }
    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        let thickness = 1;
        if (openerDelimiter.thickness > 1 && closerDelimiter.thickness > 1) {
            thickness = 2;
        }
        internalTokens = api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex);
        const token = {
            nodeType: thickness === 1 ? ast.EmphasisType : ast.StrongType,
            startIndex: openerDelimiter.endIndex - thickness,
            endIndex: closerDelimiter.startIndex + thickness,
            thickness,
            children: internalTokens,
        };
        const remainOpenerDelimiter = openerDelimiter.thickness > thickness
            ? {
                type: openerDelimiter.type,
                startIndex: openerDelimiter.startIndex,
                endIndex: openerDelimiter.endIndex - thickness,
                thickness: openerDelimiter.thickness - thickness,
                originalThickness: openerDelimiter.originalThickness,
            }
            : undefined;
        const remainCloserDelimiter = closerDelimiter.thickness > thickness
            ? {
                type: closerDelimiter.type,
                startIndex: closerDelimiter.startIndex + thickness,
                endIndex: closerDelimiter.endIndex,
                thickness: closerDelimiter.thickness - thickness,
                originalThickness: closerDelimiter.originalThickness,
            }
            : undefined;
        return {
            tokens: [token],
            remainOpenerDelimiter,
            remainCloserDelimiter,
        };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const children = api.parseInlineTokens(token.children);
            const node = api.shouldReservePosition
                ? { type: token.nodeType, position: api.calcPosition(token), children }
                : { type: token.nodeType, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-emphasis';

class EmphasisTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_INLINE,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.EmphasisTokenizer = EmphasisTokenizer;
exports.EmphasisTokenizerName = uniqueName;
exports["default"] = EmphasisTokenizer;
exports.emphasisMatch = match;
exports.emphasisParse = parse;


/***/ }),

/***/ 4954:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

function match(_api) {
    const { nodeType, markers, markersRequired, checkInfoString } = this;
    return {
        isContainingBlock: false,
        eatOpener,
        eatAndInterruptPreviousSibling,
        eatContinuationText,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex + markersRequired - 1 >= endIndex)
            return null;
        const { nodePoints, startIndex } = line;
        const marker = nodePoints[firstNonWhitespaceIndex].codePoint;
        if (markers.indexOf(marker) < 0)
            return null;
        const i = coreTokenizer.eatOptionalCharacters(nodePoints, firstNonWhitespaceIndex + 1, endIndex, marker);
        const countOfMark = i - firstNonWhitespaceIndex;
        if (countOfMark < markersRequired)
            return null;
        const [iLft, iRht] = character.calcTrimBoundaryOfCodePoints(nodePoints, i, endIndex);
        const infoString = nodePoints.slice(iLft, iRht);
        if (checkInfoString != null && !checkInfoString(infoString, marker, countOfMark)) {
            return null;
        }
        const nextIndex = endIndex;
        const token = {
            nodeType: nodeType,
            position: {
                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            indent: firstNonWhitespaceIndex - startIndex,
            marker: marker,
            markerCount: countOfMark,
            lines: [],
            infoString,
        };
        return { token, nextIndex };
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        const result = eatOpener(line);
        if (result == null)
            return null;
        return {
            token: result.token,
            nextIndex: result.nextIndex,
            remainingSibling: prevSiblingToken,
        };
    }
    function eatContinuationText(line, token) {
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;
        if (countOfPrecedeSpaces < 4 && firstNonWhitespaceIndex < endIndex) {
            let i = coreTokenizer.eatOptionalCharacters(nodePoints, firstNonWhitespaceIndex, endIndex, token.marker);
            const markerCount = i - firstNonWhitespaceIndex;
            if (markerCount >= token.markerCount) {
                for (; i < endIndex; ++i) {
                    const c = nodePoints[i].codePoint;
                    if (!character.isSpaceCharacter(c))
                        break;
                }
                if (i + 1 >= endIndex) {
                    return { status: 'closing', nextIndex: endIndex };
                }
            }
        }
        const firstIndex = Math.min(startIndex + token.indent, firstNonWhitespaceIndex, endIndex - 1);
        token.lines.push({
            nodePoints,
            startIndex: firstIndex,
            endIndex,
            firstNonWhitespaceIndex,
            countOfPrecedeSpaces,
        });
        return { status: 'opening', nextIndex: endIndex };
    }
}

class FencedBlockTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props) {
        var _a;
        super({
            name: props.name,
            priority: (_a = props.priority) !== null && _a !== void 0 ? _a : coreTokenizer.TokenizerPriority.FENCED_BLOCK,
        });
        this.markers = [];
        this.match = match;
        this.nodeType = props.nodeType;
        this.markers = props.markers;
        this.markersRequired = props.markersRequired;
        this.checkInfoString = props.checkInfoString;
    }
}

const FencedBlockType = 'fencedBlock';

exports.FencedBlockTokenizer = FencedBlockTokenizer;
exports.FencedBlockType = FencedBlockType;
exports["default"] = FencedBlockTokenizer;
exports.fencedBlockMatch = match;


/***/ }),

/***/ 2961:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var FencedBlockTokenizer = __nccwpck_require__(4954);
var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var FencedBlockTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(FencedBlockTokenizer);

const match = function (api) {
    const hook = FencedBlockTokenizer.fencedBlockMatch.call(this, api);
    return Object.assign(Object.assign({}, hook), { isContainingBlock: false });
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const infoString = token.infoString;
            let i = 0;
            const langInfo = [];
            for (; i < infoString.length; ++i) {
                const p = infoString[i];
                if (character.isUnicodeWhitespaceCharacter(p.codePoint))
                    break;
                langInfo.push(p);
            }
            const lang = character.calcEscapedStringFromNodePoints(langInfo, 0, langInfo.length, true);
            i = coreTokenizer.eatOptionalWhitespaces(infoString, i, infoString.length);
            const meta = character.calcEscapedStringFromNodePoints(infoString, i, infoString.length, true);
            const contents = coreTokenizer.mergeContentLinesFaithfully(token.lines);
            let value = character.calcStringFromNodePoints(contents);
            if (!/\n$/.test(value))
                value += '\n';
            const node = api.shouldReservePosition
                ? {
                    type: ast.CodeType,
                    position: token.position,
                    lang: lang.length > 0 ? lang : null,
                    meta: meta.length > 0 ? meta : null,
                    value,
                }
                : {
                    type: ast.CodeType,
                    lang: lang.length > 0 ? lang : null,
                    meta: meta.length > 0 ? meta : null,
                    value,
                };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-fenced-code';

class FencedCodeTokenizer extends FencedBlockTokenizer__default["default"] {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FENCED_BLOCK,
            nodeType: ast.CodeType,
            markers: [character.AsciiCodePoint.BACKTICK, character.AsciiCodePoint.TILDE],
            markersRequired: 3,
            checkInfoString: (infoString, marker) => {
                if (marker === character.AsciiCodePoint.BACKTICK) {
                    for (const p of infoString) {
                        if (p.codePoint === character.AsciiCodePoint.BACKTICK)
                            return false;
                    }
                }
                return true;
            },
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.FencedCodeTokenizer = FencedCodeTokenizer;
exports.FencedCodeTokenizerName = uniqueName;
exports["default"] = FencedCodeTokenizer;
exports.fencedCodeMatch = match;
exports.fencedCodeParse = parse;


/***/ }),

/***/ 1158:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function () {
    return {
        isContainingBlock: false,
        eatOpener,
        eatAndInterruptPreviousSibling,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex ||
            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.NUMBER_SIGN) {
            return null;
        }
        const i = coreTokenizer.eatOptionalCharacters(nodePoints, firstNonWhitespaceIndex + 1, endIndex, character.AsciiCodePoint.NUMBER_SIGN);
        const depth = i - firstNonWhitespaceIndex;
        if (depth > 6)
            return null;
        if (i + 1 < endIndex && !character.isSpaceCharacter(nodePoints[i].codePoint))
            return null;
        const nextIndex = endIndex;
        const token = {
            nodeType: ast.HeadingType,
            position: {
                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            depth: depth,
            line,
        };
        return { token, nextIndex, saturated: true };
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        const result = eatOpener(line);
        if (result == null)
            return null;
        return {
            token: result.token,
            nextIndex: result.nextIndex,
            remainingSibling: prevSiblingToken,
        };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const { nodePoints, firstNonWhitespaceIndex, endIndex } = token.line;
            let [leftIndex, rightIndex] = character.calcTrimBoundaryOfCodePoints(nodePoints, firstNonWhitespaceIndex + token.depth, endIndex);
            let closeCharCount = 0;
            for (let j = rightIndex - 1; j >= leftIndex; --j) {
                const c = nodePoints[j].codePoint;
                if (c !== character.AsciiCodePoint.NUMBER_SIGN)
                    break;
                closeCharCount += 1;
            }
            if (closeCharCount > 0) {
                let spaceCount = 0, j = rightIndex - 1 - closeCharCount;
                for (; j >= leftIndex; --j) {
                    const c = nodePoints[j].codePoint;
                    if (!character.isWhitespaceCharacter(c))
                        break;
                    spaceCount += 1;
                }
                if (spaceCount > 0 || j < leftIndex) {
                    rightIndex -= closeCharCount + spaceCount;
                }
            }
            const lines = [
                {
                    nodePoints,
                    startIndex: leftIndex,
                    endIndex: rightIndex,
                    firstNonWhitespaceIndex: leftIndex,
                    countOfPrecedeSpaces: 0,
                },
            ];
            const contents = coreTokenizer.mergeAndStripContentLines(lines);
            const children = api.processInlines(contents);
            const node = api.shouldReservePosition
                ? { type: ast.HeadingType, position: token.position, depth: token.depth, children }
                : { type: ast.HeadingType, depth: token.depth, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-heading';

class HeadingTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.HeadingTokenizer = HeadingTokenizer;
exports.HeadingTokenizerName = uniqueName;
exports["default"] = HeadingTokenizer;
exports.headingMatch = match;
exports.headingParse = parse;


/***/ }),

/***/ 593:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var ast = __nccwpck_require__(395);

function eatHTMLAttribute(nodePoints, startIndex, endIndex) {
    let i = coreTokenizer.eatOptionalWhitespaces(nodePoints, startIndex, endIndex);
    if (i <= startIndex || i >= endIndex)
        return null;
    const attrNameStartIndex = i;
    let c = nodePoints[i].codePoint;
    if (!character.isAsciiLetter(c) && c !== character.AsciiCodePoint.UNDERSCORE && c !== character.AsciiCodePoint.COLON)
        return null;
    for (i = attrNameStartIndex + 1; i < endIndex; ++i) {
        c = nodePoints[i].codePoint;
        if (character.isAsciiLetter(c) ||
            character.isAsciiDigitCharacter(c) ||
            c === character.AsciiCodePoint.UNDERSCORE ||
            c === character.AsciiCodePoint.DOT ||
            c === character.AsciiCodePoint.COLON ||
            c === character.AsciiCodePoint.MINUS_SIGN)
            continue;
        break;
    }
    const attrNameEndIndex = i;
    const attribute = {
        name: {
            startIndex: attrNameStartIndex,
            endIndex: attrNameEndIndex,
        },
    };
    i = coreTokenizer.eatOptionalWhitespaces(nodePoints, attrNameEndIndex, endIndex);
    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.EQUALS_SIGN) {
        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i + 1, endIndex);
        if (i < endIndex) {
            const mark = nodePoints[i].codePoint;
            switch (mark) {
                case character.AsciiCodePoint.DOUBLE_QUOTE: {
                    const attrValueStartIndex = i + 1;
                    for (i = attrValueStartIndex; i < endIndex; ++i) {
                        c = nodePoints[i].codePoint;
                        if (c === character.AsciiCodePoint.DOUBLE_QUOTE)
                            break;
                    }
                    const attrValueEndIndex = i;
                    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.DOUBLE_QUOTE) {
                        attribute.value = {
                            startIndex: attrValueStartIndex,
                            endIndex: attrValueEndIndex,
                        };
                        i += 1;
                    }
                    break;
                }
                case character.AsciiCodePoint.SINGLE_QUOTE: {
                    const attrValueStartIndex = i + 1;
                    for (i = attrValueStartIndex; i < endIndex; ++i) {
                        c = nodePoints[i].codePoint;
                        if (c === character.AsciiCodePoint.SINGLE_QUOTE)
                            break;
                    }
                    const attrValueEndIndex = i;
                    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.SINGLE_QUOTE) {
                        attribute.value = {
                            startIndex: attrValueStartIndex,
                            endIndex: attrValueEndIndex,
                        };
                        i += 1;
                    }
                    break;
                }
                default: {
                    const attrValueStartIndex = i;
                    for (; i < endIndex; ++i) {
                        c = nodePoints[i].codePoint;
                        if (character.isWhitespaceCharacter(c) ||
                            c === character.AsciiCodePoint.DOUBLE_QUOTE ||
                            c === character.AsciiCodePoint.SINGLE_QUOTE ||
                            c === character.AsciiCodePoint.EQUALS_SIGN ||
                            c === character.AsciiCodePoint.OPEN_ANGLE ||
                            c === character.AsciiCodePoint.CLOSE_ANGLE ||
                            c === character.AsciiCodePoint.BACKTICK)
                            break;
                    }
                    const attrValueEndIndex = i;
                    if (attrValueEndIndex > attrValueStartIndex) {
                        attribute.value = {
                            startIndex: attrValueStartIndex,
                            endIndex: attrValueEndIndex,
                        };
                    }
                    break;
                }
            }
            if (attribute.value != null) {
                return { attribute, nextIndex: i };
            }
        }
    }
    return { attribute, nextIndex: attrNameEndIndex };
}

function eatHTMLTagName(nodePoints, startIndex, endIndex) {
    if (startIndex >= endIndex || !character.isAsciiLetter(nodePoints[startIndex].codePoint))
        return null;
    let i = startIndex;
    for (; i < endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        if (character.isAsciiLetter(c) || character.isAsciiDigitCharacter(c) || c === character.AsciiCodePoint.MINUS_SIGN)
            continue;
        return i;
    }
    return i;
}

const includedTags$1 = ['pre', 'script', 'style'];
function eatStartCondition1(nodePoints, startIndex, endIndex, tagName) {
    if (!includedTags$1.includes(tagName))
        return null;
    if (startIndex >= endIndex)
        return endIndex;
    const c = nodePoints[startIndex].codePoint;
    if (character.isWhitespaceCharacter(c) || c === character.AsciiCodePoint.CLOSE_ANGLE) {
        return startIndex + 1;
    }
    return null;
}
function eatEndCondition1(nodePoints, startIndex, endIndex) {
    for (let i = startIndex; i < endIndex; ++i) {
        if (nodePoints[i].codePoint === character.AsciiCodePoint.OPEN_ANGLE &&
            i + 3 < endIndex &&
            nodePoints[i + 1].codePoint === character.AsciiCodePoint.SLASH) {
            const tagNameStartIndex = i + 2;
            const tagNameEndIndex = eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);
            if (tagNameEndIndex == null ||
                tagNameEndIndex >= endIndex ||
                nodePoints[tagNameEndIndex].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE) {
                i += 1;
                continue;
            }
            const rawTagName = character.calcStringFromNodePoints(nodePoints, tagNameStartIndex, tagNameEndIndex, true);
            const tagName = rawTagName.toLowerCase();
            if (includedTags$1.includes(tagName))
                return tagNameEndIndex;
        }
    }
    return null;
}

function eatStartCondition2(nodePoints, startIndex, endIndex) {
    const i = startIndex;
    if (i + 2 < endIndex &&
        nodePoints[i].codePoint === character.AsciiCodePoint.EXCLAMATION_MARK &&
        nodePoints[i + 1].codePoint === character.AsciiCodePoint.MINUS_SIGN &&
        nodePoints[i + 2].codePoint === character.AsciiCodePoint.MINUS_SIGN)
        return i + 3;
    return null;
}
function eatEndCondition2(nodePoints, startIndex, endIndex) {
    for (let i = startIndex; i < endIndex; ++i) {
        if (nodePoints[i].codePoint === character.AsciiCodePoint.MINUS_SIGN &&
            i + 2 < endIndex &&
            nodePoints[i + 1].codePoint === character.AsciiCodePoint.MINUS_SIGN &&
            nodePoints[i + 2].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)
            return i + 3;
    }
    return null;
}

function eatStartCondition3(nodePoints, startIndex, endIndex) {
    const i = startIndex;
    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.QUESTION_MARK)
        return i + 1;
    return null;
}
function eatEndCondition3(nodePoints, startIndex, endIndex) {
    for (let i = startIndex; i < endIndex; ++i) {
        if (nodePoints[i].codePoint === character.AsciiCodePoint.QUESTION_MARK &&
            i + 1 < endIndex &&
            nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)
            return i + 2;
    }
    return null;
}

function eatStartCondition4(nodePoints, startIndex, endIndex) {
    const i = startIndex;
    if (i + 1 < endIndex &&
        nodePoints[i].codePoint === character.AsciiCodePoint.EXCLAMATION_MARK &&
        character.isAsciiUpperLetter(nodePoints[i + 1].codePoint))
        return i + 2;
    return null;
}
function eatEndCondition4(nodePoints, startIndex, endIndex) {
    for (let i = startIndex; i < endIndex; ++i) {
        if (nodePoints[i].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)
            return i + 1;
    }
    return null;
}

function eatStartCondition5(nodePoints, startIndex, endIndex) {
    const i = startIndex;
    if (i + 6 < endIndex &&
        nodePoints[i].codePoint === character.AsciiCodePoint.EXCLAMATION_MARK &&
        nodePoints[i + 1].codePoint === character.AsciiCodePoint.OPEN_BRACKET &&
        nodePoints[i + 2].codePoint === character.AsciiCodePoint.UPPERCASE_C &&
        nodePoints[i + 3].codePoint === character.AsciiCodePoint.UPPERCASE_D &&
        nodePoints[i + 4].codePoint === character.AsciiCodePoint.UPPERCASE_A &&
        nodePoints[i + 5].codePoint === character.AsciiCodePoint.UPPERCASE_T &&
        nodePoints[i + 6].codePoint === character.AsciiCodePoint.UPPERCASE_A)
        return i + 7;
    return null;
}
function eatEndCondition5(nodePoints, startIndex, endIndex) {
    for (let i = startIndex; i < endIndex; ++i) {
        if (nodePoints[i].codePoint === character.AsciiCodePoint.CLOSE_BRACKET &&
            i + 2 < endIndex &&
            nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_BRACKET &&
            nodePoints[i + 2].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)
            return i + 3;
    }
    return null;
}

const includedTags = [
    'address',
    'article',
    'aside',
    'base',
    'basefont',
    'blockquote',
    'body',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'details',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'frame',
    'frameset',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hr',
    'html',
    'iframe',
    'legend',
    'li',
    'link',
    'main',
    'menu',
    'menuitem',
    'nav',
    'noframes',
    'ol',
    'optgroup',
    'option',
    'p',
    'param',
    'section',
    'source',
    'summary',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'title',
    'tr',
    'track',
    'ul',
];
function eatStartCondition6(nodePoints, startIndex, endIndex, tagName) {
    if (!includedTags.includes(tagName))
        return null;
    if (startIndex >= endIndex)
        return endIndex;
    const c = nodePoints[startIndex].codePoint;
    if (character.isWhitespaceCharacter(c) || c === character.AsciiCodePoint.CLOSE_ANGLE)
        return startIndex + 1;
    if (c === character.AsciiCodePoint.SLASH &&
        startIndex + 1 < endIndex &&
        nodePoints[startIndex + 1].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)
        return startIndex + 2;
    return null;
}

const excludedTags = ['pre', 'script', 'style'];
function eatStartCondition7(nodePoints, startIndex, endIndex, tagName, potentialOpenTag) {
    if (excludedTags.includes(tagName) || startIndex >= endIndex)
        return null;
    let i = startIndex;
    if (potentialOpenTag) {
        for (; i < endIndex;) {
            const result = eatHTMLAttribute(nodePoints, i, endIndex);
            if (result == null)
                break;
            i = result.nextIndex;
        }
        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
        if (i >= endIndex)
            return null;
        if (nodePoints[i].codePoint === character.AsciiCodePoint.SLASH)
            i += 1;
    }
    else {
        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, startIndex, endIndex);
    }
    if (i >= endIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)
        return null;
    for (i += 1; i < endIndex; ++i) {
        if (!character.isWhitespaceCharacter(nodePoints[i].codePoint))
            return null;
    }
    return endIndex;
}

const match = function () {
    return {
        isContainingBlock: false,
        eatOpener,
        eatAndInterruptPreviousSibling,
        eatContinuationText,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex ||
            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.OPEN_ANGLE)
            return null;
        const i = firstNonWhitespaceIndex + 1;
        const startResult = eatStartCondition(nodePoints, i, endIndex);
        if (startResult == null)
            return null;
        const { condition } = startResult;
        let saturated = false;
        if (condition !== 6 && condition !== 7) {
            const endResult = eatEndCondition(nodePoints, startResult.nextIndex, endIndex, condition);
            if (endResult != null)
                saturated = true;
        }
        const nextIndex = endIndex;
        const token = {
            nodeType: ast.HtmlType,
            position: {
                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            condition,
            lines: [line],
        };
        return { token, nextIndex, saturated };
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        const result = eatOpener(line);
        if (result == null || result.token.condition === 7)
            return null;
        const { token, nextIndex } = result;
        return {
            token,
            nextIndex,
            remainingSibling: prevSiblingToken,
        };
    }
    function eatContinuationText(line, token) {
        const { nodePoints, endIndex, firstNonWhitespaceIndex } = line;
        const nextIndex = eatEndCondition(nodePoints, firstNonWhitespaceIndex, endIndex, token.condition);
        if (nextIndex === -1)
            return { status: 'notMatched' };
        token.lines.push(line);
        if (nextIndex != null)
            return { status: 'closing', nextIndex: endIndex };
        return { status: 'opening', nextIndex: endIndex };
    }
    function eatStartCondition(nodePoints, startIndex, endIndex) {
        let nextIndex = null;
        if (startIndex >= endIndex)
            return null;
        nextIndex = eatStartCondition2(nodePoints, startIndex, endIndex);
        if (nextIndex != null)
            return { nextIndex, condition: 2 };
        nextIndex = eatStartCondition3(nodePoints, startIndex, endIndex);
        if (nextIndex != null)
            return { nextIndex, condition: 3 };
        nextIndex = eatStartCondition4(nodePoints, startIndex, endIndex);
        if (nextIndex != null)
            return { nextIndex, condition: 4 };
        nextIndex = eatStartCondition5(nodePoints, startIndex, endIndex);
        if (nextIndex != null)
            return { nextIndex, condition: 5 };
        if (nodePoints[startIndex].codePoint !== character.AsciiCodePoint.SLASH) {
            const tagNameStartIndex = startIndex;
            const tagNameEndIndex = eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);
            if (tagNameEndIndex == null)
                return null;
            const tagNameInterval = {
                startIndex: tagNameStartIndex,
                endIndex: tagNameEndIndex,
            };
            const rawTagName = character.calcStringFromNodePoints(nodePoints, tagNameInterval.startIndex, tagNameInterval.endIndex);
            const tagName = rawTagName.toLowerCase();
            nextIndex = eatStartCondition1(nodePoints, tagNameInterval.endIndex, endIndex, tagName);
            if (nextIndex != null)
                return { nextIndex, condition: 1 };
            nextIndex = eatStartCondition6(nodePoints, tagNameInterval.endIndex, endIndex, tagName);
            if (nextIndex != null)
                return { nextIndex, condition: 6 };
            nextIndex = eatStartCondition7(nodePoints, tagNameInterval.endIndex, endIndex, tagName, true);
            if (nextIndex != null)
                return { nextIndex, condition: 7 };
            return null;
        }
        const tagNameStartIndex = startIndex + 1;
        const tagNameEndIndex = eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);
        if (tagNameEndIndex == null)
            return null;
        const tagNameInterval = {
            startIndex: tagNameStartIndex,
            endIndex: tagNameEndIndex,
        };
        const rawTagName = character.calcStringFromNodePoints(nodePoints, tagNameInterval.startIndex, tagNameInterval.endIndex);
        const tagName = rawTagName.toLowerCase();
        nextIndex = eatStartCondition6(nodePoints, tagNameInterval.endIndex, endIndex, tagName);
        if (nextIndex != null)
            return { nextIndex, condition: 6 };
        nextIndex = eatStartCondition7(nodePoints, tagNameInterval.endIndex, endIndex, tagName, false);
        if (nextIndex != null)
            return { nextIndex, condition: 7 };
        return null;
    }
    function eatEndCondition(nodePoints, startIndex, endIndex, condition) {
        switch (condition) {
            case 1: {
                const nextIndex = eatEndCondition1(nodePoints, startIndex, endIndex);
                return nextIndex == null ? null : endIndex;
            }
            case 2: {
                const nextIndex = eatEndCondition2(nodePoints, startIndex, endIndex);
                return nextIndex == null ? null : endIndex;
            }
            case 3: {
                const nextIndex = eatEndCondition3(nodePoints, startIndex, endIndex);
                return nextIndex == null ? null : endIndex;
            }
            case 4: {
                const nextIndex = eatEndCondition4(nodePoints, startIndex, endIndex);
                return nextIndex == null ? null : endIndex;
            }
            case 5: {
                const nextIndex = eatEndCondition5(nodePoints, startIndex, endIndex);
                return nextIndex == null ? null : endIndex;
            }
            case 6:
            case 7: {
                const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, startIndex, endIndex);
                return firstNonWhitespaceIndex >= endIndex ? -1 : null;
            }
        }
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const contents = coreTokenizer.mergeContentLinesFaithfully(token.lines);
            const node = api.shouldReservePosition
                ? { type: 'html', position: token.position, value: character.calcStringFromNodePoints(contents) }
                : { type: 'html', value: character.calcStringFromNodePoints(contents) };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-html-block';

class HtmlBlockTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.HtmlBlockTokenizer = HtmlBlockTokenizer;
exports.HtmlBlockTokenizerName = uniqueName;
exports["default"] = HtmlBlockTokenizer;
exports.eatHTMLAttribute = eatHTMLAttribute;
exports.eatHTMLTagName = eatHTMLTagName;
exports.htmlBlockMatch = match;
exports.htmlBlockParse = parse;


/***/ }),

/***/ 1630:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var tokenizerHtmlBlock = __nccwpck_require__(593);
var ast = __nccwpck_require__(395);

function eatHtmlInlineCDataDelimiter(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    if (i + 11 >= endIndex ||
        nodePoints[i + 1].codePoint !== character.AsciiCodePoint.EXCLAMATION_MARK ||
        nodePoints[i + 2].codePoint !== character.AsciiCodePoint.OPEN_BRACKET ||
        nodePoints[i + 3].codePoint !== character.AsciiCodePoint.UPPERCASE_C ||
        nodePoints[i + 4].codePoint !== character.AsciiCodePoint.UPPERCASE_D ||
        nodePoints[i + 5].codePoint !== character.AsciiCodePoint.UPPERCASE_A ||
        nodePoints[i + 6].codePoint !== character.AsciiCodePoint.UPPERCASE_T ||
        nodePoints[i + 7].codePoint !== character.AsciiCodePoint.UPPERCASE_A ||
        nodePoints[i + 8].codePoint !== character.AsciiCodePoint.OPEN_BRACKET)
        return null;
    const si = i + 9;
    for (i = si; i < endIndex; ++i) {
        const p = nodePoints[i];
        if (p.codePoint !== character.AsciiCodePoint.CLOSE_BRACKET)
            continue;
        if (i + 2 >= endIndex)
            return null;
        if (nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_BRACKET &&
            nodePoints[i + 2].codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {
            const delimiter = {
                type: 'full',
                startIndex,
                endIndex: i + 3,
                htmlType: 'cdata',
            };
            return delimiter;
        }
    }
    return null;
}

function eatHtmlInlineClosingDelimiter(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    if (i + 3 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.SLASH)
        return null;
    const tagNameStartIndex = i + 2;
    const tagNameEndIndex = tokenizerHtmlBlock.eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);
    if (tagNameEndIndex == null)
        return null;
    i = coreTokenizer.eatOptionalWhitespaces(nodePoints, tagNameEndIndex, endIndex);
    if (i >= endIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)
        return null;
    const delimiter = {
        type: 'full',
        startIndex,
        endIndex: i + 1,
        htmlType: 'closing',
        tagName: {
            startIndex: tagNameStartIndex,
            endIndex: tagNameEndIndex,
        },
    };
    return delimiter;
}

function eatHtmlInlineCommentDelimiter(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    if (i + 6 >= endIndex ||
        nodePoints[i + 1].codePoint !== character.AsciiCodePoint.EXCLAMATION_MARK ||
        nodePoints[i + 2].codePoint !== character.AsciiCodePoint.MINUS_SIGN ||
        nodePoints[i + 3].codePoint !== character.AsciiCodePoint.MINUS_SIGN)
        return null;
    if (nodePoints[i + 4].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)
        return null;
    if (nodePoints[i + 4].codePoint === character.AsciiCodePoint.MINUS_SIGN &&
        nodePoints[i + 5].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)
        return null;
    const si = i + 4;
    for (i = si; i < endIndex; ++i) {
        const p = nodePoints[i];
        if (p.codePoint !== character.AsciiCodePoint.MINUS_SIGN)
            continue;
        let hyphenCount = 1;
        for (; i + hyphenCount < endIndex; hyphenCount += 1) {
            const q = nodePoints[i + hyphenCount];
            if (q.codePoint !== character.AsciiCodePoint.MINUS_SIGN)
                break;
        }
        if (hyphenCount < 2)
            continue;
        if (hyphenCount > 2 ||
            i + 2 >= endIndex ||
            nodePoints[i + 2].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)
            return null;
        const delimiter = {
            type: 'full',
            startIndex,
            endIndex: i + 3,
            htmlType: 'comment',
        };
        return delimiter;
    }
    return null;
}

function eatHtmlInlineDeclarationDelimiter(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    if (i + 4 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.EXCLAMATION_MARK)
        return null;
    const tagNameStartIndex = i + 2;
    for (i = tagNameStartIndex; i < endIndex; ++i) {
        const p = nodePoints[i];
        if (!character.isAsciiUpperLetter(p.codePoint))
            break;
    }
    if (i - tagNameStartIndex <= 0 ||
        i + 1 >= endIndex ||
        !character.isWhitespaceCharacter(nodePoints[i].codePoint))
        return null;
    const tagNameEndIndex = i, si = i + 1;
    for (i = si; i < endIndex; ++i) {
        const p = nodePoints[i];
        if (p.codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {
            const delimiter = {
                type: 'full',
                startIndex,
                endIndex: i + 1,
                htmlType: 'declaration',
                tagName: {
                    startIndex: tagNameStartIndex,
                    endIndex: tagNameEndIndex,
                },
            };
            return delimiter;
        }
    }
    return null;
}

function eatHtmlInlineInstructionDelimiter(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    if (i + 3 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.QUESTION_MARK)
        return null;
    const si = i + 2;
    for (i = si; i < endIndex; ++i) {
        const p = nodePoints[i];
        if (p.codePoint !== character.AsciiCodePoint.QUESTION_MARK)
            continue;
        if (i + 1 >= endIndex)
            return null;
        if (nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {
            const delimiter = {
                type: 'full',
                startIndex,
                endIndex: i + 2,
                htmlType: 'instruction',
            };
            return delimiter;
        }
    }
    return null;
}

function eatHtmlInlineTokenOpenDelimiter(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    if (i + 2 >= endIndex)
        return null;
    const tagNameStartIndex = i + 1;
    const tagNameEndIndex = tokenizerHtmlBlock.eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);
    if (tagNameEndIndex == null)
        return null;
    const attributes = [];
    for (i = tagNameEndIndex; i < endIndex;) {
        const result = tokenizerHtmlBlock.eatHTMLAttribute(nodePoints, i, endIndex);
        if (result == null)
            break;
        attributes.push(result.attribute);
        i = result.nextIndex;
    }
    i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
    if (i >= endIndex)
        return null;
    let selfClosed = false;
    if (nodePoints[i].codePoint === character.AsciiCodePoint.SLASH) {
        i += 1;
        selfClosed = true;
    }
    if (i >= endIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)
        return null;
    const delimiter = {
        type: 'full',
        startIndex,
        endIndex: i + 1,
        htmlType: 'open',
        tagName: {
            startIndex: tagNameStartIndex,
            endIndex: tagNameEndIndex,
        },
        attributes,
        selfClosed,
    };
    return delimiter;
}

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        processSingleDelimiter,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        for (let i = startIndex; i < endIndex; ++i) {
            i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);
            if (i >= endIndex)
                break;
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.OPEN_ANGLE: {
                    const delimiter = tryToEatDelimiter(nodePoints, i, endIndex);
                    if (delimiter != null)
                        return delimiter;
                    break;
                }
            }
        }
        return null;
    }
    function processSingleDelimiter(delimiter) {
        const token = Object.assign(Object.assign({}, delimiter), { nodeType: ast.HtmlType });
        return [token];
    }
};
function tryToEatDelimiter(nodePoints, startIndex, endIndex) {
    let delimiter = null;
    delimiter = eatHtmlInlineTokenOpenDelimiter(nodePoints, startIndex, endIndex);
    if (delimiter != null)
        return delimiter;
    delimiter = eatHtmlInlineClosingDelimiter(nodePoints, startIndex, endIndex);
    if (delimiter != null)
        return delimiter;
    delimiter = eatHtmlInlineCommentDelimiter(nodePoints, startIndex, endIndex);
    if (delimiter != null)
        return delimiter;
    delimiter = eatHtmlInlineInstructionDelimiter(nodePoints, startIndex, endIndex);
    if (delimiter != null)
        return delimiter;
    delimiter = eatHtmlInlineDeclarationDelimiter(nodePoints, startIndex, endIndex);
    if (delimiter != null)
        return delimiter;
    delimiter = eatHtmlInlineCDataDelimiter(nodePoints, startIndex, endIndex);
    return delimiter;
}

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const { startIndex, endIndex } = token;
            const nodePoints = api.getNodePoints();
            const value = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex);
            const node = api.shouldReservePosition
                ? { type: ast.HtmlType, position: api.calcPosition(token), value }
                : { type: ast.HtmlType, value };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-html-inline';

class HtmlInlineTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.HtmlInlineTokenizer = HtmlInlineTokenizer;
exports.HtmlInlineTokenizerName = uniqueName;
exports["default"] = HtmlInlineTokenizer;
exports.eatHtmlInlineCDataDelimiter = eatHtmlInlineCDataDelimiter;
exports.eatHtmlInlineClosingDelimiter = eatHtmlInlineClosingDelimiter;
exports.eatHtmlInlineCommentDelimiter = eatHtmlInlineCommentDelimiter;
exports.eatHtmlInlineDeclarationDelimiter = eatHtmlInlineDeclarationDelimiter;
exports.eatHtmlInlineInstructionDelimiter = eatHtmlInlineInstructionDelimiter;
exports.eatHtmlInlineTokenOpenDelimiter = eatHtmlInlineTokenOpenDelimiter;
exports.htmlInlineMatch = match;
exports.htmlInlineParse = parse;


/***/ }),

/***/ 6400:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var tokenizerLink = __nccwpck_require__(6087);
var tokenizerImage = __nccwpck_require__(5623);

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        isDelimiterPair,
        processDelimiterPair,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        for (let i = startIndex; i < endIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.EXCLAMATION_MARK: {
                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {
                        break;
                    }
                    return {
                        type: 'opener',
                        startIndex: i,
                        endIndex: i + 2,
                        brackets: [],
                    };
                }
                case character.AsciiCodePoint.CLOSE_BRACKET: {
                    const delimiter = {
                        type: 'closer',
                        startIndex: i,
                        endIndex: i + 1,
                        brackets: [],
                    };
                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {
                        return delimiter;
                    }
                    const result = coreTokenizer.eatLinkLabel(nodePoints, i + 1, endIndex);
                    if (result.nextIndex < 0)
                        return delimiter;
                    if (result.labelAndIdentifier == null) {
                        return {
                            type: 'closer',
                            startIndex: i,
                            endIndex: result.nextIndex,
                            brackets: [
                                {
                                    startIndex: i + 1,
                                    endIndex: result.nextIndex,
                                },
                            ],
                        };
                    }
                    return {
                        type: 'closer',
                        startIndex: i,
                        endIndex: result.nextIndex,
                        brackets: [
                            {
                                startIndex: i + 1,
                                endIndex: result.nextIndex,
                                label: result.labelAndIdentifier.label,
                                identifier: result.labelAndIdentifier.identifier,
                            },
                        ],
                    };
                }
            }
        }
        return null;
    }
    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const nodePoints = api.getNodePoints();
        const balancedBracketsStatus = tokenizerLink.checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);
        switch (balancedBracketsStatus) {
            case -1:
                return { paired: false, opener: false, closer: true };
            case 0:
                return { paired: true };
            case 1:
                return { paired: false, opener: true, closer: false };
        }
    }
    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const nodePoints = api.getNodePoints();
        const bracket = closerDelimiter.brackets[0];
        if (bracket != null && bracket.identifier != null) {
            if (api.hasDefinition(bracket.identifier)) {
                const token = {
                    nodeType: ast.ImageReferenceType,
                    startIndex: openerDelimiter.startIndex,
                    endIndex: bracket.endIndex,
                    referenceType: 'full',
                    label: bracket.label,
                    identifier: bracket.identifier,
                    children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),
                };
                return { tokens: [token] };
            }
            return { tokens: internalTokens };
        }
        const { nextIndex, labelAndIdentifier } = coreTokenizer.eatLinkLabel(nodePoints, openerDelimiter.endIndex - 1, closerDelimiter.startIndex + 1);
        if (nextIndex === closerDelimiter.startIndex + 1 &&
            labelAndIdentifier != null &&
            api.hasDefinition(labelAndIdentifier.identifier)) {
            const token = {
                nodeType: ast.ImageReferenceType,
                startIndex: openerDelimiter.startIndex,
                endIndex: closerDelimiter.endIndex,
                referenceType: bracket == null ? 'shortcut' : 'collapsed',
                label: labelAndIdentifier.label,
                identifier: labelAndIdentifier.identifier,
                children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),
            };
            return { tokens: [token] };
        }
        return { tokens: internalTokens };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const { identifier, label, referenceType } = token;
            const children = api.parseInlineTokens(token.children);
            const alt = tokenizerImage.calcImageAlt(children);
            const node = api.shouldReservePosition
                ? {
                    type: ast.ImageReferenceType,
                    position: api.calcPosition(token),
                    identifier,
                    label,
                    referenceType,
                    alt,
                }
                : {
                    type: ast.ImageReferenceType,
                    identifier,
                    label,
                    referenceType,
                    alt,
                };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-image-reference';

class ImageReferenceTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.ImageReferenceTokenizer = ImageReferenceTokenizer;
exports.ImageReferenceTokenizerName = uniqueName;
exports["default"] = ImageReferenceTokenizer;
exports.imageReferenceMatch = match;
exports.imageReferenceParse = parse;


/***/ }),

/***/ 5623:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var tokenizerLink = __nccwpck_require__(6087);

function calcImageAlt(nodes) {
    return nodes
        .map((o) => {
        if (o.value != null)
            return o.value;
        if (o.alt != null)
            return o.alt;
        if (o.children != null)
            return calcImageAlt(o.children);
        return '';
    })
        .join('');
}

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        isDelimiterPair,
        processDelimiterPair,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        const blockEndIndex = api.getBlockEndIndex();
        for (let i = startIndex; i < endIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.EXCLAMATION_MARK: {
                    if (i + 1 < endIndex && nodePoints[i + 1].codePoint === character.AsciiCodePoint.OPEN_BRACKET) {
                        return {
                            type: 'opener',
                            startIndex: i,
                            endIndex: i + 2,
                        };
                    }
                    break;
                }
                case character.AsciiCodePoint.CLOSE_BRACKET: {
                    if (i + 1 >= endIndex ||
                        nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_PARENTHESIS) {
                        break;
                    }
                    const destinationStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i + 2, blockEndIndex);
                    const destinationEndIndex = tokenizerLink.eatLinkDestination(nodePoints, destinationStartIndex, blockEndIndex);
                    if (destinationEndIndex < 0)
                        break;
                    const titleStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, blockEndIndex);
                    const titleEndIndex = tokenizerLink.eatLinkTitle(nodePoints, titleStartIndex, blockEndIndex);
                    if (titleEndIndex < 0)
                        break;
                    const _startIndex = i;
                    const _endIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, titleEndIndex, blockEndIndex) + 1;
                    if (_endIndex > blockEndIndex ||
                        nodePoints[_endIndex - 1].codePoint !== character.AsciiCodePoint.CLOSE_PARENTHESIS) {
                        break;
                    }
                    return {
                        type: 'closer',
                        startIndex: _startIndex,
                        endIndex: _endIndex,
                        destinationContent: destinationStartIndex < destinationEndIndex
                            ? {
                                startIndex: destinationStartIndex,
                                endIndex: destinationEndIndex,
                            }
                            : undefined,
                        titleContent: titleStartIndex < titleEndIndex
                            ? { startIndex: titleStartIndex, endIndex: titleEndIndex }
                            : undefined,
                    };
                }
            }
        }
        return null;
    }
    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const nodePoints = api.getNodePoints();
        const balancedBracketsStatus = tokenizerLink.checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);
        switch (balancedBracketsStatus) {
            case -1:
                return { paired: false, opener: false, closer: true };
            case 0:
                return { paired: true };
            case 1:
                return { paired: false, opener: true, closer: false };
        }
    }
    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const token = {
            nodeType: ast.ImageType,
            startIndex: openerDelimiter.startIndex,
            endIndex: closerDelimiter.endIndex,
            destinationContent: closerDelimiter.destinationContent,
            titleContent: closerDelimiter.titleContent,
            children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),
        };
        return { tokens: [token] };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const nodePoints = api.getNodePoints();
            let url = '';
            if (token.destinationContent != null) {
                let { startIndex, endIndex } = token.destinationContent;
                if (nodePoints[startIndex].codePoint === character.AsciiCodePoint.OPEN_ANGLE) {
                    startIndex += 1;
                    endIndex -= 1;
                }
                const destination = character.calcEscapedStringFromNodePoints(nodePoints, startIndex, endIndex, true);
                url = coreTokenizer.encodeLinkDestination(destination);
            }
            const children = api.parseInlineTokens(token.children);
            const alt = calcImageAlt(children);
            let title;
            if (token.titleContent != null) {
                const { startIndex, endIndex } = token.titleContent;
                title = character.calcEscapedStringFromNodePoints(nodePoints, startIndex + 1, endIndex - 1);
            }
            const node = api.shouldReservePosition
                ? { type: ast.ImageType, position: api.calcPosition(token), url, alt, title }
                : { type: ast.ImageType, url, alt, title };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-image';

class ImageTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.ImageTokenizer = ImageTokenizer;
exports.ImageTokenizerName = uniqueName;
exports.calcImageAlt = calcImageAlt;
exports["default"] = ImageTokenizer;
exports.imageMatch = match;
exports.imageParse = parse;


/***/ }),

/***/ 4477:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function () {
    return {
        isContainingBlock: false,
        eatOpener,
        eatContinuationText,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces < 4)
            return null;
        const { nodePoints, startIndex, firstNonWhitespaceIndex, endIndex } = line;
        let firstIndex = startIndex + 4;
        if (nodePoints[startIndex].codePoint === character.AsciiCodePoint.SPACE &&
            nodePoints[startIndex + 3].codePoint === character.VirtualCodePoint.SPACE) {
            let i = startIndex + 1;
            for (; i < firstNonWhitespaceIndex; ++i) {
                if (nodePoints[i].codePoint === character.VirtualCodePoint.SPACE)
                    break;
            }
            firstIndex = i + 4;
        }
        const nextIndex = endIndex;
        const token = {
            nodeType: ast.CodeType,
            position: {
                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            lines: [
                {
                    nodePoints,
                    startIndex: firstIndex,
                    endIndex,
                    firstNonWhitespaceIndex,
                    countOfPrecedeSpaces: line.countOfPrecedeSpaces - (firstIndex - startIndex),
                },
            ],
        };
        return { token, nextIndex };
    }
    function eatContinuationText(line, token) {
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;
        if (countOfPrecedeSpaces < 4 && firstNonWhitespaceIndex < endIndex)
            return { status: 'notMatched' };
        const firstIndex = Math.min(endIndex - 1, startIndex + 4);
        token.lines.push({
            nodePoints,
            startIndex: firstIndex,
            endIndex,
            firstNonWhitespaceIndex,
            countOfPrecedeSpaces: countOfPrecedeSpaces - (firstIndex - startIndex),
        });
        return { status: 'opening', nextIndex: endIndex };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const { lines } = token;
            let startLineIndex = 0, endLineIndex = lines.length;
            for (; startLineIndex < endLineIndex; ++startLineIndex) {
                const line = lines[startLineIndex];
                if (line.firstNonWhitespaceIndex < line.endIndex)
                    break;
            }
            for (; startLineIndex < endLineIndex; --endLineIndex) {
                const line = lines[endLineIndex - 1];
                if (line.firstNonWhitespaceIndex < line.endIndex)
                    break;
            }
            const contents = coreTokenizer.mergeContentLinesFaithfully(lines, startLineIndex, endLineIndex);
            let value = character.calcStringFromNodePoints(contents);
            if (!/\n$/.test(value))
                value += '\n';
            const node = api.shouldReservePosition
                ? {
                    type: ast.CodeType,
                    position: token.position,
                    lang: null,
                    meta: null,
                    value,
                }
                : {
                    type: ast.CodeType,
                    lang: null,
                    meta: null,
                    value,
                };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-indented-code';

class IndentedCodeTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.IndentedCodeTokenizer = IndentedCodeTokenizer;
exports.IndentedCodeTokenizerName = uniqueName;
exports["default"] = IndentedCodeTokenizer;
exports.indentedCodeMatch = match;
exports.indentedCodeParse = parse;


/***/ }),

/***/ 6202:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function (api) {
    return { findDelimiter, processSingleDelimiter };
    function* findDelimiter() {
        const nodePoints = api.getNodePoints();
        const blockStartIndex = api.getBlockStartIndex();
        const blockEndIndex = api.getBlockEndIndex();
        const potentialDelimiters = [];
        for (let i = blockStartIndex; i < blockEndIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH: {
                    i += 1;
                    if (i < blockEndIndex && nodePoints[i].codePoint === character.AsciiCodePoint.BACKTICK) {
                        const j = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, character.AsciiCodePoint.BACKTICK);
                        potentialDelimiters.push({
                            type: 'closer',
                            startIndex: i,
                            endIndex: j,
                        });
                        if (j > i + 1) {
                            potentialDelimiters.push({
                                type: 'opener',
                                startIndex: i + 1,
                                endIndex: j,
                            });
                        }
                        i = j - 1;
                    }
                    break;
                }
                case character.AsciiCodePoint.BACKTICK: {
                    const _startIndex = i;
                    const endIndexOfBacktick = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, c);
                    potentialDelimiters.push({
                        type: 'both',
                        startIndex: _startIndex,
                        endIndex: endIndexOfBacktick,
                    });
                    i = endIndexOfBacktick - 1;
                    break;
                }
            }
        }
        let pIndex = 0;
        let lastEndIndex = -1;
        let delimiter = null;
        while (pIndex < potentialDelimiters.length) {
            const [startIndex, endIndex] = yield delimiter;
            if (lastEndIndex === endIndex) {
                if (delimiter == null || delimiter.startIndex >= startIndex)
                    continue;
            }
            lastEndIndex = endIndex;
            let openerDelimiter = null;
            let closerDelimiter = null;
            for (; pIndex < potentialDelimiters.length; ++pIndex) {
                for (; pIndex < potentialDelimiters.length; ++pIndex) {
                    const delimiter = potentialDelimiters[pIndex];
                    if (delimiter.startIndex >= startIndex && delimiter.type !== 'closer')
                        break;
                }
                if (pIndex + 1 >= potentialDelimiters.length)
                    return;
                openerDelimiter = potentialDelimiters[pIndex];
                const thickness = openerDelimiter.endIndex - openerDelimiter.startIndex;
                for (let i = pIndex + 1; i < potentialDelimiters.length; ++i) {
                    const delimiter = potentialDelimiters[i];
                    if (delimiter.type !== 'opener' &&
                        delimiter.endIndex - delimiter.startIndex === thickness) {
                        closerDelimiter = delimiter;
                        break;
                    }
                }
                if (closerDelimiter != null)
                    break;
            }
            if (closerDelimiter == null)
                return;
            delimiter = {
                type: 'full',
                startIndex: openerDelimiter.startIndex,
                endIndex: closerDelimiter.endIndex,
                thickness: closerDelimiter.endIndex - closerDelimiter.startIndex,
            };
        }
    }
    function processSingleDelimiter(delimiter) {
        const token = {
            nodeType: ast.InlineCodeType,
            startIndex: delimiter.startIndex,
            endIndex: delimiter.endIndex,
            thickness: delimiter.thickness,
        };
        return [token];
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const nodePoints = api.getNodePoints();
            let startIndex = token.startIndex + token.thickness;
            let endIndex = token.endIndex - token.thickness;
            let isAllSpace = true;
            for (let i = startIndex; i < endIndex; ++i) {
                if (character.isSpaceLike(nodePoints[i].codePoint))
                    continue;
                isAllSpace = false;
                break;
            }
            if (!isAllSpace && startIndex + 2 < endIndex) {
                const firstCharacter = nodePoints[startIndex].codePoint;
                const lastCharacter = nodePoints[endIndex - 1].codePoint;
                if (character.isSpaceLike(firstCharacter) && character.isSpaceLike(lastCharacter)) {
                    startIndex += 1;
                    endIndex -= 1;
                }
            }
            const value = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex).replace(/\n/g, ' ');
            const node = api.shouldReservePosition
                ? { type: ast.InlineCodeType, position: api.calcPosition(token), value }
                : { type: ast.InlineCodeType, value };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-inline-code';

class InlineCodeTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.InlineCodeTokenizer = InlineCodeTokenizer;
exports.InlineCodeTokenizerName = uniqueName;
exports["default"] = InlineCodeTokenizer;
exports.inlineCodeMatch = match;
exports.inlineCodeParse = parse;


/***/ }),

/***/ 5280:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function (api) {
    const { backtickRequired } = this;
    return { findDelimiter, processSingleDelimiter };
    function* findDelimiter() {
        const nodePoints = api.getNodePoints();
        const blockStartIndex = api.getBlockStartIndex();
        const blockEndIndex = api.getBlockEndIndex();
        const potentialDelimiters = [];
        for (let i = blockStartIndex; i < blockEndIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.BACKTICK: {
                    const _startIndex = i;
                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, character.AsciiCodePoint.BACKTICK);
                    if (i >= blockEndIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.DOLLAR_SIGN) {
                        break;
                    }
                    const delimiter = {
                        type: 'opener',
                        startIndex: _startIndex,
                        endIndex: i + 1,
                    };
                    potentialDelimiters.push(delimiter);
                    break;
                }
                case character.AsciiCodePoint.DOLLAR_SIGN: {
                    const _startIndex = i;
                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, character.AsciiCodePoint.BACKTICK);
                    if (i < blockEndIndex && nodePoints[i].codePoint === character.AsciiCodePoint.DOLLAR_SIGN) {
                        break;
                    }
                    const thickness = i - _startIndex;
                    if (thickness <= 1) {
                        if (backtickRequired)
                            break;
                        const delimiter = {
                            type: 'both',
                            startIndex: _startIndex,
                            endIndex: i,
                        };
                        potentialDelimiters.push(delimiter);
                        break;
                    }
                    const delimiter = {
                        type: 'closer',
                        startIndex: _startIndex,
                        endIndex: i,
                    };
                    potentialDelimiters.push(delimiter);
                    i -= 1;
                    break;
                }
            }
        }
        let pIndex = 0;
        let lastEndIndex = -1;
        let delimiter = null;
        while (pIndex < potentialDelimiters.length) {
            const [startIndex, endIndex] = yield delimiter;
            if (lastEndIndex === endIndex) {
                if (delimiter == null || delimiter.startIndex >= startIndex)
                    continue;
            }
            lastEndIndex = endIndex;
            let openerDelimiter = null;
            let closerDelimiter = null;
            for (; pIndex < potentialDelimiters.length; ++pIndex) {
                for (; pIndex < potentialDelimiters.length; ++pIndex) {
                    const delimiter = potentialDelimiters[pIndex];
                    if (delimiter.startIndex >= startIndex && delimiter.type !== 'closer')
                        break;
                }
                if (pIndex + 1 >= potentialDelimiters.length)
                    break;
                openerDelimiter = potentialDelimiters[pIndex];
                const thickness = openerDelimiter.endIndex - openerDelimiter.startIndex;
                for (let i = pIndex + 1; i < potentialDelimiters.length; ++i) {
                    const delimiter = potentialDelimiters[i];
                    if (delimiter.type !== 'opener' &&
                        delimiter.endIndex - delimiter.startIndex === thickness) {
                        closerDelimiter = delimiter;
                        break;
                    }
                }
                if (closerDelimiter != null)
                    break;
            }
            if (closerDelimiter == null)
                return;
            delimiter = {
                type: 'full',
                startIndex: openerDelimiter.startIndex,
                endIndex: closerDelimiter.endIndex,
                thickness: closerDelimiter.endIndex - closerDelimiter.startIndex,
            };
        }
    }
    function processSingleDelimiter(delimiter) {
        const token = {
            nodeType: ast.InlineMathType,
            startIndex: delimiter.startIndex,
            endIndex: delimiter.endIndex,
            thickness: delimiter.thickness,
        };
        return [token];
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const nodePoints = api.getNodePoints();
            let startIndex = token.startIndex + token.thickness;
            let endIndex = token.endIndex - token.thickness;
            let isAllSpace = true;
            for (let i = startIndex; i < endIndex; ++i) {
                if (character.isSpaceLike(nodePoints[i].codePoint))
                    continue;
                isAllSpace = false;
                break;
            }
            if (!isAllSpace && startIndex + 2 < endIndex) {
                const firstCharacter = nodePoints[startIndex].codePoint;
                const lastCharacter = nodePoints[endIndex - 1].codePoint;
                if (character.isSpaceLike(firstCharacter) && character.isSpaceLike(lastCharacter)) {
                    startIndex += 1;
                    endIndex -= 1;
                }
            }
            const value = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex).replace(/\n/g, ' ');
            const node = api.shouldReservePosition
                ? { type: ast.InlineMathType, position: api.calcPosition(token), value }
                : { type: ast.InlineMathType, value };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-inline-math';

class InlineMathTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b, _c;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
        this.backtickRequired = (_c = props.backtickRequired) !== null && _c !== void 0 ? _c : true;
    }
}

exports.InlineMathTokenizer = InlineMathTokenizer;
exports.InlineMathTokenizerName = uniqueName;
exports["default"] = InlineMathTokenizer;
exports.inlineMathMatch = match;
exports.inlineMathParse = parse;


/***/ }),

/***/ 4444:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var tokenizerLink = __nccwpck_require__(6087);

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        isDelimiterPair,
        processDelimiterPair,
        processSingleDelimiter,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        for (let i = startIndex; i < endIndex; ++i) {
            const c = nodePoints[i].codePoint;
            switch (c) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.OPEN_BRACKET: {
                    const brackets = [];
                    const delimiter = {
                        type: 'opener',
                        startIndex: i,
                        endIndex: i + 1,
                        brackets,
                    };
                    const result1 = coreTokenizer.eatLinkLabel(nodePoints, i, endIndex);
                    if (result1.nextIndex < 0)
                        return delimiter;
                    if (result1.labelAndIdentifier == null) {
                        i = result1.nextIndex - 1;
                        break;
                    }
                    brackets.push({
                        startIndex: i,
                        endIndex: result1.nextIndex,
                        label: result1.labelAndIdentifier.label,
                        identifier: result1.labelAndIdentifier.identifier,
                    });
                    for (i = result1.nextIndex; i < endIndex;) {
                        if (nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_BRACKET)
                            break;
                        const { labelAndIdentifier, nextIndex } = coreTokenizer.eatLinkLabel(nodePoints, i, endIndex);
                        if (nextIndex === -1) {
                            delimiter.type = 'opener';
                            delimiter.endIndex = i + 1;
                            return delimiter;
                        }
                        const bracket = {
                            startIndex: i,
                            endIndex: nextIndex,
                        };
                        delimiter.type = 'full';
                        delimiter.endIndex = nextIndex;
                        brackets.push(bracket);
                        if (labelAndIdentifier == null)
                            break;
                        bracket.label = labelAndIdentifier.label;
                        bracket.identifier = labelAndIdentifier.identifier;
                        i = nextIndex;
                    }
                    return delimiter;
                }
                case character.AsciiCodePoint.CLOSE_BRACKET: {
                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {
                        break;
                    }
                    const result1 = coreTokenizer.eatLinkLabel(nodePoints, i + 1, endIndex);
                    if (result1.nextIndex === -1) {
                        return {
                            type: 'opener',
                            startIndex: i + 1,
                            endIndex: i + 2,
                            brackets: [],
                        };
                    }
                    if (result1.labelAndIdentifier == null) {
                        i = result1.nextIndex - 1;
                        break;
                    }
                    const brackets = [
                        {
                            startIndex: i + 1,
                            endIndex: result1.nextIndex,
                            label: result1.labelAndIdentifier.label,
                            identifier: result1.labelAndIdentifier.identifier,
                        },
                    ];
                    const delimiter = {
                        type: 'closer',
                        startIndex: i,
                        endIndex: result1.nextIndex,
                        brackets,
                    };
                    for (i = result1.nextIndex; i < endIndex;) {
                        if (nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_BRACKET)
                            break;
                        const { labelAndIdentifier, nextIndex } = coreTokenizer.eatLinkLabel(nodePoints, i, endIndex);
                        if (nextIndex === -1) {
                            delimiter.type = 'both';
                            delimiter.endIndex = i + 1;
                            return delimiter;
                        }
                        const bracket = {
                            startIndex: i,
                            endIndex: nextIndex,
                        };
                        delimiter.type = 'full';
                        delimiter.endIndex = nextIndex;
                        brackets.push(bracket);
                        if (labelAndIdentifier == null)
                            break;
                        bracket.label = labelAndIdentifier.label;
                        bracket.identifier = labelAndIdentifier.identifier;
                        i = nextIndex;
                    }
                    return delimiter;
                }
            }
        }
        return null;
    }
    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const hasInternalLinkToken = internalTokens.find(coreTokenizer.isLinkToken) != null;
        if (hasInternalLinkToken) {
            return { paired: false, opener: false, closer: false };
        }
        const nodePoints = api.getNodePoints();
        const balancedBracketsStatus = tokenizerLink.checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);
        switch (balancedBracketsStatus) {
            case -1:
                return { paired: false, opener: false, closer: true };
            case 0: {
                const bracket = closerDelimiter.brackets[0];
                if (bracket == null ||
                    bracket.identifier == null ||
                    !api.hasDefinition(bracket.identifier)) {
                    return { paired: false, opener: false, closer: false };
                }
                return { paired: true };
            }
            case 1: {
                return { paired: false, opener: true, closer: false };
            }
        }
    }
    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const tokens = processSingleDelimiter(openerDelimiter);
        const [bracket, ...brackets] = closerDelimiter.brackets;
        tokens.push({
            nodeType: ast.LinkReferenceType,
            startIndex: openerDelimiter.endIndex - 1,
            endIndex: bracket.endIndex,
            referenceType: 'full',
            label: bracket.label,
            identifier: bracket.identifier,
            children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),
        });
        return {
            tokens,
            remainCloserDelimiter: {
                type: closerDelimiter.type === 'both' ? 'opener' : 'full',
                startIndex: bracket.endIndex,
                endIndex: closerDelimiter.endIndex,
                brackets,
            },
        };
    }
    function processSingleDelimiter(delimiter) {
        const tokens = [];
        const brackets = delimiter.brackets;
        if (brackets.length <= 0)
            return tokens;
        let bracketIndex = 0;
        let lastBracketIndex = -1;
        for (; bracketIndex < brackets.length; ++bracketIndex) {
            let bracket = null;
            for (; bracketIndex < brackets.length; ++bracketIndex) {
                bracket = brackets[bracketIndex];
                if (bracket.identifier != null && api.hasDefinition(bracket.identifier))
                    break;
            }
            if (bracket == null || bracketIndex >= brackets.length)
                break;
            if (lastBracketIndex + 1 < bracketIndex) {
                const bracket0 = brackets[bracketIndex - 1];
                tokens.push({
                    nodeType: ast.LinkReferenceType,
                    startIndex: bracket0.startIndex,
                    endIndex: bracket.endIndex,
                    referenceType: 'full',
                    label: bracket.label,
                    identifier: bracket.identifier,
                    children: api.resolveInternalTokens([], bracket0.startIndex + 1, bracket0.endIndex - 1),
                });
                lastBracketIndex = bracketIndex;
                continue;
            }
            if (bracketIndex + 1 === brackets.length) {
                tokens.push({
                    nodeType: ast.LinkReferenceType,
                    startIndex: bracket.startIndex,
                    endIndex: bracket.endIndex,
                    referenceType: 'shortcut',
                    label: bracket.label,
                    identifier: bracket.identifier,
                    children: api.resolveInternalTokens([], bracket.startIndex + 1, bracket.endIndex - 1),
                });
                break;
            }
            if (bracketIndex + 1 < brackets.length && brackets[bracketIndex + 1].identifier == null) {
                const bracket1 = brackets[bracketIndex + 1];
                tokens.push({
                    nodeType: ast.LinkReferenceType,
                    startIndex: bracket.startIndex,
                    endIndex: bracket1.endIndex,
                    referenceType: 'collapsed',
                    label: bracket.label,
                    identifier: bracket.identifier,
                    children: api.resolveInternalTokens([], bracket.startIndex + 1, bracket.endIndex - 1),
                });
                break;
            }
        }
        return tokens;
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const { identifier, label, referenceType } = token;
            const children = api.parseInlineTokens(token.children);
            const node = api.shouldReservePosition
                ? {
                    type: ast.LinkReferenceType,
                    position: api.calcPosition(token),
                    identifier,
                    label,
                    referenceType,
                    children,
                }
                : {
                    type: ast.LinkReferenceType,
                    identifier,
                    label,
                    referenceType,
                    children,
                };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-link-reference';

class LinkReferenceTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.LinkReferenceTokenizer = LinkReferenceTokenizer;
exports.LinkReferenceTokenizerName = uniqueName;
exports["default"] = LinkReferenceTokenizer;
exports.linkReferenceMatch = match;
exports.linkReferenceParse = parse;


/***/ }),

/***/ 6087:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);
var ast = __nccwpck_require__(395);

const checkBalancedBracketsStatus = (startIndex, endIndex, internalTokens, nodePoints) => {
    let i = startIndex;
    let bracketCount = 0;
    const updateBracketCount = () => {
        const c = nodePoints[i].codePoint;
        switch (c) {
            case character.AsciiCodePoint.BACKSLASH:
                i += 1;
                break;
            case character.AsciiCodePoint.OPEN_BRACKET:
                bracketCount += 1;
                break;
            case character.AsciiCodePoint.CLOSE_BRACKET:
                bracketCount -= 1;
                break;
        }
    };
    for (const token of internalTokens) {
        if (token.startIndex < startIndex)
            continue;
        if (token.endIndex > endIndex)
            break;
        for (; i < token.startIndex; ++i) {
            updateBracketCount();
            if (bracketCount < 0)
                return -1;
        }
        i = token.endIndex;
    }
    for (; i < endIndex; ++i) {
        updateBracketCount();
        if (bracketCount < 0)
            return -1;
    }
    return bracketCount > 0 ? 1 : 0;
};

function eatLinkDestination(nodePoints, startIndex, endIndex) {
    if (startIndex >= endIndex)
        return -1;
    let i = startIndex;
    switch (nodePoints[i].codePoint) {
        case character.AsciiCodePoint.OPEN_ANGLE: {
            for (i += 1; i < endIndex; ++i) {
                const p = nodePoints[i];
                switch (p.codePoint) {
                    case character.AsciiCodePoint.BACKSLASH:
                        i += 1;
                        break;
                    case character.AsciiCodePoint.OPEN_ANGLE:
                    case character.VirtualCodePoint.LINE_END:
                        return -1;
                    case character.AsciiCodePoint.CLOSE_ANGLE:
                        return i + 1;
                }
            }
            return -1;
        }
        default: {
            let openParensCount = 0;
            for (; i < endIndex; ++i) {
                const c = nodePoints[i].codePoint;
                switch (c) {
                    case character.AsciiCodePoint.BACKSLASH:
                        i += 1;
                        break;
                    case character.AsciiCodePoint.OPEN_PARENTHESIS:
                        openParensCount += 1;
                        break;
                    case character.AsciiCodePoint.CLOSE_PARENTHESIS:
                        openParensCount -= 1;
                        if (openParensCount < 0)
                            return i;
                        break;
                    default:
                        if (character.isWhitespaceCharacter(c) || character.isAsciiControlCharacter(c))
                            return i;
                        break;
                }
            }
            return openParensCount === 0 ? i : -1;
        }
    }
}

function eatLinkTitle(nodePoints, startIndex, endIndex) {
    if (startIndex >= endIndex)
        return -1;
    let i = startIndex;
    const titleWrapSymbol = nodePoints[i].codePoint;
    switch (titleWrapSymbol) {
        case character.AsciiCodePoint.DOUBLE_QUOTE:
        case character.AsciiCodePoint.SINGLE_QUOTE: {
            for (i += 1; i < endIndex; ++i) {
                const p = nodePoints[i];
                switch (p.codePoint) {
                    case character.AsciiCodePoint.BACKSLASH:
                        i += 1;
                        break;
                    case titleWrapSymbol:
                        return i + 1;
                    case character.VirtualCodePoint.LINE_END: {
                        const j = coreTokenizer.eatOptionalBlankLines(nodePoints, startIndex, i);
                        if (nodePoints[j].line > p.line + 1)
                            return -1;
                        break;
                    }
                }
            }
            break;
        }
        case character.AsciiCodePoint.OPEN_PARENTHESIS: {
            let openParens = 1;
            for (i += 1; i < endIndex; ++i) {
                const p = nodePoints[i];
                switch (p.codePoint) {
                    case character.AsciiCodePoint.BACKSLASH:
                        i += 1;
                        break;
                    case character.VirtualCodePoint.LINE_END: {
                        const j = coreTokenizer.eatOptionalBlankLines(nodePoints, startIndex, i);
                        if (nodePoints[j].line > p.line + 1)
                            return -1;
                        break;
                    }
                    case character.AsciiCodePoint.OPEN_PARENTHESIS:
                        openParens += 1;
                        break;
                    case character.AsciiCodePoint.CLOSE_PARENTHESIS:
                        openParens -= 1;
                        if (openParens === 0)
                            return i + 1;
                        break;
                }
            }
            break;
        }
        case character.AsciiCodePoint.CLOSE_PARENTHESIS:
            return i;
        default:
            return -1;
    }
    return -1;
}

const match = function (api) {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),
        isDelimiterPair,
        processDelimiterPair,
    };
    function _findDelimiter(startIndex, endIndex) {
        const nodePoints = api.getNodePoints();
        const blockEndIndex = api.getBlockEndIndex();
        for (let i = startIndex; i < endIndex; ++i) {
            const p = nodePoints[i];
            switch (p.codePoint) {
                case character.AsciiCodePoint.BACKSLASH:
                    i += 1;
                    break;
                case character.AsciiCodePoint.OPEN_BRACKET: {
                    const delimiter = {
                        type: 'opener',
                        startIndex: i,
                        endIndex: i + 1,
                    };
                    return delimiter;
                }
                case character.AsciiCodePoint.CLOSE_BRACKET: {
                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_PARENTHESIS)
                        break;
                    const destinationStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i + 2, blockEndIndex);
                    const destinationEndIndex = eatLinkDestination(nodePoints, destinationStartIndex, blockEndIndex);
                    if (destinationEndIndex < 0)
                        break;
                    const titleStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, blockEndIndex);
                    const titleEndIndex = eatLinkTitle(nodePoints, titleStartIndex, blockEndIndex);
                    if (titleEndIndex < 0)
                        break;
                    const _startIndex = i;
                    const _endIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, titleEndIndex, blockEndIndex) + 1;
                    if (_endIndex > blockEndIndex ||
                        nodePoints[_endIndex - 1].codePoint !== character.AsciiCodePoint.CLOSE_PARENTHESIS)
                        break;
                    return {
                        type: 'closer',
                        startIndex: _startIndex,
                        endIndex: _endIndex,
                        destinationContent: destinationStartIndex < destinationEndIndex
                            ? {
                                startIndex: destinationStartIndex,
                                endIndex: destinationEndIndex,
                            }
                            : undefined,
                        titleContent: titleStartIndex < titleEndIndex
                            ? { startIndex: titleStartIndex, endIndex: titleEndIndex }
                            : undefined,
                    };
                }
            }
        }
        return null;
    }
    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const nodePoints = api.getNodePoints();
        const hasInternalLinkToken = internalTokens.find(coreTokenizer.isLinkToken) != null;
        if (hasInternalLinkToken) {
            return { paired: false, opener: false, closer: false };
        }
        const balancedBracketsStatus = checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);
        switch (balancedBracketsStatus) {
            case -1:
                return { paired: false, opener: false, closer: true };
            case 0:
                return { paired: true };
            case 1:
                return { paired: false, opener: true, closer: false };
        }
    }
    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {
        const children = api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex);
        const token = {
            nodeType: ast.LinkType,
            startIndex: openerDelimiter.startIndex,
            endIndex: closerDelimiter.endIndex,
            destinationContent: closerDelimiter.destinationContent,
            titleContent: closerDelimiter.titleContent,
            children,
        };
        return { tokens: [token] };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const nodePoints = api.getNodePoints();
            let url = '';
            if (token.destinationContent != null) {
                let { startIndex, endIndex } = token.destinationContent;
                if (nodePoints[startIndex].codePoint === character.AsciiCodePoint.OPEN_ANGLE) {
                    startIndex += 1;
                    endIndex -= 1;
                }
                const destination = character.calcEscapedStringFromNodePoints(nodePoints, startIndex, endIndex, true);
                url = coreTokenizer.encodeLinkDestination(destination);
            }
            let title;
            if (token.titleContent != null) {
                const { startIndex, endIndex } = token.titleContent;
                title = character.calcEscapedStringFromNodePoints(nodePoints, startIndex + 1, endIndex - 1);
            }
            const children = api.parseInlineTokens(token.children);
            const node = api.shouldReservePosition
                ? { type: ast.LinkType, position: api.calcPosition(token), url, title, children }
                : { type: ast.LinkType, url, title, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-link';

class LinkTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.LinkTokenizer = LinkTokenizer;
exports.LinkTokenizerName = uniqueName;
exports.checkBalancedBracketsStatus = checkBalancedBracketsStatus;
exports["default"] = LinkTokenizer;
exports.eatLinkDestination = eatLinkDestination;
exports.eatLinkTitle = eatLinkTitle;


/***/ }),

/***/ 9382:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var coreTokenizer = __nccwpck_require__(9618);
var character = __nccwpck_require__(8356);

const match = function () {
    const { emptyItemCouldNotInterruptedTypes, enableTaskListItem } = this;
    return {
        isContainingBlock: true,
        eatOpener,
        eatAndInterruptPreviousSibling,
        eatContinuationText,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex)
            return null;
        let ordered = false;
        let marker = null;
        let orderType;
        let order;
        let i = firstNonWhitespaceIndex;
        let c = nodePoints[i].codePoint;
        if (i + 1 < endIndex) {
            const c0 = c;
            if (character.isAsciiDigitCharacter(c0)) {
                orderType = '1';
                let v = c0 - character.AsciiCodePoint.DIGIT0;
                for (i += 1; i < endIndex; ++i) {
                    c = nodePoints[i].codePoint;
                    if (!character.isAsciiDigitCharacter(c))
                        break;
                    v = v * 10 + c - character.AsciiCodePoint.DIGIT0;
                }
                order = v;
                orderType = '1';
            }
            else if (character.isAsciiLowerLetter(c0)) {
                i += 1;
                c = nodePoints[i].codePoint;
                order = c0 - character.AsciiCodePoint.LOWERCASE_A + 1;
                orderType = 'a';
            }
            else if (character.isAsciiUpperLetter(c0)) {
                i += 1;
                c = nodePoints[i].codePoint;
                order = c0 - character.AsciiCodePoint.UPPERCASE_A + 1;
                orderType = 'A';
            }
            if (i > firstNonWhitespaceIndex &&
                i - firstNonWhitespaceIndex <= 9 &&
                (c === character.AsciiCodePoint.DOT || c === character.AsciiCodePoint.CLOSE_PARENTHESIS)) {
                i += 1;
                ordered = true;
                marker = c;
            }
        }
        if (!ordered) {
            if (c === character.AsciiCodePoint.PLUS_SIGN ||
                c === character.AsciiCodePoint.MINUS_SIGN ||
                c === character.AsciiCodePoint.ASTERISK) {
                i += 1;
                marker = c;
            }
        }
        if (marker == null)
            return null;
        let countOfSpaces = 0, nextIndex = i;
        if (nextIndex < endIndex) {
            c = nodePoints[nextIndex].codePoint;
            if (c === character.VirtualCodePoint.SPACE)
                nextIndex += 1;
        }
        for (; nextIndex < endIndex; ++nextIndex) {
            c = nodePoints[nextIndex].codePoint;
            if (!character.isSpaceCharacter(c))
                break;
            countOfSpaces += 1;
        }
        if (countOfSpaces > 4) {
            nextIndex -= countOfSpaces - 1;
            countOfSpaces = 1;
        }
        if (countOfSpaces === 0 && nextIndex < endIndex && c !== character.VirtualCodePoint.LINE_END)
            return null;
        const countOfTopBlankLine = c === character.VirtualCodePoint.LINE_END ? 1 : -1;
        if (c === character.VirtualCodePoint.LINE_END) {
            nextIndex -= countOfSpaces - 1;
            countOfSpaces = 1;
        }
        const indent = i - startIndex + countOfSpaces;
        let status = null;
        if (enableTaskListItem) {
            ({ status, nextIndex } = eatTaskStatus(nodePoints, nextIndex, endIndex));
        }
        const token = {
            nodeType: ast.ListType,
            position: {
                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            ordered,
            marker,
            orderType: ordered ? orderType : undefined,
            order: ordered ? order : undefined,
            indent,
            countOfTopBlankLine,
            children: [],
        };
        if (status != null)
            token.status = status;
        return { token, nextIndex };
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        const result = eatOpener(line);
        if (result == null)
            return null;
        const { token, nextIndex } = result;
        if (emptyItemCouldNotInterruptedTypes.includes(prevSiblingToken.nodeType)) {
            if (token.indent === line.endIndex - line.startIndex) {
                return null;
            }
            if (token.ordered && token.order !== 1)
                return null;
        }
        return { token, nextIndex, remainingSibling: prevSiblingToken };
    }
    function eatContinuationText(line, token) {
        const { startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces: indent } = line;
        if (firstNonWhitespaceIndex < endIndex && indent < token.indent) {
            return { status: 'notMatched' };
        }
        if (firstNonWhitespaceIndex >= endIndex) {
            if (token.countOfTopBlankLine >= 0) {
                token.countOfTopBlankLine += 1;
                if (token.countOfTopBlankLine > 1) {
                    return { status: 'notMatched' };
                }
            }
        }
        else {
            token.countOfTopBlankLine = -1;
        }
        const nextIndex = Math.min(startIndex + token.indent, endIndex - 1);
        return { status: 'opening', nextIndex };
    }
};
function eatTaskStatus(nodePoints, startIndex, endIndex) {
    let i = startIndex;
    for (; i < endIndex; ++i) {
        const c = nodePoints[i].codePoint;
        if (!character.isSpaceCharacter(c))
            break;
    }
    if (i + 3 >= endIndex ||
        nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_BRACKET ||
        nodePoints[i + 2].codePoint !== character.AsciiCodePoint.CLOSE_BRACKET ||
        !character.isWhitespaceCharacter(nodePoints[i + 3].codePoint))
        return { status: null, nextIndex: startIndex };
    let status;
    const c = nodePoints[i + 1].codePoint;
    switch (c) {
        case character.AsciiCodePoint.SPACE:
            status = ast.TaskStatus.TODO;
            break;
        case character.AsciiCodePoint.MINUS_SIGN:
            status = ast.TaskStatus.DOING;
            break;
        case character.AsciiCodePoint.LOWERCASE_X:
        case character.AsciiCodePoint.UPPERCASE_X:
            status = ast.TaskStatus.DONE;
            break;
        default:
            return { status: null, nextIndex: startIndex };
    }
    return { status, nextIndex: i + 4 };
}

const parse = function (api) {
    return {
        parse: tokens => {
            const results = [];
            let listItemTokens = [];
            for (let i = 0; i < tokens.length; ++i) {
                const originalToken = tokens[i];
                if (listItemTokens.length <= 0 ||
                    listItemTokens[0].ordered !== originalToken.ordered ||
                    listItemTokens[0].orderType !== originalToken.orderType ||
                    listItemTokens[0].marker !== originalToken.marker) {
                    const node = resolveList(listItemTokens, api);
                    if (node)
                        results.push(node);
                    listItemTokens = [originalToken];
                    continue;
                }
                listItemTokens.push(originalToken);
            }
            const node = resolveList(listItemTokens, api);
            if (node)
                results.push(node);
            return results;
        },
    };
};
const resolveList = (tokens, api) => {
    if (tokens.length <= 0)
        return null;
    let spread = tokens.some((item) => {
        if (item.children == null || item.children.length <= 1)
            return false;
        let previousPosition = item.children[0].position;
        for (let j = 1; j < item.children.length; ++j) {
            const currentPosition = item.children[j].position;
            if (previousPosition.end.line + 1 < currentPosition.start.line) {
                return true;
            }
            previousPosition = currentPosition;
        }
        return false;
    });
    if (!spread && tokens.length > 1) {
        let previousItem = tokens[0];
        for (let i = 1; i < tokens.length; ++i) {
            const currentItem = tokens[i];
            if (previousItem.position.end.line + 1 < currentItem.position.start.line) {
                spread = true;
                break;
            }
            previousItem = currentItem;
        }
    }
    const children = tokens.map((listItemToken) => {
        const nodes = api.parseBlockTokens(listItemToken.children);
        const children = spread
            ? nodes
            : nodes
                .map(node => (node.type === ast.ParagraphType ? node.children : node))
                .flat();
        const listItem = api.shouldReservePosition
            ? {
                type: ast.ListItemType,
                position: listItemToken.position,
                status: listItemToken.status,
                children,
            }
            : { type: ast.ListItemType, status: listItemToken.status, children };
        return listItem;
    });
    const node = api.shouldReservePosition
        ? {
            type: ast.ListType,
            position: {
                start: Object.assign({}, tokens[0].position.start),
                end: Object.assign({}, tokens[tokens.length - 1].position.end),
            },
            ordered: tokens[0].ordered,
            orderType: tokens[0].orderType,
            start: tokens[0].order,
            marker: tokens[0].marker,
            spread,
            children,
        }
        : {
            type: ast.ListType,
            ordered: tokens[0].ordered,
            orderType: tokens[0].orderType,
            start: tokens[0].order,
            marker: tokens[0].marker,
            spread,
            children,
        };
    return node;
};

const uniqueName = '@yozora/tokenizer-list';

class ListTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b, _c, _d;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_BLOCK,
        });
        this.match = match;
        this.parse = parse;
        this.enableTaskListItem = (_c = props.enableTaskListItem) !== null && _c !== void 0 ? _c : false;
        this.emptyItemCouldNotInterruptedTypes = (_d = props.emptyItemCouldNotInterruptedTypes) !== null && _d !== void 0 ? _d : [
            ast.ParagraphType,
        ];
    }
}

exports.ListTokenizer = ListTokenizer;
exports.ListTokenizerName = uniqueName;
exports["default"] = ListTokenizer;


/***/ }),

/***/ 6543:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var character = __nccwpck_require__(8356);
var FencedBlockTokenizer = __nccwpck_require__(4954);
var ast = __nccwpck_require__(395);
var coreTokenizer = __nccwpck_require__(9618);

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var FencedBlockTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(FencedBlockTokenizer);

const match = function (api) {
    const { markers } = this;
    const hook = FencedBlockTokenizer.fencedBlockMatch.call(this, api);
    return Object.assign(Object.assign({}, hook), { isContainingBlock: true, eatOpener });
    function eatOpener(line, parentToken) {
        const result = hook.eatOpener(line, parentToken);
        if (result == null)
            return null;
        const { token } = result;
        const [lft, rht] = character.calcTrimBoundaryOfCodePoints(token.infoString);
        if (lft >= rht)
            return result;
        let i = rht - 1;
        for (; i >= lft; --i) {
            const c = token.infoString[i].codePoint;
            if (!markers.includes(c))
                break;
        }
        const countOfTailingMarker = rht - i - 1;
        if (countOfTailingMarker != token.markerCount)
            return null;
        const mathToken = Object.assign(Object.assign({}, token), { infoString: [], lines: [
                {
                    nodePoints: token.infoString,
                    startIndex: 0,
                    endIndex: rht - countOfTailingMarker,
                    firstNonWhitespaceIndex: lft,
                    countOfPrecedeSpaces: 0,
                },
            ] });
        return { token: mathToken, nextIndex: line.endIndex, saturated: true };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const contents = coreTokenizer.mergeContentLinesFaithfully(token.lines);
            let value = character.calcStringFromNodePoints(contents);
            if (!/\n$/.test(value))
                value += '\n';
            const node = api.shouldReservePosition
                ? { type: ast.MathType, position: token.position, value }
                : { type: ast.MathType, value };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-math';

class MathTokenizer extends FencedBlockTokenizer__default["default"] {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FENCED_BLOCK,
            nodeType: ast.MathType,
            markers: [character.AsciiCodePoint.DOLLAR_SIGN],
            markersRequired: 2,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.MathTokenizer = MathTokenizer;
exports.MathTokenizerName = uniqueName;
exports["default"] = MathTokenizer;
exports.mathMatch = match;
exports.mathParse = parse;


/***/ }),

/***/ 3834:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var coreTokenizer = __nccwpck_require__(9618);

const match = function () {
    return {
        isContainingBlock: false,
        eatOpener,
        eatContinuationText,
        eatLazyContinuationText,
    };
    function eatOpener(line) {
        const { endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex)
            return null;
        const lines = [line];
        const position = coreTokenizer.calcPositionFromPhrasingContentLines(lines);
        const token = {
            nodeType: ast.ParagraphType,
            position,
            lines,
        };
        return { token, nextIndex: endIndex };
    }
    function eatContinuationText(line, token) {
        const { endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex) {
            return { status: 'notMatched' };
        }
        token.lines.push(line);
        return { status: 'opening', nextIndex: endIndex };
    }
    function eatLazyContinuationText(line, token) {
        const result = eatContinuationText(line, token);
        return result;
    }
};

const parse = function (api) {
    return {
        parse: tokens => {
            const results = [];
            for (const token of tokens) {
                const contents = coreTokenizer.mergeAndStripContentLines(token.lines);
                const children = api.processInlines(contents);
                if (children.length <= 0)
                    continue;
                const node = api.shouldReservePosition
                    ? { type: ast.ParagraphType, position: token.position, children }
                    : { type: ast.ParagraphType, children };
                results.push(node);
            }
            return results;
        },
    };
};

const uniqueName = '@yozora/tokenizer-paragraph';

class ParagraphTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FALLBACK,
        });
        this.match = match;
        this.parse = parse;
    }
    extractPhrasingContentLines(token) {
        return token.lines;
    }
    buildBlockToken(_lines) {
        const lines = coreTokenizer.trimBlankLines(_lines);
        if (lines.length <= 0)
            return null;
        const position = coreTokenizer.calcPositionFromPhrasingContentLines(lines);
        const token = {
            nodeType: ast.ParagraphType,
            lines,
            position,
        };
        return token;
    }
}

exports.ParagraphTokenizer = ParagraphTokenizer;
exports.ParagraphTokenizerName = uniqueName;
exports["default"] = ParagraphTokenizer;
exports.paragraphMatch = match;
exports.paragraphParse = parse;


/***/ }),

/***/ 1898:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function (api) {
    return {
        isContainingBlock: false,
        eatOpener,
        eatAndInterruptPreviousSibling,
    };
    function eatOpener() {
        return null;
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        const { nodePoints, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;
        if (countOfPrecedeSpaces >= 4 || firstNonWhitespaceIndex >= endIndex)
            return null;
        let marker = null, hasPotentialInternalSpace = false;
        for (let i = firstNonWhitespaceIndex; i < endIndex; ++i) {
            const c = nodePoints[i];
            if (c.codePoint == character.VirtualCodePoint.LINE_END)
                break;
            if (character.isUnicodeWhitespaceCharacter(c.codePoint)) {
                hasPotentialInternalSpace = true;
                continue;
            }
            if (hasPotentialInternalSpace ||
                (c.codePoint !== character.AsciiCodePoint.EQUALS_SIGN && c.codePoint !== character.AsciiCodePoint.MINUS_SIGN) ||
                (marker != null && marker !== c.codePoint)) {
                marker = null;
                break;
            }
            marker = c.codePoint;
        }
        if (marker == null)
            return null;
        const lines = api.extractPhrasingLines(prevSiblingToken);
        if (lines == null)
            return null;
        const nextIndex = endIndex;
        const token = {
            nodeType: ast.HeadingType,
            position: {
                start: coreTokenizer.calcStartPoint(lines[0].nodePoints, lines[0].startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            marker,
            lines,
        };
        return {
            token,
            nextIndex,
            saturated: true,
            remainingSibling: null,
        };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            let depth = 1;
            switch (token.marker) {
                case character.AsciiCodePoint.EQUALS_SIGN:
                    depth = 1;
                    break;
                case character.AsciiCodePoint.MINUS_SIGN:
                    depth = 2;
                    break;
            }
            const contents = coreTokenizer.mergeAndStripContentLines(token.lines);
            const children = api.processInlines(contents);
            const node = api.shouldReservePosition
                ? { type: ast.HeadingType, position: token.position, depth, children }
                : { type: ast.HeadingType, depth, children };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-setext-heading';

class SetextHeadingTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.SetextHeadingTokenizer = SetextHeadingTokenizer;
exports.SetextHeadingTokenizerName = uniqueName;
exports["default"] = SetextHeadingTokenizer;
exports.setextHeadingMatch = match;
exports.setextHeadingParse = parse;


/***/ }),

/***/ 6051:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function (api) {
    return {
        isContainingBlock: false,
        eatOpener,
        eatAndInterruptPreviousSibling,
        eatLazyContinuationText,
    };
    function eatOpener() {
        return null;
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { nodePoints, endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex >= endIndex)
            return null;
        const columns = [];
        let c = nodePoints[firstNonWhitespaceIndex].codePoint;
        let cIndex = c === character.AsciiCodePoint.VERTICAL_SLASH ? firstNonWhitespaceIndex + 1 : firstNonWhitespaceIndex;
        for (; cIndex < endIndex;) {
            for (; cIndex < endIndex; ++cIndex) {
                c = nodePoints[cIndex].codePoint;
                if (!character.isWhitespaceCharacter(c))
                    break;
            }
            if (cIndex >= endIndex)
                break;
            let leftColon = false;
            if (c === character.AsciiCodePoint.COLON) {
                leftColon = true;
                cIndex += 1;
            }
            let hyphenCount = 0;
            for (; cIndex < endIndex; ++cIndex) {
                c = nodePoints[cIndex].codePoint;
                if (c !== character.AsciiCodePoint.MINUS_SIGN)
                    break;
                hyphenCount += 1;
            }
            if (hyphenCount <= 0)
                return null;
            let rightColon = false;
            if (cIndex < endIndex && c === character.AsciiCodePoint.COLON) {
                rightColon = true;
                cIndex += 1;
            }
            for (; cIndex < endIndex; ++cIndex) {
                c = nodePoints[cIndex].codePoint;
                if (character.isWhitespaceCharacter(c))
                    continue;
                if (c === character.AsciiCodePoint.VERTICAL_SLASH) {
                    cIndex += 1;
                    break;
                }
                return null;
            }
            let align = null;
            if (leftColon && rightColon)
                align = 'center';
            else if (leftColon)
                align = 'left';
            else if (rightColon)
                align = 'right';
            const column = { align };
            columns.push(column);
        }
        if (columns.length <= 0)
            return null;
        const lines = api.extractPhrasingLines(prevSiblingToken);
        if (lines == null || lines.length < 1)
            return null;
        let cellCount = 0, hasNonWhitespaceBeforePipe = false;
        const previousLine = lines[lines.length - 1];
        for (let pIndex = previousLine.startIndex; pIndex < previousLine.endIndex; ++pIndex) {
            const p = nodePoints[pIndex];
            if (character.isWhitespaceCharacter(p.codePoint))
                continue;
            if (p.codePoint === character.AsciiCodePoint.VERTICAL_SLASH) {
                if (hasNonWhitespaceBeforePipe || cellCount > 0)
                    cellCount += 1;
                hasNonWhitespaceBeforePipe = false;
                continue;
            }
            hasNonWhitespaceBeforePipe = true;
            if (p.codePoint === character.AsciiCodePoint.BACKSLASH)
                pIndex += 1;
        }
        if (hasNonWhitespaceBeforePipe && columns.length > 1)
            cellCount += 1;
        if (cellCount !== columns.length)
            return null;
        const row = calcTableRow(previousLine, columns);
        const nextIndex = endIndex;
        const token = {
            nodeType: ast.TableType,
            position: {
                start: coreTokenizer.calcStartPoint(previousLine.nodePoints, previousLine.startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),
            },
            columns,
            rows: [row],
        };
        return {
            token,
            nextIndex,
            remainingSibling: api.rollbackPhrasingLines(lines.slice(0, lines.length - 1), prevSiblingToken),
        };
    }
    function eatLazyContinuationText(line, token) {
        if (line.firstNonWhitespaceIndex >= line.endIndex) {
            return { status: 'notMatched' };
        }
        const row = calcTableRow(line, token.columns);
        if (row == null)
            return { status: 'notMatched' };
        token.rows.push(row);
        return { status: 'opening', nextIndex: line.endIndex };
    }
    function calcTableRow(line, columns) {
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;
        let p = nodePoints[firstNonWhitespaceIndex];
        let i = p.codePoint === character.AsciiCodePoint.VERTICAL_SLASH
            ? firstNonWhitespaceIndex + 1
            : firstNonWhitespaceIndex;
        const cells = [];
        for (; i < endIndex; i += 1) {
            for (; i < endIndex; ++i) {
                p = nodePoints[i];
                if (!character.isWhitespaceCharacter(p.codePoint))
                    break;
            }
            const startPoint = i < endIndex ? coreTokenizer.calcStartPoint(nodePoints, i) : coreTokenizer.calcEndPoint(nodePoints, endIndex - 1);
            const cellStartIndex = i, cellFirstNonWhitespaceIndex = i;
            for (; i < endIndex; ++i) {
                p = nodePoints[i];
                if (p.codePoint === character.AsciiCodePoint.BACKSLASH) {
                    i += 1;
                    continue;
                }
                if (p.codePoint === character.AsciiCodePoint.VERTICAL_SLASH)
                    break;
            }
            let cellEndIndex = i;
            for (; cellEndIndex > cellStartIndex; --cellEndIndex) {
                const p = nodePoints[cellEndIndex - 1];
                if (!character.isWhitespaceCharacter(p.codePoint))
                    break;
            }
            const endPoint = coreTokenizer.calcEndPoint(nodePoints, i - 1);
            const lines = cellFirstNonWhitespaceIndex >= cellEndIndex
                ? []
                : [
                    {
                        nodePoints,
                        startIndex: cellStartIndex,
                        endIndex: cellEndIndex,
                        firstNonWhitespaceIndex: cellFirstNonWhitespaceIndex,
                        countOfPrecedeSpaces: cellFirstNonWhitespaceIndex - cellStartIndex,
                    },
                ];
            const cell = {
                nodeType: ast.TableCellType,
                position: { start: startPoint, end: endPoint },
                lines: lines,
            };
            cells.push(cell);
            if (cells.length >= columns.length)
                break;
        }
        const startPoint = coreTokenizer.calcStartPoint(nodePoints, startIndex);
        const endPoint = coreTokenizer.calcEndPoint(nodePoints, endIndex - 1);
        for (let c = cells.length; c < columns.length; ++c) {
            const cell = {
                nodeType: ast.TableCellType,
                position: { start: Object.assign({}, endPoint), end: Object.assign({}, endPoint) },
                lines: [],
            };
            cells.push(cell);
        }
        const row = {
            nodeType: ast.TableRowType,
            position: { start: startPoint, end: endPoint },
            cells,
        };
        return row;
    }
};

const parse = api => ({
    parse: tokens => tokens.map(token => {
        const tableRows = token.rows.map((row) => {
            const tableCells = row.cells.map((cell) => {
                const contents = [];
                {
                    const nodePoints = coreTokenizer.mergeAndStripContentLines(cell.lines);
                    for (let i = 0, endIndex = nodePoints.length; i < endIndex; ++i) {
                        const p = nodePoints[i];
                        if (p.codePoint === character.AsciiCodePoint.BACKSLASH && i + 1 < endIndex) {
                            const q = nodePoints[i + 1];
                            if (q.codePoint !== character.AsciiCodePoint.VERTICAL_SLASH)
                                contents.push(p);
                            contents.push(q);
                            i += 1;
                        }
                        else {
                            contents.push(p);
                        }
                    }
                }
                const children = api.processInlines(contents);
                const tableCell = api.shouldReservePosition
                    ? { type: ast.TableCellType, position: cell.position, children }
                    : { type: ast.TableCellType, children };
                return tableCell;
            });
            const tableRow = api.shouldReservePosition
                ? { type: ast.TableRowType, position: row.position, children: tableCells }
                : { type: ast.TableRowType, children: tableCells };
            return tableRow;
        });
        const table = api.shouldReservePosition
            ? { type: ast.TableType, position: token.position, columns: token.columns, children: tableRows }
            : { type: ast.TableType, columns: token.columns, children: tableRows };
        return table;
    }),
});

const uniqueName = '@yozora/tokenizer-table';

class TableTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.INTERRUPTABLE_BLOCK,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.TableTokenizer = TableTokenizer;
exports.TableTokenizerName = uniqueName;
exports["default"] = TableTokenizer;
exports.tableMatch = match;
exports.tableParse = parse;


/***/ }),

/***/ 2156:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var coreTokenizer = __nccwpck_require__(9618);
var character = __nccwpck_require__(8356);

const match = function () {
    return {
        findDelimiter: () => coreTokenizer.genFindDelimiter((startIndex, endIndex) => ({
            type: 'full',
            startIndex,
            endIndex,
        })),
        processSingleDelimiter: delimiter => [
            {
                nodeType: ast.TextType,
                startIndex: delimiter.startIndex,
                endIndex: delimiter.endIndex,
            },
        ],
    };
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const nodePoints = api.getNodePoints();
            let value = character.calcEscapedStringFromNodePoints(nodePoints, token.startIndex, token.endIndex);
            value = stripSpaces(value);
            const node = api.shouldReservePosition
                ? { type: ast.TextType, position: api.calcPosition(token), value }
                : { type: ast.TextType, value };
            return node;
        }),
    };
};
const _stripRegex = /[^\S\n]*\n[^\S\n]*/g;
const stripSpaces = (text) => {
    return text.replace(_stripRegex, '\n');
};

const uniqueName = '@yozora/tokenizer-text';

class TextTokenizer extends coreTokenizer.BaseInlineTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FALLBACK,
        });
        this.match = match;
        this.parse = parse;
    }
    findAndHandleDelimiter(startIndex, endIndex) {
        const token = {
            nodeType: ast.TextType,
            startIndex,
            endIndex,
        };
        return token;
    }
}

exports.TextTokenizer = TextTokenizer;
exports.TextTokenizerName = uniqueName;
exports["default"] = TextTokenizer;
exports.textMatch = match;
exports.textParse = parse;


/***/ }),

/***/ 5484:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var ast = __nccwpck_require__(395);
var character = __nccwpck_require__(8356);
var coreTokenizer = __nccwpck_require__(9618);

const match = function () {
    return {
        isContainingBlock: false,
        eatOpener,
        eatAndInterruptPreviousSibling,
    };
    function eatOpener(line) {
        if (line.countOfPrecedeSpaces >= 4)
            return null;
        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;
        if (firstNonWhitespaceIndex + 2 >= endIndex)
            return null;
        let marker;
        let count = 0;
        let continuous = true;
        let hasPotentialInternalSpace = false;
        for (let i = firstNonWhitespaceIndex; i < endIndex; ++i) {
            const c = nodePoints[i];
            if (character.isUnicodeWhitespaceCharacter(c.codePoint)) {
                hasPotentialInternalSpace = true;
                continue;
            }
            if (hasPotentialInternalSpace) {
                continuous = false;
            }
            switch (c.codePoint) {
                case character.AsciiCodePoint.MINUS_SIGN:
                case character.AsciiCodePoint.UNDERSCORE:
                case character.AsciiCodePoint.ASTERISK: {
                    if (count <= 0) {
                        marker = c.codePoint;
                        count += 1;
                        break;
                    }
                    if (c.codePoint !== marker)
                        return null;
                    count += 1;
                    break;
                }
                default:
                    return null;
            }
        }
        if (count < 3)
            return null;
        const token = {
            nodeType: ast.ThematicBreakType,
            position: {
                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),
                end: coreTokenizer.calcEndPoint(nodePoints, endIndex - 1),
            },
            marker: marker,
            continuous,
        };
        return { token, nextIndex: endIndex, saturated: true };
    }
    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {
        const result = eatOpener(line);
        if (result == null)
            return null;
        return {
            token: result.token,
            nextIndex: result.nextIndex,
            remainingSibling: prevSiblingToken,
        };
    }
};

const parse = function (api) {
    return {
        parse: tokens => tokens.map(token => {
            const node = api.shouldReservePosition
                ? { type: ast.ThematicBreakType, position: token.position }
                : { type: ast.ThematicBreakType };
            return node;
        }),
    };
};

const uniqueName = '@yozora/tokenizer-thematic-break';

class ThematicBreakTokenizer extends coreTokenizer.BaseBlockTokenizer {
    constructor(props = {}) {
        var _a, _b;
        super({
            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,
            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,
        });
        this.match = match;
        this.parse = parse;
    }
}

exports.ThematicBreakTokenizer = ThematicBreakTokenizer;
exports.ThematicBreakTokenizerName = uniqueName;
exports["default"] = ThematicBreakTokenizer;
exports.thematicBreakMatch = match;
exports.thematicBreakParse = parse;


/***/ }),

/***/ 9417:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 3717:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var concatMap = __nccwpck_require__(6891);
var balanced = __nccwpck_require__(9417);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),

/***/ 6891:
/***/ ((module) => {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ 2729:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const fs = __nccwpck_require__(7147)
const path = __nccwpck_require__(1017)

module.exports = load

function load(callback) {
  let result = {}
  let pos = -1
  let exception

  one('aff')
  one('dic')

  function one(name) {
    fs.readFile(path.join(__dirname, 'index.' + name), (error, doc) => {
      pos++
      exception = exception || error
      result[name] = doc

      if (pos) {
        callback(exception, exception ? undefined : result)
        exception = undefined
        result = undefined
      }
    })
  }
}


/***/ }),

/***/ 3819:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const logger_1 = __nccwpck_require__(6474);
/**
 * @internal
 * Build Record<string, any> object to be injected when creates runtime for asm module.
 * Modularized asm module generated via MODULARIZE=1 accepts object as its creation function allow to attach
 * properties. Using those, this function construct few essential convinient functions like awaitable runtime init.
 *
 * Note some init like exporting in-memory FS functions can't be achieved via module object but should rely on
 * preprocessor (https://github.com/kwonoj/docker-hunspell-wasm/blob/eba7781311b31028eefb8eb3e2457d11f294e076/preprocessor.js#L14-L27)
 * to access function-scope variables inside.
 *
 * @param {Record<string, any>} value pre-constructed value to be used, or empty object {}.
 * @param {string} [binaryEndpoint] Provides endpoint to server to download binary module.
 * This value is for browser only - on node.js, should rely on emscripten's default resolution.
 *
 * @returns {Record<string, any>} Augmented object with prefilled interfaces.
 */
const constructModule = (value, binaryRemoteEndpoint) => {
    const ret = {
        ...value,
        __asm_module_isInitialized__: false,
        onRuntimeInitialized: null,
        initializeRuntime: null
    };
    if (!!binaryRemoteEndpoint) {
        logger_1.log(`constructModule: binaryRemoteEndpoint found, override locateFile function`);
        ret.locateFile = (fileName) => `${binaryRemoteEndpoint}/${fileName}`;
    }
    //export initializeRuntime interface for awaitable runtime initialization
    ret.initializeRuntime = (timeout = 3000) => {
        if (ret.__asm_module_isInitialized__) {
            return Promise.resolve(true);
        }
        return new Promise((resolve, _reject) => {
            const timeoutId = setTimeout(() => resolve(false), timeout);
            //trap out preamble `abort()` function to avoid too verbose exception details
            //but only for initialization phase. Other errors will be thrown by postamble.js.
            ret.onAbort = (reason) => {
                if (!ret.__asm_module_isInitialized__) {
                    clearTimeout(timeoutId);
                    logger_1.log(`initializeRuntime: failed to initialize module`, reason);
                    throw reason instanceof Error ? reason : new Error(reason);
                }
            };
            ret.onRuntimeInitialized = () => {
                clearTimeout(timeoutId);
                ret.__asm_module_isInitialized__ = true;
                logger_1.log(`initializeRuntime: successfully initialized module`);
                resolve(true);
            };
        });
    };
    return ret;
};
exports.constructModule = constructModule;
//# sourceMappingURL=constructModule.js.map

/***/ }),

/***/ 2730:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ENVIRONMENT;
(function (ENVIRONMENT) {
    ENVIRONMENT["NODE"] = "NODE";
    ENVIRONMENT["WEB"] = "WEB";
})(ENVIRONMENT = exports.ENVIRONMENT || (exports.ENVIRONMENT = {}));
//# sourceMappingURL=environment.js.map

/***/ }),

/***/ 7366:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const constructModule_1 = __nccwpck_require__(3819);
const logger_1 = __nccwpck_require__(6474);
/**
 * Creates loader function to load and initialize wasm module.
 *
 * @param {(runtime: R) => T} factoryLoader Factory to create actual instance of implementation using loaded & initialized wasm runtime.
 *
 * @param {runtimeModuleType} runtimeModule Actual runtime to initialize.
 * It is wasm runtime loaded via plain `require` but compiled with MODULARIZED=1 preamble with SINGLE_FILE option
 * which should be function to accept asm module object to override.
 *
 * @param {Record<string, any>} [module] Record<string, any> object to be injected into wasm runtime for override/set additional value in asm module.
 *
 * @param {ModuleInitOption} [initOptions] Configuration used to initialize the module
 *
 * @returns {moduleLoaderType<T>} Loader function
 */
const getModuleLoader = (factoryLoader, runtimeModule, module, { timeout, binaryRemoteEndpoint } = {}) => async () => {
    const constructedModule = constructModule_1.constructModule(module || {}, binaryRemoteEndpoint);
    logger_1.log(`loadModule: constructed module object for runtime`);
    try {
        const asmModule = runtimeModule(constructedModule);
        const result = await asmModule.initializeRuntime(timeout);
        if (!result) {
            logger_1.log(`loadModule: failed to initialize runtime in time`);
            throw new Error(`Timeout to initialize runtime`);
        }
        logger_1.log(`loadModule: initialized wasm binary Runtime`);
        return factoryLoader(asmModule);
    }
    catch (e) {
        logger_1.log(`loadModule: failed to initialize wasm binary runtime`);
        throw e;
    }
};
exports.getModuleLoader = getModuleLoader;
//# sourceMappingURL=getModuleLoader.js.map

/***/ }),

/***/ 7789:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var environment_1 = __nccwpck_require__(2730);
exports.ENVIRONMENT = environment_1.ENVIRONMENT;
var getModuleLoader_1 = __nccwpck_require__(7366);
exports.getModuleLoader = getModuleLoader_1.getModuleLoader;
var logger_1 = __nccwpck_require__(6474);
exports.enableLogger = logger_1.enableLogger;
exports.log = logger_1.log;
var isNode_1 = __nccwpck_require__(4916);
exports.isNode = isNode_1.isNode;
var isWasmEnabled_1 = __nccwpck_require__(5456);
exports.isWasmEnabled = isWasmEnabled_1.isWasmEnabled;
var isMounted_1 = __nccwpck_require__(8570);
exports.isMounted = isMounted_1.isMounted;
var mkdirTree_1 = __nccwpck_require__(9527);
exports.mkdirTree = mkdirTree_1.mkdirTree;
var mountBuffer_1 = __nccwpck_require__(2633);
exports.mountBuffer = mountBuffer_1.mountBuffer;
var mountDirectory_1 = __nccwpck_require__(1643);
exports.mountDirectory = mountDirectory_1.mountDirectory;
var unmount_1 = __nccwpck_require__(374);
exports.unmount = unmount_1.unmount;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8570:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const logger_1 = __nccwpck_require__(6474);
/**
 * Check if given mount path is already mounted
 *
 * @param {FS} FS wasm module filesystem
 * @param {string} mountPath path to wasm filesystem
 * @param {dir | file} type type of mountPath
 *
 * @returns {boolean} true if mounted, false otherwise or error occurred
 */
const isMounted = (FS, mountPath, type) => {
    try {
        const stat = FS.stat(mountPath);
        const typeFunction = type === 'dir' ? FS.isDir : FS.isFile;
        if (!!stat && typeFunction(stat.mode)) {
            logger_1.log(`isMounted: ${mountPath} is mounted`);
            return true;
        }
    }
    catch (e) {
        if (e.code !== 'ENOENT') {
            logger_1.log(`isMounted check failed`, e);
        }
    }
    return false;
};
exports.isMounted = isMounted;
//# sourceMappingURL=isMounted.js.map

/***/ }),

/***/ 9527:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * `mkdir -p` implementation for wasm FS.mkdir interface.
 * dirPath param should be unixified.
 */
const mkdirTree = (FS, dirPath) => {
    const mkdir = (path) => {
        try {
            FS.mkdir(path);
        }
        catch (e) {
            //throw if not ERRNO_CODES.EEXIST
            if (e.errno != 17) {
                throw e;
            }
        }
    };
    dirPath
        .split('/')
        .filter(x => !!x)
        .reduce((acc, value) => {
        acc.push(`${acc.length > 0 ? acc[acc.length - 1] : ''}/${value}`);
        return acc;
    }, [])
        .forEach(mkdir);
};
exports.mkdirTree = mkdirTree;
//# sourceMappingURL=mkdirTree.js.map

/***/ }),

/***/ 2633:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const nanoid = __nccwpck_require__(1867);
const logger_1 = __nccwpck_require__(6474);
const isMounted_1 = __nccwpck_require__(8570);
/**
 * Creates a function to mount contents of file into wasm internal memory filesystem
 * to allow wasm can access.
 *
 * @param {FS} FS wasm module filesystem
 * @param {string} memPathId root path in memory filesystem to mount given arrayBuffer.
 * This prefix path is generated automatically each time wasm module is loaded.
 *
 * @return {(contents: ArrayBufferView, fileName?: string) => string} function to mount buffer under memory filesystem.
 * If filename is not provided, it'll be generated automatically. This function checks existing file mounted via filename,
 * does not validate contents of buffer to find out already mounted one.
 */
const mountBuffer = (FS, memPathId) => (contents, fileName) => {
    const file = fileName || nanoid(45);
    const mountedFilePath = `${memPathId}/${file}`;
    if (isMounted_1.isMounted(FS, mountedFilePath, 'file')) {
        logger_1.log(`mountTypedArrayFile: file is already mounted, return it`);
    }
    else {
        FS.writeFile(mountedFilePath, contents, { encoding: 'binary' });
    }
    return mountedFilePath;
};
exports.mountBuffer = mountBuffer;
/**
 * Stub function to support `browser` field in package.json. Do not use.
 *
 * @internal
 */
const mountDirectory = () => {
    throw new Error('not supported');
};
exports.mountDirectory = mountDirectory;
//# sourceMappingURL=mountBuffer.js.map

/***/ }),

/***/ 1643:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const unixify = __nccwpck_require__(1011);
const isNode_1 = __nccwpck_require__(4916);
const logger_1 = __nccwpck_require__(6474);
const isMounted_1 = __nccwpck_require__(8570);
const mkdirTree_1 = __nccwpck_require__(9527);
/**
 * Creates a function to mount phsyical path into wasm internal memory filesystem
 * to allow wasm can access phsyical file directly.
 *
 * @param {FS} FS wasm module filesystem
 * @param {string} nodePathId root path in memory filesystem to mount given path under.
 * This prefix path is generated automatically each time wasm module is loaded.
 *
 * @return {(dirPath: string) => string} function to mount given phsical path under memory filesystem.
 */
const mountDirectory = (FS, nodePathId) => (dirPath) => {
    if (!isNode_1.isNode()) {
        throw new Error('Mounting physical directory is not supported other than node.js environment');
    }
    const path = __nccwpck_require__(1017); //tslint:disable-line:no-require-imports
    const mountedDirPath = unixify(path.join(nodePathId, unixify(path.resolve(dirPath))));
    if (isMounted_1.isMounted(FS, mountedDirPath, 'dir')) {
        logger_1.log(`mountNodeFile: file is already mounted, return it`);
    }
    else {
        mkdirTree_1.mkdirTree(FS, mountedDirPath);
        FS.mount(FS.filesystems.NODEFS, { root: path.resolve(dirPath) }, mountedDirPath);
    }
    return mountedDirPath;
};
exports.mountDirectory = mountDirectory;
//# sourceMappingURL=mountDirectory.js.map

/***/ }),

/***/ 374:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const logger_1 = __nccwpck_require__(6474);
const isMounted_1 = __nccwpck_require__(8570);
/**
 * Creates a function to unmount file or directory in wasm internal memory filesystem
 * If given mounted path prefix is pointing internal buffer file mounted via `mountBuffer`,
 * it'll be removed. Otherwise it'll be unmounted and remove internal directory.
 *
 * @param {FS} FS wasm module filesystem
 * @param {string} memPathId root path in memory filesystem to determine given unmount path is physical directory or buffer.
 * This prefix path is generated automatically each time wasm module is loaded.
 *
 * @return {(mountedPath: string) => void} function to unmount given path under memory filesystem.
 */
const unmount = (FS, memPathId) => (mountedPath) => {
    if (isMounted_1.isMounted(FS, mountedPath, 'file') && mountedPath.indexOf(memPathId) > -1) {
        logger_1.log(`unmount: ${mountedPath} is typedArrayFile, unlink from memory`);
        FS.unlink(mountedPath);
        return;
    }
    if (isMounted_1.isMounted(FS, mountedPath, 'dir')) {
        logger_1.log(`unmount: ${mountedPath} is directory, unmount`);
        FS.unmount(mountedPath);
        FS.rmdir(mountedPath);
        return;
    }
};
exports.unmount = unmount;
//# sourceMappingURL=unmount.js.map

/***/ }),

/***/ 4916:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const getroot_1 = __nccwpck_require__(8550);
/**
 * Naïvely detect if running environment if node
 * Note this'll return true on Electron's renderer process as well
 */
exports.isNode = () => {
    const proc = getroot_1.root.process;
    if (!!proc && typeof proc === 'object') {
        if (!!proc.versions && typeof proc.versions === 'object') {
            if (typeof proc.versions.node !== 'undefined') {
                return true;
            }
        }
    }
    return false;
};
//# sourceMappingURL=isNode.js.map

/***/ }),

/***/ 5456:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const getroot_1 = __nccwpck_require__(8550);
/**
 * Naïvely check if current runtime supports native web assembly.
 */
exports.isWasmEnabled = () => !!getroot_1.root.WebAssembly && !!getroot_1.root.WebAssembly.compile && !!getroot_1.root.WebAssembly.instantiate;
//# sourceMappingURL=isWasmEnabled.js.map

/***/ }),

/***/ 6474:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Default log instance falls back to noop if not specified.
 */
let logInstance = () => {
    /* noop */
};
const log = (...args) => logInstance(...args);
exports.log = log;
/**
 * Enables logging internal behavior of hunspell-asm.
 * @param logger function to log.
 */
const enableLogger = (logger) => (logInstance = logger);
exports.enableLogger = enableLogger;
//# sourceMappingURL=logger.js.map

/***/ }),

/***/ 8550:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _root = __window || __global || __self;
exports.root = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('Could not find any global context (window, self, global)');
    }
})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1904:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const emscripten_wasm_loader_1 = __nccwpck_require__(7789);
const nanoid = __nccwpck_require__(1867);
const logger_1 = __nccwpck_require__(9353);
const wrapHunspellInterface_1 = __nccwpck_require__(567);
/**
 * Creates a factory function for mounting files into wasm filesystem
 * and creating hunspell instance.
 *
 * @param {HunspellAsmModule} asmModule wasm / asm module loaded into memory.
 *
 * @return {HunspellFactory} factory function for mounting files and creating hunspell instance.
 */
/** @internal */
exports.hunspellLoader = (asmModule) => {
    const { cwrap, FS, _free, allocateUTF8, _malloc, getValue, UTF8ToString } = asmModule;
    const hunspellInterface = wrapHunspellInterface_1.wrapHunspellInterface(cwrap);
    //creating top-level path to mount files
    const memPathId = `/${nanoid(45)}`;
    FS.mkdir(memPathId);
    logger_1.log(`hunspellLoader: mount path for bufferFile created at ${memPathId}`);
    /**
     * Naive auto-dispose interface to call hunspell interface with string params.
     *
     */
    const usingParamPtr = (...args) => {
        const params = [...args];
        const fn = params.pop();
        //https://mathiasbynens.be/notes/javascript-unicode
        const paramsPtr = params.map((param) => allocateUTF8(param.normalize()));
        const ret = fn(...paramsPtr);
        paramsPtr.forEach(paramPtr => _free(paramPtr));
        return ret;
    };
    return {
        mountBuffer: emscripten_wasm_loader_1.mountBuffer(FS, memPathId),
        unmount: emscripten_wasm_loader_1.unmount(FS, memPathId),
        create: (affPath, dictPath) => {
            const affPathPtr = allocateUTF8(affPath);
            const dictPathPtr = allocateUTF8(dictPath);
            const hunspellPtr = hunspellInterface.create(affPathPtr, dictPathPtr);
            return {
                dispose: () => {
                    hunspellInterface.destroy(hunspellPtr);
                    _free(affPathPtr);
                    _free(dictPathPtr);
                },
                spell: (word) => !!usingParamPtr(word, wordPtr => hunspellInterface.spell(hunspellPtr, wordPtr)),
                suggest: (word) => {
                    const suggestionListPtr = _malloc(4);
                    const suggestionCount = usingParamPtr(word, wordPtr => hunspellInterface.suggest(hunspellPtr, suggestionListPtr, wordPtr));
                    const suggestionListValuePtr = getValue(suggestionListPtr, '*');
                    const ret = suggestionCount > 0
                        ? Array.from(Array(suggestionCount).keys()).map(idx => UTF8ToString(getValue(suggestionListValuePtr + idx * 4, '*')))
                        : [];
                    hunspellInterface.free_list(hunspellPtr, suggestionListPtr, suggestionCount);
                    _free(suggestionListPtr);
                    return ret;
                },
                addDictionary: (dictPath) => usingParamPtr(dictPath, dictPathPtr => hunspellInterface.add_dic(hunspellPtr, dictPathPtr)) === 1
                    ? false
                    : true,
                addWord: (word) => usingParamPtr(word, wordPtr => hunspellInterface.add(hunspellPtr, wordPtr)),
                addWordWithAffix: (word, affix) => usingParamPtr(word, affix, (wordPtr, affixPtr) => hunspellInterface.add_with_affix(hunspellPtr, wordPtr, affixPtr)),
                removeWord: (word) => usingParamPtr(word, wordPtr => hunspellInterface.remove(hunspellPtr, wordPtr))
            };
        }
    };
};
//# sourceMappingURL=hunspellLoader.js.map

/***/ }),

/***/ 4517:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var loadModule_1 = __nccwpck_require__(5105);
exports.loadModule = loadModule_1.loadModule;
var logger_1 = __nccwpck_require__(9353);
exports.log = logger_1.log;
exports.enableLogger = logger_1.enableLogger;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2450:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!=="undefined"?Module:{};Module["preRun"]=function(){Module.FS={filesystems:FS.filesystems,stat:FS.stat,isDir:FS.isDir,isFile:FS.isFile,mkdir:FS.mkdir,mount:FS.mount,writeFile:FS.writeFile,unlink:FS.unlink,unmount:FS.unmount,rmdir:FS.rmdir}};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=true;if(Module["ENVIRONMENT"]){throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)")}var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readBinary;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(!(typeof process==="object"&&"function"==="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");scriptDirectory=__dirname+"/";read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=__nccwpck_require__(7147);if(!nodePath)nodePath=__nccwpck_require__(1017);filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});quit_=function(status){process["exit"](status)};Module["inspect"]=function(){return"[Emscripten Module object]"}}else{throw new Error("environment detection error")}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(!Object.getOwnPropertyDescriptor(Module,"arguments"))Object.defineProperty(Module,"arguments",{configurable:true,get:function(){abort("Module.arguments has been replaced with plain arguments_")}});if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(!Object.getOwnPropertyDescriptor(Module,"thisProgram"))Object.defineProperty(Module,"thisProgram",{configurable:true,get:function(){abort("Module.thisProgram has been replaced with plain thisProgram")}});if(Module["quit"])quit_=Module["quit"];if(!Object.getOwnPropertyDescriptor(Module,"quit"))Object.defineProperty(Module,"quit",{configurable:true,get:function(){abort("Module.quit has been replaced with plain quit_")}});assert(typeof Module["memoryInitializerPrefixURL"]==="undefined","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["pthreadMainPrefixURL"]==="undefined","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["cdInitializerPrefixURL"]==="undefined","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["filePackagePrefixURL"]==="undefined","Module.filePackagePrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["read"]==="undefined","Module.read option was removed (modify read_ in JS)");assert(typeof Module["readAsync"]==="undefined","Module.readAsync option was removed (modify readAsync in JS)");assert(typeof Module["readBinary"]==="undefined","Module.readBinary option was removed (modify readBinary in JS)");assert(typeof Module["setWindowTitle"]==="undefined","Module.setWindowTitle option was removed (modify setWindowTitle in JS)");if(!Object.getOwnPropertyDescriptor(Module,"read"))Object.defineProperty(Module,"read",{configurable:true,get:function(){abort("Module.read has been replaced with plain read_")}});if(!Object.getOwnPropertyDescriptor(Module,"readAsync"))Object.defineProperty(Module,"readAsync",{configurable:true,get:function(){abort("Module.readAsync has been replaced with plain readAsync")}});if(!Object.getOwnPropertyDescriptor(Module,"readBinary"))Object.defineProperty(Module,"readBinary",{configurable:true,get:function(){abort("Module.readBinary has been replaced with plain readBinary")}});var STACK_ALIGN=16;stackSave=stackRestore=stackAlloc=function(){abort("cannot use the stack before compiled code is ready to run, and has provided stack access")};function dynamicAlloc(size){assert(DYNAMICTOP_PTR);var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end>_emscripten_get_heap_size()){abort("failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly")}HEAP32[DYNAMICTOP_PTR>>2]=end;return ret}function getNativeTypeSize(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return 4}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0,"getNativeTypeSize invalid bits "+bits+", type "+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}function convertJsFunctionToWasm(func,sig){if(typeof WebAssembly.Function==="function"){var typeNames={"i":"i32","j":"i64","f":"f32","d":"f64"};var type={parameters:[],results:sig[0]=="v"?[]:[typeNames[sig[0]]]};for(var i=1;i<sig.length;++i){type.parameters.push(typeNames[sig[i]])}return new WebAssembly.Function(type,func)}var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={"i":127,"j":126,"f":125,"d":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet=="v"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{"e":{"f":func}});var wrappedFunc=instance.exports["f"];return wrappedFunc}function addFunctionWasm(func,sig){var table=wasmTable;var ret=table.length;try{table.grow(1)}catch(err){if(!(err instanceof RangeError)){throw err}throw"Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH."}try{table.set(ret,func)}catch(err){if(!(err instanceof TypeError)){throw err}assert(typeof sig!=="undefined","Missing signature argument to addFunction");var wrapped=convertJsFunctionToWasm(func,sig);table.set(ret,wrapped)}return ret}function removeFunctionWasm(index){}var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){assert(args.length==sig.length-1);assert("dynCall_"+sig in Module,"bad function pointer type - no table for sig '"+sig+"'");return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}else{assert(sig.length==1);assert("dynCall_"+sig in Module,"bad function pointer type - no table for sig '"+sig+"'");return Module["dynCall_"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];if(!Object.getOwnPropertyDescriptor(Module,"wasmBinary"))Object.defineProperty(Module,"wasmBinary",{configurable:true,get:function(){abort("Module.wasmBinary has been replaced with plain wasmBinary")}});var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(!Object.getOwnPropertyDescriptor(Module,"noExitRuntime"))Object.defineProperty(Module,"noExitRuntime",{configurable:true,get:function(){abort("Module.noExitRuntime has been replaced with plain noExitRuntime")}});if(typeof WebAssembly!=="object"){abort("No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.")}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}var wasmMemory;var wasmTable=new WebAssembly.Table({"initial":350,"maximum":350+0,"element":"anyfunc"});var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={"string":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},"array":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType==="string")return UTF8ToString(ret);if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;assert(returnType!=="array",'Return type should not be "array".');if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function cwrap(ident,returnType,argTypes,opts){return function(){return ccall(ident,returnType,argTypes,arguments,opts)}}var ALLOC_NONE=3;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,stackAlloc,dynamicAlloc][allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var stop;ptr=ret;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];type=singleType||types[i];if(type===0){i++;continue}assert(type,"Must know what type to store in allocate!");if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{if((u0&248)!=240)warnOnce("Invalid UTF-8 leading byte 0x"+u0.toString(16)+" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!");u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;if(u>=2097152)warnOnce("Invalid Unicode code point 0x"+u.toString(16)+" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).");outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){assert(typeof maxBytesToWrite=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){assert(array.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)");HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){assert(str.charCodeAt(i)===str.charCodeAt(i)&255);HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var STACK_BASE=5395312,STACK_MAX=152432,DYNAMIC_BASE=5395312,DYNAMICTOP_PTR=152272;assert(STACK_BASE%16===0,"stack must start aligned");assert(DYNAMIC_BASE%16===0,"heap must start aligned");var TOTAL_STACK=5242880;if(Module["TOTAL_STACK"])assert(TOTAL_STACK===Module["TOTAL_STACK"],"the stack size can no longer be determined at runtime");var INITIAL_TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(!Object.getOwnPropertyDescriptor(Module,"TOTAL_MEMORY"))Object.defineProperty(Module,"TOTAL_MEMORY",{configurable:true,get:function(){abort("Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY")}});assert(INITIAL_TOTAL_MEMORY>=TOTAL_STACK,"TOTAL_MEMORY should be larger than TOTAL_STACK, was "+INITIAL_TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&Int32Array.prototype.subarray!==undefined&&Int32Array.prototype.set!==undefined,"JS engine does not provide full typed array support");if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"]}else{wasmMemory=new WebAssembly.Memory({"initial":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_TOTAL_MEMORY=buffer.byteLength;assert(INITIAL_TOTAL_MEMORY%WASM_PAGE_SIZE===0);updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function writeStackCookie(){assert((STACK_MAX&3)==0);HEAPU32[(STACK_MAX>>2)+1]=34821223;HEAPU32[(STACK_MAX>>2)+2]=2310721022;HEAP32[0]=1668509029}function checkStackCookie(){var cookie1=HEAPU32[(STACK_MAX>>2)+1];var cookie2=HEAPU32[(STACK_MAX>>2)+2];if(cookie1!=34821223||cookie2!=2310721022){abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x"+cookie2.toString(16)+" "+cookie1.toString(16))}if(HEAP32[0]!==1668509029)abort("Runtime error: The application has corrupted its heap memory area (address zero)!")}function abortStackOverflow(allocSize){abort("Stack overflow! Attempted to allocate "+allocSize+" bytes on the stack, but stack has only "+(STACK_MAX-stackSave()+allocSize)+" bytes available!")}(function(){var h16=new Int16Array(1);var h8=new Int8Array(h16.buffer);h16[0]=25459;if(h8[0]!==115||h8[1]!==99)throw"Runtime error: expected the system to be little-endian!"})();function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){checkStackCookie();assert(!runtimeInitialized);runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__)}function preMain(){checkStackCookie();FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){checkStackCookie();runtimeExited=true}function postRun(){checkStackCookie();if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}assert(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;var runDependencyTracking={};function getUniqueRunDependency(id){var orig=id;while(1){if(!runDependencyTracking[id])return id;id=orig+Math.random()}return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(id){assert(!runDependencyTracking[id]);runDependencyTracking[id]=1;if(runDependencyWatcher===null&&typeof setInterval!=="undefined"){runDependencyWatcher=setInterval(function(){if(ABORT){clearInterval(runDependencyWatcher);runDependencyWatcher=null;return}var shown=false;for(var dep in runDependencyTracking){if(!shown){shown=true;err("still waiting on run dependencies:")}err("dependency: "+dep)}if(shown){err("(end of list)")}},1e4)}}else{err("warning: run dependency added without ID")}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(id){assert(runDependencyTracking[id]);delete runDependencyTracking[id]}else{err("warning: run dependency removed without ID")}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what+="";out(what);err(what);ABORT=true;EXITSTATUS=1;var output="abort("+what+") at "+stackTrace();what=output;throw new WebAssembly.RuntimeError(what)}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile="data:application/octet-stream;base64,";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(wasmBinaryFile);if(binary){return binary}if(readBinary){return readBinary(wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={"env":asmLibraryArg,"wasi_snapshot_preview1":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");var trueModule=Module;function receiveInstantiatedSource(output){assert(Module===trueModule,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");trueModule=null;receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return{}}var tempDouble;var tempI64;__ATINIT__.push({func:function(){___wasm_call_ctors()}});function demangle(func){warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return func}function demangleAll(text){var regex=/\b_Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}function ___cxa_allocate_exception(size){return _malloc(size)}function _atexit(func,arg){warnOnce("atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)");__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(){return _atexit.apply(null,arguments)}var ___exception_infos={};var ___exception_last=0;function ___cxa_throw(ptr,type,destructor){___exception_infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};___exception_last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exceptions=1}else{__ZSt18uncaught_exceptionv.uncaught_exceptions++}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function ___handle_stack_overflow(){abort("stack overflow")}function ___lock(){}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;else err("failed to set errno from JS");return value}function ___map_file(pathname,size){___setErrNo(63);return-1}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().indexOf("EOF")!=-1)bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name]},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name]},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){assert(!(buffer instanceof ArrayBuffer));if(buffer.buffer===HEAP8.buffer){if(canOwn){warnOnce("file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)")}canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){assert(position===0,"canOwn must imply no weird position inside the file");node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,buffer,offset,length,position,prot,flags){assert(!(buffer instanceof ArrayBuffer));if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer.buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;var fromHeap=buffer.buffer==HEAP8.buffer;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(48)}(fromHeap?HEAP8:buffer).set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(err){assert(FS.syncFSRequests>0);FS.syncFSRequests--;return callback(err)}function done(err){if(err){if(!done.errored){done.errored=true;return doCallback(err)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){if(typeof type==="string"){throw type}var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(10)}if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,buffer,offset,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);random_device=function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=__nccwpck_require__(6113);random_device=function(){return crypto_module["randomBytes"](1)[0]}}catch(e){}}else{}if(!random_device){random_device=function(){abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");var stdout=FS.open("/dev/stdout","w");var stderr=FS.open("/dev/stderr","w");assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}};this.setErrno(errno);this.message=ERRNO_MESSAGES[errno];if(this.stack){Object.defineProperty(this,"stack",{value:(new Error).stack,writable:true});this.stack=demangleAll(this.stack)}};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},joinPath:function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path},absolutePath:function(relative,base){return PATH_FS.resolve(base,relative)},standardizePath:function(path){return PATH.normalize(path)},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createFolder:function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},createLink:function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(29);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}path=PATH.join2(dir,path)}return path},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=new Uint8Array(HEAPU8.subarray(addr,addr+len));FS.msync(stream,buffer,offset,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},getStreamFromFD:function(fd){if(fd===undefined)fd=SYSCALLS.get();var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low},getZero:function(){assert(SYSCALLS.get()===0)}};function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return-28;case 9:___setErrNo(28);return-1;default:{return-28}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),op=SYSCALLS.get();switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;return 0}case 21524:{if(!stream.tty)return-59;return 0}default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function __emscripten_syscall_munmap(addr,len){if(addr===-1||len===0){return-28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);SYSCALLS.doMsync(addr,stream,len,info.flags,info.offset);FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}function ___syscall91(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get();return __emscripten_syscall_munmap(addr,len)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}function _abort(){abort()}function _clock(){if(_clock.start===undefined)_clock.start=Date.now();return(Date.now()-_clock.start)*(1e6/1e3)|0}function _emscripten_get_heap_size(){return HEAP8.length}function _emscripten_get_sbrk_ptr(){return 152272}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){console.error("emscripten_realloc_buffer: Attempted to grow heap from "+buffer.byteLength+" bytes to "+size+" bytes, but got error: "+e)}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();assert(requestedSize>oldSize);var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648-PAGE_MULTIPLE;if(requestedSize>maxHeapSize){err("Cannot enlarge memory, asked to go up to "+requestedSize+" bytes, but the limit is "+maxHeapSize+" bytes!");return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}err("Failed to grow the heap from "+oldSize+" bytes to "+newSize+" bytes, not enough memory!");return false}var ENV={};function _emscripten_get_environ(){if(!_emscripten_get_environ.strings){var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8","_":thisProgram};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+"="+env[x])}_emscripten_get_environ.strings=strings}return _emscripten_get_environ.strings}function _environ_get(__environ,environ_buf){var strings=_emscripten_get_environ();var bufSize=0;strings.forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=_emscripten_get_environ();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _setTempRet0($i){setTempRet0($i|0)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}FS.staticInit();var ASSERTIONS=true;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var decodeBase64=typeof atob==="function"?atob:function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64")}catch(_){buf=new Buffer(s,"base64")}return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={"__cxa_allocate_exception":___cxa_allocate_exception,"__cxa_atexit":___cxa_atexit,"__cxa_throw":___cxa_throw,"__handle_stack_overflow":___handle_stack_overflow,"__lock":___lock,"__map_file":___map_file,"__syscall221":___syscall221,"__syscall5":___syscall5,"__syscall54":___syscall54,"__syscall91":___syscall91,"__unlock":___unlock,"abort":_abort,"clock":_clock,"emscripten_get_sbrk_ptr":_emscripten_get_sbrk_ptr,"emscripten_memcpy_big":_emscripten_memcpy_big,"emscripten_resize_heap":_emscripten_resize_heap,"environ_get":_environ_get,"environ_sizes_get":_environ_sizes_get,"fd_close":_fd_close,"fd_read":_fd_read,"fd_seek":_fd_seek,"fd_write":_fd_write,"memory":wasmMemory,"setTempRet0":_setTempRet0,"strftime_l":_strftime_l,"table":wasmTable};var asm=createWasm();var real____wasm_call_ctors=asm["__wasm_call_ctors"];asm["__wasm_call_ctors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____wasm_call_ctors.apply(null,arguments)};var real__Hunspell_free_list=asm["Hunspell_free_list"];asm["Hunspell_free_list"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_free_list.apply(null,arguments)};var real__Hunspell_suggest=asm["Hunspell_suggest"];asm["Hunspell_suggest"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_suggest.apply(null,arguments)};var real__Hunspell_create=asm["Hunspell_create"];asm["Hunspell_create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_create.apply(null,arguments)};var real__Hunspell_destroy=asm["Hunspell_destroy"];asm["Hunspell_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_destroy.apply(null,arguments)};var real__Hunspell_add_dic=asm["Hunspell_add_dic"];asm["Hunspell_add_dic"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_add_dic.apply(null,arguments)};var real__Hunspell_spell=asm["Hunspell_spell"];asm["Hunspell_spell"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_spell.apply(null,arguments)};var real__Hunspell_add=asm["Hunspell_add"];asm["Hunspell_add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_add.apply(null,arguments)};var real__Hunspell_add_with_affix=asm["Hunspell_add_with_affix"];asm["Hunspell_add_with_affix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_add_with_affix.apply(null,arguments)};var real__Hunspell_remove=asm["Hunspell_remove"];asm["Hunspell_remove"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Hunspell_remove.apply(null,arguments)};var real__fflush=asm["fflush"];asm["fflush"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fflush.apply(null,arguments)};var real____errno_location=asm["__errno_location"];asm["__errno_location"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____errno_location.apply(null,arguments)};var real__setThrew=asm["setThrew"];asm["setThrew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setThrew.apply(null,arguments)};var real___ZSt18uncaught_exceptionv=asm["_ZSt18uncaught_exceptionv"];asm["_ZSt18uncaught_exceptionv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt18uncaught_exceptionv.apply(null,arguments)};var real__malloc=asm["malloc"];asm["malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc.apply(null,arguments)};var real__free=asm["free"];asm["free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__free.apply(null,arguments)};var real____set_stack_limit=asm["__set_stack_limit"];asm["__set_stack_limit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____set_stack_limit.apply(null,arguments)};var real_stackSave=asm["stackSave"];asm["stackSave"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackSave.apply(null,arguments)};var real_stackAlloc=asm["stackAlloc"];asm["stackAlloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackAlloc.apply(null,arguments)};var real_stackRestore=asm["stackRestore"];asm["stackRestore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackRestore.apply(null,arguments)};var real___growWasmMemory=asm["__growWasmMemory"];asm["__growWasmMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___growWasmMemory.apply(null,arguments)};var real_dynCall_ii=asm["dynCall_ii"];asm["dynCall_ii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_ii.apply(null,arguments)};var real_dynCall_iiii=asm["dynCall_iiii"];asm["dynCall_iiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiii.apply(null,arguments)};var real_dynCall_jiji=asm["dynCall_jiji"];asm["dynCall_jiji"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_jiji.apply(null,arguments)};var real_dynCall_iidiiii=asm["dynCall_iidiiii"];asm["dynCall_iidiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iidiiii.apply(null,arguments)};var real_dynCall_vii=asm["dynCall_vii"];asm["dynCall_vii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_vii.apply(null,arguments)};var real_dynCall_vi=asm["dynCall_vi"];asm["dynCall_vi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_vi.apply(null,arguments)};var real_dynCall_viiiiii=asm["dynCall_viiiiii"];asm["dynCall_viiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viiiiii.apply(null,arguments)};var real_dynCall_viiiii=asm["dynCall_viiiii"];asm["dynCall_viiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viiiii.apply(null,arguments)};var real_dynCall_viiii=asm["dynCall_viiii"];asm["dynCall_viiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viiii.apply(null,arguments)};var real_dynCall_viijii=asm["dynCall_viijii"];asm["dynCall_viijii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viijii.apply(null,arguments)};var real_dynCall_iii=asm["dynCall_iii"];asm["dynCall_iii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iii.apply(null,arguments)};var real_dynCall_v=asm["dynCall_v"];asm["dynCall_v"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_v.apply(null,arguments)};var real_dynCall_iiiii=asm["dynCall_iiiii"];asm["dynCall_iiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiii.apply(null,arguments)};var real_dynCall_iiiiii=asm["dynCall_iiiiii"];asm["dynCall_iiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiii.apply(null,arguments)};var real_dynCall_iiiiiiiii=asm["dynCall_iiiiiiiii"];asm["dynCall_iiiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiiiiii.apply(null,arguments)};var real_dynCall_iiiiiii=asm["dynCall_iiiiiii"];asm["dynCall_iiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiiii.apply(null,arguments)};var real_dynCall_iiiiij=asm["dynCall_iiiiij"];asm["dynCall_iiiiij"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiij.apply(null,arguments)};var real_dynCall_iiiiid=asm["dynCall_iiiiid"];asm["dynCall_iiiiid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiid.apply(null,arguments)};var real_dynCall_iiiiijj=asm["dynCall_iiiiijj"];asm["dynCall_iiiiijj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiijj.apply(null,arguments)};var real_dynCall_iiiiiiii=asm["dynCall_iiiiiiii"];asm["dynCall_iiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiiiii.apply(null,arguments)};var real_dynCall_iiiiiijj=asm["dynCall_iiiiiijj"];asm["dynCall_iiiiiijj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiiijj.apply(null,arguments)};Module["asm"]=asm;var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__wasm_call_ctors"].apply(null,arguments)};var _Hunspell_free_list=Module["_Hunspell_free_list"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_free_list"].apply(null,arguments)};var _Hunspell_suggest=Module["_Hunspell_suggest"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_suggest"].apply(null,arguments)};var _Hunspell_create=Module["_Hunspell_create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_create"].apply(null,arguments)};var _Hunspell_destroy=Module["_Hunspell_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_destroy"].apply(null,arguments)};var _Hunspell_add_dic=Module["_Hunspell_add_dic"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_add_dic"].apply(null,arguments)};var _Hunspell_spell=Module["_Hunspell_spell"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_spell"].apply(null,arguments)};var _Hunspell_add=Module["_Hunspell_add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_add"].apply(null,arguments)};var _Hunspell_add_with_affix=Module["_Hunspell_add_with_affix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_add_with_affix"].apply(null,arguments)};var _Hunspell_remove=Module["_Hunspell_remove"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Hunspell_remove"].apply(null,arguments)};var _fflush=Module["_fflush"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fflush"].apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__errno_location"].apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setThrew"].apply(null,arguments)};var __ZSt18uncaught_exceptionv=Module["__ZSt18uncaught_exceptionv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null,arguments)};var _malloc=Module["_malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc"].apply(null,arguments)};var _free=Module["_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["free"].apply(null,arguments)};var ___set_stack_limit=Module["___set_stack_limit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__set_stack_limit"].apply(null,arguments)};var stackSave=Module["stackSave"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stackSave"].apply(null,arguments)};var stackAlloc=Module["stackAlloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stackAlloc"].apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stackRestore"].apply(null,arguments)};var __growWasmMemory=Module["__growWasmMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__growWasmMemory"].apply(null,arguments)};var dynCall_ii=Module["dynCall_ii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_ii"].apply(null,arguments)};var dynCall_iiii=Module["dynCall_iiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiii"].apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_jiji"].apply(null,arguments)};var dynCall_iidiiii=Module["dynCall_iidiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iidiiii"].apply(null,arguments)};var dynCall_vii=Module["dynCall_vii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_vii"].apply(null,arguments)};var dynCall_vi=Module["dynCall_vi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_vi"].apply(null,arguments)};var dynCall_viiiiii=Module["dynCall_viiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viiiiii"].apply(null,arguments)};var dynCall_viiiii=Module["dynCall_viiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viiiii"].apply(null,arguments)};var dynCall_viiii=Module["dynCall_viiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viiii"].apply(null,arguments)};var dynCall_viijii=Module["dynCall_viijii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viijii"].apply(null,arguments)};var dynCall_iii=Module["dynCall_iii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iii"].apply(null,arguments)};var dynCall_v=Module["dynCall_v"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_v"].apply(null,arguments)};var dynCall_iiiii=Module["dynCall_iiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiii"].apply(null,arguments)};var dynCall_iiiiii=Module["dynCall_iiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiii"].apply(null,arguments)};var dynCall_iiiiiiiii=Module["dynCall_iiiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiiiiii"].apply(null,arguments)};var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiiii"].apply(null,arguments)};var dynCall_iiiiij=Module["dynCall_iiiiij"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiij"].apply(null,arguments)};var dynCall_iiiiid=Module["dynCall_iiiiid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiid"].apply(null,arguments)};var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiijj"].apply(null,arguments)};var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiiiii"].apply(null,arguments)};var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiiijj"].apply(null,arguments)};Module["asm"]=asm;if(!Object.getOwnPropertyDescriptor(Module,"intArrayFromString"))Module["intArrayFromString"]=function(){abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"intArrayToString"))Module["intArrayToString"]=function(){abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"ccall"))Module["ccall"]=function(){abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["cwrap"]=cwrap;if(!Object.getOwnPropertyDescriptor(Module,"setValue"))Module["setValue"]=function(){abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["getValue"]=getValue;if(!Object.getOwnPropertyDescriptor(Module,"allocate"))Module["allocate"]=function(){abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getMemory"))Module["getMemory"]=function(){abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"AsciiToString"))Module["AsciiToString"]=function(){abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stringToAscii"))Module["stringToAscii"]=function(){abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"UTF8ArrayToString"))Module["UTF8ArrayToString"]=function(){abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["UTF8ToString"]=UTF8ToString;if(!Object.getOwnPropertyDescriptor(Module,"stringToUTF8Array"))Module["stringToUTF8Array"]=function(){abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["stringToUTF8"]=stringToUTF8;if(!Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF8"))Module["lengthBytesUTF8"]=function(){abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"UTF16ToString"))Module["UTF16ToString"]=function(){abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stringToUTF16"))Module["stringToUTF16"]=function(){abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF16"))Module["lengthBytesUTF16"]=function(){abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"UTF32ToString"))Module["UTF32ToString"]=function(){abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stringToUTF32"))Module["stringToUTF32"]=function(){abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF32"))Module["lengthBytesUTF32"]=function(){abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["allocateUTF8"]=allocateUTF8;if(!Object.getOwnPropertyDescriptor(Module,"stackTrace"))Module["stackTrace"]=function(){abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnPreRun"))Module["addOnPreRun"]=function(){abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnInit"))Module["addOnInit"]=function(){abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnPreMain"))Module["addOnPreMain"]=function(){abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnExit"))Module["addOnExit"]=function(){abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnPostRun"))Module["addOnPostRun"]=function(){abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"writeStringToMemory"))Module["writeStringToMemory"]=function(){abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"writeArrayToMemory"))Module["writeArrayToMemory"]=function(){abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"writeAsciiToMemory"))Module["writeAsciiToMemory"]=function(){abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addRunDependency"))Module["addRunDependency"]=function(){abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"removeRunDependency"))Module["removeRunDependency"]=function(){abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"ENV"))Module["ENV"]=function(){abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"FS"))Module["FS"]=function(){abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"FS_createFolder"))Module["FS_createFolder"]=function(){abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"FS_createPath"))Module["FS_createPath"]=function(){abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"FS_createDataFile"))Module["FS_createDataFile"]=function(){abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"FS_createPreloadedFile"))Module["FS_createPreloadedFile"]=function(){abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"FS_createLazyFile"))Module["FS_createLazyFile"]=function(){abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"FS_createLink"))Module["FS_createLink"]=function(){abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"FS_createDevice"))Module["FS_createDevice"]=function(){abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"FS_unlink"))Module["FS_unlink"]=function(){abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")};if(!Object.getOwnPropertyDescriptor(Module,"GL"))Module["GL"]=function(){abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"dynamicAlloc"))Module["dynamicAlloc"]=function(){abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"loadDynamicLibrary"))Module["loadDynamicLibrary"]=function(){abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"loadWebAssemblyModule"))Module["loadWebAssemblyModule"]=function(){abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getLEB"))Module["getLEB"]=function(){abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getFunctionTables"))Module["getFunctionTables"]=function(){abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"alignFunctionTables"))Module["alignFunctionTables"]=function(){abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"registerFunctions"))Module["registerFunctions"]=function(){abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addFunction"))Module["addFunction"]=function(){abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"removeFunction"))Module["removeFunction"]=function(){abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getFuncWrapper"))Module["getFuncWrapper"]=function(){abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"prettyPrint"))Module["prettyPrint"]=function(){abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"makeBigInt"))Module["makeBigInt"]=function(){abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"dynCall"))Module["dynCall"]=function(){abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getCompilerSetting"))Module["getCompilerSetting"]=function(){abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"print"))Module["print"]=function(){abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"printErr"))Module["printErr"]=function(){abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getTempRet0"))Module["getTempRet0"]=function(){abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"setTempRet0"))Module["setTempRet0"]=function(){abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"callMain"))Module["callMain"]=function(){abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"abort"))Module["abort"]=function(){abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"warnOnce"))Module["warnOnce"]=function(){abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stackSave"))Module["stackSave"]=function(){abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stackRestore"))Module["stackRestore"]=function(){abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stackAlloc"))Module["stackAlloc"]=function(){abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["writeStackCookie"]=writeStackCookie;Module["checkStackCookie"]=checkStackCookie;Module["abortStackOverflow"]=abortStackOverflow;if(!Object.getOwnPropertyDescriptor(Module,"intArrayFromBase64"))Module["intArrayFromBase64"]=function(){abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"tryParseAsDataURI"))Module["tryParseAsDataURI"]=function(){abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_NORMAL"))Object.defineProperty(Module,"ALLOC_NORMAL",{configurable:true,get:function(){abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_STACK"))Object.defineProperty(Module,"ALLOC_STACK",{configurable:true,get:function(){abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_DYNAMIC"))Object.defineProperty(Module,"ALLOC_DYNAMIC",{configurable:true,get:function(){abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_NONE"))Object.defineProperty(Module,"ALLOC_NONE",{configurable:true,get:function(){abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Object.getOwnPropertyDescriptor(Module,"calledRun"))Object.defineProperty(Module,"calledRun",{configurable:true,get:function(){abort("'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}});var calledRun;Module["then"]=function(func){if(calledRun){func(Module)}else{var old=Module["onRuntimeInitialized"];Module["onRuntimeInitialized"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}writeStackCookie();preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;if(ABORT)return;initRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();assert(!Module["_main"],'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}checkStackCookie()}Module["run"]=run;function checkUnflushedContent(){var print=out;var printErr=err;var has=false;out=err=function(x){has=true};try{var flush=Module["_fflush"];if(flush)flush(0);["stdout","stderr"].forEach(function(name){var info=FS.analyzePath("/dev/"+name);if(!info)return;var stream=info.object;var rdev=stream.rdev;var tty=TTY.ttys[rdev];if(tty&&tty.output&&tty.output.length){has=true}})}catch(e){}out=print;err=printErr;if(has){warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.")}}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}noExitRuntime=true;run();


  return Module
}
);
})();
if (true)
      module.exports = Module;
    else {}
    

/***/ }),

/***/ 5105:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const emscripten_wasm_loader_1 = __nccwpck_require__(7789);
const hunspellLoader_1 = __nccwpck_require__(1904);
const logger_1 = __nccwpck_require__(9353);
//imports MODULARIZED emscripten preamble
const runtime = __nccwpck_require__(2450);
/**
 * Load, initialize wasm binary to use actual hunspell wasm instances.
 *
 * @param [InitOptions] Options to initialize hunspell wasm binary.
 * @param {number} [InitOptions.timeout] - timeout to wait wasm binary compilation & load.
 * @param {string | object} [InitOptions.locateBinary] - custom resolution logic for wasm binary. (not supported)
 * It could be either remote endpoint url, or loader-returned object for bundler. Check examples/browser_* for references.
 *
 * @returns {() => Promise<HunspellFactory>} Function to load module
 */
const loadModule = async (initOptions = {}) => {
    const { timeout } = initOptions;
    logger_1.log(`loadModule: loading hunspell wasm binary`, { initOptions });
    const moduleLoader = await emscripten_wasm_loader_1.getModuleLoader((runtime) => hunspellLoader_1.hunspellLoader(runtime), runtime, undefined, { timeout });
    return moduleLoader();
};
exports.loadModule = loadModule;
//# sourceMappingURL=loadModule.js.map

/***/ }),

/***/ 9353:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const emscripten_wasm_loader_1 = __nccwpck_require__(7789);
/**
 * Default log instance falls back to noop if not specified.
 */
let logInstance = () => {
    /* noop */
};
const log = (...args) => logInstance(...args);
exports.log = log;
/**
 * Enables logging internal behavior of hunspell-asm.
 * @param logger function to log.
 */
const enableLogger = (logger) => {
    const scopedLogger = (scope) => (message, ...optionalParams) => {
        logger(`${scope}::${message}`, ...optionalParams);
    };
    logInstance = scopedLogger(`hunspell`);
    emscripten_wasm_loader_1.enableLogger(scopedLogger(`hunspellLoader`));
};
exports.enableLogger = enableLogger;
//# sourceMappingURL=logger.js.map

/***/ }),

/***/ 567:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Wrap hunspell exported interfaces via cwrap for resuable mannter.
 *
 */
/** @internal */
exports.wrapHunspellInterface = (cwrap) => ({
    //Hunhandle* Hunspell_create(const char* affpath, const char* dpath)
    create: cwrap('Hunspell_create', 'number', ['number', 'number']),
    //void Hunspell_destroy(Hunhandle* pHunspell)
    destroy: cwrap('Hunspell_destroy', null, ['number']),
    //int Hunspell_spell(Hunhandle* pHunspell, const char*)
    spell: cwrap('Hunspell_spell', 'number', ['number', 'number']),
    //int Hunspell_suggest(Hunhandle* pHunspell, char*** slst, const char* word);
    suggest: cwrap('Hunspell_suggest', 'number', ['number', 'number', 'number']),
    //void Hunspell_free_list(Hunhandle* pHunspell, char*** slst, int n);
    free_list: cwrap('Hunspell_free_list', null, ['number', 'number', 'number']),
    //0 = additional dictionary slots available, 1 = slots are now full
    //int Hunspell_add_dic(Hunhandle* pHunspell, const char* dpath);
    add_dic: cwrap('Hunspell_add_dic', 'number', ['number', 'number']),
    //int Hunspell_add(Hunhandle* pHunspell, const char* word);
    add: cwrap('Hunspell_add', 'number', ['number', 'number']),
    //int Hunspell_add_with_affix(Hunhandle* pHunspell, const char* word, const char* example);
    add_with_affix: cwrap('Hunspell_add_with_affix', 'number', ['number', 'number', 'number']),
    //int Hunspell_remove(Hunhandle* pHunspell, const char* word);
    remove: cwrap('Hunspell_remove', 'number', ['number', 'number'])
});
//# sourceMappingURL=wrapHunspellInterface.js.map

/***/ }),

/***/ 3973:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = (function () { try { return __nccwpck_require__(1017) } catch (e) {}}()) || {
  sep: '/'
}
minimatch.sep = path.sep

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __nccwpck_require__(3717)

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  b = b || {}
  var t = {}
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || typeof def !== 'object' || !Object.keys(def).length) {
    return minimatch
  }

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }
  m.Minimatch.defaults = function defaults (options) {
    return orig.defaults(ext(def, options)).Minimatch
  }

  m.filter = function filter (pattern, options) {
    return orig.filter(pattern, ext(def, options))
  }

  m.defaults = function defaults (options) {
    return orig.defaults(ext(def, options))
  }

  m.makeRe = function makeRe (pattern, options) {
    return orig.makeRe(pattern, ext(def, options))
  }

  m.braceExpand = function braceExpand (pattern, options) {
    return orig.braceExpand(pattern, ext(def, options))
  }

  m.match = function (list, pattern, options) {
    return orig.match(list, pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  assertValidPattern(pattern)

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  assertValidPattern(pattern)

  if (!options) options = {}

  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (!options.allowWindowsEscape && path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false
  this.partial = !!options.partial

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  assertValidPattern(pattern)

  // Thanks to Yeting Li <https://github.com/yetingli> for
  // improving this regexp to avoid a ReDOS vulnerability.
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

var MAX_PATTERN_LENGTH = 1024 * 64
var assertValidPattern = function (pattern) {
  if (typeof pattern !== 'string') {
    throw new TypeError('invalid pattern')
  }

  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError('pattern is too long')
  }
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  assertValidPattern(pattern)

  var options = this.options

  // shortcuts
  if (pattern === '**') {
    if (!options.noglobstar)
      return GLOBSTAR
    else
      pattern = '*'
  }
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      /* istanbul ignore next */
      case '/': {
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false
      }

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        // split where the last [ was, make sure we don't have
        // an invalid re. if so, re-walk the contents of the
        // would-be class to re-translate any characters that
        // were passed through as-is
        // TODO: It would probably be faster to determine this
        // without a try/catch and a new RegExp, but it's tricky
        // to do safely.  For now, this is safe and works.
        var cs = pattern.substring(classStart + 1, i)
        try {
          RegExp('[' + cs + ']')
        } catch (er) {
          // not a valid class!
          var sp = this.parse(cs, SUBPARSE)
          re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
          hasMagic = hasMagic || sp[1]
          inClass = false
          continue
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '[': case '.': case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) /* istanbul ignore next - should be impossible */ {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) /* istanbul ignore next - should be impossible */ {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = function match (f, partial) {
  if (typeof partial === 'undefined') partial = this.partial
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    /* istanbul ignore if */
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      /* istanbul ignore if */
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      hit = f === p
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else /* istanbul ignore else */ if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    return (fi === fl - 1) && (file[fi] === '')
  }

  // should be unreachable.
  /* istanbul ignore next */
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),

/***/ 1867:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var random = __nccwpck_require__(7395)
var url = __nccwpck_require__(6547)

/**
 * Generate secure URL-friendly unique ID.
 *
 * By default, ID will have 21 symbols to have a collision probability similar
 * to UUID v4.
 *
 * @param {number} [size=21] The number of symbols in ID.
 *
 * @return {string} Random string.
 *
 * @example
 * const nanoid = require('nanoid')
 * model.id = nanoid() //=> "Uakgb_J5m9g-0JDMbcJqL"
 *
 * @name nanoid
 * @function
 */
module.exports = function (size) {
  size = size || 21
  var bytes = random(size)
  var id = ''
  // Compact alternative for `for (var i = 0; i < size; i++)`
  while (size--) {
    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.
    // This mask reduces random byte 0-255 to 0-63 values.
    // There is no need in `|| ''` and `* 1.6` hacks in here,
    // because bitmask trim bytes exact to alphabet size.
    id += url[bytes[size] & 63]
  }
  return id
}


/***/ }),

/***/ 7395:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var crypto = __nccwpck_require__(6113)

if (crypto.randomFillSync) {
  // We reuse buffers with the same size to avoid memory fragmentations
  // for better performance
  var buffers = { }
  module.exports = function (bytes) {
    var buffer = buffers[bytes]
    if (!buffer) {
      // `Buffer.allocUnsafe()` faster because it don’t clean memory.
      // We do not need it, since we will fill memory with new bytes anyway.
      buffer = Buffer.allocUnsafe(bytes)
      if (bytes <= 255) buffers[bytes] = buffer
    }
    return crypto.randomFillSync(buffer)
  }
} else {
  module.exports = crypto.randomBytes
}


/***/ }),

/***/ 6547:
/***/ ((module) => {

// This alphabet uses a-z A-Z 0-9 _- symbols.
// Despite the fact the source code is quite long, its entropy
// is low and there are lots of duplicates - just what compressors
// like GZIP and Brotli likes the best.

/**
 * URL safe symbols.
 *
 * @name url
 * @type {string}
 *
 * @example
 * const url = require('nanoid/url')
 * generate(url, 10) //=> "Uakgb_J5m9"
 */

// This alphabet uses a-z A-Z 0-9 _- symbols.
// Symbols are generated for smaller size.
// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA
module.exports = '-_'
var i = 36
while (i--) {
  // 36 is radix. Number.prototype.toString(36) returns number
  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.
  module.exports += i.toString(36)
  i > 9 && (module.exports += i.toString(36).toUpperCase())
}


/***/ }),

/***/ 9499:
/***/ ((module) => {

var isWin = process.platform === 'win32';

module.exports = function (str) {
	var i = str.length - 1;
	if (i < 2) {
		return str;
	}
	while (isSeparator(str, i)) {
		i--;
	}
	return str.substr(0, i + 1);
};

function isSeparator(str, i) {
	var char = str[i];
	return i > 0 && (char === '/' || (isWin && char === '\\'));
}


/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 1011:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/*!
 * unixify <https://github.com/jonschlinkert/unixify>
 *
 * Copyright (c) 2014, 2017, Jon Schlinkert.
 * Released under the MIT License.
 */



var normalizePath = __nccwpck_require__(7394);

module.exports = function unixify(filepath, stripTrailing) {
  filepath = normalizePath(filepath, stripTrailing);
  return filepath.replace(/^([a-zA-Z]+:|\.\/)/, '');
};


/***/ }),

/***/ 7394:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var removeTrailingSeparator = __nccwpck_require__(9499);

module.exports = function normalizePath(str, stripTrailing) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }
  str = str.replace(/[\\\/]+/g, '/');
  if (stripTrailing !== false) {
    str = removeTrailingSeparator(str);
  }
  return str;
};


/***/ }),

/***/ 9491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 6113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 2361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 2037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 2781:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 4404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 3837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __nccwpck_require__(3109);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=index.js.map