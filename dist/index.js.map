{"version":3,"file":"index.js","mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjxUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrhhlrur+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjtlbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtjlgvvzxthntGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrzxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvl7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../webpack://md-spellcheck-action/./lib/ignorefile.js","../webpack://md-spellcheck-action/./lib/main.js","../webpack://md-spellcheck-action/./lib/point.js","../webpack://md-spellcheck-action/./lib/positions.js","../webpack://md-spellcheck-action/./lib/spellcheck.js","../webpack://md-spellcheck-action/./node_modules/@actions/core/lib/command.js","../webpack://md-spellcheck-action/./node_modules/@actions/core/lib/core.js","../webpack://md-spellcheck-action/./node_modules/@actions/core/lib/file-command.js","../webpack://md-spellcheck-action/./node_modules/@actions/core/lib/oidc-utils.js","../webpack://md-spellcheck-action/./node_modules/@actions/core/lib/path-utils.js","../webpack://md-spellcheck-action/./node_modules/@actions/core/lib/summary.js","../webpack://md-spellcheck-action/./node_modules/@actions/core/lib/utils.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/glob.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-glob-options-helper.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-globber.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-hash-files.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-match-kind.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-path-helper.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-path.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-pattern-helper.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-pattern.js","../webpack://md-spellcheck-action/./node_modules/@actions/glob/lib/internal-search-state.js","../webpack://md-spellcheck-action/./node_modules/@actions/http-client/lib/auth.js","../webpack://md-spellcheck-action/./node_modules/@actions/http-client/lib/index.js","../webpack://md-spellcheck-action/./node_modules/@actions/http-client/lib/proxy.js","../webpack://md-spellcheck-action/./node_modules/@yozora/ast/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/character/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/core-parser/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/core-tokenizer/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/invariant/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/parser-gfm-ex/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-autolink-extension/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-autolink/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-blockquote/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-break/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-definition/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-delete/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-emphasis/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-fenced-block/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-fenced-code/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-heading/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-html-block/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-html-inline/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-image-reference/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-image/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-indented-code/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-inline-code/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-inline-math/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-link-reference/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-link/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-list/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-math/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-paragraph/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-setext-heading/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-table/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-text/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/@yozora/tokenizer-thematic-break/lib/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/balanced-match/index.js","../webpack://md-spellcheck-action/./node_modules/brace-expansion/index.js","../webpack://md-spellcheck-action/./node_modules/concat-map/index.js","../webpack://md-spellcheck-action/./node_modules/dictionary-en-gb/index.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/constructModule.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/environment.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/getModuleLoader.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/path/isMounted.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/path/mkdirTree.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/path/mountBuffer.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/path/mountDirectory.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/path/unmount.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/util/isNode.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/util/isWasmEnabled.js","../webpack://md-spellcheck-action/./node_modules/emscripten-wasm-loader/dist/cjs/util/logger.js","../webpack://md-spellcheck-action/./node_modules/getroot/dist/src/index.js","../webpack://md-spellcheck-action/./node_modules/hunspell-asm/dist/cjs/hunspellLoader.js","../webpack://md-spellcheck-action/./node_modules/hunspell-asm/dist/cjs/index.js","../webpack://md-spellcheck-action/./node_modules/hunspell-asm/dist/cjs/lib/node/hunspell.js","../webpack://md-spellcheck-action/./node_modules/hunspell-asm/dist/cjs/loadModule.js","../webpack://md-spellcheck-action/./node_modules/hunspell-asm/dist/cjs/util/logger.js","../webpack://md-spellcheck-action/./node_modules/hunspell-asm/dist/cjs/wrapHunspellInterface.js","../webpack://md-spellcheck-action/./node_modules/minimatch/minimatch.js","../webpack://md-spellcheck-action/./node_modules/nanoid/index.js","../webpack://md-spellcheck-action/./node_modules/nanoid/random.js","../webpack://md-spellcheck-action/./node_modules/nanoid/url.js","../webpack://md-spellcheck-action/./node_modules/remove-trailing-separator/index.js","../webpack://md-spellcheck-action/./node_modules/tunnel/index.js","../webpack://md-spellcheck-action/./node_modules/tunnel/lib/tunnel.js","../webpack://md-spellcheck-action/./node_modules/unixify/index.js","../webpack://md-spellcheck-action/./node_modules/unixify/node_modules/normalize-path/index.js","../webpack://md-spellcheck-action/external node-commonjs \"assert\"","../webpack://md-spellcheck-action/external node-commonjs \"crypto\"","../webpack://md-spellcheck-action/external node-commonjs \"events\"","../webpack://md-spellcheck-action/external node-commonjs \"fs\"","../webpack://md-spellcheck-action/external node-commonjs \"http\"","../webpack://md-spellcheck-action/external node-commonjs \"https\"","../webpack://md-spellcheck-action/external node-commonjs \"net\"","../webpack://md-spellcheck-action/external node-commonjs \"os\"","../webpack://md-spellcheck-action/external node-commonjs \"path\"","../webpack://md-spellcheck-action/external node-commonjs \"stream\"","../webpack://md-spellcheck-action/external node-commonjs \"tls\"","../webpack://md-spellcheck-action/external node-commonjs \"util\"","../webpack://md-spellcheck-action/webpack/bootstrap","../webpack://md-spellcheck-action/webpack/runtime/compat","../webpack://md-spellcheck-action/webpack/before-startup","../webpack://md-spellcheck-action/webpack/startup","../webpack://md-spellcheck-action/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst point = __importStar(require(\"./point\"));\nfunction* parse(content) {\n    const lines = content.split('\\n');\n    let lineNum = 1;\n    let offset = 0;\n    for (const line of lines) {\n        const commentRemoved = line.replace(/#.*/, '');\n        const trimmed = commentRemoved.trim();\n        if (trimmed === '') {\n            continue;\n        }\n        const split = trimmed.split(/\\s+/);\n        if (split.length === 1) {\n            yield { word: split[0] };\n        }\n        else if (split.length === 3 && split[1] === 'like') {\n            const lineOffset = line.lastIndexOf(split[2]);\n            const start = {\n                line: lineNum,\n                column: lineOffset + 1,\n                offset: offset + lineOffset\n            };\n            const end = point.offset(start, point.end(split[2]));\n            const position = { start, end };\n            yield { word: split[0], similarTo: { word: split[2], position } };\n        }\n        else {\n            core.warning(`Couldn't parse ignore file entry '${line}' on line ${lineNum}. Expected format: Just a <word> or '<word> like <word>'`);\n        }\n        offset += line.length + 1; // 1 for the newline\n        lineNum++;\n    }\n}\nexports.parse = parse;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst glob = __importStar(require(\"@actions/glob\"));\nconst ignoreFile = __importStar(require(\"./ignorefile\"));\nconst spellcheck_1 = require(\"./spellcheck\");\nconst fs_1 = require(\"fs\");\nfunction run() {\n    var e_1, _a, e_2, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const included = core.getInput('files-to-check');\n            const excludePattern = core.getInput('files-to-exclude');\n            const ignoreFilename = core.getInput('words-to-ignore-file').trim();\n            if (included == null || included === '') {\n                core.info(`No files passed to check.`);\n                return;\n            }\n            const isExcluded = yield excluder(excludePattern);\n            const spell = yield (0, spellcheck_1.initialise)();\n            const ignores = [];\n            let ignoreMsg = () => 'If you want to ignore this message, configure an ignore file for md-spellcheck-action.';\n            if (ignoreFilename !== '') {\n                ignoreMsg = word => `If you want to ignore this message, add ${word} to the ignore file at ${ignoreFilename}`;\n                const ignoreFileContent = (0, fs_1.readFileSync)(ignoreFilename, { encoding: 'utf8' });\n                const ignoreEntries = itMap(ignoreFile.parse(ignoreFileContent), (ignore) => {\n                    ignores.push(ignore);\n                    return ignore;\n                });\n                for (const misspelled of spell.addIgnores(ignoreEntries)) {\n                    outputMisspelled(misspelled, ignoreFilename, () => \"When using '<word> like <word>' syntax in ignore files, the second must be a reference word that's already part of the dictionary.\");\n                }\n            }\n            if (ignores.length > 0) {\n                core.info(`Ignoring words: ${ignores.map(ignore => ignore.word)}`);\n            }\n            else {\n                core.info(`No words to ignore configured: ${ignoreFilename === ''\n                    ? 'No ignore file configured.'\n                    : 'No words parsed from the ignore file.'}`);\n            }\n            let hasMisspelled = false;\n            let checkedFiles = false;\n            try {\n                for (var _c = __asyncValues(included.split('|')), _d; _d = yield _c.next(), !_d.done;) {\n                    const file = _d.value;\n                    if (isExcluded(file)) {\n                        core.info(`Ignoring ${file} because it is excluded via 'files-to-exclude'.`);\n                        continue;\n                    }\n                    checkedFiles = true;\n                    const contents = (0, fs_1.readFileSync)(file, { encoding: 'utf8' });\n                    try {\n                        for (var _e = (e_2 = void 0, __asyncValues(spell.check(contents))), _f; _f = yield _e.next(), !_f.done;) {\n                            const result = _f.value;\n                            hasMisspelled = true;\n                            outputMisspelled(result, file, ignoreMsg);\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (_f && !_f.done && (_b = _e.return)) yield _b.call(_e);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                    core.info(`Spellchecked ${file}.`);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) yield _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (hasMisspelled) {\n                core.setFailed('Misspelled word(s)');\n            }\n            else if (!checkedFiles) {\n                core.setFailed(`Couldn't find any files matching the list ${included}`);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error)\n                core.setFailed(error.message);\n        }\n    });\n}\nfunction excluder(excludePattern) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (excludePattern === '') {\n            return () => false;\n        }\n        const exclude = yield glob.create(excludePattern);\n        const excluded = yield exclude.glob();\n        return filename => excluded.includes(filename);\n    });\n}\nfunction outputMisspelled(misspelled, file, ignoreMsg, asWarning = false) {\n    const suggestions = misspelled.suggestions.map(s => `\"${s}\"`).join(', ');\n    const outputFunc = asWarning ? core.warning : core.error;\n    outputFunc(`Misspelled word \"${misspelled.word}\".\\nSuggested alternatives: ${suggestions}\\n${ignoreMsg(misspelled.word)}`, {\n        title: 'Misspelled word',\n        file,\n        startLine: misspelled.position.start.line,\n        startColumn: misspelled.position.start.column,\n        endLine: misspelled.position.end.line,\n        endColumn: misspelled.position.end.column\n    });\n}\nfunction* itMap(iterator, f) {\n    for (const input of iterator) {\n        yield f(input);\n    }\n}\nrun();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.max = exports.min = exports.offset = exports.end = void 0;\nfunction end(str) {\n    let line = 1;\n    let lastNewlineOffset = -1;\n    for (const match of str.matchAll(/\\n/g)) {\n        if (match.index == null) {\n            throw new Error(`Regex match went wrong. No index? ${match}`);\n        }\n        line++;\n        lastNewlineOffset = match.index;\n    }\n    return {\n        line,\n        column: str.length - lastNewlineOffset,\n        offset: str.length\n    };\n}\nexports.end = end;\nfunction offset(point, relativeOffset) {\n    const line0 = point.line - 1;\n    const column0 = point.column - 1;\n    return {\n        line: relativeOffset.line + line0,\n        column: relativeOffset.line === 1\n            ? relativeOffset.column + column0\n            : relativeOffset.column,\n        offset: relativeOffset.offset != null && point.offset != null\n            ? relativeOffset.offset + point.offset\n            : undefined\n    };\n}\nexports.offset = offset;\nfunction min(a, b) {\n    if (a.offset && b.offset) {\n        return a.offset < b.offset ? a : b;\n    }\n    if (a.line === b.line) {\n        return a.column < b.column ? a : b;\n    }\n    return a.line < b.line ? a : b;\n}\nexports.min = min;\nfunction max(a, b) {\n    if (a.offset && b.offset) {\n        return a.offset > b.offset ? a : b;\n    }\n    if (a.line === b.line) {\n        return a.column > b.column ? a : b;\n    }\n    return a.line > b.line ? a : b;\n}\nexports.max = max;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = void 0;\nconst point = __importStar(require(\"./point\"));\nfunction merge(a, b) {\n    return {\n        start: point.min(a.start, b.start),\n        end: point.max(a.end, b.end)\n    };\n}\nexports.merge = merge;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.splitWords = exports.initialise = exports.INLINE_TYPES = exports.SKIP_TYPES = exports.WORD_REGEX = void 0;\nconst parser_gfm_ex_1 = require(\"@yozora/parser-gfm-ex\");\nconst tokenizer_math_1 = require(\"@yozora/tokenizer-math\");\nconst tokenizer_inline_math_1 = require(\"@yozora/tokenizer-inline-math\");\nconst dictionary_en_gb_1 = __importDefault(require(\"dictionary-en-gb\"));\nconst hunspell_asm_1 = require(\"hunspell-asm\");\nconst point = __importStar(require(\"./point\"));\nconst positions = __importStar(require(\"./positions\"));\n// Captures any unicode letter with any number of (letter or \"'\" and letter or \"-\" and letter).\nexports.WORD_REGEX = /\\p{L}(?:\\p{L}|'\\p{L}|-\\p{L})*/gu;\nexports.SKIP_TYPES = ['inlineCode', 'inlineMath'];\nexports.INLINE_TYPES = [\n    'text',\n    'emphasis',\n    'delete',\n    'strong',\n    'link',\n    'link-reference'\n];\nfunction initialise() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { aff, dic } = yield getDictionaryEN();\n        const hunspellFactory = yield (0, hunspell_asm_1.loadModule)();\n        const affPath = hunspellFactory.mountBuffer(aff);\n        const dicPath = hunspellFactory.mountBuffer(dic);\n        const hunspell = hunspellFactory.create(affPath, dicPath);\n        return {\n            *addIgnores(ignoreList) {\n                for (const ignored of ignoreList) {\n                    if (ignored.similarTo != null) {\n                        if (hunspell.spell(ignored.similarTo.word)) {\n                            hunspell.addWordWithAffix(ignored.word, ignored.similarTo.word);\n                        }\n                        else {\n                            yield Object.assign(Object.assign({}, ignored.similarTo), { suggestions: hunspell.suggest(ignored.similarTo.word) });\n                        }\n                    }\n                    else {\n                        hunspell.addWord(ignored.word);\n                    }\n                }\n            },\n            check(contents) {\n                return __asyncGenerator(this, arguments, function* check_1() {\n                    const parser = constructParser();\n                    const parsed = parser.parse(contents);\n                    for (const { word, position } of mergeConsecutiveWordTokens(markdownTokens(parsed))) {\n                        if (!hunspell.spell(word)) {\n                            yield yield __await({\n                                word,\n                                position,\n                                suggestions: hunspell.suggest(word)\n                            });\n                        }\n                    }\n                });\n            }\n        };\n    });\n}\nexports.initialise = initialise;\nfunction constructParser() {\n    const parser = new parser_gfm_ex_1.GfmExParser();\n    parser.useTokenizer(new tokenizer_math_1.MathTokenizer());\n    parser.useTokenizer(new tokenizer_inline_math_1.InlineMathTokenizer({ backtickRequired: false }));\n    parser.setDefaultParseOptions({ shouldReservePosition: true });\n    return parser;\n}\nfunction* markdownTokens(node) {\n    if (exports.SKIP_TYPES.includes(node.type)) {\n        return;\n    }\n    if (isLink(node)) {\n        const text = innerText(node);\n        if (text === node.url) {\n            return; // skip auto-generated link nodes like https://example.com\n        }\n    }\n    if (isText(node)) {\n        yield* literalPositionedTokens(node);\n    }\n    else if (isParent(node)) {\n        for (const child of node.children) {\n            const needsBreaks = !exports.INLINE_TYPES.includes(child.type);\n            if (needsBreaks)\n                yield { type: 'break' };\n            yield* markdownTokens(child);\n            if (needsBreaks)\n                yield { type: 'break' };\n        }\n    }\n}\nfunction innerText(node) {\n    return node.children\n        .map(child => isText(child) ? child.value : isParent(child) ? innerText(child) : '')\n        .join('');\n}\nfunction* literalPositionedTokens(node) {\n    if (node.position == null) {\n        throw new Error('Missing position spans');\n    }\n    let start = node.position.start;\n    for (const token of wordsAndWhitespace(node.value)) {\n        const end = point.offset(start, point.end(token.content));\n        yield Object.assign(Object.assign({}, token), { position: { start, end } });\n        start = end;\n    }\n}\nfunction* wordsAndWhitespace(str) {\n    let lastEnd = 0;\n    for (const match of str.matchAll(exports.WORD_REGEX)) {\n        if (match.index == null) {\n            throw new Error(`Regex match went wrong. No index? ${match}`);\n        }\n        const word = match[0];\n        if (match.index !== 0 && lastEnd !== match.index) {\n            yield {\n                type: 'whitespace',\n                content: str.substring(lastEnd, match.index)\n            };\n        }\n        yield {\n            type: 'word',\n            content: word\n        };\n        lastEnd = match.index + word.length;\n    }\n    if (lastEnd !== str.length) {\n        yield {\n            type: 'whitespace',\n            content: str.substring(lastEnd, str.length)\n        };\n    }\n}\nfunction* mergeConsecutiveWordTokens(tokens) {\n    let currentWord = null;\n    for (const token of tokens) {\n        // current word begins\n        if (currentWord == null && token.type === 'word') {\n            currentWord = {\n                word: token.content,\n                position: token.position\n            };\n            // continuing the current word\n        }\n        else if (currentWord != null && token.type === 'word') {\n            currentWord = {\n                word: `${currentWord.word}${token.content}`,\n                position: positions.merge(currentWord.position, token.position)\n            };\n            // current word ended\n        }\n        else if (currentWord != null && token.type !== 'word') {\n            // yield a word\n            yield currentWord;\n            currentWord = null;\n        }\n    }\n    if (currentWord != null) {\n        yield currentWord;\n    }\n}\nfunction* splitWords(str) {\n    let start = {\n        line: 1,\n        column: 1,\n        offset: 0\n    };\n    for (const item of wordsAndWhitespace(str)) {\n        const end = point.offset(start, point.end(item.content));\n        if (item.type === 'word') {\n            yield {\n                word: item.content,\n                position: { start, end }\n            };\n        }\n        start = end;\n    }\n}\nexports.splitWords = splitWords;\nfunction getDictionaryEN() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            try {\n                (0, dictionary_en_gb_1.default)((error, dicts) => (error ? reject(error) : resolve(dicts)));\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    });\n}\nfunction isText(obj) {\n    return obj.type === 'text';\n}\nfunction isLink(obj) {\n    return obj.type === 'link';\n}\nfunction isParent(obj) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return Array.isArray(obj.children);\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    return inputs;\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issueCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashFiles = exports.create = void 0;\nconst internal_globber_1 = require(\"./internal-globber\");\nconst internal_hash_files_1 = require(\"./internal-hash-files\");\n/**\n * Constructs a globber\n *\n * @param patterns  Patterns separated by newlines\n * @param options   Glob options\n */\nfunction create(patterns, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield internal_globber_1.DefaultGlobber.create(patterns, options);\n    });\n}\nexports.create = create;\n/**\n * Computes the sha256 hash of a glob\n *\n * @param patterns  Patterns separated by newlines\n * @param options   Glob options\n */\nfunction hashFiles(patterns, options, verbose = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let followSymbolicLinks = true;\n        if (options && typeof options.followSymbolicLinks === 'boolean') {\n            followSymbolicLinks = options.followSymbolicLinks;\n        }\n        const globber = yield create(patterns, { followSymbolicLinks });\n        return internal_hash_files_1.hashFiles(globber, verbose);\n    });\n}\nexports.hashFiles = hashFiles;\n//# sourceMappingURL=glob.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOptions = void 0;\nconst core = __importStar(require(\"@actions/core\"));\n/**\n * Returns a copy with defaults filled in.\n */\nfunction getOptions(copy) {\n    const result = {\n        followSymbolicLinks: true,\n        implicitDescendants: true,\n        matchDirectories: true,\n        omitBrokenSymbolicLinks: true\n    };\n    if (copy) {\n        if (typeof copy.followSymbolicLinks === 'boolean') {\n            result.followSymbolicLinks = copy.followSymbolicLinks;\n            core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);\n        }\n        if (typeof copy.implicitDescendants === 'boolean') {\n            result.implicitDescendants = copy.implicitDescendants;\n            core.debug(`implicitDescendants '${result.implicitDescendants}'`);\n        }\n        if (typeof copy.matchDirectories === 'boolean') {\n            result.matchDirectories = copy.matchDirectories;\n            core.debug(`matchDirectories '${result.matchDirectories}'`);\n        }\n        if (typeof copy.omitBrokenSymbolicLinks === 'boolean') {\n            result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks;\n            core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);\n        }\n    }\n    return result;\n}\nexports.getOptions = getOptions;\n//# sourceMappingURL=internal-glob-options-helper.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGlobber = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst fs = __importStar(require(\"fs\"));\nconst globOptionsHelper = __importStar(require(\"./internal-glob-options-helper\"));\nconst path = __importStar(require(\"path\"));\nconst patternHelper = __importStar(require(\"./internal-pattern-helper\"));\nconst internal_match_kind_1 = require(\"./internal-match-kind\");\nconst internal_pattern_1 = require(\"./internal-pattern\");\nconst internal_search_state_1 = require(\"./internal-search-state\");\nconst IS_WINDOWS = process.platform === 'win32';\nclass DefaultGlobber {\n    constructor(options) {\n        this.patterns = [];\n        this.searchPaths = [];\n        this.options = globOptionsHelper.getOptions(options);\n    }\n    getSearchPaths() {\n        // Return a copy\n        return this.searchPaths.slice();\n    }\n    glob() {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = [];\n            try {\n                for (var _b = __asyncValues(this.globGenerator()), _c; _c = yield _b.next(), !_c.done;) {\n                    const itemPath = _c.value;\n                    result.push(itemPath);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return result;\n        });\n    }\n    globGenerator() {\n        return __asyncGenerator(this, arguments, function* globGenerator_1() {\n            // Fill in defaults options\n            const options = globOptionsHelper.getOptions(this.options);\n            // Implicit descendants?\n            const patterns = [];\n            for (const pattern of this.patterns) {\n                patterns.push(pattern);\n                if (options.implicitDescendants &&\n                    (pattern.trailingSeparator ||\n                        pattern.segments[pattern.segments.length - 1] !== '**')) {\n                    patterns.push(new internal_pattern_1.Pattern(pattern.negate, true, pattern.segments.concat('**')));\n                }\n            }\n            // Push the search paths\n            const stack = [];\n            for (const searchPath of patternHelper.getSearchPaths(patterns)) {\n                core.debug(`Search path '${searchPath}'`);\n                // Exists?\n                try {\n                    // Intentionally using lstat. Detection for broken symlink\n                    // will be performed later (if following symlinks).\n                    yield __await(fs.promises.lstat(searchPath));\n                }\n                catch (err) {\n                    if (err.code === 'ENOENT') {\n                        continue;\n                    }\n                    throw err;\n                }\n                stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));\n            }\n            // Search\n            const traversalChain = []; // used to detect cycles\n            while (stack.length) {\n                // Pop\n                const item = stack.pop();\n                // Match?\n                const match = patternHelper.match(patterns, item.path);\n                const partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);\n                if (!match && !partialMatch) {\n                    continue;\n                }\n                // Stat\n                const stats = yield __await(DefaultGlobber.stat(item, options, traversalChain)\n                // Broken symlink, or symlink cycle detected, or no longer exists\n                );\n                // Broken symlink, or symlink cycle detected, or no longer exists\n                if (!stats) {\n                    continue;\n                }\n                // Directory\n                if (stats.isDirectory()) {\n                    // Matched\n                    if (match & internal_match_kind_1.MatchKind.Directory && options.matchDirectories) {\n                        yield yield __await(item.path);\n                    }\n                    // Descend?\n                    else if (!partialMatch) {\n                        continue;\n                    }\n                    // Push the child items in reverse\n                    const childLevel = item.level + 1;\n                    const childItems = (yield __await(fs.promises.readdir(item.path))).map(x => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel));\n                    stack.push(...childItems.reverse());\n                }\n                // File\n                else if (match & internal_match_kind_1.MatchKind.File) {\n                    yield yield __await(item.path);\n                }\n            }\n        });\n    }\n    /**\n     * Constructs a DefaultGlobber\n     */\n    static create(patterns, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new DefaultGlobber(options);\n            if (IS_WINDOWS) {\n                patterns = patterns.replace(/\\r\\n/g, '\\n');\n                patterns = patterns.replace(/\\r/g, '\\n');\n            }\n            const lines = patterns.split('\\n').map(x => x.trim());\n            for (const line of lines) {\n                // Empty or comment\n                if (!line || line.startsWith('#')) {\n                    continue;\n                }\n                // Pattern\n                else {\n                    result.patterns.push(new internal_pattern_1.Pattern(line));\n                }\n            }\n            result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));\n            return result;\n        });\n    }\n    static stat(item, options, traversalChain) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Note:\n            // `stat` returns info about the target of a symlink (or symlink chain)\n            // `lstat` returns info about a symlink itself\n            let stats;\n            if (options.followSymbolicLinks) {\n                try {\n                    // Use `stat` (following symlinks)\n                    stats = yield fs.promises.stat(item.path);\n                }\n                catch (err) {\n                    if (err.code === 'ENOENT') {\n                        if (options.omitBrokenSymbolicLinks) {\n                            core.debug(`Broken symlink '${item.path}'`);\n                            return undefined;\n                        }\n                        throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);\n                    }\n                    throw err;\n                }\n            }\n            else {\n                // Use `lstat` (not following symlinks)\n                stats = yield fs.promises.lstat(item.path);\n            }\n            // Note, isDirectory() returns false for the lstat of a symlink\n            if (stats.isDirectory() && options.followSymbolicLinks) {\n                // Get the realpath\n                const realPath = yield fs.promises.realpath(item.path);\n                // Fixup the traversal chain to match the item level\n                while (traversalChain.length >= item.level) {\n                    traversalChain.pop();\n                }\n                // Test for a cycle\n                if (traversalChain.some((x) => x === realPath)) {\n                    core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);\n                    return undefined;\n                }\n                // Update the traversal chain\n                traversalChain.push(realPath);\n            }\n            return stats;\n        });\n    }\n}\nexports.DefaultGlobber = DefaultGlobber;\n//# sourceMappingURL=internal-globber.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashFiles = void 0;\nconst crypto = __importStar(require(\"crypto\"));\nconst core = __importStar(require(\"@actions/core\"));\nconst fs = __importStar(require(\"fs\"));\nconst stream = __importStar(require(\"stream\"));\nconst util = __importStar(require(\"util\"));\nconst path = __importStar(require(\"path\"));\nfunction hashFiles(globber, verbose = false) {\n    var e_1, _a;\n    var _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        const writeDelegate = verbose ? core.info : core.debug;\n        let hasMatch = false;\n        const githubWorkspace = (_b = process.env['GITHUB_WORKSPACE']) !== null && _b !== void 0 ? _b : process.cwd();\n        const result = crypto.createHash('sha256');\n        let count = 0;\n        try {\n            for (var _c = __asyncValues(globber.globGenerator()), _d; _d = yield _c.next(), !_d.done;) {\n                const file = _d.value;\n                writeDelegate(file);\n                if (!file.startsWith(`${githubWorkspace}${path.sep}`)) {\n                    writeDelegate(`Ignore '${file}' since it is not under GITHUB_WORKSPACE.`);\n                    continue;\n                }\n                if (fs.statSync(file).isDirectory()) {\n                    writeDelegate(`Skip directory '${file}'.`);\n                    continue;\n                }\n                const hash = crypto.createHash('sha256');\n                const pipeline = util.promisify(stream.pipeline);\n                yield pipeline(fs.createReadStream(file), hash);\n                result.write(hash.digest());\n                count++;\n                if (!hasMatch) {\n                    hasMatch = true;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) yield _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        result.end();\n        if (hasMatch) {\n            writeDelegate(`Found ${count} files to hash.`);\n            return result.digest('hex');\n        }\n        else {\n            writeDelegate(`No matches found for glob`);\n            return '';\n        }\n    });\n}\nexports.hashFiles = hashFiles;\n//# sourceMappingURL=internal-hash-files.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MatchKind = void 0;\n/**\n * Indicates whether a pattern matches a path\n */\nvar MatchKind;\n(function (MatchKind) {\n    /** Not matched */\n    MatchKind[MatchKind[\"None\"] = 0] = \"None\";\n    /** Matched if the path is a directory */\n    MatchKind[MatchKind[\"Directory\"] = 1] = \"Directory\";\n    /** Matched if the path is a regular file */\n    MatchKind[MatchKind[\"File\"] = 2] = \"File\";\n    /** Matched */\n    MatchKind[MatchKind[\"All\"] = 3] = \"All\";\n})(MatchKind = exports.MatchKind || (exports.MatchKind = {}));\n//# sourceMappingURL=internal-match-kind.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.safeTrimTrailingSeparator = exports.normalizeSeparators = exports.hasRoot = exports.hasAbsoluteRoot = exports.ensureAbsoluteRoot = exports.dirname = void 0;\nconst path = __importStar(require(\"path\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst IS_WINDOWS = process.platform === 'win32';\n/**\n * Similar to path.dirname except normalizes the path separators and slightly better handling for Windows UNC paths.\n *\n * For example, on Linux/macOS:\n * - `/               => /`\n * - `/hello          => /`\n *\n * For example, on Windows:\n * - `C:\\             => C:\\`\n * - `C:\\hello        => C:\\`\n * - `C:              => C:`\n * - `C:hello         => C:`\n * - `\\               => \\`\n * - `\\hello          => \\`\n * - `\\\\hello         => \\\\hello`\n * - `\\\\hello\\world   => \\\\hello\\world`\n */\nfunction dirname(p) {\n    // Normalize slashes and trim unnecessary trailing slash\n    p = safeTrimTrailingSeparator(p);\n    // Windows UNC root, e.g. \\\\hello or \\\\hello\\world\n    if (IS_WINDOWS && /^\\\\\\\\[^\\\\]+(\\\\[^\\\\]+)?$/.test(p)) {\n        return p;\n    }\n    // Get dirname\n    let result = path.dirname(p);\n    // Trim trailing slash for Windows UNC root, e.g. \\\\hello\\world\\\n    if (IS_WINDOWS && /^\\\\\\\\[^\\\\]+\\\\[^\\\\]+\\\\$/.test(result)) {\n        result = safeTrimTrailingSeparator(result);\n    }\n    return result;\n}\nexports.dirname = dirname;\n/**\n * Roots the path if not already rooted. On Windows, relative roots like `\\`\n * or `C:` are expanded based on the current working directory.\n */\nfunction ensureAbsoluteRoot(root, itemPath) {\n    assert_1.default(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);\n    assert_1.default(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);\n    // Already rooted\n    if (hasAbsoluteRoot(itemPath)) {\n        return itemPath;\n    }\n    // Windows\n    if (IS_WINDOWS) {\n        // Check for itemPath like C: or C:foo\n        if (itemPath.match(/^[A-Z]:[^\\\\/]|^[A-Z]:$/i)) {\n            let cwd = process.cwd();\n            assert_1.default(cwd.match(/^[A-Z]:\\\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);\n            // Drive letter matches cwd? Expand to cwd\n            if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {\n                // Drive only, e.g. C:\n                if (itemPath.length === 2) {\n                    // Preserve specified drive letter case (upper or lower)\n                    return `${itemPath[0]}:\\\\${cwd.substr(3)}`;\n                }\n                // Drive + path, e.g. C:foo\n                else {\n                    if (!cwd.endsWith('\\\\')) {\n                        cwd += '\\\\';\n                    }\n                    // Preserve specified drive letter case (upper or lower)\n                    return `${itemPath[0]}:\\\\${cwd.substr(3)}${itemPath.substr(2)}`;\n                }\n            }\n            // Different drive\n            else {\n                return `${itemPath[0]}:\\\\${itemPath.substr(2)}`;\n            }\n        }\n        // Check for itemPath like \\ or \\foo\n        else if (normalizeSeparators(itemPath).match(/^\\\\$|^\\\\[^\\\\]/)) {\n            const cwd = process.cwd();\n            assert_1.default(cwd.match(/^[A-Z]:\\\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);\n            return `${cwd[0]}:\\\\${itemPath.substr(1)}`;\n        }\n    }\n    assert_1.default(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);\n    // Otherwise ensure root ends with a separator\n    if (root.endsWith('/') || (IS_WINDOWS && root.endsWith('\\\\'))) {\n        // Intentionally empty\n    }\n    else {\n        // Append separator\n        root += path.sep;\n    }\n    return root + itemPath;\n}\nexports.ensureAbsoluteRoot = ensureAbsoluteRoot;\n/**\n * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:\n * `\\\\hello\\share` and `C:\\hello` (and using alternate separator).\n */\nfunction hasAbsoluteRoot(itemPath) {\n    assert_1.default(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);\n    // Normalize separators\n    itemPath = normalizeSeparators(itemPath);\n    // Windows\n    if (IS_WINDOWS) {\n        // E.g. \\\\hello\\share or C:\\hello\n        return itemPath.startsWith('\\\\\\\\') || /^[A-Z]:\\\\/i.test(itemPath);\n    }\n    // E.g. /hello\n    return itemPath.startsWith('/');\n}\nexports.hasAbsoluteRoot = hasAbsoluteRoot;\n/**\n * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:\n * `\\`, `\\hello`, `\\\\hello\\share`, `C:`, and `C:\\hello` (and using alternate separator).\n */\nfunction hasRoot(itemPath) {\n    assert_1.default(itemPath, `isRooted parameter 'itemPath' must not be empty`);\n    // Normalize separators\n    itemPath = normalizeSeparators(itemPath);\n    // Windows\n    if (IS_WINDOWS) {\n        // E.g. \\ or \\hello or \\\\hello\n        // E.g. C: or C:\\hello\n        return itemPath.startsWith('\\\\') || /^[A-Z]:/i.test(itemPath);\n    }\n    // E.g. /hello\n    return itemPath.startsWith('/');\n}\nexports.hasRoot = hasRoot;\n/**\n * Removes redundant slashes and converts `/` to `\\` on Windows\n */\nfunction normalizeSeparators(p) {\n    p = p || '';\n    // Windows\n    if (IS_WINDOWS) {\n        // Convert slashes on Windows\n        p = p.replace(/\\//g, '\\\\');\n        // Remove redundant slashes\n        const isUnc = /^\\\\\\\\+[^\\\\]/.test(p); // e.g. \\\\hello\n        return (isUnc ? '\\\\' : '') + p.replace(/\\\\\\\\+/g, '\\\\'); // preserve leading \\\\ for UNC\n    }\n    // Remove redundant slashes\n    return p.replace(/\\/\\/+/g, '/');\n}\nexports.normalizeSeparators = normalizeSeparators;\n/**\n * Normalizes the path separators and trims the trailing separator (when safe).\n * For example, `/foo/ => /foo` but `/ => /`\n */\nfunction safeTrimTrailingSeparator(p) {\n    // Short-circuit if empty\n    if (!p) {\n        return '';\n    }\n    // Normalize separators\n    p = normalizeSeparators(p);\n    // No trailing slash\n    if (!p.endsWith(path.sep)) {\n        return p;\n    }\n    // Check '/' on Linux/macOS and '\\' on Windows\n    if (p === path.sep) {\n        return p;\n    }\n    // On Windows check if drive root. E.g. C:\\\n    if (IS_WINDOWS && /^[A-Z]:\\\\$/i.test(p)) {\n        return p;\n    }\n    // Otherwise trim trailing slash\n    return p.substr(0, p.length - 1);\n}\nexports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;\n//# sourceMappingURL=internal-path-helper.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Path = void 0;\nconst path = __importStar(require(\"path\"));\nconst pathHelper = __importStar(require(\"./internal-path-helper\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst IS_WINDOWS = process.platform === 'win32';\n/**\n * Helper class for parsing paths into segments\n */\nclass Path {\n    /**\n     * Constructs a Path\n     * @param itemPath Path or array of segments\n     */\n    constructor(itemPath) {\n        this.segments = [];\n        // String\n        if (typeof itemPath === 'string') {\n            assert_1.default(itemPath, `Parameter 'itemPath' must not be empty`);\n            // Normalize slashes and trim unnecessary trailing slash\n            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);\n            // Not rooted\n            if (!pathHelper.hasRoot(itemPath)) {\n                this.segments = itemPath.split(path.sep);\n            }\n            // Rooted\n            else {\n                // Add all segments, while not at the root\n                let remaining = itemPath;\n                let dir = pathHelper.dirname(remaining);\n                while (dir !== remaining) {\n                    // Add the segment\n                    const basename = path.basename(remaining);\n                    this.segments.unshift(basename);\n                    // Truncate the last segment\n                    remaining = dir;\n                    dir = pathHelper.dirname(remaining);\n                }\n                // Remainder is the root\n                this.segments.unshift(remaining);\n            }\n        }\n        // Array\n        else {\n            // Must not be empty\n            assert_1.default(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);\n            // Each segment\n            for (let i = 0; i < itemPath.length; i++) {\n                let segment = itemPath[i];\n                // Must not be empty\n                assert_1.default(segment, `Parameter 'itemPath' must not contain any empty segments`);\n                // Normalize slashes\n                segment = pathHelper.normalizeSeparators(itemPath[i]);\n                // Root segment\n                if (i === 0 && pathHelper.hasRoot(segment)) {\n                    segment = pathHelper.safeTrimTrailingSeparator(segment);\n                    assert_1.default(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);\n                    this.segments.push(segment);\n                }\n                // All other segments\n                else {\n                    // Must not contain slash\n                    assert_1.default(!segment.includes(path.sep), `Parameter 'itemPath' contains unexpected path separators`);\n                    this.segments.push(segment);\n                }\n            }\n        }\n    }\n    /**\n     * Converts the path to it's string representation\n     */\n    toString() {\n        // First segment\n        let result = this.segments[0];\n        // All others\n        let skipSlash = result.endsWith(path.sep) || (IS_WINDOWS && /^[A-Z]:$/i.test(result));\n        for (let i = 1; i < this.segments.length; i++) {\n            if (skipSlash) {\n                skipSlash = false;\n            }\n            else {\n                result += path.sep;\n            }\n            result += this.segments[i];\n        }\n        return result;\n    }\n}\nexports.Path = Path;\n//# sourceMappingURL=internal-path.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.partialMatch = exports.match = exports.getSearchPaths = void 0;\nconst pathHelper = __importStar(require(\"./internal-path-helper\"));\nconst internal_match_kind_1 = require(\"./internal-match-kind\");\nconst IS_WINDOWS = process.platform === 'win32';\n/**\n * Given an array of patterns, returns an array of paths to search.\n * Duplicates and paths under other included paths are filtered out.\n */\nfunction getSearchPaths(patterns) {\n    // Ignore negate patterns\n    patterns = patterns.filter(x => !x.negate);\n    // Create a map of all search paths\n    const searchPathMap = {};\n    for (const pattern of patterns) {\n        const key = IS_WINDOWS\n            ? pattern.searchPath.toUpperCase()\n            : pattern.searchPath;\n        searchPathMap[key] = 'candidate';\n    }\n    const result = [];\n    for (const pattern of patterns) {\n        // Check if already included\n        const key = IS_WINDOWS\n            ? pattern.searchPath.toUpperCase()\n            : pattern.searchPath;\n        if (searchPathMap[key] === 'included') {\n            continue;\n        }\n        // Check for an ancestor search path\n        let foundAncestor = false;\n        let tempKey = key;\n        let parent = pathHelper.dirname(tempKey);\n        while (parent !== tempKey) {\n            if (searchPathMap[parent]) {\n                foundAncestor = true;\n                break;\n            }\n            tempKey = parent;\n            parent = pathHelper.dirname(tempKey);\n        }\n        // Include the search pattern in the result\n        if (!foundAncestor) {\n            result.push(pattern.searchPath);\n            searchPathMap[key] = 'included';\n        }\n    }\n    return result;\n}\nexports.getSearchPaths = getSearchPaths;\n/**\n * Matches the patterns against the path\n */\nfunction match(patterns, itemPath) {\n    let result = internal_match_kind_1.MatchKind.None;\n    for (const pattern of patterns) {\n        if (pattern.negate) {\n            result &= ~pattern.match(itemPath);\n        }\n        else {\n            result |= pattern.match(itemPath);\n        }\n    }\n    return result;\n}\nexports.match = match;\n/**\n * Checks whether to descend further into the directory\n */\nfunction partialMatch(patterns, itemPath) {\n    return patterns.some(x => !x.negate && x.partialMatch(itemPath));\n}\nexports.partialMatch = partialMatch;\n//# sourceMappingURL=internal-pattern-helper.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Pattern = void 0;\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst pathHelper = __importStar(require(\"./internal-path-helper\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst minimatch_1 = require(\"minimatch\");\nconst internal_match_kind_1 = require(\"./internal-match-kind\");\nconst internal_path_1 = require(\"./internal-path\");\nconst IS_WINDOWS = process.platform === 'win32';\nclass Pattern {\n    constructor(patternOrNegate, isImplicitPattern = false, segments, homedir) {\n        /**\n         * Indicates whether matches should be excluded from the result set\n         */\n        this.negate = false;\n        // Pattern overload\n        let pattern;\n        if (typeof patternOrNegate === 'string') {\n            pattern = patternOrNegate.trim();\n        }\n        // Segments overload\n        else {\n            // Convert to pattern\n            segments = segments || [];\n            assert_1.default(segments.length, `Parameter 'segments' must not empty`);\n            const root = Pattern.getLiteral(segments[0]);\n            assert_1.default(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);\n            pattern = new internal_path_1.Path(segments).toString().trim();\n            if (patternOrNegate) {\n                pattern = `!${pattern}`;\n            }\n        }\n        // Negate\n        while (pattern.startsWith('!')) {\n            this.negate = !this.negate;\n            pattern = pattern.substr(1).trim();\n        }\n        // Normalize slashes and ensures absolute root\n        pattern = Pattern.fixupPattern(pattern, homedir);\n        // Segments\n        this.segments = new internal_path_1.Path(pattern).segments;\n        // Trailing slash indicates the pattern should only match directories, not regular files\n        this.trailingSeparator = pathHelper\n            .normalizeSeparators(pattern)\n            .endsWith(path.sep);\n        pattern = pathHelper.safeTrimTrailingSeparator(pattern);\n        // Search path (literal path prior to the first glob segment)\n        let foundGlob = false;\n        const searchSegments = this.segments\n            .map(x => Pattern.getLiteral(x))\n            .filter(x => !foundGlob && !(foundGlob = x === ''));\n        this.searchPath = new internal_path_1.Path(searchSegments).toString();\n        // Root RegExp (required when determining partial match)\n        this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? 'i' : '');\n        this.isImplicitPattern = isImplicitPattern;\n        // Create minimatch\n        const minimatchOptions = {\n            dot: true,\n            nobrace: true,\n            nocase: IS_WINDOWS,\n            nocomment: true,\n            noext: true,\n            nonegate: true\n        };\n        pattern = IS_WINDOWS ? pattern.replace(/\\\\/g, '/') : pattern;\n        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);\n    }\n    /**\n     * Matches the pattern against the specified path\n     */\n    match(itemPath) {\n        // Last segment is globstar?\n        if (this.segments[this.segments.length - 1] === '**') {\n            // Normalize slashes\n            itemPath = pathHelper.normalizeSeparators(itemPath);\n            // Append a trailing slash. Otherwise Minimatch will not match the directory immediately\n            // preceding the globstar. For example, given the pattern `/foo/**`, Minimatch returns\n            // false for `/foo` but returns true for `/foo/`. Append a trailing slash to handle that quirk.\n            if (!itemPath.endsWith(path.sep) && this.isImplicitPattern === false) {\n                // Note, this is safe because the constructor ensures the pattern has an absolute root.\n                // For example, formats like C: and C:foo on Windows are resolved to an absolute root.\n                itemPath = `${itemPath}${path.sep}`;\n            }\n        }\n        else {\n            // Normalize slashes and trim unnecessary trailing slash\n            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);\n        }\n        // Match\n        if (this.minimatch.match(itemPath)) {\n            return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;\n        }\n        return internal_match_kind_1.MatchKind.None;\n    }\n    /**\n     * Indicates whether the pattern may match descendants of the specified path\n     */\n    partialMatch(itemPath) {\n        // Normalize slashes and trim unnecessary trailing slash\n        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);\n        // matchOne does not handle root path correctly\n        if (pathHelper.dirname(itemPath) === itemPath) {\n            return this.rootRegExp.test(itemPath);\n        }\n        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\\\+/ : /\\/+/), this.minimatch.set[0], true);\n    }\n    /**\n     * Escapes glob patterns within a path\n     */\n    static globEscape(s) {\n        return (IS_WINDOWS ? s : s.replace(/\\\\/g, '\\\\\\\\')) // escape '\\' on Linux/macOS\n            .replace(/(\\[)(?=[^/]+\\])/g, '[[]') // escape '[' when ']' follows within the path segment\n            .replace(/\\?/g, '[?]') // escape '?'\n            .replace(/\\*/g, '[*]'); // escape '*'\n    }\n    /**\n     * Normalizes slashes and ensures absolute root\n     */\n    static fixupPattern(pattern, homedir) {\n        // Empty\n        assert_1.default(pattern, 'pattern cannot be empty');\n        // Must not contain `.` segment, unless first segment\n        // Must not contain `..` segment\n        const literalSegments = new internal_path_1.Path(pattern).segments.map(x => Pattern.getLiteral(x));\n        assert_1.default(literalSegments.every((x, i) => (x !== '.' || i === 0) && x !== '..'), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);\n        // Must not contain globs in root, e.g. Windows UNC path \\\\foo\\b*r\n        assert_1.default(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);\n        // Normalize slashes\n        pattern = pathHelper.normalizeSeparators(pattern);\n        // Replace leading `.` segment\n        if (pattern === '.' || pattern.startsWith(`.${path.sep}`)) {\n            pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1);\n        }\n        // Replace leading `~` segment\n        else if (pattern === '~' || pattern.startsWith(`~${path.sep}`)) {\n            homedir = homedir || os.homedir();\n            assert_1.default(homedir, 'Unable to determine HOME directory');\n            assert_1.default(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);\n            pattern = Pattern.globEscape(homedir) + pattern.substr(1);\n        }\n        // Replace relative drive root, e.g. pattern is C: or C:foo\n        else if (IS_WINDOWS &&\n            (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\\\]/i))) {\n            let root = pathHelper.ensureAbsoluteRoot('C:\\\\dummy-root', pattern.substr(0, 2));\n            if (pattern.length > 2 && !root.endsWith('\\\\')) {\n                root += '\\\\';\n            }\n            pattern = Pattern.globEscape(root) + pattern.substr(2);\n        }\n        // Replace relative root, e.g. pattern is \\ or \\foo\n        else if (IS_WINDOWS && (pattern === '\\\\' || pattern.match(/^\\\\[^\\\\]/))) {\n            let root = pathHelper.ensureAbsoluteRoot('C:\\\\dummy-root', '\\\\');\n            if (!root.endsWith('\\\\')) {\n                root += '\\\\';\n            }\n            pattern = Pattern.globEscape(root) + pattern.substr(1);\n        }\n        // Otherwise ensure absolute root\n        else {\n            pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);\n        }\n        return pathHelper.normalizeSeparators(pattern);\n    }\n    /**\n     * Attempts to unescape a pattern segment to create a literal path segment.\n     * Otherwise returns empty string.\n     */\n    static getLiteral(segment) {\n        let literal = '';\n        for (let i = 0; i < segment.length; i++) {\n            const c = segment[i];\n            // Escape\n            if (c === '\\\\' && !IS_WINDOWS && i + 1 < segment.length) {\n                literal += segment[++i];\n                continue;\n            }\n            // Wildcard\n            else if (c === '*' || c === '?') {\n                return '';\n            }\n            // Character set\n            else if (c === '[' && i + 1 < segment.length) {\n                let set = '';\n                let closed = -1;\n                for (let i2 = i + 1; i2 < segment.length; i2++) {\n                    const c2 = segment[i2];\n                    // Escape\n                    if (c2 === '\\\\' && !IS_WINDOWS && i2 + 1 < segment.length) {\n                        set += segment[++i2];\n                        continue;\n                    }\n                    // Closed\n                    else if (c2 === ']') {\n                        closed = i2;\n                        break;\n                    }\n                    // Otherwise\n                    else {\n                        set += c2;\n                    }\n                }\n                // Closed?\n                if (closed >= 0) {\n                    // Cannot convert\n                    if (set.length > 1) {\n                        return '';\n                    }\n                    // Convert to literal\n                    if (set) {\n                        literal += set;\n                        i = closed;\n                        continue;\n                    }\n                }\n                // Otherwise fall thru\n            }\n            // Append\n            literal += c;\n        }\n        return literal;\n    }\n    /**\n     * Escapes regexp special characters\n     * https://javascript.info/regexp-escaping\n     */\n    static regExpEscape(s) {\n        return s.replace(/[[\\\\^$.|?*+()]/g, '\\\\$&');\n    }\n}\nexports.Pattern = Pattern;\n//# sourceMappingURL=internal-pattern.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SearchState = void 0;\nclass SearchState {\n    constructor(path, level) {\n        this.path = path;\n        this.level = level;\n    }\n}\nexports.SearchState = SearchState;\n//# sourceMappingURL=internal-search-state.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        return new URL(proxyVar);\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n//# sourceMappingURL=proxy.js.map","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst AdmonitionType = 'admonition';\n\nconst BlockquoteType = 'blockquote';\n\nconst BreakType = 'break';\n\nconst CodeType = 'code';\n\nconst DefinitionType = 'definition';\n\nconst DeleteType = 'delete';\n\nconst EcmaImportType = 'ecmaImport';\n\nconst EmphasisType = 'emphasis';\n\nconst FootnoteType = 'footnote';\n\nconst FootnoteDefinitionType = 'footnoteDefinition';\n\nconst FootnoteReferenceType = 'footnoteReference';\n\nconst FrontmatterType = 'frontmatter';\n\nconst HeadingType = 'heading';\n\nconst HtmlType = 'html';\nexports.HtmlContentType = void 0;\n(function (HtmlContentType) {\n    HtmlContentType[\"CDATA\"] = \"cdata\";\n    HtmlContentType[\"Closing\"] = \"closing\";\n    HtmlContentType[\"Comment\"] = \"comment\";\n    HtmlContentType[\"Declaration\"] = \"declaration\";\n    HtmlContentType[\"Instruction\"] = \"instruction\";\n    HtmlContentType[\"Open\"] = \"open\";\n})(exports.HtmlContentType || (exports.HtmlContentType = {}));\n\nconst ImageReferenceType = 'imageReference';\n\nconst ImageType = 'image';\n\nconst InlineCodeType = 'inlineCode';\n\nconst InlineMathType = 'inlineMath';\n\nconst LinkReferenceType = 'linkReference';\n\nconst LinkType = 'link';\n\nconst ListItemType = 'listItem';\nexports.TaskStatus = void 0;\n(function (TaskStatus) {\n    TaskStatus[\"TODO\"] = \"todo\";\n    TaskStatus[\"DOING\"] = \"doing\";\n    TaskStatus[\"DONE\"] = \"done\";\n})(exports.TaskStatus || (exports.TaskStatus = {}));\n\nconst ListType = 'list';\n\nconst MathType = 'math';\n\nconst ParagraphType = 'paragraph';\n\nconst RootType = 'root';\n\nconst StrongType = 'strong';\n\nconst TableCellType = 'tableCell';\n\nconst TableRowType = 'tableRow';\n\nconst TableType = 'table';\n\nconst TextType = 'text';\n\nconst ThematicBreakType = 'thematicBreak';\n\nexports.AdmonitionType = AdmonitionType;\nexports.BlockquoteType = BlockquoteType;\nexports.BreakType = BreakType;\nexports.CodeType = CodeType;\nexports.DefinitionType = DefinitionType;\nexports.DeleteType = DeleteType;\nexports.EcmaImportType = EcmaImportType;\nexports.EmphasisType = EmphasisType;\nexports.FootnoteDefinitionType = FootnoteDefinitionType;\nexports.FootnoteReferenceType = FootnoteReferenceType;\nexports.FootnoteType = FootnoteType;\nexports.FrontmatterType = FrontmatterType;\nexports.HeadingType = HeadingType;\nexports.HtmlType = HtmlType;\nexports.ImageReferenceType = ImageReferenceType;\nexports.ImageType = ImageType;\nexports.InlineCodeType = InlineCodeType;\nexports.InlineMathType = InlineMathType;\nexports.LinkReferenceType = LinkReferenceType;\nexports.LinkType = LinkType;\nexports.ListItemType = ListItemType;\nexports.ListType = ListType;\nexports.MathType = MathType;\nexports.ParagraphType = ParagraphType;\nexports.RootType = RootType;\nexports.StrongType = StrongType;\nexports.TableCellType = TableCellType;\nexports.TableRowType = TableRowType;\nexports.TableType = TableType;\nexports.TextType = TextType;\nexports.ThematicBreakType = ThematicBreakType;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nexports.AsciiCodePoint = void 0;\n(function (AsciiCodePoint) {\n    AsciiCodePoint[AsciiCodePoint[\"NUL\"] = 0] = \"NUL\";\n    AsciiCodePoint[AsciiCodePoint[\"SOH\"] = 1] = \"SOH\";\n    AsciiCodePoint[AsciiCodePoint[\"STX\"] = 2] = \"STX\";\n    AsciiCodePoint[AsciiCodePoint[\"ETX\"] = 3] = \"ETX\";\n    AsciiCodePoint[AsciiCodePoint[\"EOT\"] = 4] = \"EOT\";\n    AsciiCodePoint[AsciiCodePoint[\"ENQ\"] = 5] = \"ENQ\";\n    AsciiCodePoint[AsciiCodePoint[\"ACK\"] = 6] = \"ACK\";\n    AsciiCodePoint[AsciiCodePoint[\"BEL\"] = 7] = \"BEL\";\n    AsciiCodePoint[AsciiCodePoint[\"BS\"] = 8] = \"BS\";\n    AsciiCodePoint[AsciiCodePoint[\"HT\"] = 9] = \"HT\";\n    AsciiCodePoint[AsciiCodePoint[\"LF\"] = 10] = \"LF\";\n    AsciiCodePoint[AsciiCodePoint[\"VT\"] = 11] = \"VT\";\n    AsciiCodePoint[AsciiCodePoint[\"FF\"] = 12] = \"FF\";\n    AsciiCodePoint[AsciiCodePoint[\"CR\"] = 13] = \"CR\";\n    AsciiCodePoint[AsciiCodePoint[\"SO\"] = 14] = \"SO\";\n    AsciiCodePoint[AsciiCodePoint[\"SI\"] = 15] = \"SI\";\n    AsciiCodePoint[AsciiCodePoint[\"DLE\"] = 16] = \"DLE\";\n    AsciiCodePoint[AsciiCodePoint[\"DC1\"] = 17] = \"DC1\";\n    AsciiCodePoint[AsciiCodePoint[\"DC2\"] = 18] = \"DC2\";\n    AsciiCodePoint[AsciiCodePoint[\"DC3\"] = 19] = \"DC3\";\n    AsciiCodePoint[AsciiCodePoint[\"DC4\"] = 20] = \"DC4\";\n    AsciiCodePoint[AsciiCodePoint[\"NAK\"] = 21] = \"NAK\";\n    AsciiCodePoint[AsciiCodePoint[\"SYN\"] = 22] = \"SYN\";\n    AsciiCodePoint[AsciiCodePoint[\"ETB\"] = 23] = \"ETB\";\n    AsciiCodePoint[AsciiCodePoint[\"CAN\"] = 24] = \"CAN\";\n    AsciiCodePoint[AsciiCodePoint[\"EM\"] = 25] = \"EM\";\n    AsciiCodePoint[AsciiCodePoint[\"SUB\"] = 26] = \"SUB\";\n    AsciiCodePoint[AsciiCodePoint[\"ESC\"] = 27] = \"ESC\";\n    AsciiCodePoint[AsciiCodePoint[\"FS\"] = 28] = \"FS\";\n    AsciiCodePoint[AsciiCodePoint[\"GS\"] = 29] = \"GS\";\n    AsciiCodePoint[AsciiCodePoint[\"RS\"] = 30] = \"RS\";\n    AsciiCodePoint[AsciiCodePoint[\"US\"] = 31] = \"US\";\n    AsciiCodePoint[AsciiCodePoint[\"SPACE\"] = 32] = \"SPACE\";\n    AsciiCodePoint[AsciiCodePoint[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    AsciiCodePoint[AsciiCodePoint[\"DOUBLE_QUOTE\"] = 34] = \"DOUBLE_QUOTE\";\n    AsciiCodePoint[AsciiCodePoint[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\n    AsciiCodePoint[AsciiCodePoint[\"DOLLAR_SIGN\"] = 36] = \"DOLLAR_SIGN\";\n    AsciiCodePoint[AsciiCodePoint[\"PERCENT_SIGN\"] = 37] = \"PERCENT_SIGN\";\n    AsciiCodePoint[AsciiCodePoint[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    AsciiCodePoint[AsciiCodePoint[\"SINGLE_QUOTE\"] = 39] = \"SINGLE_QUOTE\";\n    AsciiCodePoint[AsciiCodePoint[\"OPEN_PARENTHESIS\"] = 40] = \"OPEN_PARENTHESIS\";\n    AsciiCodePoint[AsciiCodePoint[\"CLOSE_PARENTHESIS\"] = 41] = \"CLOSE_PARENTHESIS\";\n    AsciiCodePoint[AsciiCodePoint[\"ASTERISK\"] = 42] = \"ASTERISK\";\n    AsciiCodePoint[AsciiCodePoint[\"PLUS_SIGN\"] = 43] = \"PLUS_SIGN\";\n    AsciiCodePoint[AsciiCodePoint[\"COMMA\"] = 44] = \"COMMA\";\n    AsciiCodePoint[AsciiCodePoint[\"MINUS_SIGN\"] = 45] = \"MINUS_SIGN\";\n    AsciiCodePoint[AsciiCodePoint[\"DOT\"] = 46] = \"DOT\";\n    AsciiCodePoint[AsciiCodePoint[\"SLASH\"] = 47] = \"SLASH\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT0\"] = 48] = \"DIGIT0\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT1\"] = 49] = \"DIGIT1\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT2\"] = 50] = \"DIGIT2\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT3\"] = 51] = \"DIGIT3\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT4\"] = 52] = \"DIGIT4\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT5\"] = 53] = \"DIGIT5\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT6\"] = 54] = \"DIGIT6\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT7\"] = 55] = \"DIGIT7\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT8\"] = 56] = \"DIGIT8\";\n    AsciiCodePoint[AsciiCodePoint[\"DIGIT9\"] = 57] = \"DIGIT9\";\n    AsciiCodePoint[AsciiCodePoint[\"COLON\"] = 58] = \"COLON\";\n    AsciiCodePoint[AsciiCodePoint[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    AsciiCodePoint[AsciiCodePoint[\"OPEN_ANGLE\"] = 60] = \"OPEN_ANGLE\";\n    AsciiCodePoint[AsciiCodePoint[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    AsciiCodePoint[AsciiCodePoint[\"CLOSE_ANGLE\"] = 62] = \"CLOSE_ANGLE\";\n    AsciiCodePoint[AsciiCodePoint[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    AsciiCodePoint[AsciiCodePoint[\"AT_SIGN\"] = 64] = \"AT_SIGN\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_A\"] = 65] = \"UPPERCASE_A\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_B\"] = 66] = \"UPPERCASE_B\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_C\"] = 67] = \"UPPERCASE_C\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_D\"] = 68] = \"UPPERCASE_D\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_E\"] = 69] = \"UPPERCASE_E\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_F\"] = 70] = \"UPPERCASE_F\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_G\"] = 71] = \"UPPERCASE_G\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_H\"] = 72] = \"UPPERCASE_H\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_I\"] = 73] = \"UPPERCASE_I\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_J\"] = 74] = \"UPPERCASE_J\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_K\"] = 75] = \"UPPERCASE_K\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_L\"] = 76] = \"UPPERCASE_L\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_M\"] = 77] = \"UPPERCASE_M\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_N\"] = 78] = \"UPPERCASE_N\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_O\"] = 79] = \"UPPERCASE_O\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_P\"] = 80] = \"UPPERCASE_P\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_Q\"] = 81] = \"UPPERCASE_Q\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_R\"] = 82] = \"UPPERCASE_R\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_S\"] = 83] = \"UPPERCASE_S\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_T\"] = 84] = \"UPPERCASE_T\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_U\"] = 85] = \"UPPERCASE_U\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_V\"] = 86] = \"UPPERCASE_V\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_W\"] = 87] = \"UPPERCASE_W\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_X\"] = 88] = \"UPPERCASE_X\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_Y\"] = 89] = \"UPPERCASE_Y\";\n    AsciiCodePoint[AsciiCodePoint[\"UPPERCASE_Z\"] = 90] = \"UPPERCASE_Z\";\n    AsciiCodePoint[AsciiCodePoint[\"OPEN_BRACKET\"] = 91] = \"OPEN_BRACKET\";\n    AsciiCodePoint[AsciiCodePoint[\"BACKSLASH\"] = 92] = \"BACKSLASH\";\n    AsciiCodePoint[AsciiCodePoint[\"CLOSE_BRACKET\"] = 93] = \"CLOSE_BRACKET\";\n    AsciiCodePoint[AsciiCodePoint[\"CARET\"] = 94] = \"CARET\";\n    AsciiCodePoint[AsciiCodePoint[\"UNDERSCORE\"] = 95] = \"UNDERSCORE\";\n    AsciiCodePoint[AsciiCodePoint[\"BACKTICK\"] = 96] = \"BACKTICK\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_A\"] = 97] = \"LOWERCASE_A\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_B\"] = 98] = \"LOWERCASE_B\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_C\"] = 99] = \"LOWERCASE_C\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_D\"] = 100] = \"LOWERCASE_D\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_E\"] = 101] = \"LOWERCASE_E\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_F\"] = 102] = \"LOWERCASE_F\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_G\"] = 103] = \"LOWERCASE_G\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_H\"] = 104] = \"LOWERCASE_H\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_I\"] = 105] = \"LOWERCASE_I\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_J\"] = 106] = \"LOWERCASE_J\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_K\"] = 107] = \"LOWERCASE_K\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_L\"] = 108] = \"LOWERCASE_L\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_M\"] = 109] = \"LOWERCASE_M\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_N\"] = 110] = \"LOWERCASE_N\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_O\"] = 111] = \"LOWERCASE_O\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_P\"] = 112] = \"LOWERCASE_P\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_Q\"] = 113] = \"LOWERCASE_Q\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_R\"] = 114] = \"LOWERCASE_R\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_S\"] = 115] = \"LOWERCASE_S\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_T\"] = 116] = \"LOWERCASE_T\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_U\"] = 117] = \"LOWERCASE_U\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_V\"] = 118] = \"LOWERCASE_V\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_W\"] = 119] = \"LOWERCASE_W\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_X\"] = 120] = \"LOWERCASE_X\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_Y\"] = 121] = \"LOWERCASE_Y\";\n    AsciiCodePoint[AsciiCodePoint[\"LOWERCASE_Z\"] = 122] = \"LOWERCASE_Z\";\n    AsciiCodePoint[AsciiCodePoint[\"OPEN_BRACE\"] = 123] = \"OPEN_BRACE\";\n    AsciiCodePoint[AsciiCodePoint[\"VERTICAL_SLASH\"] = 124] = \"VERTICAL_SLASH\";\n    AsciiCodePoint[AsciiCodePoint[\"CLOSE_BRACE\"] = 125] = \"CLOSE_BRACE\";\n    AsciiCodePoint[AsciiCodePoint[\"TILDE\"] = 126] = \"TILDE\";\n    AsciiCodePoint[AsciiCodePoint[\"DELETE\"] = 127] = \"DELETE\";\n})(exports.AsciiCodePoint || (exports.AsciiCodePoint = {}));\n\nconst foldingCaseCodeMap = {\n    '\\xB5': '\\u03BC',\n    '\\xC0': '\\xE0',\n    '\\xC1': '\\xE1',\n    '\\xC2': '\\xE2',\n    '\\xC3': '\\xE3',\n    '\\xC4': '\\xE4',\n    '\\xC5': '\\xE5',\n    '\\xC6': '\\xE6',\n    '\\xC7': '\\xE7',\n    '\\xC8': '\\xE8',\n    '\\xC9': '\\xE9',\n    '\\xCA': '\\xEA',\n    '\\xCB': '\\xEB',\n    '\\xCC': '\\xEC',\n    '\\xCD': '\\xED',\n    '\\xCE': '\\xEE',\n    '\\xCF': '\\xEF',\n    '\\xD0': '\\xF0',\n    '\\xD1': '\\xF1',\n    '\\xD2': '\\xF2',\n    '\\xD3': '\\xF3',\n    '\\xD4': '\\xF4',\n    '\\xD5': '\\xF5',\n    '\\xD6': '\\xF6',\n    '\\xD8': '\\xF8',\n    '\\xD9': '\\xF9',\n    '\\xDA': '\\xFA',\n    '\\xDB': '\\xFB',\n    '\\xDC': '\\xFC',\n    '\\xDD': '\\xFD',\n    '\\xDE': '\\xFE',\n    '\\u0100': '\\u0101',\n    '\\u0102': '\\u0103',\n    '\\u0104': '\\u0105',\n    '\\u0106': '\\u0107',\n    '\\u0108': '\\u0109',\n    '\\u010A': '\\u010B',\n    '\\u010C': '\\u010D',\n    '\\u010E': '\\u010F',\n    '\\u0110': '\\u0111',\n    '\\u0112': '\\u0113',\n    '\\u0114': '\\u0115',\n    '\\u0116': '\\u0117',\n    '\\u0118': '\\u0119',\n    '\\u011A': '\\u011B',\n    '\\u011C': '\\u011D',\n    '\\u011E': '\\u011F',\n    '\\u0120': '\\u0121',\n    '\\u0122': '\\u0123',\n    '\\u0124': '\\u0125',\n    '\\u0126': '\\u0127',\n    '\\u0128': '\\u0129',\n    '\\u012A': '\\u012B',\n    '\\u012C': '\\u012D',\n    '\\u012E': '\\u012F',\n    '\\u0132': '\\u0133',\n    '\\u0134': '\\u0135',\n    '\\u0136': '\\u0137',\n    '\\u0139': '\\u013A',\n    '\\u013B': '\\u013C',\n    '\\u013D': '\\u013E',\n    '\\u013F': '\\u0140',\n    '\\u0141': '\\u0142',\n    '\\u0143': '\\u0144',\n    '\\u0145': '\\u0146',\n    '\\u0147': '\\u0148',\n    '\\u014A': '\\u014B',\n    '\\u014C': '\\u014D',\n    '\\u014E': '\\u014F',\n    '\\u0150': '\\u0151',\n    '\\u0152': '\\u0153',\n    '\\u0154': '\\u0155',\n    '\\u0156': '\\u0157',\n    '\\u0158': '\\u0159',\n    '\\u015A': '\\u015B',\n    '\\u015C': '\\u015D',\n    '\\u015E': '\\u015F',\n    '\\u0160': '\\u0161',\n    '\\u0162': '\\u0163',\n    '\\u0164': '\\u0165',\n    '\\u0166': '\\u0167',\n    '\\u0168': '\\u0169',\n    '\\u016A': '\\u016B',\n    '\\u016C': '\\u016D',\n    '\\u016E': '\\u016F',\n    '\\u0170': '\\u0171',\n    '\\u0172': '\\u0173',\n    '\\u0174': '\\u0175',\n    '\\u0176': '\\u0177',\n    '\\u0178': '\\xFF',\n    '\\u0179': '\\u017A',\n    '\\u017B': '\\u017C',\n    '\\u017D': '\\u017E',\n    '\\u017F': 's',\n    '\\u0181': '\\u0253',\n    '\\u0182': '\\u0183',\n    '\\u0184': '\\u0185',\n    '\\u0186': '\\u0254',\n    '\\u0187': '\\u0188',\n    '\\u0189': '\\u0256',\n    '\\u018A': '\\u0257',\n    '\\u018B': '\\u018C',\n    '\\u018E': '\\u01DD',\n    '\\u018F': '\\u0259',\n    '\\u0190': '\\u025B',\n    '\\u0191': '\\u0192',\n    '\\u0193': '\\u0260',\n    '\\u0194': '\\u0263',\n    '\\u0196': '\\u0269',\n    '\\u0197': '\\u0268',\n    '\\u0198': '\\u0199',\n    '\\u019C': '\\u026F',\n    '\\u019D': '\\u0272',\n    '\\u019F': '\\u0275',\n    '\\u01A0': '\\u01A1',\n    '\\u01A2': '\\u01A3',\n    '\\u01A4': '\\u01A5',\n    '\\u01A6': '\\u0280',\n    '\\u01A7': '\\u01A8',\n    '\\u01A9': '\\u0283',\n    '\\u01AC': '\\u01AD',\n    '\\u01AE': '\\u0288',\n    '\\u01AF': '\\u01B0',\n    '\\u01B1': '\\u028A',\n    '\\u01B2': '\\u028B',\n    '\\u01B3': '\\u01B4',\n    '\\u01B5': '\\u01B6',\n    '\\u01B7': '\\u0292',\n    '\\u01B8': '\\u01B9',\n    '\\u01BC': '\\u01BD',\n    '\\u01C4': '\\u01C6',\n    '\\u01C5': '\\u01C6',\n    '\\u01C7': '\\u01C9',\n    '\\u01C8': '\\u01C9',\n    '\\u01CA': '\\u01CC',\n    '\\u01CB': '\\u01CC',\n    '\\u01CD': '\\u01CE',\n    '\\u01CF': '\\u01D0',\n    '\\u01D1': '\\u01D2',\n    '\\u01D3': '\\u01D4',\n    '\\u01D5': '\\u01D6',\n    '\\u01D7': '\\u01D8',\n    '\\u01D9': '\\u01DA',\n    '\\u01DB': '\\u01DC',\n    '\\u01DE': '\\u01DF',\n    '\\u01E0': '\\u01E1',\n    '\\u01E2': '\\u01E3',\n    '\\u01E4': '\\u01E5',\n    '\\u01E6': '\\u01E7',\n    '\\u01E8': '\\u01E9',\n    '\\u01EA': '\\u01EB',\n    '\\u01EC': '\\u01ED',\n    '\\u01EE': '\\u01EF',\n    '\\u01F1': '\\u01F3',\n    '\\u01F2': '\\u01F3',\n    '\\u01F4': '\\u01F5',\n    '\\u01F6': '\\u0195',\n    '\\u01F7': '\\u01BF',\n    '\\u01F8': '\\u01F9',\n    '\\u01FA': '\\u01FB',\n    '\\u01FC': '\\u01FD',\n    '\\u01FE': '\\u01FF',\n    '\\u0200': '\\u0201',\n    '\\u0202': '\\u0203',\n    '\\u0204': '\\u0205',\n    '\\u0206': '\\u0207',\n    '\\u0208': '\\u0209',\n    '\\u020A': '\\u020B',\n    '\\u020C': '\\u020D',\n    '\\u020E': '\\u020F',\n    '\\u0210': '\\u0211',\n    '\\u0212': '\\u0213',\n    '\\u0214': '\\u0215',\n    '\\u0216': '\\u0217',\n    '\\u0218': '\\u0219',\n    '\\u021A': '\\u021B',\n    '\\u021C': '\\u021D',\n    '\\u021E': '\\u021F',\n    '\\u0220': '\\u019E',\n    '\\u0222': '\\u0223',\n    '\\u0224': '\\u0225',\n    '\\u0226': '\\u0227',\n    '\\u0228': '\\u0229',\n    '\\u022A': '\\u022B',\n    '\\u022C': '\\u022D',\n    '\\u022E': '\\u022F',\n    '\\u0230': '\\u0231',\n    '\\u0232': '\\u0233',\n    '\\u023A': '\\u2C65',\n    '\\u023B': '\\u023C',\n    '\\u023D': '\\u019A',\n    '\\u023E': '\\u2C66',\n    '\\u0241': '\\u0242',\n    '\\u0243': '\\u0180',\n    '\\u0244': '\\u0289',\n    '\\u0245': '\\u028C',\n    '\\u0246': '\\u0247',\n    '\\u0248': '\\u0249',\n    '\\u024A': '\\u024B',\n    '\\u024C': '\\u024D',\n    '\\u024E': '\\u024F',\n    '\\u0345': '\\u03B9',\n    '\\u0370': '\\u0371',\n    '\\u0372': '\\u0373',\n    '\\u0376': '\\u0377',\n    '\\u037F': '\\u03F3',\n    '\\u0386': '\\u03AC',\n    '\\u0388': '\\u03AD',\n    '\\u0389': '\\u03AE',\n    '\\u038A': '\\u03AF',\n    '\\u038C': '\\u03CC',\n    '\\u038E': '\\u03CD',\n    '\\u038F': '\\u03CE',\n    '\\u0391': '\\u03B1',\n    '\\u0392': '\\u03B2',\n    '\\u0393': '\\u03B3',\n    '\\u0394': '\\u03B4',\n    '\\u0395': '\\u03B5',\n    '\\u0396': '\\u03B6',\n    '\\u0397': '\\u03B7',\n    '\\u0398': '\\u03B8',\n    '\\u0399': '\\u03B9',\n    '\\u039A': '\\u03BA',\n    '\\u039B': '\\u03BB',\n    '\\u039C': '\\u03BC',\n    '\\u039D': '\\u03BD',\n    '\\u039E': '\\u03BE',\n    '\\u039F': '\\u03BF',\n    '\\u03A0': '\\u03C0',\n    '\\u03A1': '\\u03C1',\n    '\\u03A3': '\\u03C3',\n    '\\u03A4': '\\u03C4',\n    '\\u03A5': '\\u03C5',\n    '\\u03A6': '\\u03C6',\n    '\\u03A7': '\\u03C7',\n    '\\u03A8': '\\u03C8',\n    '\\u03A9': '\\u03C9',\n    '\\u03AA': '\\u03CA',\n    '\\u03AB': '\\u03CB',\n    '\\u03C2': '\\u03C3',\n    '\\u03CF': '\\u03D7',\n    '\\u03D0': '\\u03B2',\n    '\\u03D1': '\\u03B8',\n    '\\u03D5': '\\u03C6',\n    '\\u03D6': '\\u03C0',\n    '\\u03D8': '\\u03D9',\n    '\\u03DA': '\\u03DB',\n    '\\u03DC': '\\u03DD',\n    '\\u03DE': '\\u03DF',\n    '\\u03E0': '\\u03E1',\n    '\\u03E2': '\\u03E3',\n    '\\u03E4': '\\u03E5',\n    '\\u03E6': '\\u03E7',\n    '\\u03E8': '\\u03E9',\n    '\\u03EA': '\\u03EB',\n    '\\u03EC': '\\u03ED',\n    '\\u03EE': '\\u03EF',\n    '\\u03F0': '\\u03BA',\n    '\\u03F1': '\\u03C1',\n    '\\u03F4': '\\u03B8',\n    '\\u03F5': '\\u03B5',\n    '\\u03F7': '\\u03F8',\n    '\\u03F9': '\\u03F2',\n    '\\u03FA': '\\u03FB',\n    '\\u03FD': '\\u037B',\n    '\\u03FE': '\\u037C',\n    '\\u03FF': '\\u037D',\n    '\\u0400': '\\u0450',\n    '\\u0401': '\\u0451',\n    '\\u0402': '\\u0452',\n    '\\u0403': '\\u0453',\n    '\\u0404': '\\u0454',\n    '\\u0405': '\\u0455',\n    '\\u0406': '\\u0456',\n    '\\u0407': '\\u0457',\n    '\\u0408': '\\u0458',\n    '\\u0409': '\\u0459',\n    '\\u040A': '\\u045A',\n    '\\u040B': '\\u045B',\n    '\\u040C': '\\u045C',\n    '\\u040D': '\\u045D',\n    '\\u040E': '\\u045E',\n    '\\u040F': '\\u045F',\n    '\\u0410': '\\u0430',\n    '\\u0411': '\\u0431',\n    '\\u0412': '\\u0432',\n    '\\u0413': '\\u0433',\n    '\\u0414': '\\u0434',\n    '\\u0415': '\\u0435',\n    '\\u0416': '\\u0436',\n    '\\u0417': '\\u0437',\n    '\\u0418': '\\u0438',\n    '\\u0419': '\\u0439',\n    '\\u041A': '\\u043A',\n    '\\u041B': '\\u043B',\n    '\\u041C': '\\u043C',\n    '\\u041D': '\\u043D',\n    '\\u041E': '\\u043E',\n    '\\u041F': '\\u043F',\n    '\\u0420': '\\u0440',\n    '\\u0421': '\\u0441',\n    '\\u0422': '\\u0442',\n    '\\u0423': '\\u0443',\n    '\\u0424': '\\u0444',\n    '\\u0425': '\\u0445',\n    '\\u0426': '\\u0446',\n    '\\u0427': '\\u0447',\n    '\\u0428': '\\u0448',\n    '\\u0429': '\\u0449',\n    '\\u042A': '\\u044A',\n    '\\u042B': '\\u044B',\n    '\\u042C': '\\u044C',\n    '\\u042D': '\\u044D',\n    '\\u042E': '\\u044E',\n    '\\u042F': '\\u044F',\n    '\\u0460': '\\u0461',\n    '\\u0462': '\\u0463',\n    '\\u0464': '\\u0465',\n    '\\u0466': '\\u0467',\n    '\\u0468': '\\u0469',\n    '\\u046A': '\\u046B',\n    '\\u046C': '\\u046D',\n    '\\u046E': '\\u046F',\n    '\\u0470': '\\u0471',\n    '\\u0472': '\\u0473',\n    '\\u0474': '\\u0475',\n    '\\u0476': '\\u0477',\n    '\\u0478': '\\u0479',\n    '\\u047A': '\\u047B',\n    '\\u047C': '\\u047D',\n    '\\u047E': '\\u047F',\n    '\\u0480': '\\u0481',\n    '\\u048A': '\\u048B',\n    '\\u048C': '\\u048D',\n    '\\u048E': '\\u048F',\n    '\\u0490': '\\u0491',\n    '\\u0492': '\\u0493',\n    '\\u0494': '\\u0495',\n    '\\u0496': '\\u0497',\n    '\\u0498': '\\u0499',\n    '\\u049A': '\\u049B',\n    '\\u049C': '\\u049D',\n    '\\u049E': '\\u049F',\n    '\\u04A0': '\\u04A1',\n    '\\u04A2': '\\u04A3',\n    '\\u04A4': '\\u04A5',\n    '\\u04A6': '\\u04A7',\n    '\\u04A8': '\\u04A9',\n    '\\u04AA': '\\u04AB',\n    '\\u04AC': '\\u04AD',\n    '\\u04AE': '\\u04AF',\n    '\\u04B0': '\\u04B1',\n    '\\u04B2': '\\u04B3',\n    '\\u04B4': '\\u04B5',\n    '\\u04B6': '\\u04B7',\n    '\\u04B8': '\\u04B9',\n    '\\u04BA': '\\u04BB',\n    '\\u04BC': '\\u04BD',\n    '\\u04BE': '\\u04BF',\n    '\\u04C0': '\\u04CF',\n    '\\u04C1': '\\u04C2',\n    '\\u04C3': '\\u04C4',\n    '\\u04C5': '\\u04C6',\n    '\\u04C7': '\\u04C8',\n    '\\u04C9': '\\u04CA',\n    '\\u04CB': '\\u04CC',\n    '\\u04CD': '\\u04CE',\n    '\\u04D0': '\\u04D1',\n    '\\u04D2': '\\u04D3',\n    '\\u04D4': '\\u04D5',\n    '\\u04D6': '\\u04D7',\n    '\\u04D8': '\\u04D9',\n    '\\u04DA': '\\u04DB',\n    '\\u04DC': '\\u04DD',\n    '\\u04DE': '\\u04DF',\n    '\\u04E0': '\\u04E1',\n    '\\u04E2': '\\u04E3',\n    '\\u04E4': '\\u04E5',\n    '\\u04E6': '\\u04E7',\n    '\\u04E8': '\\u04E9',\n    '\\u04EA': '\\u04EB',\n    '\\u04EC': '\\u04ED',\n    '\\u04EE': '\\u04EF',\n    '\\u04F0': '\\u04F1',\n    '\\u04F2': '\\u04F3',\n    '\\u04F4': '\\u04F5',\n    '\\u04F6': '\\u04F7',\n    '\\u04F8': '\\u04F9',\n    '\\u04FA': '\\u04FB',\n    '\\u04FC': '\\u04FD',\n    '\\u04FE': '\\u04FF',\n    '\\u0500': '\\u0501',\n    '\\u0502': '\\u0503',\n    '\\u0504': '\\u0505',\n    '\\u0506': '\\u0507',\n    '\\u0508': '\\u0509',\n    '\\u050A': '\\u050B',\n    '\\u050C': '\\u050D',\n    '\\u050E': '\\u050F',\n    '\\u0510': '\\u0511',\n    '\\u0512': '\\u0513',\n    '\\u0514': '\\u0515',\n    '\\u0516': '\\u0517',\n    '\\u0518': '\\u0519',\n    '\\u051A': '\\u051B',\n    '\\u051C': '\\u051D',\n    '\\u051E': '\\u051F',\n    '\\u0520': '\\u0521',\n    '\\u0522': '\\u0523',\n    '\\u0524': '\\u0525',\n    '\\u0526': '\\u0527',\n    '\\u0528': '\\u0529',\n    '\\u052A': '\\u052B',\n    '\\u052C': '\\u052D',\n    '\\u052E': '\\u052F',\n    '\\u0531': '\\u0561',\n    '\\u0532': '\\u0562',\n    '\\u0533': '\\u0563',\n    '\\u0534': '\\u0564',\n    '\\u0535': '\\u0565',\n    '\\u0536': '\\u0566',\n    '\\u0537': '\\u0567',\n    '\\u0538': '\\u0568',\n    '\\u0539': '\\u0569',\n    '\\u053A': '\\u056A',\n    '\\u053B': '\\u056B',\n    '\\u053C': '\\u056C',\n    '\\u053D': '\\u056D',\n    '\\u053E': '\\u056E',\n    '\\u053F': '\\u056F',\n    '\\u0540': '\\u0570',\n    '\\u0541': '\\u0571',\n    '\\u0542': '\\u0572',\n    '\\u0543': '\\u0573',\n    '\\u0544': '\\u0574',\n    '\\u0545': '\\u0575',\n    '\\u0546': '\\u0576',\n    '\\u0547': '\\u0577',\n    '\\u0548': '\\u0578',\n    '\\u0549': '\\u0579',\n    '\\u054A': '\\u057A',\n    '\\u054B': '\\u057B',\n    '\\u054C': '\\u057C',\n    '\\u054D': '\\u057D',\n    '\\u054E': '\\u057E',\n    '\\u054F': '\\u057F',\n    '\\u0550': '\\u0580',\n    '\\u0551': '\\u0581',\n    '\\u0552': '\\u0582',\n    '\\u0553': '\\u0583',\n    '\\u0554': '\\u0584',\n    '\\u0555': '\\u0585',\n    '\\u0556': '\\u0586',\n    '\\u10A0': '\\u2D00',\n    '\\u10A1': '\\u2D01',\n    '\\u10A2': '\\u2D02',\n    '\\u10A3': '\\u2D03',\n    '\\u10A4': '\\u2D04',\n    '\\u10A5': '\\u2D05',\n    '\\u10A6': '\\u2D06',\n    '\\u10A7': '\\u2D07',\n    '\\u10A8': '\\u2D08',\n    '\\u10A9': '\\u2D09',\n    '\\u10AA': '\\u2D0A',\n    '\\u10AB': '\\u2D0B',\n    '\\u10AC': '\\u2D0C',\n    '\\u10AD': '\\u2D0D',\n    '\\u10AE': '\\u2D0E',\n    '\\u10AF': '\\u2D0F',\n    '\\u10B0': '\\u2D10',\n    '\\u10B1': '\\u2D11',\n    '\\u10B2': '\\u2D12',\n    '\\u10B3': '\\u2D13',\n    '\\u10B4': '\\u2D14',\n    '\\u10B5': '\\u2D15',\n    '\\u10B6': '\\u2D16',\n    '\\u10B7': '\\u2D17',\n    '\\u10B8': '\\u2D18',\n    '\\u10B9': '\\u2D19',\n    '\\u10BA': '\\u2D1A',\n    '\\u10BB': '\\u2D1B',\n    '\\u10BC': '\\u2D1C',\n    '\\u10BD': '\\u2D1D',\n    '\\u10BE': '\\u2D1E',\n    '\\u10BF': '\\u2D1F',\n    '\\u10C0': '\\u2D20',\n    '\\u10C1': '\\u2D21',\n    '\\u10C2': '\\u2D22',\n    '\\u10C3': '\\u2D23',\n    '\\u10C4': '\\u2D24',\n    '\\u10C5': '\\u2D25',\n    '\\u10C7': '\\u2D27',\n    '\\u10CD': '\\u2D2D',\n    '\\u1E00': '\\u1E01',\n    '\\u1E02': '\\u1E03',\n    '\\u1E04': '\\u1E05',\n    '\\u1E06': '\\u1E07',\n    '\\u1E08': '\\u1E09',\n    '\\u1E0A': '\\u1E0B',\n    '\\u1E0C': '\\u1E0D',\n    '\\u1E0E': '\\u1E0F',\n    '\\u1E10': '\\u1E11',\n    '\\u1E12': '\\u1E13',\n    '\\u1E14': '\\u1E15',\n    '\\u1E16': '\\u1E17',\n    '\\u1E18': '\\u1E19',\n    '\\u1E1A': '\\u1E1B',\n    '\\u1E1C': '\\u1E1D',\n    '\\u1E1E': '\\u1E1F',\n    '\\u1E20': '\\u1E21',\n    '\\u1E22': '\\u1E23',\n    '\\u1E24': '\\u1E25',\n    '\\u1E26': '\\u1E27',\n    '\\u1E28': '\\u1E29',\n    '\\u1E2A': '\\u1E2B',\n    '\\u1E2C': '\\u1E2D',\n    '\\u1E2E': '\\u1E2F',\n    '\\u1E30': '\\u1E31',\n    '\\u1E32': '\\u1E33',\n    '\\u1E34': '\\u1E35',\n    '\\u1E36': '\\u1E37',\n    '\\u1E38': '\\u1E39',\n    '\\u1E3A': '\\u1E3B',\n    '\\u1E3C': '\\u1E3D',\n    '\\u1E3E': '\\u1E3F',\n    '\\u1E40': '\\u1E41',\n    '\\u1E42': '\\u1E43',\n    '\\u1E44': '\\u1E45',\n    '\\u1E46': '\\u1E47',\n    '\\u1E48': '\\u1E49',\n    '\\u1E4A': '\\u1E4B',\n    '\\u1E4C': '\\u1E4D',\n    '\\u1E4E': '\\u1E4F',\n    '\\u1E50': '\\u1E51',\n    '\\u1E52': '\\u1E53',\n    '\\u1E54': '\\u1E55',\n    '\\u1E56': '\\u1E57',\n    '\\u1E58': '\\u1E59',\n    '\\u1E5A': '\\u1E5B',\n    '\\u1E5C': '\\u1E5D',\n    '\\u1E5E': '\\u1E5F',\n    '\\u1E60': '\\u1E61',\n    '\\u1E62': '\\u1E63',\n    '\\u1E64': '\\u1E65',\n    '\\u1E66': '\\u1E67',\n    '\\u1E68': '\\u1E69',\n    '\\u1E6A': '\\u1E6B',\n    '\\u1E6C': '\\u1E6D',\n    '\\u1E6E': '\\u1E6F',\n    '\\u1E70': '\\u1E71',\n    '\\u1E72': '\\u1E73',\n    '\\u1E74': '\\u1E75',\n    '\\u1E76': '\\u1E77',\n    '\\u1E78': '\\u1E79',\n    '\\u1E7A': '\\u1E7B',\n    '\\u1E7C': '\\u1E7D',\n    '\\u1E7E': '\\u1E7F',\n    '\\u1E80': '\\u1E81',\n    '\\u1E82': '\\u1E83',\n    '\\u1E84': '\\u1E85',\n    '\\u1E86': '\\u1E87',\n    '\\u1E88': '\\u1E89',\n    '\\u1E8A': '\\u1E8B',\n    '\\u1E8C': '\\u1E8D',\n    '\\u1E8E': '\\u1E8F',\n    '\\u1E90': '\\u1E91',\n    '\\u1E92': '\\u1E93',\n    '\\u1E94': '\\u1E95',\n    '\\u1E9B': '\\u1E61',\n    '\\u1EA0': '\\u1EA1',\n    '\\u1EA2': '\\u1EA3',\n    '\\u1EA4': '\\u1EA5',\n    '\\u1EA6': '\\u1EA7',\n    '\\u1EA8': '\\u1EA9',\n    '\\u1EAA': '\\u1EAB',\n    '\\u1EAC': '\\u1EAD',\n    '\\u1EAE': '\\u1EAF',\n    '\\u1EB0': '\\u1EB1',\n    '\\u1EB2': '\\u1EB3',\n    '\\u1EB4': '\\u1EB5',\n    '\\u1EB6': '\\u1EB7',\n    '\\u1EB8': '\\u1EB9',\n    '\\u1EBA': '\\u1EBB',\n    '\\u1EBC': '\\u1EBD',\n    '\\u1EBE': '\\u1EBF',\n    '\\u1EC0': '\\u1EC1',\n    '\\u1EC2': '\\u1EC3',\n    '\\u1EC4': '\\u1EC5',\n    '\\u1EC6': '\\u1EC7',\n    '\\u1EC8': '\\u1EC9',\n    '\\u1ECA': '\\u1ECB',\n    '\\u1ECC': '\\u1ECD',\n    '\\u1ECE': '\\u1ECF',\n    '\\u1ED0': '\\u1ED1',\n    '\\u1ED2': '\\u1ED3',\n    '\\u1ED4': '\\u1ED5',\n    '\\u1ED6': '\\u1ED7',\n    '\\u1ED8': '\\u1ED9',\n    '\\u1EDA': '\\u1EDB',\n    '\\u1EDC': '\\u1EDD',\n    '\\u1EDE': '\\u1EDF',\n    '\\u1EE0': '\\u1EE1',\n    '\\u1EE2': '\\u1EE3',\n    '\\u1EE4': '\\u1EE5',\n    '\\u1EE6': '\\u1EE7',\n    '\\u1EE8': '\\u1EE9',\n    '\\u1EEA': '\\u1EEB',\n    '\\u1EEC': '\\u1EED',\n    '\\u1EEE': '\\u1EEF',\n    '\\u1EF0': '\\u1EF1',\n    '\\u1EF2': '\\u1EF3',\n    '\\u1EF4': '\\u1EF5',\n    '\\u1EF6': '\\u1EF7',\n    '\\u1EF8': '\\u1EF9',\n    '\\u1EFA': '\\u1EFB',\n    '\\u1EFC': '\\u1EFD',\n    '\\u1EFE': '\\u1EFF',\n    '\\u1F08': '\\u1F00',\n    '\\u1F09': '\\u1F01',\n    '\\u1F0A': '\\u1F02',\n    '\\u1F0B': '\\u1F03',\n    '\\u1F0C': '\\u1F04',\n    '\\u1F0D': '\\u1F05',\n    '\\u1F0E': '\\u1F06',\n    '\\u1F0F': '\\u1F07',\n    '\\u1F18': '\\u1F10',\n    '\\u1F19': '\\u1F11',\n    '\\u1F1A': '\\u1F12',\n    '\\u1F1B': '\\u1F13',\n    '\\u1F1C': '\\u1F14',\n    '\\u1F1D': '\\u1F15',\n    '\\u1F28': '\\u1F20',\n    '\\u1F29': '\\u1F21',\n    '\\u1F2A': '\\u1F22',\n    '\\u1F2B': '\\u1F23',\n    '\\u1F2C': '\\u1F24',\n    '\\u1F2D': '\\u1F25',\n    '\\u1F2E': '\\u1F26',\n    '\\u1F2F': '\\u1F27',\n    '\\u1F38': '\\u1F30',\n    '\\u1F39': '\\u1F31',\n    '\\u1F3A': '\\u1F32',\n    '\\u1F3B': '\\u1F33',\n    '\\u1F3C': '\\u1F34',\n    '\\u1F3D': '\\u1F35',\n    '\\u1F3E': '\\u1F36',\n    '\\u1F3F': '\\u1F37',\n    '\\u1F48': '\\u1F40',\n    '\\u1F49': '\\u1F41',\n    '\\u1F4A': '\\u1F42',\n    '\\u1F4B': '\\u1F43',\n    '\\u1F4C': '\\u1F44',\n    '\\u1F4D': '\\u1F45',\n    '\\u1F59': '\\u1F51',\n    '\\u1F5B': '\\u1F53',\n    '\\u1F5D': '\\u1F55',\n    '\\u1F5F': '\\u1F57',\n    '\\u1F68': '\\u1F60',\n    '\\u1F69': '\\u1F61',\n    '\\u1F6A': '\\u1F62',\n    '\\u1F6B': '\\u1F63',\n    '\\u1F6C': '\\u1F64',\n    '\\u1F6D': '\\u1F65',\n    '\\u1F6E': '\\u1F66',\n    '\\u1F6F': '\\u1F67',\n    '\\u1FB8': '\\u1FB0',\n    '\\u1FB9': '\\u1FB1',\n    '\\u1FBA': '\\u1F70',\n    '\\u1FBB': '\\u1F71',\n    '\\u1FBE': '\\u03B9',\n    '\\u1FC8': '\\u1F72',\n    '\\u1FC9': '\\u1F73',\n    '\\u1FCA': '\\u1F74',\n    '\\u1FCB': '\\u1F75',\n    '\\u1FD8': '\\u1FD0',\n    '\\u1FD9': '\\u1FD1',\n    '\\u1FDA': '\\u1F76',\n    '\\u1FDB': '\\u1F77',\n    '\\u1FE8': '\\u1FE0',\n    '\\u1FE9': '\\u1FE1',\n    '\\u1FEA': '\\u1F7A',\n    '\\u1FEB': '\\u1F7B',\n    '\\u1FEC': '\\u1FE5',\n    '\\u1FF8': '\\u1F78',\n    '\\u1FF9': '\\u1F79',\n    '\\u1FFA': '\\u1F7C',\n    '\\u1FFB': '\\u1F7D',\n    '\\u2126': '\\u03C9',\n    '\\u212A': 'k',\n    '\\u212B': '\\xE5',\n    '\\u2132': '\\u214E',\n    '\\u2160': '\\u2170',\n    '\\u2161': '\\u2171',\n    '\\u2162': '\\u2172',\n    '\\u2163': '\\u2173',\n    '\\u2164': '\\u2174',\n    '\\u2165': '\\u2175',\n    '\\u2166': '\\u2176',\n    '\\u2167': '\\u2177',\n    '\\u2168': '\\u2178',\n    '\\u2169': '\\u2179',\n    '\\u216A': '\\u217A',\n    '\\u216B': '\\u217B',\n    '\\u216C': '\\u217C',\n    '\\u216D': '\\u217D',\n    '\\u216E': '\\u217E',\n    '\\u216F': '\\u217F',\n    '\\u2183': '\\u2184',\n    '\\u24B6': '\\u24D0',\n    '\\u24B7': '\\u24D1',\n    '\\u24B8': '\\u24D2',\n    '\\u24B9': '\\u24D3',\n    '\\u24BA': '\\u24D4',\n    '\\u24BB': '\\u24D5',\n    '\\u24BC': '\\u24D6',\n    '\\u24BD': '\\u24D7',\n    '\\u24BE': '\\u24D8',\n    '\\u24BF': '\\u24D9',\n    '\\u24C0': '\\u24DA',\n    '\\u24C1': '\\u24DB',\n    '\\u24C2': '\\u24DC',\n    '\\u24C3': '\\u24DD',\n    '\\u24C4': '\\u24DE',\n    '\\u24C5': '\\u24DF',\n    '\\u24C6': '\\u24E0',\n    '\\u24C7': '\\u24E1',\n    '\\u24C8': '\\u24E2',\n    '\\u24C9': '\\u24E3',\n    '\\u24CA': '\\u24E4',\n    '\\u24CB': '\\u24E5',\n    '\\u24CC': '\\u24E6',\n    '\\u24CD': '\\u24E7',\n    '\\u24CE': '\\u24E8',\n    '\\u24CF': '\\u24E9',\n    '\\u2C00': '\\u2C30',\n    '\\u2C01': '\\u2C31',\n    '\\u2C02': '\\u2C32',\n    '\\u2C03': '\\u2C33',\n    '\\u2C04': '\\u2C34',\n    '\\u2C05': '\\u2C35',\n    '\\u2C06': '\\u2C36',\n    '\\u2C07': '\\u2C37',\n    '\\u2C08': '\\u2C38',\n    '\\u2C09': '\\u2C39',\n    '\\u2C0A': '\\u2C3A',\n    '\\u2C0B': '\\u2C3B',\n    '\\u2C0C': '\\u2C3C',\n    '\\u2C0D': '\\u2C3D',\n    '\\u2C0E': '\\u2C3E',\n    '\\u2C0F': '\\u2C3F',\n    '\\u2C10': '\\u2C40',\n    '\\u2C11': '\\u2C41',\n    '\\u2C12': '\\u2C42',\n    '\\u2C13': '\\u2C43',\n    '\\u2C14': '\\u2C44',\n    '\\u2C15': '\\u2C45',\n    '\\u2C16': '\\u2C46',\n    '\\u2C17': '\\u2C47',\n    '\\u2C18': '\\u2C48',\n    '\\u2C19': '\\u2C49',\n    '\\u2C1A': '\\u2C4A',\n    '\\u2C1B': '\\u2C4B',\n    '\\u2C1C': '\\u2C4C',\n    '\\u2C1D': '\\u2C4D',\n    '\\u2C1E': '\\u2C4E',\n    '\\u2C1F': '\\u2C4F',\n    '\\u2C20': '\\u2C50',\n    '\\u2C21': '\\u2C51',\n    '\\u2C22': '\\u2C52',\n    '\\u2C23': '\\u2C53',\n    '\\u2C24': '\\u2C54',\n    '\\u2C25': '\\u2C55',\n    '\\u2C26': '\\u2C56',\n    '\\u2C27': '\\u2C57',\n    '\\u2C28': '\\u2C58',\n    '\\u2C29': '\\u2C59',\n    '\\u2C2A': '\\u2C5A',\n    '\\u2C2B': '\\u2C5B',\n    '\\u2C2C': '\\u2C5C',\n    '\\u2C2D': '\\u2C5D',\n    '\\u2C2E': '\\u2C5E',\n    '\\u2C60': '\\u2C61',\n    '\\u2C62': '\\u026B',\n    '\\u2C63': '\\u1D7D',\n    '\\u2C64': '\\u027D',\n    '\\u2C67': '\\u2C68',\n    '\\u2C69': '\\u2C6A',\n    '\\u2C6B': '\\u2C6C',\n    '\\u2C6D': '\\u0251',\n    '\\u2C6E': '\\u0271',\n    '\\u2C6F': '\\u0250',\n    '\\u2C70': '\\u0252',\n    '\\u2C72': '\\u2C73',\n    '\\u2C75': '\\u2C76',\n    '\\u2C7E': '\\u023F',\n    '\\u2C7F': '\\u0240',\n    '\\u2C80': '\\u2C81',\n    '\\u2C82': '\\u2C83',\n    '\\u2C84': '\\u2C85',\n    '\\u2C86': '\\u2C87',\n    '\\u2C88': '\\u2C89',\n    '\\u2C8A': '\\u2C8B',\n    '\\u2C8C': '\\u2C8D',\n    '\\u2C8E': '\\u2C8F',\n    '\\u2C90': '\\u2C91',\n    '\\u2C92': '\\u2C93',\n    '\\u2C94': '\\u2C95',\n    '\\u2C96': '\\u2C97',\n    '\\u2C98': '\\u2C99',\n    '\\u2C9A': '\\u2C9B',\n    '\\u2C9C': '\\u2C9D',\n    '\\u2C9E': '\\u2C9F',\n    '\\u2CA0': '\\u2CA1',\n    '\\u2CA2': '\\u2CA3',\n    '\\u2CA4': '\\u2CA5',\n    '\\u2CA6': '\\u2CA7',\n    '\\u2CA8': '\\u2CA9',\n    '\\u2CAA': '\\u2CAB',\n    '\\u2CAC': '\\u2CAD',\n    '\\u2CAE': '\\u2CAF',\n    '\\u2CB0': '\\u2CB1',\n    '\\u2CB2': '\\u2CB3',\n    '\\u2CB4': '\\u2CB5',\n    '\\u2CB6': '\\u2CB7',\n    '\\u2CB8': '\\u2CB9',\n    '\\u2CBA': '\\u2CBB',\n    '\\u2CBC': '\\u2CBD',\n    '\\u2CBE': '\\u2CBF',\n    '\\u2CC0': '\\u2CC1',\n    '\\u2CC2': '\\u2CC3',\n    '\\u2CC4': '\\u2CC5',\n    '\\u2CC6': '\\u2CC7',\n    '\\u2CC8': '\\u2CC9',\n    '\\u2CCA': '\\u2CCB',\n    '\\u2CCC': '\\u2CCD',\n    '\\u2CCE': '\\u2CCF',\n    '\\u2CD0': '\\u2CD1',\n    '\\u2CD2': '\\u2CD3',\n    '\\u2CD4': '\\u2CD5',\n    '\\u2CD6': '\\u2CD7',\n    '\\u2CD8': '\\u2CD9',\n    '\\u2CDA': '\\u2CDB',\n    '\\u2CDC': '\\u2CDD',\n    '\\u2CDE': '\\u2CDF',\n    '\\u2CE0': '\\u2CE1',\n    '\\u2CE2': '\\u2CE3',\n    '\\u2CEB': '\\u2CEC',\n    '\\u2CED': '\\u2CEE',\n    '\\u2CF2': '\\u2CF3',\n    '\\uA640': '\\uA641',\n    '\\uA642': '\\uA643',\n    '\\uA644': '\\uA645',\n    '\\uA646': '\\uA647',\n    '\\uA648': '\\uA649',\n    '\\uA64A': '\\uA64B',\n    '\\uA64C': '\\uA64D',\n    '\\uA64E': '\\uA64F',\n    '\\uA650': '\\uA651',\n    '\\uA652': '\\uA653',\n    '\\uA654': '\\uA655',\n    '\\uA656': '\\uA657',\n    '\\uA658': '\\uA659',\n    '\\uA65A': '\\uA65B',\n    '\\uA65C': '\\uA65D',\n    '\\uA65E': '\\uA65F',\n    '\\uA660': '\\uA661',\n    '\\uA662': '\\uA663',\n    '\\uA664': '\\uA665',\n    '\\uA666': '\\uA667',\n    '\\uA668': '\\uA669',\n    '\\uA66A': '\\uA66B',\n    '\\uA66C': '\\uA66D',\n    '\\uA680': '\\uA681',\n    '\\uA682': '\\uA683',\n    '\\uA684': '\\uA685',\n    '\\uA686': '\\uA687',\n    '\\uA688': '\\uA689',\n    '\\uA68A': '\\uA68B',\n    '\\uA68C': '\\uA68D',\n    '\\uA68E': '\\uA68F',\n    '\\uA690': '\\uA691',\n    '\\uA692': '\\uA693',\n    '\\uA694': '\\uA695',\n    '\\uA696': '\\uA697',\n    '\\uA698': '\\uA699',\n    '\\uA69A': '\\uA69B',\n    '\\uA722': '\\uA723',\n    '\\uA724': '\\uA725',\n    '\\uA726': '\\uA727',\n    '\\uA728': '\\uA729',\n    '\\uA72A': '\\uA72B',\n    '\\uA72C': '\\uA72D',\n    '\\uA72E': '\\uA72F',\n    '\\uA732': '\\uA733',\n    '\\uA734': '\\uA735',\n    '\\uA736': '\\uA737',\n    '\\uA738': '\\uA739',\n    '\\uA73A': '\\uA73B',\n    '\\uA73C': '\\uA73D',\n    '\\uA73E': '\\uA73F',\n    '\\uA740': '\\uA741',\n    '\\uA742': '\\uA743',\n    '\\uA744': '\\uA745',\n    '\\uA746': '\\uA747',\n    '\\uA748': '\\uA749',\n    '\\uA74A': '\\uA74B',\n    '\\uA74C': '\\uA74D',\n    '\\uA74E': '\\uA74F',\n    '\\uA750': '\\uA751',\n    '\\uA752': '\\uA753',\n    '\\uA754': '\\uA755',\n    '\\uA756': '\\uA757',\n    '\\uA758': '\\uA759',\n    '\\uA75A': '\\uA75B',\n    '\\uA75C': '\\uA75D',\n    '\\uA75E': '\\uA75F',\n    '\\uA760': '\\uA761',\n    '\\uA762': '\\uA763',\n    '\\uA764': '\\uA765',\n    '\\uA766': '\\uA767',\n    '\\uA768': '\\uA769',\n    '\\uA76A': '\\uA76B',\n    '\\uA76C': '\\uA76D',\n    '\\uA76E': '\\uA76F',\n    '\\uA779': '\\uA77A',\n    '\\uA77B': '\\uA77C',\n    '\\uA77D': '\\u1D79',\n    '\\uA77E': '\\uA77F',\n    '\\uA780': '\\uA781',\n    '\\uA782': '\\uA783',\n    '\\uA784': '\\uA785',\n    '\\uA786': '\\uA787',\n    '\\uA78B': '\\uA78C',\n    '\\uA78D': '\\u0265',\n    '\\uA790': '\\uA791',\n    '\\uA792': '\\uA793',\n    '\\uA796': '\\uA797',\n    '\\uA798': '\\uA799',\n    '\\uA79A': '\\uA79B',\n    '\\uA79C': '\\uA79D',\n    '\\uA79E': '\\uA79F',\n    '\\uA7A0': '\\uA7A1',\n    '\\uA7A2': '\\uA7A3',\n    '\\uA7A4': '\\uA7A5',\n    '\\uA7A6': '\\uA7A7',\n    '\\uA7A8': '\\uA7A9',\n    '\\uA7AA': '\\u0266',\n    '\\uA7AB': '\\u025C',\n    '\\uA7AC': '\\u0261',\n    '\\uA7AD': '\\u026C',\n    '\\uA7B0': '\\u029E',\n    '\\uA7B1': '\\u0287',\n    '\\uFF21': '\\uFF41',\n    '\\uFF22': '\\uFF42',\n    '\\uFF23': '\\uFF43',\n    '\\uFF24': '\\uFF44',\n    '\\uFF25': '\\uFF45',\n    '\\uFF26': '\\uFF46',\n    '\\uFF27': '\\uFF47',\n    '\\uFF28': '\\uFF48',\n    '\\uFF29': '\\uFF49',\n    '\\uFF2A': '\\uFF4A',\n    '\\uFF2B': '\\uFF4B',\n    '\\uFF2C': '\\uFF4C',\n    '\\uFF2D': '\\uFF4D',\n    '\\uFF2E': '\\uFF4E',\n    '\\uFF2F': '\\uFF4F',\n    '\\uFF30': '\\uFF50',\n    '\\uFF31': '\\uFF51',\n    '\\uFF32': '\\uFF52',\n    '\\uFF33': '\\uFF53',\n    '\\uFF34': '\\uFF54',\n    '\\uFF35': '\\uFF55',\n    '\\uFF36': '\\uFF56',\n    '\\uFF37': '\\uFF57',\n    '\\uFF38': '\\uFF58',\n    '\\uFF39': '\\uFF59',\n    '\\uFF3A': '\\uFF5A',\n    '\\uD801\\uDC00': '\\uD801\\uDC28',\n    '\\uD801\\uDC01': '\\uD801\\uDC29',\n    '\\uD801\\uDC02': '\\uD801\\uDC2A',\n    '\\uD801\\uDC03': '\\uD801\\uDC2B',\n    '\\uD801\\uDC04': '\\uD801\\uDC2C',\n    '\\uD801\\uDC05': '\\uD801\\uDC2D',\n    '\\uD801\\uDC06': '\\uD801\\uDC2E',\n    '\\uD801\\uDC07': '\\uD801\\uDC2F',\n    '\\uD801\\uDC08': '\\uD801\\uDC30',\n    '\\uD801\\uDC09': '\\uD801\\uDC31',\n    '\\uD801\\uDC0A': '\\uD801\\uDC32',\n    '\\uD801\\uDC0B': '\\uD801\\uDC33',\n    '\\uD801\\uDC0C': '\\uD801\\uDC34',\n    '\\uD801\\uDC0D': '\\uD801\\uDC35',\n    '\\uD801\\uDC0E': '\\uD801\\uDC36',\n    '\\uD801\\uDC0F': '\\uD801\\uDC37',\n    '\\uD801\\uDC10': '\\uD801\\uDC38',\n    '\\uD801\\uDC11': '\\uD801\\uDC39',\n    '\\uD801\\uDC12': '\\uD801\\uDC3A',\n    '\\uD801\\uDC13': '\\uD801\\uDC3B',\n    '\\uD801\\uDC14': '\\uD801\\uDC3C',\n    '\\uD801\\uDC15': '\\uD801\\uDC3D',\n    '\\uD801\\uDC16': '\\uD801\\uDC3E',\n    '\\uD801\\uDC17': '\\uD801\\uDC3F',\n    '\\uD801\\uDC18': '\\uD801\\uDC40',\n    '\\uD801\\uDC19': '\\uD801\\uDC41',\n    '\\uD801\\uDC1A': '\\uD801\\uDC42',\n    '\\uD801\\uDC1B': '\\uD801\\uDC43',\n    '\\uD801\\uDC1C': '\\uD801\\uDC44',\n    '\\uD801\\uDC1D': '\\uD801\\uDC45',\n    '\\uD801\\uDC1E': '\\uD801\\uDC46',\n    '\\uD801\\uDC1F': '\\uD801\\uDC47',\n    '\\uD801\\uDC20': '\\uD801\\uDC48',\n    '\\uD801\\uDC21': '\\uD801\\uDC49',\n    '\\uD801\\uDC22': '\\uD801\\uDC4A',\n    '\\uD801\\uDC23': '\\uD801\\uDC4B',\n    '\\uD801\\uDC24': '\\uD801\\uDC4C',\n    '\\uD801\\uDC25': '\\uD801\\uDC4D',\n    '\\uD801\\uDC26': '\\uD801\\uDC4E',\n    '\\uD801\\uDC27': '\\uD801\\uDC4F',\n    '\\uD806\\uDCA0': '\\uD806\\uDCC0',\n    '\\uD806\\uDCA1': '\\uD806\\uDCC1',\n    '\\uD806\\uDCA2': '\\uD806\\uDCC2',\n    '\\uD806\\uDCA3': '\\uD806\\uDCC3',\n    '\\uD806\\uDCA4': '\\uD806\\uDCC4',\n    '\\uD806\\uDCA5': '\\uD806\\uDCC5',\n    '\\uD806\\uDCA6': '\\uD806\\uDCC6',\n    '\\uD806\\uDCA7': '\\uD806\\uDCC7',\n    '\\uD806\\uDCA8': '\\uD806\\uDCC8',\n    '\\uD806\\uDCA9': '\\uD806\\uDCC9',\n    '\\uD806\\uDCAA': '\\uD806\\uDCCA',\n    '\\uD806\\uDCAB': '\\uD806\\uDCCB',\n    '\\uD806\\uDCAC': '\\uD806\\uDCCC',\n    '\\uD806\\uDCAD': '\\uD806\\uDCCD',\n    '\\uD806\\uDCAE': '\\uD806\\uDCCE',\n    '\\uD806\\uDCAF': '\\uD806\\uDCCF',\n    '\\uD806\\uDCB0': '\\uD806\\uDCD0',\n    '\\uD806\\uDCB1': '\\uD806\\uDCD1',\n    '\\uD806\\uDCB2': '\\uD806\\uDCD2',\n    '\\uD806\\uDCB3': '\\uD806\\uDCD3',\n    '\\uD806\\uDCB4': '\\uD806\\uDCD4',\n    '\\uD806\\uDCB5': '\\uD806\\uDCD5',\n    '\\uD806\\uDCB6': '\\uD806\\uDCD6',\n    '\\uD806\\uDCB7': '\\uD806\\uDCD7',\n    '\\uD806\\uDCB8': '\\uD806\\uDCD8',\n    '\\uD806\\uDCB9': '\\uD806\\uDCD9',\n    '\\uD806\\uDCBA': '\\uD806\\uDCDA',\n    '\\uD806\\uDCBB': '\\uD806\\uDCDB',\n    '\\uD806\\uDCBC': '\\uD806\\uDCDC',\n    '\\uD806\\uDCBD': '\\uD806\\uDCDD',\n    '\\uD806\\uDCBE': '\\uD806\\uDCDE',\n    '\\uD806\\uDCBF': '\\uD806\\uDCDF',\n    '\\xDF': 'ss',\n    '\\u0130': 'i\\u0307',\n    '\\u0149': '\\u02BCn',\n    '\\u01F0': 'j\\u030C',\n    '\\u0390': '\\u03B9\\u0308\\u0301',\n    '\\u03B0': '\\u03C5\\u0308\\u0301',\n    '\\u0587': '\\u0565\\u0582',\n    '\\u1E96': 'h\\u0331',\n    '\\u1E97': 't\\u0308',\n    '\\u1E98': 'w\\u030A',\n    '\\u1E99': 'y\\u030A',\n    '\\u1E9A': 'a\\u02BE',\n    '\\u1E9E': 'ss',\n    '\\u1F50': '\\u03C5\\u0313',\n    '\\u1F52': '\\u03C5\\u0313\\u0300',\n    '\\u1F54': '\\u03C5\\u0313\\u0301',\n    '\\u1F56': '\\u03C5\\u0313\\u0342',\n    '\\u1F80': '\\u1F00\\u03B9',\n    '\\u1F81': '\\u1F01\\u03B9',\n    '\\u1F82': '\\u1F02\\u03B9',\n    '\\u1F83': '\\u1F03\\u03B9',\n    '\\u1F84': '\\u1F04\\u03B9',\n    '\\u1F85': '\\u1F05\\u03B9',\n    '\\u1F86': '\\u1F06\\u03B9',\n    '\\u1F87': '\\u1F07\\u03B9',\n    '\\u1F88': '\\u1F00\\u03B9',\n    '\\u1F89': '\\u1F01\\u03B9',\n    '\\u1F8A': '\\u1F02\\u03B9',\n    '\\u1F8B': '\\u1F03\\u03B9',\n    '\\u1F8C': '\\u1F04\\u03B9',\n    '\\u1F8D': '\\u1F05\\u03B9',\n    '\\u1F8E': '\\u1F06\\u03B9',\n    '\\u1F8F': '\\u1F07\\u03B9',\n    '\\u1F90': '\\u1F20\\u03B9',\n    '\\u1F91': '\\u1F21\\u03B9',\n    '\\u1F92': '\\u1F22\\u03B9',\n    '\\u1F93': '\\u1F23\\u03B9',\n    '\\u1F94': '\\u1F24\\u03B9',\n    '\\u1F95': '\\u1F25\\u03B9',\n    '\\u1F96': '\\u1F26\\u03B9',\n    '\\u1F97': '\\u1F27\\u03B9',\n    '\\u1F98': '\\u1F20\\u03B9',\n    '\\u1F99': '\\u1F21\\u03B9',\n    '\\u1F9A': '\\u1F22\\u03B9',\n    '\\u1F9B': '\\u1F23\\u03B9',\n    '\\u1F9C': '\\u1F24\\u03B9',\n    '\\u1F9D': '\\u1F25\\u03B9',\n    '\\u1F9E': '\\u1F26\\u03B9',\n    '\\u1F9F': '\\u1F27\\u03B9',\n    '\\u1FA0': '\\u1F60\\u03B9',\n    '\\u1FA1': '\\u1F61\\u03B9',\n    '\\u1FA2': '\\u1F62\\u03B9',\n    '\\u1FA3': '\\u1F63\\u03B9',\n    '\\u1FA4': '\\u1F64\\u03B9',\n    '\\u1FA5': '\\u1F65\\u03B9',\n    '\\u1FA6': '\\u1F66\\u03B9',\n    '\\u1FA7': '\\u1F67\\u03B9',\n    '\\u1FA8': '\\u1F60\\u03B9',\n    '\\u1FA9': '\\u1F61\\u03B9',\n    '\\u1FAA': '\\u1F62\\u03B9',\n    '\\u1FAB': '\\u1F63\\u03B9',\n    '\\u1FAC': '\\u1F64\\u03B9',\n    '\\u1FAD': '\\u1F65\\u03B9',\n    '\\u1FAE': '\\u1F66\\u03B9',\n    '\\u1FAF': '\\u1F67\\u03B9',\n    '\\u1FB2': '\\u1F70\\u03B9',\n    '\\u1FB3': '\\u03B1\\u03B9',\n    '\\u1FB4': '\\u03AC\\u03B9',\n    '\\u1FB6': '\\u03B1\\u0342',\n    '\\u1FB7': '\\u03B1\\u0342\\u03B9',\n    '\\u1FBC': '\\u03B1\\u03B9',\n    '\\u1FC2': '\\u1F74\\u03B9',\n    '\\u1FC3': '\\u03B7\\u03B9',\n    '\\u1FC4': '\\u03AE\\u03B9',\n    '\\u1FC6': '\\u03B7\\u0342',\n    '\\u1FC7': '\\u03B7\\u0342\\u03B9',\n    '\\u1FCC': '\\u03B7\\u03B9',\n    '\\u1FD2': '\\u03B9\\u0308\\u0300',\n    '\\u1FD3': '\\u03B9\\u0308\\u0301',\n    '\\u1FD6': '\\u03B9\\u0342',\n    '\\u1FD7': '\\u03B9\\u0308\\u0342',\n    '\\u1FE2': '\\u03C5\\u0308\\u0300',\n    '\\u1FE3': '\\u03C5\\u0308\\u0301',\n    '\\u1FE4': '\\u03C1\\u0313',\n    '\\u1FE6': '\\u03C5\\u0342',\n    '\\u1FE7': '\\u03C5\\u0308\\u0342',\n    '\\u1FF2': '\\u1F7C\\u03B9',\n    '\\u1FF3': '\\u03C9\\u03B9',\n    '\\u1FF4': '\\u03CE\\u03B9',\n    '\\u1FF6': '\\u03C9\\u0342',\n    '\\u1FF7': '\\u03C9\\u0342\\u03B9',\n    '\\u1FFC': '\\u03C9\\u03B9',\n    '\\uFB00': 'ff',\n    '\\uFB01': 'fi',\n    '\\uFB02': 'fl',\n    '\\uFB03': 'ffi',\n    '\\uFB04': 'ffl',\n    '\\uFB05': 'st',\n    '\\uFB06': 'st',\n    '\\uFB13': '\\u0574\\u0576',\n    '\\uFB14': '\\u0574\\u0565',\n    '\\uFB15': '\\u0574\\u056B',\n    '\\uFB16': '\\u057E\\u0576',\n    '\\uFB17': '\\u0574\\u056D',\n};\n\nconst entityReferences = [\n    { key: [65, 69, 108, 105, 103, 59], value: 'Æ' },\n    { key: [65, 77, 80, 59], value: '&' },\n    { key: [65, 97, 99, 117, 116, 101, 59], value: 'Á' },\n    { key: [65, 98, 114, 101, 118, 101, 59], value: 'Ă' },\n    { key: [65, 99, 105, 114, 99, 59], value: 'Â' },\n    { key: [65, 99, 121, 59], value: 'А' },\n    { key: [65, 102, 114, 59], value: '𝔄' },\n    { key: [65, 103, 114, 97, 118, 101, 59], value: 'À' },\n    { key: [65, 108, 112, 104, 97, 59], value: 'Α' },\n    { key: [65, 109, 97, 99, 114, 59], value: 'Ā' },\n    { key: [65, 110, 100, 59], value: '⩓' },\n    { key: [65, 111, 103, 111, 110, 59], value: 'Ą' },\n    { key: [65, 111, 112, 102, 59], value: '𝔸' },\n    { key: [65, 112, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59], value: '⁡' },\n    { key: [65, 114, 105, 110, 103, 59], value: 'Å' },\n    { key: [65, 115, 99, 114, 59], value: '𝒜' },\n    { key: [65, 115, 115, 105, 103, 110, 59], value: '≔' },\n    { key: [65, 116, 105, 108, 100, 101, 59], value: 'Ã' },\n    { key: [65, 117, 109, 108, 59], value: 'Ä' },\n    { key: [66, 97, 99, 107, 115, 108, 97, 115, 104, 59], value: '∖' },\n    { key: [66, 97, 114, 118, 59], value: '⫧' },\n    { key: [66, 97, 114, 119, 101, 100, 59], value: '⌆' },\n    { key: [66, 99, 121, 59], value: 'Б' },\n    { key: [66, 101, 99, 97, 117, 115, 101, 59], value: '∵' },\n    { key: [66, 101, 114, 110, 111, 117, 108, 108, 105, 115, 59], value: 'ℬ' },\n    { key: [66, 101, 116, 97, 59], value: 'Β' },\n    { key: [66, 102, 114, 59], value: '𝔅' },\n    { key: [66, 111, 112, 102, 59], value: '𝔹' },\n    { key: [66, 114, 101, 118, 101, 59], value: '˘' },\n    { key: [66, 115, 99, 114, 59], value: 'ℬ' },\n    { key: [66, 117, 109, 112, 101, 113, 59], value: '≎' },\n    { key: [67, 72, 99, 121, 59], value: 'Ч' },\n    { key: [67, 79, 80, 89, 59], value: '©' },\n    { key: [67, 97, 99, 117, 116, 101, 59], value: 'Ć' },\n    { key: [67, 97, 112, 59], value: '⋒' },\n    { key: [67, 97, 112, 105, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59], value: 'ⅅ' },\n    { key: [67, 97, 121, 108, 101, 121, 115, 59], value: 'ℭ' },\n    { key: [67, 99, 97, 114, 111, 110, 59], value: 'Č' },\n    { key: [67, 99, 101, 100, 105, 108, 59], value: 'Ç' },\n    { key: [67, 99, 105, 114, 99, 59], value: 'Ĉ' },\n    { key: [67, 99, 111, 110, 105, 110, 116, 59], value: '∰' },\n    { key: [67, 100, 111, 116, 59], value: 'Ċ' },\n    { key: [67, 101, 100, 105, 108, 108, 97, 59], value: '¸' },\n    { key: [67, 101, 110, 116, 101, 114, 68, 111, 116, 59], value: '·' },\n    { key: [67, 102, 114, 59], value: 'ℭ' },\n    { key: [67, 104, 105, 59], value: 'Χ' },\n    { key: [67, 105, 114, 99, 108, 101, 68, 111, 116, 59], value: '⊙' },\n    { key: [67, 105, 114, 99, 108, 101, 77, 105, 110, 117, 115, 59], value: '⊖' },\n    { key: [67, 105, 114, 99, 108, 101, 80, 108, 117, 115, 59], value: '⊕' },\n    { key: [67, 105, 114, 99, 108, 101, 84, 105, 109, 101, 115, 59], value: '⊗' },\n    { key: [67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∲' },\n    { key: [67, 108, 111, 115, 101, 67, 117, 114, 108, 121, 68, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59], value: '”' },\n    { key: [67, 108, 111, 115, 101, 67, 117, 114, 108, 121, 81, 117, 111, 116, 101, 59], value: '’' },\n    { key: [67, 111, 108, 111, 110, 59], value: '∷' },\n    { key: [67, 111, 108, 111, 110, 101, 59], value: '⩴' },\n    { key: [67, 111, 110, 103, 114, 117, 101, 110, 116, 59], value: '≡' },\n    { key: [67, 111, 110, 105, 110, 116, 59], value: '∯' },\n    { key: [67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∮' },\n    { key: [67, 111, 112, 102, 59], value: 'ℂ' },\n    { key: [67, 111, 112, 114, 111, 100, 117, 99, 116, 59], value: '∐' },\n    { key: [67, 111, 117, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∳' },\n    { key: [67, 114, 111, 115, 115, 59], value: '⨯' },\n    { key: [67, 115, 99, 114, 59], value: '𝒞' },\n    { key: [67, 117, 112, 59], value: '⋓' },\n    { key: [67, 117, 112, 67, 97, 112, 59], value: '≍' },\n    { key: [68, 68, 59], value: 'ⅅ' },\n    { key: [68, 68, 111, 116, 114, 97, 104, 100, 59], value: '⤑' },\n    { key: [68, 74, 99, 121, 59], value: 'Ђ' },\n    { key: [68, 83, 99, 121, 59], value: 'Ѕ' },\n    { key: [68, 90, 99, 121, 59], value: 'Џ' },\n    { key: [68, 97, 103, 103, 101, 114, 59], value: '‡' },\n    { key: [68, 97, 114, 114, 59], value: '↡' },\n    { key: [68, 97, 115, 104, 118, 59], value: '⫤' },\n    { key: [68, 99, 97, 114, 111, 110, 59], value: 'Ď' },\n    { key: [68, 99, 121, 59], value: 'Д' },\n    { key: [68, 101, 108, 59], value: '∇' },\n    { key: [68, 101, 108, 116, 97, 59], value: 'Δ' },\n    { key: [68, 102, 114, 59], value: '𝔇' },\n    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 65, 99, 117, 116, 101, 59], value: '´' },\n    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 68, 111, 116, 59], value: '˙' },\n    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 68, 111, 117, 98, 108, 101, 65, 99, 117, 116, 101, 59], value: '˝' },\n    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 71, 114, 97, 118, 101, 59], value: '`' },\n    { key: [68, 105, 97, 99, 114, 105, 116, 105, 99, 97, 108, 84, 105, 108, 100, 101, 59], value: '˜' },\n    { key: [68, 105, 97, 109, 111, 110, 100, 59], value: '⋄' },\n    { key: [68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59], value: 'ⅆ' },\n    { key: [68, 111, 112, 102, 59], value: '𝔻' },\n    { key: [68, 111, 116, 59], value: '¨' },\n    { key: [68, 111, 116, 68, 111, 116, 59], value: '⃜' },\n    { key: [68, 111, 116, 69, 113, 117, 97, 108, 59], value: '≐' },\n    { key: [68, 111, 117, 98, 108, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∯' },\n    { key: [68, 111, 117, 98, 108, 101, 68, 111, 116, 59], value: '¨' },\n    { key: [68, 111, 117, 98, 108, 101, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '⇓' },\n    { key: [68, 111, 117, 98, 108, 101, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⇐' },\n    { key: [68, 111, 117, 98, 108, 101, 76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⇔' },\n    { key: [68, 111, 117, 98, 108, 101, 76, 101, 102, 116, 84, 101, 101, 59], value: '⫤' },\n    { key: [68, 111, 117, 98, 108, 101, 76, 111, 110, 103, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⟸' },\n    { key: [68, 111, 117, 98, 108, 101, 76, 111, 110, 103, 76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟺' },\n    { key: [68, 111, 117, 98, 108, 101, 76, 111, 110, 103, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟹' },\n    { key: [68, 111, 117, 98, 108, 101, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⇒' },\n    { key: [68, 111, 117, 98, 108, 101, 82, 105, 103, 104, 116, 84, 101, 101, 59], value: '⊨' },\n    { key: [68, 111, 117, 98, 108, 101, 85, 112, 65, 114, 114, 111, 119, 59], value: '⇑' },\n    { key: [68, 111, 117, 98, 108, 101, 85, 112, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '⇕' },\n    { key: [68, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∥' },\n    { key: [68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '↓' },\n    { key: [68, 111, 119, 110, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⤓' },\n    { key: [68, 111, 119, 110, 65, 114, 114, 111, 119, 85, 112, 65, 114, 114, 111, 119, 59], value: '⇵' },\n    { key: [68, 111, 119, 110, 66, 114, 101, 118, 101, 59], value: '̑' },\n    { key: [68, 111, 119, 110, 76, 101, 102, 116, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⥐' },\n    { key: [68, 111, 119, 110, 76, 101, 102, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥞' },\n    { key: [68, 111, 119, 110, 76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 59], value: '↽' },\n    { key: [68, 111, 119, 110, 76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥖' },\n    { key: [68, 111, 119, 110, 82, 105, 103, 104, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥟' },\n    { key: [68, 111, 119, 110, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⇁' },\n    { key: [68, 111, 119, 110, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥗' },\n    { key: [68, 111, 119, 110, 84, 101, 101, 59], value: '⊤' },\n    { key: [68, 111, 119, 110, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↧' },\n    { key: [68, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '⇓' },\n    { key: [68, 115, 99, 114, 59], value: '𝒟' },\n    { key: [68, 115, 116, 114, 111, 107, 59], value: 'Đ' },\n    { key: [69, 78, 71, 59], value: 'Ŋ' },\n    { key: [69, 84, 72, 59], value: 'Ð' },\n    { key: [69, 97, 99, 117, 116, 101, 59], value: 'É' },\n    { key: [69, 99, 97, 114, 111, 110, 59], value: 'Ě' },\n    { key: [69, 99, 105, 114, 99, 59], value: 'Ê' },\n    { key: [69, 99, 121, 59], value: 'Э' },\n    { key: [69, 100, 111, 116, 59], value: 'Ė' },\n    { key: [69, 102, 114, 59], value: '𝔈' },\n    { key: [69, 103, 114, 97, 118, 101, 59], value: 'È' },\n    { key: [69, 108, 101, 109, 101, 110, 116, 59], value: '∈' },\n    { key: [69, 109, 97, 99, 114, 59], value: 'Ē' },\n    { key: [69, 109, 112, 116, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '◻' },\n    { key: [69, 109, 112, 116, 121, 86, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '▫' },\n    { key: [69, 111, 103, 111, 110, 59], value: 'Ę' },\n    { key: [69, 111, 112, 102, 59], value: '𝔼' },\n    { key: [69, 112, 115, 105, 108, 111, 110, 59], value: 'Ε' },\n    { key: [69, 113, 117, 97, 108, 59], value: '⩵' },\n    { key: [69, 113, 117, 97, 108, 84, 105, 108, 100, 101, 59], value: '≂' },\n    { key: [69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⇌' },\n    { key: [69, 115, 99, 114, 59], value: 'ℰ' },\n    { key: [69, 115, 105, 109, 59], value: '⩳' },\n    { key: [69, 116, 97, 59], value: 'Η' },\n    { key: [69, 117, 109, 108, 59], value: 'Ë' },\n    { key: [69, 120, 105, 115, 116, 115, 59], value: '∃' },\n    { key: [69, 120, 112, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59], value: 'ⅇ' },\n    { key: [70, 99, 121, 59], value: 'Ф' },\n    { key: [70, 102, 114, 59], value: '𝔉' },\n    { key: [70, 105, 108, 108, 101, 100, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '◼' },\n    { key: [70, 105, 108, 108, 101, 100, 86, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59], value: '▪' },\n    { key: [70, 111, 112, 102, 59], value: '𝔽' },\n    { key: [70, 111, 114, 65, 108, 108, 59], value: '∀' },\n    { key: [70, 111, 117, 114, 105, 101, 114, 116, 114, 102, 59], value: 'ℱ' },\n    { key: [70, 115, 99, 114, 59], value: 'ℱ' },\n    { key: [71, 74, 99, 121, 59], value: 'Ѓ' },\n    { key: [71, 84, 59], value: '>' },\n    { key: [71, 97, 109, 109, 97, 59], value: 'Γ' },\n    { key: [71, 97, 109, 109, 97, 100, 59], value: 'Ϝ' },\n    { key: [71, 98, 114, 101, 118, 101, 59], value: 'Ğ' },\n    { key: [71, 99, 101, 100, 105, 108, 59], value: 'Ģ' },\n    { key: [71, 99, 105, 114, 99, 59], value: 'Ĝ' },\n    { key: [71, 99, 121, 59], value: 'Г' },\n    { key: [71, 100, 111, 116, 59], value: 'Ġ' },\n    { key: [71, 102, 114, 59], value: '𝔊' },\n    { key: [71, 103, 59], value: '⋙' },\n    { key: [71, 111, 112, 102, 59], value: '𝔾' },\n    { key: [71, 114, 101, 97, 116, 101, 114, 69, 113, 117, 97, 108, 59], value: '≥' },\n    { key: [71, 114, 101, 97, 116, 101, 114, 69, 113, 117, 97, 108, 76, 101, 115, 115, 59], value: '⋛' },\n    { key: [71, 114, 101, 97, 116, 101, 114, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≧' },\n    { key: [71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '⪢' },\n    { key: [71, 114, 101, 97, 116, 101, 114, 76, 101, 115, 115, 59], value: '≷' },\n    { key: [71, 114, 101, 97, 116, 101, 114, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩾' },\n    { key: [71, 114, 101, 97, 116, 101, 114, 84, 105, 108, 100, 101, 59], value: '≳' },\n    { key: [71, 115, 99, 114, 59], value: '𝒢' },\n    { key: [71, 116, 59], value: '≫' },\n    { key: [72, 65, 82, 68, 99, 121, 59], value: 'Ъ' },\n    { key: [72, 97, 99, 101, 107, 59], value: 'ˇ' },\n    { key: [72, 97, 116, 59], value: '^' },\n    { key: [72, 99, 105, 114, 99, 59], value: 'Ĥ' },\n    { key: [72, 102, 114, 59], value: 'ℌ' },\n    { key: [72, 105, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59], value: 'ℋ' },\n    { key: [72, 111, 112, 102, 59], value: 'ℍ' },\n    { key: [72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59], value: '─' },\n    { key: [72, 115, 99, 114, 59], value: 'ℋ' },\n    { key: [72, 115, 116, 114, 111, 107, 59], value: 'Ħ' },\n    { key: [72, 117, 109, 112, 68, 111, 119, 110, 72, 117, 109, 112, 59], value: '≎' },\n    { key: [72, 117, 109, 112, 69, 113, 117, 97, 108, 59], value: '≏' },\n    { key: [73, 69, 99, 121, 59], value: 'Е' },\n    { key: [73, 74, 108, 105, 103, 59], value: 'Ĳ' },\n    { key: [73, 79, 99, 121, 59], value: 'Ё' },\n    { key: [73, 97, 99, 117, 116, 101, 59], value: 'Í' },\n    { key: [73, 99, 105, 114, 99, 59], value: 'Î' },\n    { key: [73, 99, 121, 59], value: 'И' },\n    { key: [73, 100, 111, 116, 59], value: 'İ' },\n    { key: [73, 102, 114, 59], value: 'ℑ' },\n    { key: [73, 103, 114, 97, 118, 101, 59], value: 'Ì' },\n    { key: [73, 109, 59], value: 'ℑ' },\n    { key: [73, 109, 97, 99, 114, 59], value: 'Ī' },\n    { key: [73, 109, 97, 103, 105, 110, 97, 114, 121, 73, 59], value: 'ⅈ' },\n    { key: [73, 109, 112, 108, 105, 101, 115, 59], value: '⇒' },\n    { key: [73, 110, 116, 59], value: '∬' },\n    { key: [73, 110, 116, 101, 103, 114, 97, 108, 59], value: '∫' },\n    { key: [73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59], value: '⋂' },\n    { key: [73, 110, 118, 105, 115, 105, 98, 108, 101, 67, 111, 109, 109, 97, 59], value: '⁣' },\n    { key: [73, 110, 118, 105, 115, 105, 98, 108, 101, 84, 105, 109, 101, 115, 59], value: '⁢' },\n    { key: [73, 111, 103, 111, 110, 59], value: 'Į' },\n    { key: [73, 111, 112, 102, 59], value: '𝕀' },\n    { key: [73, 111, 116, 97, 59], value: 'Ι' },\n    { key: [73, 115, 99, 114, 59], value: 'ℐ' },\n    { key: [73, 116, 105, 108, 100, 101, 59], value: 'Ĩ' },\n    { key: [73, 117, 107, 99, 121, 59], value: 'І' },\n    { key: [73, 117, 109, 108, 59], value: 'Ï' },\n    { key: [74, 99, 105, 114, 99, 59], value: 'Ĵ' },\n    { key: [74, 99, 121, 59], value: 'Й' },\n    { key: [74, 102, 114, 59], value: '𝔍' },\n    { key: [74, 111, 112, 102, 59], value: '𝕁' },\n    { key: [74, 115, 99, 114, 59], value: '𝒥' },\n    { key: [74, 115, 101, 114, 99, 121, 59], value: 'Ј' },\n    { key: [74, 117, 107, 99, 121, 59], value: 'Є' },\n    { key: [75, 72, 99, 121, 59], value: 'Х' },\n    { key: [75, 74, 99, 121, 59], value: 'Ќ' },\n    { key: [75, 97, 112, 112, 97, 59], value: 'Κ' },\n    { key: [75, 99, 101, 100, 105, 108, 59], value: 'Ķ' },\n    { key: [75, 99, 121, 59], value: 'К' },\n    { key: [75, 102, 114, 59], value: '𝔎' },\n    { key: [75, 111, 112, 102, 59], value: '𝕂' },\n    { key: [75, 115, 99, 114, 59], value: '𝒦' },\n    { key: [76, 74, 99, 121, 59], value: 'Љ' },\n    { key: [76, 84, 59], value: '<' },\n    { key: [76, 97, 99, 117, 116, 101, 59], value: 'Ĺ' },\n    { key: [76, 97, 109, 98, 100, 97, 59], value: 'Λ' },\n    { key: [76, 97, 110, 103, 59], value: '⟪' },\n    { key: [76, 97, 112, 108, 97, 99, 101, 116, 114, 102, 59], value: 'ℒ' },\n    { key: [76, 97, 114, 114, 59], value: '↞' },\n    { key: [76, 99, 97, 114, 111, 110, 59], value: 'Ľ' },\n    { key: [76, 99, 101, 100, 105, 108, 59], value: 'Ļ' },\n    { key: [76, 99, 121, 59], value: 'Л' },\n    { key: [76, 101, 102, 116, 65, 110, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟨' },\n    { key: [76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '←' },\n    { key: [76, 101, 102, 116, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⇤' },\n    { key: [76, 101, 102, 116, 65, 114, 114, 111, 119, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⇆' },\n    { key: [76, 101, 102, 116, 67, 101, 105, 108, 105, 110, 103, 59], value: '⌈' },\n    { key: [76, 101, 102, 116, 68, 111, 117, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟦' },\n    { key: [76, 101, 102, 116, 68, 111, 119, 110, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥡' },\n    { key: [76, 101, 102, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⇃' },\n    { key: [76, 101, 102, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥙' },\n    { key: [76, 101, 102, 116, 70, 108, 111, 111, 114, 59], value: '⌊' },\n    { key: [76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '↔' },\n    { key: [76, 101, 102, 116, 82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⥎' },\n    { key: [76, 101, 102, 116, 84, 101, 101, 59], value: '⊣' },\n    { key: [76, 101, 102, 116, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↤' },\n    { key: [76, 101, 102, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥚' },\n    { key: [76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⊲' },\n    { key: [76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧏' },\n    { key: [76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⊴' },\n    { key: [76, 101, 102, 116, 85, 112, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⥑' },\n    { key: [76, 101, 102, 116, 85, 112, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥠' },\n    { key: [76, 101, 102, 116, 85, 112, 86, 101, 99, 116, 111, 114, 59], value: '↿' },\n    { key: [76, 101, 102, 116, 85, 112, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥘' },\n    { key: [76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 59], value: '↼' },\n    { key: [76, 101, 102, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥒' },\n    { key: [76, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⇐' },\n    { key: [76, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇔' },\n    { key: [76, 101, 115, 115, 69, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59], value: '⋚' },\n    { key: [76, 101, 115, 115, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≦' },\n    { key: [76, 101, 115, 115, 71, 114, 101, 97, 116, 101, 114, 59], value: '≶' },\n    { key: [76, 101, 115, 115, 76, 101, 115, 115, 59], value: '⪡' },\n    { key: [76, 101, 115, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩽' },\n    { key: [76, 101, 115, 115, 84, 105, 108, 100, 101, 59], value: '≲' },\n    { key: [76, 102, 114, 59], value: '𝔏' },\n    { key: [76, 108, 59], value: '⋘' },\n    { key: [76, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⇚' },\n    { key: [76, 109, 105, 100, 111, 116, 59], value: 'Ŀ' },\n    { key: [76, 111, 110, 103, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⟵' },\n    { key: [76, 111, 110, 103, 76, 101, 102, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟷' },\n    { key: [76, 111, 110, 103, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '⟶' },\n    { key: [76, 111, 110, 103, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⟸' },\n    { key: [76, 111, 110, 103, 108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟺' },\n    { key: [76, 111, 110, 103, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟹' },\n    { key: [76, 111, 112, 102, 59], value: '𝕃' },\n    { key: [76, 111, 119, 101, 114, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '↙' },\n    { key: [76, 111, 119, 101, 114, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '↘' },\n    { key: [76, 115, 99, 114, 59], value: 'ℒ' },\n    { key: [76, 115, 104, 59], value: '↰' },\n    { key: [76, 115, 116, 114, 111, 107, 59], value: 'Ł' },\n    { key: [76, 116, 59], value: '≪' },\n    { key: [77, 97, 112, 59], value: '⤅' },\n    { key: [77, 99, 121, 59], value: 'М' },\n    { key: [77, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59], value: ' ' },\n    { key: [77, 101, 108, 108, 105, 110, 116, 114, 102, 59], value: 'ℳ' },\n    { key: [77, 102, 114, 59], value: '𝔐' },\n    { key: [77, 105, 110, 117, 115, 80, 108, 117, 115, 59], value: '∓' },\n    { key: [77, 111, 112, 102, 59], value: '𝕄' },\n    { key: [77, 115, 99, 114, 59], value: 'ℳ' },\n    { key: [77, 117, 59], value: 'Μ' },\n    { key: [78, 74, 99, 121, 59], value: 'Њ' },\n    { key: [78, 97, 99, 117, 116, 101, 59], value: 'Ń' },\n    { key: [78, 99, 97, 114, 111, 110, 59], value: 'Ň' },\n    { key: [78, 99, 101, 100, 105, 108, 59], value: 'Ņ' },\n    { key: [78, 99, 121, 59], value: 'Н' },\n    { key: [78, 101, 103, 97, 116, 105, 118, 101, 77, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59], value: '​' },\n    { key: [78, 101, 103, 97, 116, 105, 118, 101, 84, 104, 105, 99, 107, 83, 112, 97, 99, 101, 59], value: '​' },\n    { key: [78, 101, 103, 97, 116, 105, 118, 101, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: '​' },\n    { key: [78, 101, 103, 97, 116, 105, 118, 101, 86, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: '​' },\n    { key: [78, 101, 115, 116, 101, 100, 71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '≫' },\n    { key: [78, 101, 115, 116, 101, 100, 76, 101, 115, 115, 76, 101, 115, 115, 59], value: '≪' },\n    { key: [78, 101, 119, 76, 105, 110, 101, 59], value: '\\n' },\n    { key: [78, 102, 114, 59], value: '𝔑' },\n    { key: [78, 111, 66, 114, 101, 97, 107, 59], value: '⁠' },\n    { key: [78, 111, 110, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59], value: ' ' },\n    { key: [78, 111, 112, 102, 59], value: 'ℕ' },\n    { key: [78, 111, 116, 59], value: '⫬' },\n    { key: [78, 111, 116, 67, 111, 110, 103, 114, 117, 101, 110, 116, 59], value: '≢' },\n    { key: [78, 111, 116, 67, 117, 112, 67, 97, 112, 59], value: '≭' },\n    { key: [78, 111, 116, 68, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∦' },\n    { key: [78, 111, 116, 69, 108, 101, 109, 101, 110, 116, 59], value: '∉' },\n    { key: [78, 111, 116, 69, 113, 117, 97, 108, 59], value: '≠' },\n    { key: [78, 111, 116, 69, 113, 117, 97, 108, 84, 105, 108, 100, 101, 59], value: '≂̸' },\n    { key: [78, 111, 116, 69, 120, 105, 115, 116, 115, 59], value: '∄' },\n    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 59], value: '≯' },\n    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 69, 113, 117, 97, 108, 59], value: '≱' },\n    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≧̸' },\n    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '≫̸' },\n    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 76, 101, 115, 115, 59], value: '≹' },\n    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩾̸' },\n    { key: [78, 111, 116, 71, 114, 101, 97, 116, 101, 114, 84, 105, 108, 100, 101, 59], value: '≵' },\n    { key: [78, 111, 116, 72, 117, 109, 112, 68, 111, 119, 110, 72, 117, 109, 112, 59], value: '≎̸' },\n    { key: [78, 111, 116, 72, 117, 109, 112, 69, 113, 117, 97, 108, 59], value: '≏̸' },\n    { key: [78, 111, 116, 76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⋪' },\n    { key: [78, 111, 116, 76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧏̸' },\n    { key: [78, 111, 116, 76, 101, 102, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⋬' },\n    { key: [78, 111, 116, 76, 101, 115, 115, 59], value: '≮' },\n    { key: [78, 111, 116, 76, 101, 115, 115, 69, 113, 117, 97, 108, 59], value: '≰' },\n    { key: [78, 111, 116, 76, 101, 115, 115, 71, 114, 101, 97, 116, 101, 114, 59], value: '≸' },\n    { key: [78, 111, 116, 76, 101, 115, 115, 76, 101, 115, 115, 59], value: '≪̸' },\n    { key: [78, 111, 116, 76, 101, 115, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⩽̸' },\n    { key: [78, 111, 116, 76, 101, 115, 115, 84, 105, 108, 100, 101, 59], value: '≴' },\n    { key: [78, 111, 116, 78, 101, 115, 116, 101, 100, 71, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59], value: '⪢̸' },\n    { key: [78, 111, 116, 78, 101, 115, 116, 101, 100, 76, 101, 115, 115, 76, 101, 115, 115, 59], value: '⪡̸' },\n    { key: [78, 111, 116, 80, 114, 101, 99, 101, 100, 101, 115, 59], value: '⊀' },\n    { key: [78, 111, 116, 80, 114, 101, 99, 101, 100, 101, 115, 69, 113, 117, 97, 108, 59], value: '⪯̸' },\n    { key: [78, 111, 116, 80, 114, 101, 99, 101, 100, 101, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⋠' },\n    { key: [78, 111, 116, 82, 101, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59], value: '∌' },\n    { key: [78, 111, 116, 82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⋫' },\n    { key: [78, 111, 116, 82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧐̸' },\n    { key: [78, 111, 116, 82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⋭' },\n    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 59], value: '⊏̸' },\n    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⋢' },\n    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊐̸' },\n    { key: [78, 111, 116, 83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⋣' },\n    { key: [78, 111, 116, 83, 117, 98, 115, 101, 116, 59], value: '⊂⃒' },\n    { key: [78, 111, 116, 83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊈' },\n    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 59], value: '⊁' },\n    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 69, 113, 117, 97, 108, 59], value: '⪰̸' },\n    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '⋡' },\n    { key: [78, 111, 116, 83, 117, 99, 99, 101, 101, 100, 115, 84, 105, 108, 100, 101, 59], value: '≿̸' },\n    { key: [78, 111, 116, 83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊃⃒' },\n    { key: [78, 111, 116, 83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊉' },\n    { key: [78, 111, 116, 84, 105, 108, 100, 101, 59], value: '≁' },\n    { key: [78, 111, 116, 84, 105, 108, 100, 101, 69, 113, 117, 97, 108, 59], value: '≄' },\n    { key: [78, 111, 116, 84, 105, 108, 100, 101, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≇' },\n    { key: [78, 111, 116, 84, 105, 108, 100, 101, 84, 105, 108, 100, 101, 59], value: '≉' },\n    { key: [78, 111, 116, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∤' },\n    { key: [78, 115, 99, 114, 59], value: '𝒩' },\n    { key: [78, 116, 105, 108, 100, 101, 59], value: 'Ñ' },\n    { key: [78, 117, 59], value: 'Ν' },\n    { key: [79, 69, 108, 105, 103, 59], value: 'Œ' },\n    { key: [79, 97, 99, 117, 116, 101, 59], value: 'Ó' },\n    { key: [79, 99, 105, 114, 99, 59], value: 'Ô' },\n    { key: [79, 99, 121, 59], value: 'О' },\n    { key: [79, 100, 98, 108, 97, 99, 59], value: 'Ő' },\n    { key: [79, 102, 114, 59], value: '𝔒' },\n    { key: [79, 103, 114, 97, 118, 101, 59], value: 'Ò' },\n    { key: [79, 109, 97, 99, 114, 59], value: 'Ō' },\n    { key: [79, 109, 101, 103, 97, 59], value: 'Ω' },\n    { key: [79, 109, 105, 99, 114, 111, 110, 59], value: 'Ο' },\n    { key: [79, 111, 112, 102, 59], value: '𝕆' },\n    { key: [79, 112, 101, 110, 67, 117, 114, 108, 121, 68, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59], value: '“' },\n    { key: [79, 112, 101, 110, 67, 117, 114, 108, 121, 81, 117, 111, 116, 101, 59], value: '‘' },\n    { key: [79, 114, 59], value: '⩔' },\n    { key: [79, 115, 99, 114, 59], value: '𝒪' },\n    { key: [79, 115, 108, 97, 115, 104, 59], value: 'Ø' },\n    { key: [79, 116, 105, 108, 100, 101, 59], value: 'Õ' },\n    { key: [79, 116, 105, 109, 101, 115, 59], value: '⨷' },\n    { key: [79, 117, 109, 108, 59], value: 'Ö' },\n    { key: [79, 118, 101, 114, 66, 97, 114, 59], value: '‾' },\n    { key: [79, 118, 101, 114, 66, 114, 97, 99, 101, 59], value: '⏞' },\n    { key: [79, 118, 101, 114, 66, 114, 97, 99, 107, 101, 116, 59], value: '⎴' },\n    { key: [79, 118, 101, 114, 80, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59], value: '⏜' },\n    { key: [80, 97, 114, 116, 105, 97, 108, 68, 59], value: '∂' },\n    { key: [80, 99, 121, 59], value: 'П' },\n    { key: [80, 102, 114, 59], value: '𝔓' },\n    { key: [80, 104, 105, 59], value: 'Φ' },\n    { key: [80, 105, 59], value: 'Π' },\n    { key: [80, 108, 117, 115, 77, 105, 110, 117, 115, 59], value: '±' },\n    { key: [80, 111, 105, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59], value: 'ℌ' },\n    { key: [80, 111, 112, 102, 59], value: 'ℙ' },\n    { key: [80, 114, 59], value: '⪻' },\n    { key: [80, 114, 101, 99, 101, 100, 101, 115, 59], value: '≺' },\n    { key: [80, 114, 101, 99, 101, 100, 101, 115, 69, 113, 117, 97, 108, 59], value: '⪯' },\n    { key: [80, 114, 101, 99, 101, 100, 101, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '≼' },\n    { key: [80, 114, 101, 99, 101, 100, 101, 115, 84, 105, 108, 100, 101, 59], value: '≾' },\n    { key: [80, 114, 105, 109, 101, 59], value: '″' },\n    { key: [80, 114, 111, 100, 117, 99, 116, 59], value: '∏' },\n    { key: [80, 114, 111, 112, 111, 114, 116, 105, 111, 110, 59], value: '∷' },\n    { key: [80, 114, 111, 112, 111, 114, 116, 105, 111, 110, 97, 108, 59], value: '∝' },\n    { key: [80, 115, 99, 114, 59], value: '𝒫' },\n    { key: [80, 115, 105, 59], value: 'Ψ' },\n    { key: [81, 85, 79, 84, 59], value: '\"' },\n    { key: [81, 102, 114, 59], value: '𝔔' },\n    { key: [81, 111, 112, 102, 59], value: 'ℚ' },\n    { key: [81, 115, 99, 114, 59], value: '𝒬' },\n    { key: [82, 66, 97, 114, 114, 59], value: '⤐' },\n    { key: [82, 69, 71, 59], value: '®' },\n    { key: [82, 97, 99, 117, 116, 101, 59], value: 'Ŕ' },\n    { key: [82, 97, 110, 103, 59], value: '⟫' },\n    { key: [82, 97, 114, 114, 59], value: '↠' },\n    { key: [82, 97, 114, 114, 116, 108, 59], value: '⤖' },\n    { key: [82, 99, 97, 114, 111, 110, 59], value: 'Ř' },\n    { key: [82, 99, 101, 100, 105, 108, 59], value: 'Ŗ' },\n    { key: [82, 99, 121, 59], value: 'Р' },\n    { key: [82, 101, 59], value: 'ℜ' },\n    { key: [82, 101, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59], value: '∋' },\n    { key: [82, 101, 118, 101, 114, 115, 101, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⇋' },\n    { key: [82, 101, 118, 101, 114, 115, 101, 85, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⥯' },\n    { key: [82, 102, 114, 59], value: 'ℜ' },\n    { key: [82, 104, 111, 59], value: 'Ρ' },\n    { key: [82, 105, 103, 104, 116, 65, 110, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟩' },\n    { key: [82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '→' },\n    { key: [82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⇥' },\n    { key: [82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '⇄' },\n    { key: [82, 105, 103, 104, 116, 67, 101, 105, 108, 105, 110, 103, 59], value: '⌉' },\n    { key: [82, 105, 103, 104, 116, 68, 111, 117, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59], value: '⟧' },\n    { key: [82, 105, 103, 104, 116, 68, 111, 119, 110, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥝' },\n    { key: [82, 105, 103, 104, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⇂' },\n    { key: [82, 105, 103, 104, 116, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥕' },\n    { key: [82, 105, 103, 104, 116, 70, 108, 111, 111, 114, 59], value: '⌋' },\n    { key: [82, 105, 103, 104, 116, 84, 101, 101, 59], value: '⊢' },\n    { key: [82, 105, 103, 104, 116, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↦' },\n    { key: [82, 105, 103, 104, 116, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥛' },\n    { key: [82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 59], value: '⊳' },\n    { key: [82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 66, 97, 114, 59], value: '⧐' },\n    { key: [82, 105, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 69, 113, 117, 97, 108, 59], value: '⊵' },\n    { key: [82, 105, 103, 104, 116, 85, 112, 68, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59], value: '⥏' },\n    { key: [82, 105, 103, 104, 116, 85, 112, 84, 101, 101, 86, 101, 99, 116, 111, 114, 59], value: '⥜' },\n    { key: [82, 105, 103, 104, 116, 85, 112, 86, 101, 99, 116, 111, 114, 59], value: '↾' },\n    { key: [82, 105, 103, 104, 116, 85, 112, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥔' },\n    { key: [82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59], value: '⇀' },\n    { key: [82, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 66, 97, 114, 59], value: '⥓' },\n    { key: [82, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇒' },\n    { key: [82, 111, 112, 102, 59], value: 'ℝ' },\n    { key: [82, 111, 117, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59], value: '⥰' },\n    { key: [82, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇛' },\n    { key: [82, 115, 99, 114, 59], value: 'ℛ' },\n    { key: [82, 115, 104, 59], value: '↱' },\n    { key: [82, 117, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59], value: '⧴' },\n    { key: [83, 72, 67, 72, 99, 121, 59], value: 'Щ' },\n    { key: [83, 72, 99, 121, 59], value: 'Ш' },\n    { key: [83, 79, 70, 84, 99, 121, 59], value: 'Ь' },\n    { key: [83, 97, 99, 117, 116, 101, 59], value: 'Ś' },\n    { key: [83, 99, 59], value: '⪼' },\n    { key: [83, 99, 97, 114, 111, 110, 59], value: 'Š' },\n    { key: [83, 99, 101, 100, 105, 108, 59], value: 'Ş' },\n    { key: [83, 99, 105, 114, 99, 59], value: 'Ŝ' },\n    { key: [83, 99, 121, 59], value: 'С' },\n    { key: [83, 102, 114, 59], value: '𝔖' },\n    { key: [83, 104, 111, 114, 116, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '↓' },\n    { key: [83, 104, 111, 114, 116, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '←' },\n    { key: [83, 104, 111, 114, 116, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '→' },\n    { key: [83, 104, 111, 114, 116, 85, 112, 65, 114, 114, 111, 119, 59], value: '↑' },\n    { key: [83, 105, 103, 109, 97, 59], value: 'Σ' },\n    { key: [83, 109, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59], value: '∘' },\n    { key: [83, 111, 112, 102, 59], value: '𝕊' },\n    { key: [83, 113, 114, 116, 59], value: '√' },\n    { key: [83, 113, 117, 97, 114, 101, 59], value: '□' },\n    { key: [83, 113, 117, 97, 114, 101, 73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59], value: '⊓' },\n    { key: [83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 59], value: '⊏' },\n    { key: [83, 113, 117, 97, 114, 101, 83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊑' },\n    { key: [83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊐' },\n    { key: [83, 113, 117, 97, 114, 101, 83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊒' },\n    { key: [83, 113, 117, 97, 114, 101, 85, 110, 105, 111, 110, 59], value: '⊔' },\n    { key: [83, 115, 99, 114, 59], value: '𝒮' },\n    { key: [83, 116, 97, 114, 59], value: '⋆' },\n    { key: [83, 117, 98, 59], value: '⋐' },\n    { key: [83, 117, 98, 115, 101, 116, 59], value: '⋐' },\n    { key: [83, 117, 98, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊆' },\n    { key: [83, 117, 99, 99, 101, 101, 100, 115, 59], value: '≻' },\n    { key: [83, 117, 99, 99, 101, 101, 100, 115, 69, 113, 117, 97, 108, 59], value: '⪰' },\n    { key: [83, 117, 99, 99, 101, 101, 100, 115, 83, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59], value: '≽' },\n    { key: [83, 117, 99, 99, 101, 101, 100, 115, 84, 105, 108, 100, 101, 59], value: '≿' },\n    { key: [83, 117, 99, 104, 84, 104, 97, 116, 59], value: '∋' },\n    { key: [83, 117, 109, 59], value: '∑' },\n    { key: [83, 117, 112, 59], value: '⋑' },\n    { key: [83, 117, 112, 101, 114, 115, 101, 116, 59], value: '⊃' },\n    { key: [83, 117, 112, 101, 114, 115, 101, 116, 69, 113, 117, 97, 108, 59], value: '⊇' },\n    { key: [83, 117, 112, 115, 101, 116, 59], value: '⋑' },\n    { key: [84, 72, 79, 82, 78, 59], value: 'Þ' },\n    { key: [84, 82, 65, 68, 69, 59], value: '™' },\n    { key: [84, 83, 72, 99, 121, 59], value: 'Ћ' },\n    { key: [84, 83, 99, 121, 59], value: 'Ц' },\n    { key: [84, 97, 98, 59], value: '\\t' },\n    { key: [84, 97, 117, 59], value: 'Τ' },\n    { key: [84, 99, 97, 114, 111, 110, 59], value: 'Ť' },\n    { key: [84, 99, 101, 100, 105, 108, 59], value: 'Ţ' },\n    { key: [84, 99, 121, 59], value: 'Т' },\n    { key: [84, 102, 114, 59], value: '𝔗' },\n    { key: [84, 104, 101, 114, 101, 102, 111, 114, 101, 59], value: '∴' },\n    { key: [84, 104, 101, 116, 97, 59], value: 'Θ' },\n    { key: [84, 104, 105, 99, 107, 83, 112, 97, 99, 101, 59], value: '  ' },\n    { key: [84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: ' ' },\n    { key: [84, 105, 108, 100, 101, 59], value: '∼' },\n    { key: [84, 105, 108, 100, 101, 69, 113, 117, 97, 108, 59], value: '≃' },\n    { key: [84, 105, 108, 100, 101, 70, 117, 108, 108, 69, 113, 117, 97, 108, 59], value: '≅' },\n    { key: [84, 105, 108, 100, 101, 84, 105, 108, 100, 101, 59], value: '≈' },\n    { key: [84, 111, 112, 102, 59], value: '𝕋' },\n    { key: [84, 114, 105, 112, 108, 101, 68, 111, 116, 59], value: '⃛' },\n    { key: [84, 115, 99, 114, 59], value: '𝒯' },\n    { key: [84, 115, 116, 114, 111, 107, 59], value: 'Ŧ' },\n    { key: [85, 97, 99, 117, 116, 101, 59], value: 'Ú' },\n    { key: [85, 97, 114, 114, 59], value: '↟' },\n    { key: [85, 97, 114, 114, 111, 99, 105, 114, 59], value: '⥉' },\n    { key: [85, 98, 114, 99, 121, 59], value: 'Ў' },\n    { key: [85, 98, 114, 101, 118, 101, 59], value: 'Ŭ' },\n    { key: [85, 99, 105, 114, 99, 59], value: 'Û' },\n    { key: [85, 99, 121, 59], value: 'У' },\n    { key: [85, 100, 98, 108, 97, 99, 59], value: 'Ű' },\n    { key: [85, 102, 114, 59], value: '𝔘' },\n    { key: [85, 103, 114, 97, 118, 101, 59], value: 'Ù' },\n    { key: [85, 109, 97, 99, 114, 59], value: 'Ū' },\n    { key: [85, 110, 100, 101, 114, 66, 97, 114, 59], value: '_' },\n    { key: [85, 110, 100, 101, 114, 66, 114, 97, 99, 101, 59], value: '⏟' },\n    { key: [85, 110, 100, 101, 114, 66, 114, 97, 99, 107, 101, 116, 59], value: '⎵' },\n    { key: [85, 110, 100, 101, 114, 80, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59], value: '⏝' },\n    { key: [85, 110, 105, 111, 110, 59], value: '⋃' },\n    { key: [85, 110, 105, 111, 110, 80, 108, 117, 115, 59], value: '⊎' },\n    { key: [85, 111, 103, 111, 110, 59], value: 'Ų' },\n    { key: [85, 111, 112, 102, 59], value: '𝕌' },\n    { key: [85, 112, 65, 114, 114, 111, 119, 59], value: '↑' },\n    { key: [85, 112, 65, 114, 114, 111, 119, 66, 97, 114, 59], value: '⤒' },\n    { key: [85, 112, 65, 114, 114, 111, 119, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '⇅' },\n    { key: [85, 112, 68, 111, 119, 110, 65, 114, 114, 111, 119, 59], value: '↕' },\n    { key: [85, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59], value: '⥮' },\n    { key: [85, 112, 84, 101, 101, 59], value: '⊥' },\n    { key: [85, 112, 84, 101, 101, 65, 114, 114, 111, 119, 59], value: '↥' },\n    { key: [85, 112, 97, 114, 114, 111, 119, 59], value: '⇑' },\n    { key: [85, 112, 100, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '⇕' },\n    { key: [85, 112, 112, 101, 114, 76, 101, 102, 116, 65, 114, 114, 111, 119, 59], value: '↖' },\n    { key: [85, 112, 112, 101, 114, 82, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59], value: '↗' },\n    { key: [85, 112, 115, 105, 59], value: 'ϒ' },\n    { key: [85, 112, 115, 105, 108, 111, 110, 59], value: 'Υ' },\n    { key: [85, 114, 105, 110, 103, 59], value: 'Ů' },\n    { key: [85, 115, 99, 114, 59], value: '𝒰' },\n    { key: [85, 116, 105, 108, 100, 101, 59], value: 'Ũ' },\n    { key: [85, 117, 109, 108, 59], value: 'Ü' },\n    { key: [86, 68, 97, 115, 104, 59], value: '⊫' },\n    { key: [86, 98, 97, 114, 59], value: '⫫' },\n    { key: [86, 99, 121, 59], value: 'В' },\n    { key: [86, 100, 97, 115, 104, 59], value: '⊩' },\n    { key: [86, 100, 97, 115, 104, 108, 59], value: '⫦' },\n    { key: [86, 101, 101, 59], value: '⋁' },\n    { key: [86, 101, 114, 98, 97, 114, 59], value: '‖' },\n    { key: [86, 101, 114, 116, 59], value: '‖' },\n    { key: [86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59], value: '∣' },\n    { key: [86, 101, 114, 116, 105, 99, 97, 108, 76, 105, 110, 101, 59], value: '|' },\n    { key: [86, 101, 114, 116, 105, 99, 97, 108, 83, 101, 112, 97, 114, 97, 116, 111, 114, 59], value: '❘' },\n    { key: [86, 101, 114, 116, 105, 99, 97, 108, 84, 105, 108, 100, 101, 59], value: '≀' },\n    { key: [86, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59], value: ' ' },\n    { key: [86, 102, 114, 59], value: '𝔙' },\n    { key: [86, 111, 112, 102, 59], value: '𝕍' },\n    { key: [86, 115, 99, 114, 59], value: '𝒱' },\n    { key: [86, 118, 100, 97, 115, 104, 59], value: '⊪' },\n    { key: [87, 99, 105, 114, 99, 59], value: 'Ŵ' },\n    { key: [87, 101, 100, 103, 101, 59], value: '⋀' },\n    { key: [87, 102, 114, 59], value: '𝔚' },\n    { key: [87, 111, 112, 102, 59], value: '𝕎' },\n    { key: [87, 115, 99, 114, 59], value: '𝒲' },\n    { key: [88, 102, 114, 59], value: '𝔛' },\n    { key: [88, 105, 59], value: 'Ξ' },\n    { key: [88, 111, 112, 102, 59], value: '𝕏' },\n    { key: [88, 115, 99, 114, 59], value: '𝒳' },\n    { key: [89, 65, 99, 121, 59], value: 'Я' },\n    { key: [89, 73, 99, 121, 59], value: 'Ї' },\n    { key: [89, 85, 99, 121, 59], value: 'Ю' },\n    { key: [89, 97, 99, 117, 116, 101, 59], value: 'Ý' },\n    { key: [89, 99, 105, 114, 99, 59], value: 'Ŷ' },\n    { key: [89, 99, 121, 59], value: 'Ы' },\n    { key: [89, 102, 114, 59], value: '𝔜' },\n    { key: [89, 111, 112, 102, 59], value: '𝕐' },\n    { key: [89, 115, 99, 114, 59], value: '𝒴' },\n    { key: [89, 117, 109, 108, 59], value: 'Ÿ' },\n    { key: [90, 72, 99, 121, 59], value: 'Ж' },\n    { key: [90, 97, 99, 117, 116, 101, 59], value: 'Ź' },\n    { key: [90, 99, 97, 114, 111, 110, 59], value: 'Ž' },\n    { key: [90, 99, 121, 59], value: 'З' },\n    { key: [90, 100, 111, 116, 59], value: 'Ż' },\n    { key: [90, 101, 114, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59], value: '​' },\n    { key: [90, 101, 116, 97, 59], value: 'Ζ' },\n    { key: [90, 102, 114, 59], value: 'ℨ' },\n    { key: [90, 111, 112, 102, 59], value: 'ℤ' },\n    { key: [90, 115, 99, 114, 59], value: '𝒵' },\n    { key: [97, 97, 99, 117, 116, 101, 59], value: 'á' },\n    { key: [97, 98, 114, 101, 118, 101, 59], value: 'ă' },\n    { key: [97, 99, 59], value: '∾' },\n    { key: [97, 99, 69, 59], value: '∾̳' },\n    { key: [97, 99, 100, 59], value: '∿' },\n    { key: [97, 99, 105, 114, 99, 59], value: 'â' },\n    { key: [97, 99, 117, 116, 101, 59], value: '´' },\n    { key: [97, 99, 121, 59], value: 'а' },\n    { key: [97, 101, 108, 105, 103, 59], value: 'æ' },\n    { key: [97, 102, 59], value: '⁡' },\n    { key: [97, 102, 114, 59], value: '𝔞' },\n    { key: [97, 103, 114, 97, 118, 101, 59], value: 'à' },\n    { key: [97, 108, 101, 102, 115, 121, 109, 59], value: 'ℵ' },\n    { key: [97, 108, 101, 112, 104, 59], value: 'ℵ' },\n    { key: [97, 108, 112, 104, 97, 59], value: 'α' },\n    { key: [97, 109, 97, 99, 114, 59], value: 'ā' },\n    { key: [97, 109, 97, 108, 103, 59], value: '⨿' },\n    { key: [97, 109, 112, 59], value: '&' },\n    { key: [97, 110, 100, 59], value: '∧' },\n    { key: [97, 110, 100, 97, 110, 100, 59], value: '⩕' },\n    { key: [97, 110, 100, 100, 59], value: '⩜' },\n    { key: [97, 110, 100, 115, 108, 111, 112, 101, 59], value: '⩘' },\n    { key: [97, 110, 100, 118, 59], value: '⩚' },\n    { key: [97, 110, 103, 59], value: '∠' },\n    { key: [97, 110, 103, 101, 59], value: '⦤' },\n    { key: [97, 110, 103, 108, 101, 59], value: '∠' },\n    { key: [97, 110, 103, 109, 115, 100, 59], value: '∡' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 97, 59], value: '⦨' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 98, 59], value: '⦩' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 99, 59], value: '⦪' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 100, 59], value: '⦫' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 101, 59], value: '⦬' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 102, 59], value: '⦭' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 103, 59], value: '⦮' },\n    { key: [97, 110, 103, 109, 115, 100, 97, 104, 59], value: '⦯' },\n    { key: [97, 110, 103, 114, 116, 59], value: '∟' },\n    { key: [97, 110, 103, 114, 116, 118, 98, 59], value: '⊾' },\n    { key: [97, 110, 103, 114, 116, 118, 98, 100, 59], value: '⦝' },\n    { key: [97, 110, 103, 115, 112, 104, 59], value: '∢' },\n    { key: [97, 110, 103, 115, 116, 59], value: 'Å' },\n    { key: [97, 110, 103, 122, 97, 114, 114, 59], value: '⍼' },\n    { key: [97, 111, 103, 111, 110, 59], value: 'ą' },\n    { key: [97, 111, 112, 102, 59], value: '𝕒' },\n    { key: [97, 112, 59], value: '≈' },\n    { key: [97, 112, 69, 59], value: '⩰' },\n    { key: [97, 112, 97, 99, 105, 114, 59], value: '⩯' },\n    { key: [97, 112, 101, 59], value: '≊' },\n    { key: [97, 112, 105, 100, 59], value: '≋' },\n    { key: [97, 112, 111, 115, 59], value: '\\'' },\n    { key: [97, 112, 112, 114, 111, 120, 59], value: '≈' },\n    { key: [97, 112, 112, 114, 111, 120, 101, 113, 59], value: '≊' },\n    { key: [97, 114, 105, 110, 103, 59], value: 'å' },\n    { key: [97, 115, 99, 114, 59], value: '𝒶' },\n    { key: [97, 115, 116, 59], value: '*' },\n    { key: [97, 115, 121, 109, 112, 59], value: '≈' },\n    { key: [97, 115, 121, 109, 112, 101, 113, 59], value: '≍' },\n    { key: [97, 116, 105, 108, 100, 101, 59], value: 'ã' },\n    { key: [97, 117, 109, 108, 59], value: 'ä' },\n    { key: [97, 119, 99, 111, 110, 105, 110, 116, 59], value: '∳' },\n    { key: [97, 119, 105, 110, 116, 59], value: '⨑' },\n    { key: [98, 78, 111, 116, 59], value: '⫭' },\n    { key: [98, 97, 99, 107, 99, 111, 110, 103, 59], value: '≌' },\n    { key: [98, 97, 99, 107, 101, 112, 115, 105, 108, 111, 110, 59], value: '϶' },\n    { key: [98, 97, 99, 107, 112, 114, 105, 109, 101, 59], value: '‵' },\n    { key: [98, 97, 99, 107, 115, 105, 109, 59], value: '∽' },\n    { key: [98, 97, 99, 107, 115, 105, 109, 101, 113, 59], value: '⋍' },\n    { key: [98, 97, 114, 118, 101, 101, 59], value: '⊽' },\n    { key: [98, 97, 114, 119, 101, 100, 59], value: '⌅' },\n    { key: [98, 97, 114, 119, 101, 100, 103, 101, 59], value: '⌅' },\n    { key: [98, 98, 114, 107, 59], value: '⎵' },\n    { key: [98, 98, 114, 107, 116, 98, 114, 107, 59], value: '⎶' },\n    { key: [98, 99, 111, 110, 103, 59], value: '≌' },\n    { key: [98, 99, 121, 59], value: 'б' },\n    { key: [98, 100, 113, 117, 111, 59], value: '„' },\n    { key: [98, 101, 99, 97, 117, 115, 59], value: '∵' },\n    { key: [98, 101, 99, 97, 117, 115, 101, 59], value: '∵' },\n    { key: [98, 101, 109, 112, 116, 121, 118, 59], value: '⦰' },\n    { key: [98, 101, 112, 115, 105, 59], value: '϶' },\n    { key: [98, 101, 114, 110, 111, 117, 59], value: 'ℬ' },\n    { key: [98, 101, 116, 97, 59], value: 'β' },\n    { key: [98, 101, 116, 104, 59], value: 'ℶ' },\n    { key: [98, 101, 116, 119, 101, 101, 110, 59], value: '≬' },\n    { key: [98, 102, 114, 59], value: '𝔟' },\n    { key: [98, 105, 103, 99, 97, 112, 59], value: '⋂' },\n    { key: [98, 105, 103, 99, 105, 114, 99, 59], value: '◯' },\n    { key: [98, 105, 103, 99, 117, 112, 59], value: '⋃' },\n    { key: [98, 105, 103, 111, 100, 111, 116, 59], value: '⨀' },\n    { key: [98, 105, 103, 111, 112, 108, 117, 115, 59], value: '⨁' },\n    { key: [98, 105, 103, 111, 116, 105, 109, 101, 115, 59], value: '⨂' },\n    { key: [98, 105, 103, 115, 113, 99, 117, 112, 59], value: '⨆' },\n    { key: [98, 105, 103, 115, 116, 97, 114, 59], value: '★' },\n    { key: [98, 105, 103, 116, 114, 105, 97, 110, 103, 108, 101, 100, 111, 119, 110, 59], value: '▽' },\n    { key: [98, 105, 103, 116, 114, 105, 97, 110, 103, 108, 101, 117, 112, 59], value: '△' },\n    { key: [98, 105, 103, 117, 112, 108, 117, 115, 59], value: '⨄' },\n    { key: [98, 105, 103, 118, 101, 101, 59], value: '⋁' },\n    { key: [98, 105, 103, 119, 101, 100, 103, 101, 59], value: '⋀' },\n    { key: [98, 107, 97, 114, 111, 119, 59], value: '⤍' },\n    { key: [98, 108, 97, 99, 107, 108, 111, 122, 101, 110, 103, 101, 59], value: '⧫' },\n    { key: [98, 108, 97, 99, 107, 115, 113, 117, 97, 114, 101, 59], value: '▪' },\n    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 59], value: '▴' },\n    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 100, 111, 119, 110, 59], value: '▾' },\n    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '◂' },\n    { key: [98, 108, 97, 99, 107, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '▸' },\n    { key: [98, 108, 97, 110, 107, 59], value: '␣' },\n    { key: [98, 108, 107, 49, 50, 59], value: '▒' },\n    { key: [98, 108, 107, 49, 52, 59], value: '░' },\n    { key: [98, 108, 107, 51, 52, 59], value: '▓' },\n    { key: [98, 108, 111, 99, 107, 59], value: '█' },\n    { key: [98, 110, 101, 59], value: '=⃥' },\n    { key: [98, 110, 101, 113, 117, 105, 118, 59], value: '≡⃥' },\n    { key: [98, 110, 111, 116, 59], value: '⌐' },\n    { key: [98, 111, 112, 102, 59], value: '𝕓' },\n    { key: [98, 111, 116, 59], value: '⊥' },\n    { key: [98, 111, 116, 116, 111, 109, 59], value: '⊥' },\n    { key: [98, 111, 119, 116, 105, 101, 59], value: '⋈' },\n    { key: [98, 111, 120, 68, 76, 59], value: '╗' },\n    { key: [98, 111, 120, 68, 82, 59], value: '╔' },\n    { key: [98, 111, 120, 68, 108, 59], value: '╖' },\n    { key: [98, 111, 120, 68, 114, 59], value: '╓' },\n    { key: [98, 111, 120, 72, 59], value: '═' },\n    { key: [98, 111, 120, 72, 68, 59], value: '╦' },\n    { key: [98, 111, 120, 72, 85, 59], value: '╩' },\n    { key: [98, 111, 120, 72, 100, 59], value: '╤' },\n    { key: [98, 111, 120, 72, 117, 59], value: '╧' },\n    { key: [98, 111, 120, 85, 76, 59], value: '╝' },\n    { key: [98, 111, 120, 85, 82, 59], value: '╚' },\n    { key: [98, 111, 120, 85, 108, 59], value: '╜' },\n    { key: [98, 111, 120, 85, 114, 59], value: '╙' },\n    { key: [98, 111, 120, 86, 59], value: '║' },\n    { key: [98, 111, 120, 86, 72, 59], value: '╬' },\n    { key: [98, 111, 120, 86, 76, 59], value: '╣' },\n    { key: [98, 111, 120, 86, 82, 59], value: '╠' },\n    { key: [98, 111, 120, 86, 104, 59], value: '╫' },\n    { key: [98, 111, 120, 86, 108, 59], value: '╢' },\n    { key: [98, 111, 120, 86, 114, 59], value: '╟' },\n    { key: [98, 111, 120, 98, 111, 120, 59], value: '⧉' },\n    { key: [98, 111, 120, 100, 76, 59], value: '╕' },\n    { key: [98, 111, 120, 100, 82, 59], value: '╒' },\n    { key: [98, 111, 120, 100, 108, 59], value: '┐' },\n    { key: [98, 111, 120, 100, 114, 59], value: '┌' },\n    { key: [98, 111, 120, 104, 59], value: '─' },\n    { key: [98, 111, 120, 104, 68, 59], value: '╥' },\n    { key: [98, 111, 120, 104, 85, 59], value: '╨' },\n    { key: [98, 111, 120, 104, 100, 59], value: '┬' },\n    { key: [98, 111, 120, 104, 117, 59], value: '┴' },\n    { key: [98, 111, 120, 109, 105, 110, 117, 115, 59], value: '⊟' },\n    { key: [98, 111, 120, 112, 108, 117, 115, 59], value: '⊞' },\n    { key: [98, 111, 120, 116, 105, 109, 101, 115, 59], value: '⊠' },\n    { key: [98, 111, 120, 117, 76, 59], value: '╛' },\n    { key: [98, 111, 120, 117, 82, 59], value: '╘' },\n    { key: [98, 111, 120, 117, 108, 59], value: '┘' },\n    { key: [98, 111, 120, 117, 114, 59], value: '└' },\n    { key: [98, 111, 120, 118, 59], value: '│' },\n    { key: [98, 111, 120, 118, 72, 59], value: '╪' },\n    { key: [98, 111, 120, 118, 76, 59], value: '╡' },\n    { key: [98, 111, 120, 118, 82, 59], value: '╞' },\n    { key: [98, 111, 120, 118, 104, 59], value: '┼' },\n    { key: [98, 111, 120, 118, 108, 59], value: '┤' },\n    { key: [98, 111, 120, 118, 114, 59], value: '├' },\n    { key: [98, 112, 114, 105, 109, 101, 59], value: '‵' },\n    { key: [98, 114, 101, 118, 101, 59], value: '˘' },\n    { key: [98, 114, 118, 98, 97, 114, 59], value: '¦' },\n    { key: [98, 115, 99, 114, 59], value: '𝒷' },\n    { key: [98, 115, 101, 109, 105, 59], value: '⁏' },\n    { key: [98, 115, 105, 109, 59], value: '∽' },\n    { key: [98, 115, 105, 109, 101, 59], value: '⋍' },\n    { key: [98, 115, 111, 108, 59], value: '\\\\' },\n    { key: [98, 115, 111, 108, 98, 59], value: '⧅' },\n    { key: [98, 115, 111, 108, 104, 115, 117, 98, 59], value: '⟈' },\n    { key: [98, 117, 108, 108, 59], value: '•' },\n    { key: [98, 117, 108, 108, 101, 116, 59], value: '•' },\n    { key: [98, 117, 109, 112, 59], value: '≎' },\n    { key: [98, 117, 109, 112, 69, 59], value: '⪮' },\n    { key: [98, 117, 109, 112, 101, 59], value: '≏' },\n    { key: [98, 117, 109, 112, 101, 113, 59], value: '≏' },\n    { key: [99, 97, 99, 117, 116, 101, 59], value: 'ć' },\n    { key: [99, 97, 112, 59], value: '∩' },\n    { key: [99, 97, 112, 97, 110, 100, 59], value: '⩄' },\n    { key: [99, 97, 112, 98, 114, 99, 117, 112, 59], value: '⩉' },\n    { key: [99, 97, 112, 99, 97, 112, 59], value: '⩋' },\n    { key: [99, 97, 112, 99, 117, 112, 59], value: '⩇' },\n    { key: [99, 97, 112, 100, 111, 116, 59], value: '⩀' },\n    { key: [99, 97, 112, 115, 59], value: '∩︀' },\n    { key: [99, 97, 114, 101, 116, 59], value: '⁁' },\n    { key: [99, 97, 114, 111, 110, 59], value: 'ˇ' },\n    { key: [99, 99, 97, 112, 115, 59], value: '⩍' },\n    { key: [99, 99, 97, 114, 111, 110, 59], value: 'č' },\n    { key: [99, 99, 101, 100, 105, 108, 59], value: 'ç' },\n    { key: [99, 99, 105, 114, 99, 59], value: 'ĉ' },\n    { key: [99, 99, 117, 112, 115, 59], value: '⩌' },\n    { key: [99, 99, 117, 112, 115, 115, 109, 59], value: '⩐' },\n    { key: [99, 100, 111, 116, 59], value: 'ċ' },\n    { key: [99, 101, 100, 105, 108, 59], value: '¸' },\n    { key: [99, 101, 109, 112, 116, 121, 118, 59], value: '⦲' },\n    { key: [99, 101, 110, 116, 59], value: '¢' },\n    { key: [99, 101, 110, 116, 101, 114, 100, 111, 116, 59], value: '·' },\n    { key: [99, 102, 114, 59], value: '𝔠' },\n    { key: [99, 104, 99, 121, 59], value: 'ч' },\n    { key: [99, 104, 101, 99, 107, 59], value: '✓' },\n    { key: [99, 104, 101, 99, 107, 109, 97, 114, 107, 59], value: '✓' },\n    { key: [99, 104, 105, 59], value: 'χ' },\n    { key: [99, 105, 114, 59], value: '○' },\n    { key: [99, 105, 114, 69, 59], value: '⧃' },\n    { key: [99, 105, 114, 99, 59], value: 'ˆ' },\n    { key: [99, 105, 114, 99, 101, 113, 59], value: '≗' },\n    { key: [99, 105, 114, 99, 108, 101, 97, 114, 114, 111, 119, 108, 101, 102, 116, 59], value: '↺' },\n    { key: [99, 105, 114, 99, 108, 101, 97, 114, 114, 111, 119, 114, 105, 103, 104, 116, 59], value: '↻' },\n    { key: [99, 105, 114, 99, 108, 101, 100, 82, 59], value: '®' },\n    { key: [99, 105, 114, 99, 108, 101, 100, 83, 59], value: 'Ⓢ' },\n    { key: [99, 105, 114, 99, 108, 101, 100, 97, 115, 116, 59], value: '⊛' },\n    { key: [99, 105, 114, 99, 108, 101, 100, 99, 105, 114, 99, 59], value: '⊚' },\n    { key: [99, 105, 114, 99, 108, 101, 100, 100, 97, 115, 104, 59], value: '⊝' },\n    { key: [99, 105, 114, 101, 59], value: '≗' },\n    { key: [99, 105, 114, 102, 110, 105, 110, 116, 59], value: '⨐' },\n    { key: [99, 105, 114, 109, 105, 100, 59], value: '⫯' },\n    { key: [99, 105, 114, 115, 99, 105, 114, 59], value: '⧂' },\n    { key: [99, 108, 117, 98, 115, 59], value: '♣' },\n    { key: [99, 108, 117, 98, 115, 117, 105, 116, 59], value: '♣' },\n    { key: [99, 111, 108, 111, 110, 59], value: ':' },\n    { key: [99, 111, 108, 111, 110, 101, 59], value: '≔' },\n    { key: [99, 111, 108, 111, 110, 101, 113, 59], value: '≔' },\n    { key: [99, 111, 109, 109, 97, 59], value: ',' },\n    { key: [99, 111, 109, 109, 97, 116, 59], value: '@' },\n    { key: [99, 111, 109, 112, 59], value: '∁' },\n    { key: [99, 111, 109, 112, 102, 110, 59], value: '∘' },\n    { key: [99, 111, 109, 112, 108, 101, 109, 101, 110, 116, 59], value: '∁' },\n    { key: [99, 111, 109, 112, 108, 101, 120, 101, 115, 59], value: 'ℂ' },\n    { key: [99, 111, 110, 103, 59], value: '≅' },\n    { key: [99, 111, 110, 103, 100, 111, 116, 59], value: '⩭' },\n    { key: [99, 111, 110, 105, 110, 116, 59], value: '∮' },\n    { key: [99, 111, 112, 102, 59], value: '𝕔' },\n    { key: [99, 111, 112, 114, 111, 100, 59], value: '∐' },\n    { key: [99, 111, 112, 121, 59], value: '©' },\n    { key: [99, 111, 112, 121, 115, 114, 59], value: '℗' },\n    { key: [99, 114, 97, 114, 114, 59], value: '↵' },\n    { key: [99, 114, 111, 115, 115, 59], value: '✗' },\n    { key: [99, 115, 99, 114, 59], value: '𝒸' },\n    { key: [99, 115, 117, 98, 59], value: '⫏' },\n    { key: [99, 115, 117, 98, 101, 59], value: '⫑' },\n    { key: [99, 115, 117, 112, 59], value: '⫐' },\n    { key: [99, 115, 117, 112, 101, 59], value: '⫒' },\n    { key: [99, 116, 100, 111, 116, 59], value: '⋯' },\n    { key: [99, 117, 100, 97, 114, 114, 108, 59], value: '⤸' },\n    { key: [99, 117, 100, 97, 114, 114, 114, 59], value: '⤵' },\n    { key: [99, 117, 101, 112, 114, 59], value: '⋞' },\n    { key: [99, 117, 101, 115, 99, 59], value: '⋟' },\n    { key: [99, 117, 108, 97, 114, 114, 59], value: '↶' },\n    { key: [99, 117, 108, 97, 114, 114, 112, 59], value: '⤽' },\n    { key: [99, 117, 112, 59], value: '∪' },\n    { key: [99, 117, 112, 98, 114, 99, 97, 112, 59], value: '⩈' },\n    { key: [99, 117, 112, 99, 97, 112, 59], value: '⩆' },\n    { key: [99, 117, 112, 99, 117, 112, 59], value: '⩊' },\n    { key: [99, 117, 112, 100, 111, 116, 59], value: '⊍' },\n    { key: [99, 117, 112, 111, 114, 59], value: '⩅' },\n    { key: [99, 117, 112, 115, 59], value: '∪︀' },\n    { key: [99, 117, 114, 97, 114, 114, 59], value: '↷' },\n    { key: [99, 117, 114, 97, 114, 114, 109, 59], value: '⤼' },\n    { key: [99, 117, 114, 108, 121, 101, 113, 112, 114, 101, 99, 59], value: '⋞' },\n    { key: [99, 117, 114, 108, 121, 101, 113, 115, 117, 99, 99, 59], value: '⋟' },\n    { key: [99, 117, 114, 108, 121, 118, 101, 101, 59], value: '⋎' },\n    { key: [99, 117, 114, 108, 121, 119, 101, 100, 103, 101, 59], value: '⋏' },\n    { key: [99, 117, 114, 114, 101, 110, 59], value: '¤' },\n    { key: [99, 117, 114, 118, 101, 97, 114, 114, 111, 119, 108, 101, 102, 116, 59], value: '↶' },\n    { key: [99, 117, 114, 118, 101, 97, 114, 114, 111, 119, 114, 105, 103, 104, 116, 59], value: '↷' },\n    { key: [99, 117, 118, 101, 101, 59], value: '⋎' },\n    { key: [99, 117, 119, 101, 100, 59], value: '⋏' },\n    { key: [99, 119, 99, 111, 110, 105, 110, 116, 59], value: '∲' },\n    { key: [99, 119, 105, 110, 116, 59], value: '∱' },\n    { key: [99, 121, 108, 99, 116, 121, 59], value: '⌭' },\n    { key: [100, 65, 114, 114, 59], value: '⇓' },\n    { key: [100, 72, 97, 114, 59], value: '⥥' },\n    { key: [100, 97, 103, 103, 101, 114, 59], value: '†' },\n    { key: [100, 97, 108, 101, 116, 104, 59], value: 'ℸ' },\n    { key: [100, 97, 114, 114, 59], value: '↓' },\n    { key: [100, 97, 115, 104, 59], value: '‐' },\n    { key: [100, 97, 115, 104, 118, 59], value: '⊣' },\n    { key: [100, 98, 107, 97, 114, 111, 119, 59], value: '⤏' },\n    { key: [100, 98, 108, 97, 99, 59], value: '˝' },\n    { key: [100, 99, 97, 114, 111, 110, 59], value: 'ď' },\n    { key: [100, 99, 121, 59], value: 'д' },\n    { key: [100, 100, 59], value: 'ⅆ' },\n    { key: [100, 100, 97, 103, 103, 101, 114, 59], value: '‡' },\n    { key: [100, 100, 97, 114, 114, 59], value: '⇊' },\n    { key: [100, 100, 111, 116, 115, 101, 113, 59], value: '⩷' },\n    { key: [100, 101, 103, 59], value: '°' },\n    { key: [100, 101, 108, 116, 97, 59], value: 'δ' },\n    { key: [100, 101, 109, 112, 116, 121, 118, 59], value: '⦱' },\n    { key: [100, 102, 105, 115, 104, 116, 59], value: '⥿' },\n    { key: [100, 102, 114, 59], value: '𝔡' },\n    { key: [100, 104, 97, 114, 108, 59], value: '⇃' },\n    { key: [100, 104, 97, 114, 114, 59], value: '⇂' },\n    { key: [100, 105, 97, 109, 59], value: '⋄' },\n    { key: [100, 105, 97, 109, 111, 110, 100, 59], value: '⋄' },\n    { key: [100, 105, 97, 109, 111, 110, 100, 115, 117, 105, 116, 59], value: '♦' },\n    { key: [100, 105, 97, 109, 115, 59], value: '♦' },\n    { key: [100, 105, 101, 59], value: '¨' },\n    { key: [100, 105, 103, 97, 109, 109, 97, 59], value: 'ϝ' },\n    { key: [100, 105, 115, 105, 110, 59], value: '⋲' },\n    { key: [100, 105, 118, 59], value: '÷' },\n    { key: [100, 105, 118, 105, 100, 101, 59], value: '÷' },\n    { key: [100, 105, 118, 105, 100, 101, 111, 110, 116, 105, 109, 101, 115, 59], value: '⋇' },\n    { key: [100, 105, 118, 111, 110, 120, 59], value: '⋇' },\n    { key: [100, 106, 99, 121, 59], value: 'ђ' },\n    { key: [100, 108, 99, 111, 114, 110, 59], value: '⌞' },\n    { key: [100, 108, 99, 114, 111, 112, 59], value: '⌍' },\n    { key: [100, 111, 108, 108, 97, 114, 59], value: '$' },\n    { key: [100, 111, 112, 102, 59], value: '𝕕' },\n    { key: [100, 111, 116, 59], value: '˙' },\n    { key: [100, 111, 116, 101, 113, 59], value: '≐' },\n    { key: [100, 111, 116, 101, 113, 100, 111, 116, 59], value: '≑' },\n    { key: [100, 111, 116, 109, 105, 110, 117, 115, 59], value: '∸' },\n    { key: [100, 111, 116, 112, 108, 117, 115, 59], value: '∔' },\n    { key: [100, 111, 116, 115, 113, 117, 97, 114, 101, 59], value: '⊡' },\n    { key: [100, 111, 117, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59], value: '⌆' },\n    { key: [100, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '↓' },\n    { key: [100, 111, 119, 110, 100, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59], value: '⇊' },\n    { key: [100, 111, 119, 110, 104, 97, 114, 112, 111, 111, 110, 108, 101, 102, 116, 59], value: '⇃' },\n    { key: [100, 111, 119, 110, 104, 97, 114, 112, 111, 111, 110, 114, 105, 103, 104, 116, 59], value: '⇂' },\n    { key: [100, 114, 98, 107, 97, 114, 111, 119, 59], value: '⤐' },\n    { key: [100, 114, 99, 111, 114, 110, 59], value: '⌟' },\n    { key: [100, 114, 99, 114, 111, 112, 59], value: '⌌' },\n    { key: [100, 115, 99, 114, 59], value: '𝒹' },\n    { key: [100, 115, 99, 121, 59], value: 'ѕ' },\n    { key: [100, 115, 111, 108, 59], value: '⧶' },\n    { key: [100, 115, 116, 114, 111, 107, 59], value: 'đ' },\n    { key: [100, 116, 100, 111, 116, 59], value: '⋱' },\n    { key: [100, 116, 114, 105, 59], value: '▿' },\n    { key: [100, 116, 114, 105, 102, 59], value: '▾' },\n    { key: [100, 117, 97, 114, 114, 59], value: '⇵' },\n    { key: [100, 117, 104, 97, 114, 59], value: '⥯' },\n    { key: [100, 119, 97, 110, 103, 108, 101, 59], value: '⦦' },\n    { key: [100, 122, 99, 121, 59], value: 'џ' },\n    { key: [100, 122, 105, 103, 114, 97, 114, 114, 59], value: '⟿' },\n    { key: [101, 68, 68, 111, 116, 59], value: '⩷' },\n    { key: [101, 68, 111, 116, 59], value: '≑' },\n    { key: [101, 97, 99, 117, 116, 101, 59], value: 'é' },\n    { key: [101, 97, 115, 116, 101, 114, 59], value: '⩮' },\n    { key: [101, 99, 97, 114, 111, 110, 59], value: 'ě' },\n    { key: [101, 99, 105, 114, 59], value: '≖' },\n    { key: [101, 99, 105, 114, 99, 59], value: 'ê' },\n    { key: [101, 99, 111, 108, 111, 110, 59], value: '≕' },\n    { key: [101, 99, 121, 59], value: 'э' },\n    { key: [101, 100, 111, 116, 59], value: 'ė' },\n    { key: [101, 101, 59], value: 'ⅇ' },\n    { key: [101, 102, 68, 111, 116, 59], value: '≒' },\n    { key: [101, 102, 114, 59], value: '𝔢' },\n    { key: [101, 103, 59], value: '⪚' },\n    { key: [101, 103, 114, 97, 118, 101, 59], value: 'è' },\n    { key: [101, 103, 115, 59], value: '⪖' },\n    { key: [101, 103, 115, 100, 111, 116, 59], value: '⪘' },\n    { key: [101, 108, 59], value: '⪙' },\n    { key: [101, 108, 105, 110, 116, 101, 114, 115, 59], value: '⏧' },\n    { key: [101, 108, 108, 59], value: 'ℓ' },\n    { key: [101, 108, 115, 59], value: '⪕' },\n    { key: [101, 108, 115, 100, 111, 116, 59], value: '⪗' },\n    { key: [101, 109, 97, 99, 114, 59], value: 'ē' },\n    { key: [101, 109, 112, 116, 121, 59], value: '∅' },\n    { key: [101, 109, 112, 116, 121, 115, 101, 116, 59], value: '∅' },\n    { key: [101, 109, 112, 116, 121, 118, 59], value: '∅' },\n    { key: [101, 109, 115, 112, 49, 51, 59], value: ' ' },\n    { key: [101, 109, 115, 112, 49, 52, 59], value: ' ' },\n    { key: [101, 109, 115, 112, 59], value: ' ' },\n    { key: [101, 110, 103, 59], value: 'ŋ' },\n    { key: [101, 110, 115, 112, 59], value: ' ' },\n    { key: [101, 111, 103, 111, 110, 59], value: 'ę' },\n    { key: [101, 111, 112, 102, 59], value: '𝕖' },\n    { key: [101, 112, 97, 114, 59], value: '⋕' },\n    { key: [101, 112, 97, 114, 115, 108, 59], value: '⧣' },\n    { key: [101, 112, 108, 117, 115, 59], value: '⩱' },\n    { key: [101, 112, 115, 105, 59], value: 'ε' },\n    { key: [101, 112, 115, 105, 108, 111, 110, 59], value: 'ε' },\n    { key: [101, 112, 115, 105, 118, 59], value: 'ϵ' },\n    { key: [101, 113, 99, 105, 114, 99, 59], value: '≖' },\n    { key: [101, 113, 99, 111, 108, 111, 110, 59], value: '≕' },\n    { key: [101, 113, 115, 105, 109, 59], value: '≂' },\n    { key: [101, 113, 115, 108, 97, 110, 116, 103, 116, 114, 59], value: '⪖' },\n    { key: [101, 113, 115, 108, 97, 110, 116, 108, 101, 115, 115, 59], value: '⪕' },\n    { key: [101, 113, 117, 97, 108, 115, 59], value: '=' },\n    { key: [101, 113, 117, 101, 115, 116, 59], value: '≟' },\n    { key: [101, 113, 117, 105, 118, 59], value: '≡' },\n    { key: [101, 113, 117, 105, 118, 68, 68, 59], value: '⩸' },\n    { key: [101, 113, 118, 112, 97, 114, 115, 108, 59], value: '⧥' },\n    { key: [101, 114, 68, 111, 116, 59], value: '≓' },\n    { key: [101, 114, 97, 114, 114, 59], value: '⥱' },\n    { key: [101, 115, 99, 114, 59], value: 'ℯ' },\n    { key: [101, 115, 100, 111, 116, 59], value: '≐' },\n    { key: [101, 115, 105, 109, 59], value: '≂' },\n    { key: [101, 116, 97, 59], value: 'η' },\n    { key: [101, 116, 104, 59], value: 'ð' },\n    { key: [101, 117, 109, 108, 59], value: 'ë' },\n    { key: [101, 117, 114, 111, 59], value: '€' },\n    { key: [101, 120, 99, 108, 59], value: '!' },\n    { key: [101, 120, 105, 115, 116, 59], value: '∃' },\n    { key: [101, 120, 112, 101, 99, 116, 97, 116, 105, 111, 110, 59], value: 'ℰ' },\n    { key: [101, 120, 112, 111, 110, 101, 110, 116, 105, 97, 108, 101, 59], value: 'ⅇ' },\n    { key: [102, 97, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59], value: '≒' },\n    { key: [102, 99, 121, 59], value: 'ф' },\n    { key: [102, 101, 109, 97, 108, 101, 59], value: '♀' },\n    { key: [102, 102, 105, 108, 105, 103, 59], value: 'ﬃ' },\n    { key: [102, 102, 108, 105, 103, 59], value: 'ﬀ' },\n    { key: [102, 102, 108, 108, 105, 103, 59], value: 'ﬄ' },\n    { key: [102, 102, 114, 59], value: '𝔣' },\n    { key: [102, 105, 108, 105, 103, 59], value: 'ﬁ' },\n    { key: [102, 106, 108, 105, 103, 59], value: 'fj' },\n    { key: [102, 108, 97, 116, 59], value: '♭' },\n    { key: [102, 108, 108, 105, 103, 59], value: 'ﬂ' },\n    { key: [102, 108, 116, 110, 115, 59], value: '▱' },\n    { key: [102, 110, 111, 102, 59], value: 'ƒ' },\n    { key: [102, 111, 112, 102, 59], value: '𝕗' },\n    { key: [102, 111, 114, 97, 108, 108, 59], value: '∀' },\n    { key: [102, 111, 114, 107, 59], value: '⋔' },\n    { key: [102, 111, 114, 107, 118, 59], value: '⫙' },\n    { key: [102, 112, 97, 114, 116, 105, 110, 116, 59], value: '⨍' },\n    { key: [102, 114, 97, 99, 49, 50, 59], value: '½' },\n    { key: [102, 114, 97, 99, 49, 51, 59], value: '⅓' },\n    { key: [102, 114, 97, 99, 49, 52, 59], value: '¼' },\n    { key: [102, 114, 97, 99, 49, 53, 59], value: '⅕' },\n    { key: [102, 114, 97, 99, 49, 54, 59], value: '⅙' },\n    { key: [102, 114, 97, 99, 49, 56, 59], value: '⅛' },\n    { key: [102, 114, 97, 99, 50, 51, 59], value: '⅔' },\n    { key: [102, 114, 97, 99, 50, 53, 59], value: '⅖' },\n    { key: [102, 114, 97, 99, 51, 52, 59], value: '¾' },\n    { key: [102, 114, 97, 99, 51, 53, 59], value: '⅗' },\n    { key: [102, 114, 97, 99, 51, 56, 59], value: '⅜' },\n    { key: [102, 114, 97, 99, 52, 53, 59], value: '⅘' },\n    { key: [102, 114, 97, 99, 53, 54, 59], value: '⅚' },\n    { key: [102, 114, 97, 99, 53, 56, 59], value: '⅝' },\n    { key: [102, 114, 97, 99, 55, 56, 59], value: '⅞' },\n    { key: [102, 114, 97, 115, 108, 59], value: '⁄' },\n    { key: [102, 114, 111, 119, 110, 59], value: '⌢' },\n    { key: [102, 115, 99, 114, 59], value: '𝒻' },\n    { key: [103, 69, 59], value: '≧' },\n    { key: [103, 69, 108, 59], value: '⪌' },\n    { key: [103, 97, 99, 117, 116, 101, 59], value: 'ǵ' },\n    { key: [103, 97, 109, 109, 97, 59], value: 'γ' },\n    { key: [103, 97, 109, 109, 97, 100, 59], value: 'ϝ' },\n    { key: [103, 97, 112, 59], value: '⪆' },\n    { key: [103, 98, 114, 101, 118, 101, 59], value: 'ğ' },\n    { key: [103, 99, 105, 114, 99, 59], value: 'ĝ' },\n    { key: [103, 99, 121, 59], value: 'г' },\n    { key: [103, 100, 111, 116, 59], value: 'ġ' },\n    { key: [103, 101, 59], value: '≥' },\n    { key: [103, 101, 108, 59], value: '⋛' },\n    { key: [103, 101, 113, 59], value: '≥' },\n    { key: [103, 101, 113, 113, 59], value: '≧' },\n    { key: [103, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩾' },\n    { key: [103, 101, 115, 59], value: '⩾' },\n    { key: [103, 101, 115, 99, 99, 59], value: '⪩' },\n    { key: [103, 101, 115, 100, 111, 116, 59], value: '⪀' },\n    { key: [103, 101, 115, 100, 111, 116, 111, 59], value: '⪂' },\n    { key: [103, 101, 115, 100, 111, 116, 111, 108, 59], value: '⪄' },\n    { key: [103, 101, 115, 108, 59], value: '⋛︀' },\n    { key: [103, 101, 115, 108, 101, 115, 59], value: '⪔' },\n    { key: [103, 102, 114, 59], value: '𝔤' },\n    { key: [103, 103, 59], value: '≫' },\n    { key: [103, 103, 103, 59], value: '⋙' },\n    { key: [103, 105, 109, 101, 108, 59], value: 'ℷ' },\n    { key: [103, 106, 99, 121, 59], value: 'ѓ' },\n    { key: [103, 108, 59], value: '≷' },\n    { key: [103, 108, 69, 59], value: '⪒' },\n    { key: [103, 108, 97, 59], value: '⪥' },\n    { key: [103, 108, 106, 59], value: '⪤' },\n    { key: [103, 110, 69, 59], value: '≩' },\n    { key: [103, 110, 97, 112, 59], value: '⪊' },\n    { key: [103, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪊' },\n    { key: [103, 110, 101, 59], value: '⪈' },\n    { key: [103, 110, 101, 113, 59], value: '⪈' },\n    { key: [103, 110, 101, 113, 113, 59], value: '≩' },\n    { key: [103, 110, 115, 105, 109, 59], value: '⋧' },\n    { key: [103, 111, 112, 102, 59], value: '𝕘' },\n    { key: [103, 114, 97, 118, 101, 59], value: '`' },\n    { key: [103, 115, 99, 114, 59], value: 'ℊ' },\n    { key: [103, 115, 105, 109, 59], value: '≳' },\n    { key: [103, 115, 105, 109, 101, 59], value: '⪎' },\n    { key: [103, 115, 105, 109, 108, 59], value: '⪐' },\n    { key: [103, 116, 59], value: '>' },\n    { key: [103, 116, 99, 99, 59], value: '⪧' },\n    { key: [103, 116, 99, 105, 114, 59], value: '⩺' },\n    { key: [103, 116, 100, 111, 116, 59], value: '⋗' },\n    { key: [103, 116, 108, 80, 97, 114, 59], value: '⦕' },\n    { key: [103, 116, 113, 117, 101, 115, 116, 59], value: '⩼' },\n    { key: [103, 116, 114, 97, 112, 112, 114, 111, 120, 59], value: '⪆' },\n    { key: [103, 116, 114, 97, 114, 114, 59], value: '⥸' },\n    { key: [103, 116, 114, 100, 111, 116, 59], value: '⋗' },\n    { key: [103, 116, 114, 101, 113, 108, 101, 115, 115, 59], value: '⋛' },\n    { key: [103, 116, 114, 101, 113, 113, 108, 101, 115, 115, 59], value: '⪌' },\n    { key: [103, 116, 114, 108, 101, 115, 115, 59], value: '≷' },\n    { key: [103, 116, 114, 115, 105, 109, 59], value: '≳' },\n    { key: [103, 118, 101, 114, 116, 110, 101, 113, 113, 59], value: '≩︀' },\n    { key: [103, 118, 110, 69, 59], value: '≩︀' },\n    { key: [104, 65, 114, 114, 59], value: '⇔' },\n    { key: [104, 97, 105, 114, 115, 112, 59], value: ' ' },\n    { key: [104, 97, 108, 102, 59], value: '½' },\n    { key: [104, 97, 109, 105, 108, 116, 59], value: 'ℋ' },\n    { key: [104, 97, 114, 100, 99, 121, 59], value: 'ъ' },\n    { key: [104, 97, 114, 114, 59], value: '↔' },\n    { key: [104, 97, 114, 114, 99, 105, 114, 59], value: '⥈' },\n    { key: [104, 97, 114, 114, 119, 59], value: '↭' },\n    { key: [104, 98, 97, 114, 59], value: 'ℏ' },\n    { key: [104, 99, 105, 114, 99, 59], value: 'ĥ' },\n    { key: [104, 101, 97, 114, 116, 115, 59], value: '♥' },\n    { key: [104, 101, 97, 114, 116, 115, 117, 105, 116, 59], value: '♥' },\n    { key: [104, 101, 108, 108, 105, 112, 59], value: '…' },\n    { key: [104, 101, 114, 99, 111, 110, 59], value: '⊹' },\n    { key: [104, 102, 114, 59], value: '𝔥' },\n    { key: [104, 107, 115, 101, 97, 114, 111, 119, 59], value: '⤥' },\n    { key: [104, 107, 115, 119, 97, 114, 111, 119, 59], value: '⤦' },\n    { key: [104, 111, 97, 114, 114, 59], value: '⇿' },\n    { key: [104, 111, 109, 116, 104, 116, 59], value: '∻' },\n    { key: [104, 111, 111, 107, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '↩' },\n    { key: [104, 111, 111, 107, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↪' },\n    { key: [104, 111, 112, 102, 59], value: '𝕙' },\n    { key: [104, 111, 114, 98, 97, 114, 59], value: '―' },\n    { key: [104, 115, 99, 114, 59], value: '𝒽' },\n    { key: [104, 115, 108, 97, 115, 104, 59], value: 'ℏ' },\n    { key: [104, 115, 116, 114, 111, 107, 59], value: 'ħ' },\n    { key: [104, 121, 98, 117, 108, 108, 59], value: '⁃' },\n    { key: [104, 121, 112, 104, 101, 110, 59], value: '‐' },\n    { key: [105, 97, 99, 117, 116, 101, 59], value: 'í' },\n    { key: [105, 99, 59], value: '⁣' },\n    { key: [105, 99, 105, 114, 99, 59], value: 'î' },\n    { key: [105, 99, 121, 59], value: 'и' },\n    { key: [105, 101, 99, 121, 59], value: 'е' },\n    { key: [105, 101, 120, 99, 108, 59], value: '¡' },\n    { key: [105, 102, 102, 59], value: '⇔' },\n    { key: [105, 102, 114, 59], value: '𝔦' },\n    { key: [105, 103, 114, 97, 118, 101, 59], value: 'ì' },\n    { key: [105, 105, 59], value: 'ⅈ' },\n    { key: [105, 105, 105, 105, 110, 116, 59], value: '⨌' },\n    { key: [105, 105, 105, 110, 116, 59], value: '∭' },\n    { key: [105, 105, 110, 102, 105, 110, 59], value: '⧜' },\n    { key: [105, 105, 111, 116, 97, 59], value: '℩' },\n    { key: [105, 106, 108, 105, 103, 59], value: 'ĳ' },\n    { key: [105, 109, 97, 99, 114, 59], value: 'ī' },\n    { key: [105, 109, 97, 103, 101, 59], value: 'ℑ' },\n    { key: [105, 109, 97, 103, 108, 105, 110, 101, 59], value: 'ℐ' },\n    { key: [105, 109, 97, 103, 112, 97, 114, 116, 59], value: 'ℑ' },\n    { key: [105, 109, 97, 116, 104, 59], value: 'ı' },\n    { key: [105, 109, 111, 102, 59], value: '⊷' },\n    { key: [105, 109, 112, 101, 100, 59], value: 'Ƶ' },\n    { key: [105, 110, 59], value: '∈' },\n    { key: [105, 110, 99, 97, 114, 101, 59], value: '℅' },\n    { key: [105, 110, 102, 105, 110, 59], value: '∞' },\n    { key: [105, 110, 102, 105, 110, 116, 105, 101, 59], value: '⧝' },\n    { key: [105, 110, 111, 100, 111, 116, 59], value: 'ı' },\n    { key: [105, 110, 116, 59], value: '∫' },\n    { key: [105, 110, 116, 99, 97, 108, 59], value: '⊺' },\n    { key: [105, 110, 116, 101, 103, 101, 114, 115, 59], value: 'ℤ' },\n    { key: [105, 110, 116, 101, 114, 99, 97, 108, 59], value: '⊺' },\n    { key: [105, 110, 116, 108, 97, 114, 104, 107, 59], value: '⨗' },\n    { key: [105, 110, 116, 112, 114, 111, 100, 59], value: '⨼' },\n    { key: [105, 111, 99, 121, 59], value: 'ё' },\n    { key: [105, 111, 103, 111, 110, 59], value: 'į' },\n    { key: [105, 111, 112, 102, 59], value: '𝕚' },\n    { key: [105, 111, 116, 97, 59], value: 'ι' },\n    { key: [105, 112, 114, 111, 100, 59], value: '⨼' },\n    { key: [105, 113, 117, 101, 115, 116, 59], value: '¿' },\n    { key: [105, 115, 99, 114, 59], value: '𝒾' },\n    { key: [105, 115, 105, 110, 59], value: '∈' },\n    { key: [105, 115, 105, 110, 69, 59], value: '⋹' },\n    { key: [105, 115, 105, 110, 100, 111, 116, 59], value: '⋵' },\n    { key: [105, 115, 105, 110, 115, 59], value: '⋴' },\n    { key: [105, 115, 105, 110, 115, 118, 59], value: '⋳' },\n    { key: [105, 115, 105, 110, 118, 59], value: '∈' },\n    { key: [105, 116, 59], value: '⁢' },\n    { key: [105, 116, 105, 108, 100, 101, 59], value: 'ĩ' },\n    { key: [105, 117, 107, 99, 121, 59], value: 'і' },\n    { key: [105, 117, 109, 108, 59], value: 'ï' },\n    { key: [106, 99, 105, 114, 99, 59], value: 'ĵ' },\n    { key: [106, 99, 121, 59], value: 'й' },\n    { key: [106, 102, 114, 59], value: '𝔧' },\n    { key: [106, 109, 97, 116, 104, 59], value: 'ȷ' },\n    { key: [106, 111, 112, 102, 59], value: '𝕛' },\n    { key: [106, 115, 99, 114, 59], value: '𝒿' },\n    { key: [106, 115, 101, 114, 99, 121, 59], value: 'ј' },\n    { key: [106, 117, 107, 99, 121, 59], value: 'є' },\n    { key: [107, 97, 112, 112, 97, 59], value: 'κ' },\n    { key: [107, 97, 112, 112, 97, 118, 59], value: 'ϰ' },\n    { key: [107, 99, 101, 100, 105, 108, 59], value: 'ķ' },\n    { key: [107, 99, 121, 59], value: 'к' },\n    { key: [107, 102, 114, 59], value: '𝔨' },\n    { key: [107, 103, 114, 101, 101, 110, 59], value: 'ĸ' },\n    { key: [107, 104, 99, 121, 59], value: 'х' },\n    { key: [107, 106, 99, 121, 59], value: 'ќ' },\n    { key: [107, 111, 112, 102, 59], value: '𝕜' },\n    { key: [107, 115, 99, 114, 59], value: '𝓀' },\n    { key: [108, 65, 97, 114, 114, 59], value: '⇚' },\n    { key: [108, 65, 114, 114, 59], value: '⇐' },\n    { key: [108, 65, 116, 97, 105, 108, 59], value: '⤛' },\n    { key: [108, 66, 97, 114, 114, 59], value: '⤎' },\n    { key: [108, 69, 59], value: '≦' },\n    { key: [108, 69, 103, 59], value: '⪋' },\n    { key: [108, 72, 97, 114, 59], value: '⥢' },\n    { key: [108, 97, 99, 117, 116, 101, 59], value: 'ĺ' },\n    { key: [108, 97, 101, 109, 112, 116, 121, 118, 59], value: '⦴' },\n    { key: [108, 97, 103, 114, 97, 110, 59], value: 'ℒ' },\n    { key: [108, 97, 109, 98, 100, 97, 59], value: 'λ' },\n    { key: [108, 97, 110, 103, 59], value: '⟨' },\n    { key: [108, 97, 110, 103, 100, 59], value: '⦑' },\n    { key: [108, 97, 110, 103, 108, 101, 59], value: '⟨' },\n    { key: [108, 97, 112, 59], value: '⪅' },\n    { key: [108, 97, 113, 117, 111, 59], value: '«' },\n    { key: [108, 97, 114, 114, 59], value: '←' },\n    { key: [108, 97, 114, 114, 98, 59], value: '⇤' },\n    { key: [108, 97, 114, 114, 98, 102, 115, 59], value: '⤟' },\n    { key: [108, 97, 114, 114, 102, 115, 59], value: '⤝' },\n    { key: [108, 97, 114, 114, 104, 107, 59], value: '↩' },\n    { key: [108, 97, 114, 114, 108, 112, 59], value: '↫' },\n    { key: [108, 97, 114, 114, 112, 108, 59], value: '⤹' },\n    { key: [108, 97, 114, 114, 115, 105, 109, 59], value: '⥳' },\n    { key: [108, 97, 114, 114, 116, 108, 59], value: '↢' },\n    { key: [108, 97, 116, 59], value: '⪫' },\n    { key: [108, 97, 116, 97, 105, 108, 59], value: '⤙' },\n    { key: [108, 97, 116, 101, 59], value: '⪭' },\n    { key: [108, 97, 116, 101, 115, 59], value: '⪭︀' },\n    { key: [108, 98, 97, 114, 114, 59], value: '⤌' },\n    { key: [108, 98, 98, 114, 107, 59], value: '❲' },\n    { key: [108, 98, 114, 97, 99, 101, 59], value: '{ ' },\n    { key: [108, 98, 114, 97, 99, 107, 59], value: '[' },\n    { key: [108, 98, 114, 107, 101, 59], value: '⦋' },\n    { key: [108, 98, 114, 107, 115, 108, 100, 59], value: '⦏' },\n    { key: [108, 98, 114, 107, 115, 108, 117, 59], value: '⦍' },\n    { key: [108, 99, 97, 114, 111, 110, 59], value: 'ľ' },\n    { key: [108, 99, 101, 100, 105, 108, 59], value: 'ļ' },\n    { key: [108, 99, 101, 105, 108, 59], value: '⌈' },\n    { key: [108, 99, 117, 98, 59], value: '{ ' },\n    { key: [108, 99, 121, 59], value: 'л' },\n    { key: [108, 100, 99, 97, 59], value: '⤶' },\n    { key: [108, 100, 113, 117, 111, 59], value: '“' },\n    { key: [108, 100, 113, 117, 111, 114, 59], value: '„' },\n    { key: [108, 100, 114, 100, 104, 97, 114, 59], value: '⥧' },\n    { key: [108, 100, 114, 117, 115, 104, 97, 114, 59], value: '⥋' },\n    { key: [108, 100, 115, 104, 59], value: '↲' },\n    { key: [108, 101, 59], value: '≤' },\n    { key: [108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '←' },\n    { key: [108, 101, 102, 116, 97, 114, 114, 111, 119, 116, 97, 105, 108, 59], value: '↢' },\n    { key: [108, 101, 102, 116, 104, 97, 114, 112, 111, 111, 110, 100, 111, 119, 110, 59], value: '↽' },\n    { key: [108, 101, 102, 116, 104, 97, 114, 112, 111, 111, 110, 117, 112, 59], value: '↼' },\n    { key: [108, 101, 102, 116, 108, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇇' },\n    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↔' },\n    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇆' },\n    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 104, 97, 114, 112, 111, 111, 110, 115, 59], value: '⇋' },\n    { key: [108, 101, 102, 116, 114, 105, 103, 104, 116, 115, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59], value: '↭' },\n    { key: [108, 101, 102, 116, 116, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59], value: '⋋' },\n    { key: [108, 101, 103, 59], value: '⋚' },\n    { key: [108, 101, 113, 59], value: '≤' },\n    { key: [108, 101, 113, 113, 59], value: '≦' },\n    { key: [108, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩽' },\n    { key: [108, 101, 115, 59], value: '⩽' },\n    { key: [108, 101, 115, 99, 99, 59], value: '⪨' },\n    { key: [108, 101, 115, 100, 111, 116, 59], value: '⩿' },\n    { key: [108, 101, 115, 100, 111, 116, 111, 59], value: '⪁' },\n    { key: [108, 101, 115, 100, 111, 116, 111, 114, 59], value: '⪃' },\n    { key: [108, 101, 115, 103, 59], value: '⋚︀' },\n    { key: [108, 101, 115, 103, 101, 115, 59], value: '⪓' },\n    { key: [108, 101, 115, 115, 97, 112, 112, 114, 111, 120, 59], value: '⪅' },\n    { key: [108, 101, 115, 115, 100, 111, 116, 59], value: '⋖' },\n    { key: [108, 101, 115, 115, 101, 113, 103, 116, 114, 59], value: '⋚' },\n    { key: [108, 101, 115, 115, 101, 113, 113, 103, 116, 114, 59], value: '⪋' },\n    { key: [108, 101, 115, 115, 103, 116, 114, 59], value: '≶' },\n    { key: [108, 101, 115, 115, 115, 105, 109, 59], value: '≲' },\n    { key: [108, 102, 105, 115, 104, 116, 59], value: '⥼' },\n    { key: [108, 102, 108, 111, 111, 114, 59], value: '⌊' },\n    { key: [108, 102, 114, 59], value: '𝔩' },\n    { key: [108, 103, 59], value: '≶' },\n    { key: [108, 103, 69, 59], value: '⪑' },\n    { key: [108, 104, 97, 114, 100, 59], value: '↽' },\n    { key: [108, 104, 97, 114, 117, 59], value: '↼' },\n    { key: [108, 104, 97, 114, 117, 108, 59], value: '⥪' },\n    { key: [108, 104, 98, 108, 107, 59], value: '▄' },\n    { key: [108, 106, 99, 121, 59], value: 'љ' },\n    { key: [108, 108, 59], value: '≪' },\n    { key: [108, 108, 97, 114, 114, 59], value: '⇇' },\n    { key: [108, 108, 99, 111, 114, 110, 101, 114, 59], value: '⌞' },\n    { key: [108, 108, 104, 97, 114, 100, 59], value: '⥫' },\n    { key: [108, 108, 116, 114, 105, 59], value: '◺' },\n    { key: [108, 109, 105, 100, 111, 116, 59], value: 'ŀ' },\n    { key: [108, 109, 111, 117, 115, 116, 59], value: '⎰' },\n    { key: [108, 109, 111, 117, 115, 116, 97, 99, 104, 101, 59], value: '⎰' },\n    { key: [108, 110, 69, 59], value: '≨' },\n    { key: [108, 110, 97, 112, 59], value: '⪉' },\n    { key: [108, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪉' },\n    { key: [108, 110, 101, 59], value: '⪇' },\n    { key: [108, 110, 101, 113, 59], value: '⪇' },\n    { key: [108, 110, 101, 113, 113, 59], value: '≨' },\n    { key: [108, 110, 115, 105, 109, 59], value: '⋦' },\n    { key: [108, 111, 97, 110, 103, 59], value: '⟬' },\n    { key: [108, 111, 97, 114, 114, 59], value: '⇽' },\n    { key: [108, 111, 98, 114, 107, 59], value: '⟦' },\n    { key: [108, 111, 110, 103, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⟵' },\n    { key: [108, 111, 110, 103, 108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟷' },\n    { key: [108, 111, 110, 103, 109, 97, 112, 115, 116, 111, 59], value: '⟼' },\n    { key: [108, 111, 110, 103, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⟶' },\n    { key: [108, 111, 111, 112, 97, 114, 114, 111, 119, 108, 101, 102, 116, 59], value: '↫' },\n    { key: [108, 111, 111, 112, 97, 114, 114, 111, 119, 114, 105, 103, 104, 116, 59], value: '↬' },\n    { key: [108, 111, 112, 97, 114, 59], value: '⦅' },\n    { key: [108, 111, 112, 102, 59], value: '𝕝' },\n    { key: [108, 111, 112, 108, 117, 115, 59], value: '⨭' },\n    { key: [108, 111, 116, 105, 109, 101, 115, 59], value: '⨴' },\n    { key: [108, 111, 119, 97, 115, 116, 59], value: '∗' },\n    { key: [108, 111, 119, 98, 97, 114, 59], value: '_' },\n    { key: [108, 111, 122, 59], value: '◊' },\n    { key: [108, 111, 122, 101, 110, 103, 101, 59], value: '◊' },\n    { key: [108, 111, 122, 102, 59], value: '⧫' },\n    { key: [108, 112, 97, 114, 59], value: '(' },\n    { key: [108, 112, 97, 114, 108, 116, 59], value: '⦓' },\n    { key: [108, 114, 97, 114, 114, 59], value: '⇆' },\n    { key: [108, 114, 99, 111, 114, 110, 101, 114, 59], value: '⌟' },\n    { key: [108, 114, 104, 97, 114, 59], value: '⇋' },\n    { key: [108, 114, 104, 97, 114, 100, 59], value: '⥭' },\n    { key: [108, 114, 109, 59], value: '‎' },\n    { key: [108, 114, 116, 114, 105, 59], value: '⊿' },\n    { key: [108, 115, 97, 113, 117, 111, 59], value: '‹' },\n    { key: [108, 115, 99, 114, 59], value: '𝓁' },\n    { key: [108, 115, 104, 59], value: '↰' },\n    { key: [108, 115, 105, 109, 59], value: '≲' },\n    { key: [108, 115, 105, 109, 101, 59], value: '⪍' },\n    { key: [108, 115, 105, 109, 103, 59], value: '⪏' },\n    { key: [108, 115, 113, 98, 59], value: '[' },\n    { key: [108, 115, 113, 117, 111, 59], value: '‘' },\n    { key: [108, 115, 113, 117, 111, 114, 59], value: '‚' },\n    { key: [108, 115, 116, 114, 111, 107, 59], value: 'ł' },\n    { key: [108, 116, 59], value: '<' },\n    { key: [108, 116, 99, 99, 59], value: '⪦' },\n    { key: [108, 116, 99, 105, 114, 59], value: '⩹' },\n    { key: [108, 116, 100, 111, 116, 59], value: '⋖' },\n    { key: [108, 116, 104, 114, 101, 101, 59], value: '⋋' },\n    { key: [108, 116, 105, 109, 101, 115, 59], value: '⋉' },\n    { key: [108, 116, 108, 97, 114, 114, 59], value: '⥶' },\n    { key: [108, 116, 113, 117, 101, 115, 116, 59], value: '⩻' },\n    { key: [108, 116, 114, 80, 97, 114, 59], value: '⦖' },\n    { key: [108, 116, 114, 105, 59], value: '◃' },\n    { key: [108, 116, 114, 105, 101, 59], value: '⊴' },\n    { key: [108, 116, 114, 105, 102, 59], value: '◂' },\n    { key: [108, 117, 114, 100, 115, 104, 97, 114, 59], value: '⥊' },\n    { key: [108, 117, 114, 117, 104, 97, 114, 59], value: '⥦' },\n    { key: [108, 118, 101, 114, 116, 110, 101, 113, 113, 59], value: '≨︀' },\n    { key: [108, 118, 110, 69, 59], value: '≨︀' },\n    { key: [109, 68, 68, 111, 116, 59], value: '∺' },\n    { key: [109, 97, 99, 114, 59], value: '¯' },\n    { key: [109, 97, 108, 101, 59], value: '♂' },\n    { key: [109, 97, 108, 116, 59], value: '✠' },\n    { key: [109, 97, 108, 116, 101, 115, 101, 59], value: '✠' },\n    { key: [109, 97, 112, 59], value: '↦' },\n    { key: [109, 97, 112, 115, 116, 111, 59], value: '↦' },\n    { key: [109, 97, 112, 115, 116, 111, 100, 111, 119, 110, 59], value: '↧' },\n    { key: [109, 97, 112, 115, 116, 111, 108, 101, 102, 116, 59], value: '↤' },\n    { key: [109, 97, 112, 115, 116, 111, 117, 112, 59], value: '↥' },\n    { key: [109, 97, 114, 107, 101, 114, 59], value: '▮' },\n    { key: [109, 99, 111, 109, 109, 97, 59], value: '⨩' },\n    { key: [109, 99, 121, 59], value: 'м' },\n    { key: [109, 100, 97, 115, 104, 59], value: '—' },\n    { key: [109, 101, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59], value: '∡' },\n    { key: [109, 102, 114, 59], value: '𝔪' },\n    { key: [109, 104, 111, 59], value: '℧' },\n    { key: [109, 105, 99, 114, 111, 59], value: 'µ' },\n    { key: [109, 105, 100, 59], value: '∣' },\n    { key: [109, 105, 100, 97, 115, 116, 59], value: '*' },\n    { key: [109, 105, 100, 99, 105, 114, 59], value: '⫰' },\n    { key: [109, 105, 100, 100, 111, 116, 59], value: '·' },\n    { key: [109, 105, 110, 117, 115, 59], value: '−' },\n    { key: [109, 105, 110, 117, 115, 98, 59], value: '⊟' },\n    { key: [109, 105, 110, 117, 115, 100, 59], value: '∸' },\n    { key: [109, 105, 110, 117, 115, 100, 117, 59], value: '⨪' },\n    { key: [109, 108, 99, 112, 59], value: '⫛' },\n    { key: [109, 108, 100, 114, 59], value: '…' },\n    { key: [109, 110, 112, 108, 117, 115, 59], value: '∓' },\n    { key: [109, 111, 100, 101, 108, 115, 59], value: '⊧' },\n    { key: [109, 111, 112, 102, 59], value: '𝕞' },\n    { key: [109, 112, 59], value: '∓' },\n    { key: [109, 115, 99, 114, 59], value: '𝓂' },\n    { key: [109, 115, 116, 112, 111, 115, 59], value: '∾' },\n    { key: [109, 117, 59], value: 'μ' },\n    { key: [109, 117, 108, 116, 105, 109, 97, 112, 59], value: '⊸' },\n    { key: [109, 117, 109, 97, 112, 59], value: '⊸' },\n    { key: [110, 71, 103, 59], value: '⋙̸' },\n    { key: [110, 71, 116, 59], value: '≫⃒' },\n    { key: [110, 71, 116, 118, 59], value: '≫̸' },\n    { key: [110, 76, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '⇍' },\n    { key: [110, 76, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇎' },\n    { key: [110, 76, 108, 59], value: '⋘̸' },\n    { key: [110, 76, 116, 59], value: '≪⃒' },\n    { key: [110, 76, 116, 118, 59], value: '≪̸' },\n    { key: [110, 82, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '⇏' },\n    { key: [110, 86, 68, 97, 115, 104, 59], value: '⊯' },\n    { key: [110, 86, 100, 97, 115, 104, 59], value: '⊮' },\n    { key: [110, 97, 98, 108, 97, 59], value: '∇' },\n    { key: [110, 97, 99, 117, 116, 101, 59], value: 'ń' },\n    { key: [110, 97, 110, 103, 59], value: '∠⃒' },\n    { key: [110, 97, 112, 59], value: '≉' },\n    { key: [110, 97, 112, 69, 59], value: '⩰̸' },\n    { key: [110, 97, 112, 105, 100, 59], value: '≋̸' },\n    { key: [110, 97, 112, 111, 115, 59], value: 'ŉ' },\n    { key: [110, 97, 112, 112, 114, 111, 120, 59], value: '≉' },\n    { key: [110, 97, 116, 117, 114, 59], value: '♮' },\n    { key: [110, 97, 116, 117, 114, 97, 108, 59], value: '♮' },\n    { key: [110, 97, 116, 117, 114, 97, 108, 115, 59], value: 'ℕ' },\n    { key: [110, 98, 115, 112, 59], value: ' ' },\n    { key: [110, 98, 117, 109, 112, 59], value: '≎̸' },\n    { key: [110, 98, 117, 109, 112, 101, 59], value: '≏̸' },\n    { key: [110, 99, 97, 112, 59], value: '⩃' },\n    { key: [110, 99, 97, 114, 111, 110, 59], value: 'ň' },\n    { key: [110, 99, 101, 100, 105, 108, 59], value: 'ņ' },\n    { key: [110, 99, 111, 110, 103, 59], value: '≇' },\n    { key: [110, 99, 111, 110, 103, 100, 111, 116, 59], value: '⩭̸' },\n    { key: [110, 99, 117, 112, 59], value: '⩂' },\n    { key: [110, 99, 121, 59], value: 'н' },\n    { key: [110, 100, 97, 115, 104, 59], value: '–' },\n    { key: [110, 101, 59], value: '≠' },\n    { key: [110, 101, 65, 114, 114, 59], value: '⇗' },\n    { key: [110, 101, 97, 114, 104, 107, 59], value: '⤤' },\n    { key: [110, 101, 97, 114, 114, 59], value: '↗' },\n    { key: [110, 101, 97, 114, 114, 111, 119, 59], value: '↗' },\n    { key: [110, 101, 100, 111, 116, 59], value: '≐̸' },\n    { key: [110, 101, 113, 117, 105, 118, 59], value: '≢' },\n    { key: [110, 101, 115, 101, 97, 114, 59], value: '⤨' },\n    { key: [110, 101, 115, 105, 109, 59], value: '≂̸' },\n    { key: [110, 101, 120, 105, 115, 116, 59], value: '∄' },\n    { key: [110, 101, 120, 105, 115, 116, 115, 59], value: '∄' },\n    { key: [110, 102, 114, 59], value: '𝔫' },\n    { key: [110, 103, 69, 59], value: '≧̸' },\n    { key: [110, 103, 101, 59], value: '≱' },\n    { key: [110, 103, 101, 113, 59], value: '≱' },\n    { key: [110, 103, 101, 113, 113, 59], value: '≧̸' },\n    { key: [110, 103, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩾̸' },\n    { key: [110, 103, 101, 115, 59], value: '⩾̸' },\n    { key: [110, 103, 115, 105, 109, 59], value: '≵' },\n    { key: [110, 103, 116, 59], value: '≯' },\n    { key: [110, 103, 116, 114, 59], value: '≯' },\n    { key: [110, 104, 65, 114, 114, 59], value: '⇎' },\n    { key: [110, 104, 97, 114, 114, 59], value: '↮' },\n    { key: [110, 104, 112, 97, 114, 59], value: '⫲' },\n    { key: [110, 105, 59], value: '∋' },\n    { key: [110, 105, 115, 59], value: '⋼' },\n    { key: [110, 105, 115, 100, 59], value: '⋺' },\n    { key: [110, 105, 118, 59], value: '∋' },\n    { key: [110, 106, 99, 121, 59], value: 'њ' },\n    { key: [110, 108, 65, 114, 114, 59], value: '⇍' },\n    { key: [110, 108, 69, 59], value: '≦̸' },\n    { key: [110, 108, 97, 114, 114, 59], value: '↚' },\n    { key: [110, 108, 100, 114, 59], value: '‥' },\n    { key: [110, 108, 101, 59], value: '≰' },\n    { key: [110, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '↚' },\n    { key: [110, 108, 101, 102, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↮' },\n    { key: [110, 108, 101, 113, 59], value: '≰' },\n    { key: [110, 108, 101, 113, 113, 59], value: '≦̸' },\n    { key: [110, 108, 101, 113, 115, 108, 97, 110, 116, 59], value: '⩽̸' },\n    { key: [110, 108, 101, 115, 59], value: '⩽̸' },\n    { key: [110, 108, 101, 115, 115, 59], value: '≮' },\n    { key: [110, 108, 115, 105, 109, 59], value: '≴' },\n    { key: [110, 108, 116, 59], value: '≮' },\n    { key: [110, 108, 116, 114, 105, 59], value: '⋪' },\n    { key: [110, 108, 116, 114, 105, 101, 59], value: '⋬' },\n    { key: [110, 109, 105, 100, 59], value: '∤' },\n    { key: [110, 111, 112, 102, 59], value: '𝕟' },\n    { key: [110, 111, 116, 59], value: '¬' },\n    { key: [110, 111, 116, 105, 110, 59], value: '∉' },\n    { key: [110, 111, 116, 105, 110, 69, 59], value: '⋹̸' },\n    { key: [110, 111, 116, 105, 110, 100, 111, 116, 59], value: '⋵̸' },\n    { key: [110, 111, 116, 105, 110, 118, 97, 59], value: '∉' },\n    { key: [110, 111, 116, 105, 110, 118, 98, 59], value: '⋷' },\n    { key: [110, 111, 116, 105, 110, 118, 99, 59], value: '⋶' },\n    { key: [110, 111, 116, 110, 105, 59], value: '∌' },\n    { key: [110, 111, 116, 110, 105, 118, 97, 59], value: '∌' },\n    { key: [110, 111, 116, 110, 105, 118, 98, 59], value: '⋾' },\n    { key: [110, 111, 116, 110, 105, 118, 99, 59], value: '⋽' },\n    { key: [110, 112, 97, 114, 59], value: '∦' },\n    { key: [110, 112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∦' },\n    { key: [110, 112, 97, 114, 115, 108, 59], value: '⫽⃥' },\n    { key: [110, 112, 97, 114, 116, 59], value: '∂̸' },\n    { key: [110, 112, 111, 108, 105, 110, 116, 59], value: '⨔' },\n    { key: [110, 112, 114, 59], value: '⊀' },\n    { key: [110, 112, 114, 99, 117, 101, 59], value: '⋠' },\n    { key: [110, 112, 114, 101, 59], value: '⪯̸' },\n    { key: [110, 112, 114, 101, 99, 59], value: '⊀' },\n    { key: [110, 112, 114, 101, 99, 101, 113, 59], value: '⪯̸' },\n    { key: [110, 114, 65, 114, 114, 59], value: '⇏' },\n    { key: [110, 114, 97, 114, 114, 59], value: '↛' },\n    { key: [110, 114, 97, 114, 114, 99, 59], value: '⤳̸' },\n    { key: [110, 114, 97, 114, 114, 119, 59], value: '↝̸' },\n    { key: [110, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↛' },\n    { key: [110, 114, 116, 114, 105, 59], value: '⋫' },\n    { key: [110, 114, 116, 114, 105, 101, 59], value: '⋭' },\n    { key: [110, 115, 99, 59], value: '⊁' },\n    { key: [110, 115, 99, 99, 117, 101, 59], value: '⋡' },\n    { key: [110, 115, 99, 101, 59], value: '⪰̸' },\n    { key: [110, 115, 99, 114, 59], value: '𝓃' },\n    { key: [110, 115, 104, 111, 114, 116, 109, 105, 100, 59], value: '∤' },\n    { key: [110, 115, 104, 111, 114, 116, 112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∦' },\n    { key: [110, 115, 105, 109, 59], value: '≁' },\n    { key: [110, 115, 105, 109, 101, 59], value: '≄' },\n    { key: [110, 115, 105, 109, 101, 113, 59], value: '≄' },\n    { key: [110, 115, 109, 105, 100, 59], value: '∤' },\n    { key: [110, 115, 112, 97, 114, 59], value: '∦' },\n    { key: [110, 115, 113, 115, 117, 98, 101, 59], value: '⋢' },\n    { key: [110, 115, 113, 115, 117, 112, 101, 59], value: '⋣' },\n    { key: [110, 115, 117, 98, 59], value: '⊄' },\n    { key: [110, 115, 117, 98, 69, 59], value: '⫅̸' },\n    { key: [110, 115, 117, 98, 101, 59], value: '⊈' },\n    { key: [110, 115, 117, 98, 115, 101, 116, 59], value: '⊂⃒' },\n    { key: [110, 115, 117, 98, 115, 101, 116, 101, 113, 59], value: '⊈' },\n    { key: [110, 115, 117, 98, 115, 101, 116, 101, 113, 113, 59], value: '⫅̸' },\n    { key: [110, 115, 117, 99, 99, 59], value: '⊁' },\n    { key: [110, 115, 117, 99, 99, 101, 113, 59], value: '⪰̸' },\n    { key: [110, 115, 117, 112, 59], value: '⊅' },\n    { key: [110, 115, 117, 112, 69, 59], value: '⫆̸' },\n    { key: [110, 115, 117, 112, 101, 59], value: '⊉' },\n    { key: [110, 115, 117, 112, 115, 101, 116, 59], value: '⊃⃒' },\n    { key: [110, 115, 117, 112, 115, 101, 116, 101, 113, 59], value: '⊉' },\n    { key: [110, 115, 117, 112, 115, 101, 116, 101, 113, 113, 59], value: '⫆̸' },\n    { key: [110, 116, 103, 108, 59], value: '≹' },\n    { key: [110, 116, 105, 108, 100, 101, 59], value: 'ñ' },\n    { key: [110, 116, 108, 103, 59], value: '≸' },\n    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '⋪' },\n    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 101, 113, 59], value: '⋬' },\n    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '⋫' },\n    { key: [110, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 101, 113, 59], value: '⋭' },\n    { key: [110, 117, 59], value: 'ν' },\n    { key: [110, 117, 109, 59], value: '#' },\n    { key: [110, 117, 109, 101, 114, 111, 59], value: '№' },\n    { key: [110, 117, 109, 115, 112, 59], value: ' ' },\n    { key: [110, 118, 68, 97, 115, 104, 59], value: '⊭' },\n    { key: [110, 118, 72, 97, 114, 114, 59], value: '⤄' },\n    { key: [110, 118, 97, 112, 59], value: '≍⃒' },\n    { key: [110, 118, 100, 97, 115, 104, 59], value: '⊬' },\n    { key: [110, 118, 103, 101, 59], value: '≥⃒' },\n    { key: [110, 118, 103, 116, 59], value: '>⃒' },\n    { key: [110, 118, 105, 110, 102, 105, 110, 59], value: '⧞' },\n    { key: [110, 118, 108, 65, 114, 114, 59], value: '⤂' },\n    { key: [110, 118, 108, 101, 59], value: '≤⃒' },\n    { key: [110, 118, 108, 116, 59], value: '<⃒' },\n    { key: [110, 118, 108, 116, 114, 105, 101, 59], value: '⊴⃒' },\n    { key: [110, 118, 114, 65, 114, 114, 59], value: '⤃' },\n    { key: [110, 118, 114, 116, 114, 105, 101, 59], value: '⊵⃒' },\n    { key: [110, 118, 115, 105, 109, 59], value: '∼⃒' },\n    { key: [110, 119, 65, 114, 114, 59], value: '⇖' },\n    { key: [110, 119, 97, 114, 104, 107, 59], value: '⤣' },\n    { key: [110, 119, 97, 114, 114, 59], value: '↖' },\n    { key: [110, 119, 97, 114, 114, 111, 119, 59], value: '↖' },\n    { key: [110, 119, 110, 101, 97, 114, 59], value: '⤧' },\n    { key: [111, 83, 59], value: 'Ⓢ' },\n    { key: [111, 97, 99, 117, 116, 101, 59], value: 'ó' },\n    { key: [111, 97, 115, 116, 59], value: '⊛' },\n    { key: [111, 99, 105, 114, 59], value: '⊚' },\n    { key: [111, 99, 105, 114, 99, 59], value: 'ô' },\n    { key: [111, 99, 121, 59], value: 'о' },\n    { key: [111, 100, 97, 115, 104, 59], value: '⊝' },\n    { key: [111, 100, 98, 108, 97, 99, 59], value: 'ő' },\n    { key: [111, 100, 105, 118, 59], value: '⨸' },\n    { key: [111, 100, 111, 116, 59], value: '⊙' },\n    { key: [111, 100, 115, 111, 108, 100, 59], value: '⦼' },\n    { key: [111, 101, 108, 105, 103, 59], value: 'œ' },\n    { key: [111, 102, 99, 105, 114, 59], value: '⦿' },\n    { key: [111, 102, 114, 59], value: '𝔬' },\n    { key: [111, 103, 111, 110, 59], value: '˛' },\n    { key: [111, 103, 114, 97, 118, 101, 59], value: 'ò' },\n    { key: [111, 103, 116, 59], value: '⧁' },\n    { key: [111, 104, 98, 97, 114, 59], value: '⦵' },\n    { key: [111, 104, 109, 59], value: 'Ω' },\n    { key: [111, 105, 110, 116, 59], value: '∮' },\n    { key: [111, 108, 97, 114, 114, 59], value: '↺' },\n    { key: [111, 108, 99, 105, 114, 59], value: '⦾' },\n    { key: [111, 108, 99, 114, 111, 115, 115, 59], value: '⦻' },\n    { key: [111, 108, 105, 110, 101, 59], value: '‾' },\n    { key: [111, 108, 116, 59], value: '⧀' },\n    { key: [111, 109, 97, 99, 114, 59], value: 'ō' },\n    { key: [111, 109, 101, 103, 97, 59], value: 'ω' },\n    { key: [111, 109, 105, 99, 114, 111, 110, 59], value: 'ο' },\n    { key: [111, 109, 105, 100, 59], value: '⦶' },\n    { key: [111, 109, 105, 110, 117, 115, 59], value: '⊖' },\n    { key: [111, 111, 112, 102, 59], value: '𝕠' },\n    { key: [111, 112, 97, 114, 59], value: '⦷' },\n    { key: [111, 112, 101, 114, 112, 59], value: '⦹' },\n    { key: [111, 112, 108, 117, 115, 59], value: '⊕' },\n    { key: [111, 114, 59], value: '∨' },\n    { key: [111, 114, 97, 114, 114, 59], value: '↻' },\n    { key: [111, 114, 100, 59], value: '⩝' },\n    { key: [111, 114, 100, 101, 114, 59], value: 'ℴ' },\n    { key: [111, 114, 100, 101, 114, 111, 102, 59], value: 'ℴ' },\n    { key: [111, 114, 100, 102, 59], value: 'ª' },\n    { key: [111, 114, 100, 109, 59], value: 'º' },\n    { key: [111, 114, 105, 103, 111, 102, 59], value: '⊶' },\n    { key: [111, 114, 111, 114, 59], value: '⩖' },\n    { key: [111, 114, 115, 108, 111, 112, 101, 59], value: '⩗' },\n    { key: [111, 114, 118, 59], value: '⩛' },\n    { key: [111, 115, 99, 114, 59], value: 'ℴ' },\n    { key: [111, 115, 108, 97, 115, 104, 59], value: 'ø' },\n    { key: [111, 115, 111, 108, 59], value: '⊘' },\n    { key: [111, 116, 105, 108, 100, 101, 59], value: 'õ' },\n    { key: [111, 116, 105, 109, 101, 115, 59], value: '⊗' },\n    { key: [111, 116, 105, 109, 101, 115, 97, 115, 59], value: '⨶' },\n    { key: [111, 117, 109, 108, 59], value: 'ö' },\n    { key: [111, 118, 98, 97, 114, 59], value: '⌽' },\n    { key: [112, 97, 114, 59], value: '∥' },\n    { key: [112, 97, 114, 97, 59], value: '¶' },\n    { key: [112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∥' },\n    { key: [112, 97, 114, 115, 105, 109, 59], value: '⫳' },\n    { key: [112, 97, 114, 115, 108, 59], value: '⫽' },\n    { key: [112, 97, 114, 116, 59], value: '∂' },\n    { key: [112, 99, 121, 59], value: 'п' },\n    { key: [112, 101, 114, 99, 110, 116, 59], value: '%' },\n    { key: [112, 101, 114, 105, 111, 100, 59], value: '.' },\n    { key: [112, 101, 114, 109, 105, 108, 59], value: '‰' },\n    { key: [112, 101, 114, 112, 59], value: '⊥' },\n    { key: [112, 101, 114, 116, 101, 110, 107, 59], value: '‱' },\n    { key: [112, 102, 114, 59], value: '𝔭' },\n    { key: [112, 104, 105, 59], value: 'φ' },\n    { key: [112, 104, 105, 118, 59], value: 'ϕ' },\n    { key: [112, 104, 109, 109, 97, 116, 59], value: 'ℳ' },\n    { key: [112, 104, 111, 110, 101, 59], value: '☎' },\n    { key: [112, 105, 59], value: 'π' },\n    { key: [112, 105, 116, 99, 104, 102, 111, 114, 107, 59], value: '⋔' },\n    { key: [112, 105, 118, 59], value: 'ϖ' },\n    { key: [112, 108, 97, 110, 99, 107, 59], value: 'ℏ' },\n    { key: [112, 108, 97, 110, 99, 107, 104, 59], value: 'ℎ' },\n    { key: [112, 108, 97, 110, 107, 118, 59], value: 'ℏ' },\n    { key: [112, 108, 117, 115, 59], value: '+' },\n    { key: [112, 108, 117, 115, 97, 99, 105, 114, 59], value: '⨣' },\n    { key: [112, 108, 117, 115, 98, 59], value: '⊞' },\n    { key: [112, 108, 117, 115, 99, 105, 114, 59], value: '⨢' },\n    { key: [112, 108, 117, 115, 100, 111, 59], value: '∔' },\n    { key: [112, 108, 117, 115, 100, 117, 59], value: '⨥' },\n    { key: [112, 108, 117, 115, 101, 59], value: '⩲' },\n    { key: [112, 108, 117, 115, 109, 110, 59], value: '±' },\n    { key: [112, 108, 117, 115, 115, 105, 109, 59], value: '⨦' },\n    { key: [112, 108, 117, 115, 116, 119, 111, 59], value: '⨧' },\n    { key: [112, 109, 59], value: '±' },\n    { key: [112, 111, 105, 110, 116, 105, 110, 116, 59], value: '⨕' },\n    { key: [112, 111, 112, 102, 59], value: '𝕡' },\n    { key: [112, 111, 117, 110, 100, 59], value: '£' },\n    { key: [112, 114, 59], value: '≺' },\n    { key: [112, 114, 69, 59], value: '⪳' },\n    { key: [112, 114, 97, 112, 59], value: '⪷' },\n    { key: [112, 114, 99, 117, 101, 59], value: '≼' },\n    { key: [112, 114, 101, 59], value: '⪯' },\n    { key: [112, 114, 101, 99, 59], value: '≺' },\n    { key: [112, 114, 101, 99, 97, 112, 112, 114, 111, 120, 59], value: '⪷' },\n    { key: [112, 114, 101, 99, 99, 117, 114, 108, 121, 101, 113, 59], value: '≼' },\n    { key: [112, 114, 101, 99, 101, 113, 59], value: '⪯' },\n    { key: [112, 114, 101, 99, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪹' },\n    { key: [112, 114, 101, 99, 110, 101, 113, 113, 59], value: '⪵' },\n    { key: [112, 114, 101, 99, 110, 115, 105, 109, 59], value: '⋨' },\n    { key: [112, 114, 101, 99, 115, 105, 109, 59], value: '≾' },\n    { key: [112, 114, 105, 109, 101, 59], value: '′' },\n    { key: [112, 114, 105, 109, 101, 115, 59], value: 'ℙ' },\n    { key: [112, 114, 110, 69, 59], value: '⪵' },\n    { key: [112, 114, 110, 97, 112, 59], value: '⪹' },\n    { key: [112, 114, 110, 115, 105, 109, 59], value: '⋨' },\n    { key: [112, 114, 111, 100, 59], value: '∏' },\n    { key: [112, 114, 111, 102, 97, 108, 97, 114, 59], value: '⌮' },\n    { key: [112, 114, 111, 102, 108, 105, 110, 101, 59], value: '⌒' },\n    { key: [112, 114, 111, 102, 115, 117, 114, 102, 59], value: '⌓' },\n    { key: [112, 114, 111, 112, 59], value: '∝' },\n    { key: [112, 114, 111, 112, 116, 111, 59], value: '∝' },\n    { key: [112, 114, 115, 105, 109, 59], value: '≾' },\n    { key: [112, 114, 117, 114, 101, 108, 59], value: '⊰' },\n    { key: [112, 115, 99, 114, 59], value: '𝓅' },\n    { key: [112, 115, 105, 59], value: 'ψ' },\n    { key: [112, 117, 110, 99, 115, 112, 59], value: ' ' },\n    { key: [113, 102, 114, 59], value: '𝔮' },\n    { key: [113, 105, 110, 116, 59], value: '⨌' },\n    { key: [113, 111, 112, 102, 59], value: '𝕢' },\n    { key: [113, 112, 114, 105, 109, 101, 59], value: '⁗' },\n    { key: [113, 115, 99, 114, 59], value: '𝓆' },\n    { key: [113, 117, 97, 116, 101, 114, 110, 105, 111, 110, 115, 59], value: 'ℍ' },\n    { key: [113, 117, 97, 116, 105, 110, 116, 59], value: '⨖' },\n    { key: [113, 117, 101, 115, 116, 59], value: '?' },\n    { key: [113, 117, 101, 115, 116, 101, 113, 59], value: '≟' },\n    { key: [113, 117, 111, 116, 59], value: '\"' },\n    { key: [114, 65, 97, 114, 114, 59], value: '⇛' },\n    { key: [114, 65, 114, 114, 59], value: '⇒' },\n    { key: [114, 65, 116, 97, 105, 108, 59], value: '⤜' },\n    { key: [114, 66, 97, 114, 114, 59], value: '⤏' },\n    { key: [114, 72, 97, 114, 59], value: '⥤' },\n    { key: [114, 97, 99, 101, 59], value: '∽̱' },\n    { key: [114, 97, 99, 117, 116, 101, 59], value: 'ŕ' },\n    { key: [114, 97, 100, 105, 99, 59], value: '√' },\n    { key: [114, 97, 101, 109, 112, 116, 121, 118, 59], value: '⦳' },\n    { key: [114, 97, 110, 103, 59], value: '⟩' },\n    { key: [114, 97, 110, 103, 100, 59], value: '⦒' },\n    { key: [114, 97, 110, 103, 101, 59], value: '⦥' },\n    { key: [114, 97, 110, 103, 108, 101, 59], value: '⟩' },\n    { key: [114, 97, 113, 117, 111, 59], value: '»' },\n    { key: [114, 97, 114, 114, 59], value: '→' },\n    { key: [114, 97, 114, 114, 97, 112, 59], value: '⥵' },\n    { key: [114, 97, 114, 114, 98, 59], value: '⇥' },\n    { key: [114, 97, 114, 114, 98, 102, 115, 59], value: '⤠' },\n    { key: [114, 97, 114, 114, 99, 59], value: '⤳' },\n    { key: [114, 97, 114, 114, 102, 115, 59], value: '⤞' },\n    { key: [114, 97, 114, 114, 104, 107, 59], value: '↪' },\n    { key: [114, 97, 114, 114, 108, 112, 59], value: '↬' },\n    { key: [114, 97, 114, 114, 112, 108, 59], value: '⥅' },\n    { key: [114, 97, 114, 114, 115, 105, 109, 59], value: '⥴' },\n    { key: [114, 97, 114, 114, 116, 108, 59], value: '↣' },\n    { key: [114, 97, 114, 114, 119, 59], value: '↝' },\n    { key: [114, 97, 116, 97, 105, 108, 59], value: '⤚' },\n    { key: [114, 97, 116, 105, 111, 59], value: '∶' },\n    { key: [114, 97, 116, 105, 111, 110, 97, 108, 115, 59], value: 'ℚ' },\n    { key: [114, 98, 97, 114, 114, 59], value: '⤍' },\n    { key: [114, 98, 98, 114, 107, 59], value: '❳' },\n    { key: [114, 98, 114, 97, 99, 101, 59], value: ' }' },\n    { key: [114, 98, 114, 97, 99, 107, 59], value: ']' },\n    { key: [114, 98, 114, 107, 101, 59], value: '⦌' },\n    { key: [114, 98, 114, 107, 115, 108, 100, 59], value: '⦎' },\n    { key: [114, 98, 114, 107, 115, 108, 117, 59], value: '⦐' },\n    { key: [114, 99, 97, 114, 111, 110, 59], value: 'ř' },\n    { key: [114, 99, 101, 100, 105, 108, 59], value: 'ŗ' },\n    { key: [114, 99, 101, 105, 108, 59], value: '⌉' },\n    { key: [114, 99, 117, 98, 59], value: ' }' },\n    { key: [114, 99, 121, 59], value: 'р' },\n    { key: [114, 100, 99, 97, 59], value: '⤷' },\n    { key: [114, 100, 108, 100, 104, 97, 114, 59], value: '⥩' },\n    { key: [114, 100, 113, 117, 111, 59], value: '”' },\n    { key: [114, 100, 113, 117, 111, 114, 59], value: '”' },\n    { key: [114, 100, 115, 104, 59], value: '↳' },\n    { key: [114, 101, 97, 108, 59], value: 'ℜ' },\n    { key: [114, 101, 97, 108, 105, 110, 101, 59], value: 'ℛ' },\n    { key: [114, 101, 97, 108, 112, 97, 114, 116, 59], value: 'ℜ' },\n    { key: [114, 101, 97, 108, 115, 59], value: 'ℝ' },\n    { key: [114, 101, 99, 116, 59], value: '▭' },\n    { key: [114, 101, 103, 59], value: '®' },\n    { key: [114, 102, 105, 115, 104, 116, 59], value: '⥽' },\n    { key: [114, 102, 108, 111, 111, 114, 59], value: '⌋' },\n    { key: [114, 102, 114, 59], value: '𝔯' },\n    { key: [114, 104, 97, 114, 100, 59], value: '⇁' },\n    { key: [114, 104, 97, 114, 117, 59], value: '⇀' },\n    { key: [114, 104, 97, 114, 117, 108, 59], value: '⥬' },\n    { key: [114, 104, 111, 59], value: 'ρ' },\n    { key: [114, 104, 111, 118, 59], value: 'ϱ' },\n    { key: [114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '→' },\n    { key: [114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 116, 97, 105, 108, 59], value: '↣' },\n    { key: [114, 105, 103, 104, 116, 104, 97, 114, 112, 111, 111, 110, 100, 111, 119, 110, 59], value: '⇁' },\n    { key: [114, 105, 103, 104, 116, 104, 97, 114, 112, 111, 111, 110, 117, 112, 59], value: '⇀' },\n    { key: [114, 105, 103, 104, 116, 108, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇄' },\n    { key: [114, 105, 103, 104, 116, 108, 101, 102, 116, 104, 97, 114, 112, 111, 111, 110, 115, 59], value: '⇌' },\n    { key: [114, 105, 103, 104, 116, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59], value: '⇉' },\n    { key: [114, 105, 103, 104, 116, 115, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59], value: '↝' },\n    { key: [114, 105, 103, 104, 116, 116, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59], value: '⋌' },\n    { key: [114, 105, 110, 103, 59], value: '˚' },\n    { key: [114, 105, 115, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59], value: '≓' },\n    { key: [114, 108, 97, 114, 114, 59], value: '⇄' },\n    { key: [114, 108, 104, 97, 114, 59], value: '⇌' },\n    { key: [114, 108, 109, 59], value: '‏' },\n    { key: [114, 109, 111, 117, 115, 116, 59], value: '⎱' },\n    { key: [114, 109, 111, 117, 115, 116, 97, 99, 104, 101, 59], value: '⎱' },\n    { key: [114, 110, 109, 105, 100, 59], value: '⫮' },\n    { key: [114, 111, 97, 110, 103, 59], value: '⟭' },\n    { key: [114, 111, 97, 114, 114, 59], value: '⇾' },\n    { key: [114, 111, 98, 114, 107, 59], value: '⟧' },\n    { key: [114, 111, 112, 97, 114, 59], value: '⦆' },\n    { key: [114, 111, 112, 102, 59], value: '𝕣' },\n    { key: [114, 111, 112, 108, 117, 115, 59], value: '⨮' },\n    { key: [114, 111, 116, 105, 109, 101, 115, 59], value: '⨵' },\n    { key: [114, 112, 97, 114, 59], value: ')' },\n    { key: [114, 112, 97, 114, 103, 116, 59], value: '⦔' },\n    { key: [114, 112, 112, 111, 108, 105, 110, 116, 59], value: '⨒' },\n    { key: [114, 114, 97, 114, 114, 59], value: '⇉' },\n    { key: [114, 115, 97, 113, 117, 111, 59], value: '›' },\n    { key: [114, 115, 99, 114, 59], value: '𝓇' },\n    { key: [114, 115, 104, 59], value: '↱' },\n    { key: [114, 115, 113, 98, 59], value: ']' },\n    { key: [114, 115, 113, 117, 111, 59], value: '’' },\n    { key: [114, 115, 113, 117, 111, 114, 59], value: '’' },\n    { key: [114, 116, 104, 114, 101, 101, 59], value: '⋌' },\n    { key: [114, 116, 105, 109, 101, 115, 59], value: '⋊' },\n    { key: [114, 116, 114, 105, 59], value: '▹' },\n    { key: [114, 116, 114, 105, 101, 59], value: '⊵' },\n    { key: [114, 116, 114, 105, 102, 59], value: '▸' },\n    { key: [114, 116, 114, 105, 108, 116, 114, 105, 59], value: '⧎' },\n    { key: [114, 117, 108, 117, 104, 97, 114, 59], value: '⥨' },\n    { key: [114, 120, 59], value: '℞' },\n    { key: [115, 97, 99, 117, 116, 101, 59], value: 'ś' },\n    { key: [115, 98, 113, 117, 111, 59], value: '‚' },\n    { key: [115, 99, 59], value: '≻' },\n    { key: [115, 99, 69, 59], value: '⪴' },\n    { key: [115, 99, 97, 112, 59], value: '⪸' },\n    { key: [115, 99, 97, 114, 111, 110, 59], value: 'š' },\n    { key: [115, 99, 99, 117, 101, 59], value: '≽' },\n    { key: [115, 99, 101, 59], value: '⪰' },\n    { key: [115, 99, 101, 100, 105, 108, 59], value: 'ş' },\n    { key: [115, 99, 105, 114, 99, 59], value: 'ŝ' },\n    { key: [115, 99, 110, 69, 59], value: '⪶' },\n    { key: [115, 99, 110, 97, 112, 59], value: '⪺' },\n    { key: [115, 99, 110, 115, 105, 109, 59], value: '⋩' },\n    { key: [115, 99, 112, 111, 108, 105, 110, 116, 59], value: '⨓' },\n    { key: [115, 99, 115, 105, 109, 59], value: '≿' },\n    { key: [115, 99, 121, 59], value: 'с' },\n    { key: [115, 100, 111, 116, 59], value: '⋅' },\n    { key: [115, 100, 111, 116, 98, 59], value: '⊡' },\n    { key: [115, 100, 111, 116, 101, 59], value: '⩦' },\n    { key: [115, 101, 65, 114, 114, 59], value: '⇘' },\n    { key: [115, 101, 97, 114, 104, 107, 59], value: '⤥' },\n    { key: [115, 101, 97, 114, 114, 59], value: '↘' },\n    { key: [115, 101, 97, 114, 114, 111, 119, 59], value: '↘' },\n    { key: [115, 101, 99, 116, 59], value: '§' },\n    { key: [115, 101, 109, 105, 59], value: ';' },\n    { key: [115, 101, 115, 119, 97, 114, 59], value: '⤩' },\n    { key: [115, 101, 116, 109, 105, 110, 117, 115, 59], value: '∖' },\n    { key: [115, 101, 116, 109, 110, 59], value: '∖' },\n    { key: [115, 101, 120, 116, 59], value: '✶' },\n    { key: [115, 102, 114, 59], value: '𝔰' },\n    { key: [115, 102, 114, 111, 119, 110, 59], value: '⌢' },\n    { key: [115, 104, 97, 114, 112, 59], value: '♯' },\n    { key: [115, 104, 99, 104, 99, 121, 59], value: 'щ' },\n    { key: [115, 104, 99, 121, 59], value: 'ш' },\n    { key: [115, 104, 111, 114, 116, 109, 105, 100, 59], value: '∣' },\n    { key: [115, 104, 111, 114, 116, 112, 97, 114, 97, 108, 108, 101, 108, 59], value: '∥' },\n    { key: [115, 104, 121, 59], value: '­' },\n    { key: [115, 105, 103, 109, 97, 59], value: 'σ' },\n    { key: [115, 105, 103, 109, 97, 102, 59], value: 'ς' },\n    { key: [115, 105, 103, 109, 97, 118, 59], value: 'ς' },\n    { key: [115, 105, 109, 59], value: '∼' },\n    { key: [115, 105, 109, 100, 111, 116, 59], value: '⩪' },\n    { key: [115, 105, 109, 101, 59], value: '≃' },\n    { key: [115, 105, 109, 101, 113, 59], value: '≃' },\n    { key: [115, 105, 109, 103, 59], value: '⪞' },\n    { key: [115, 105, 109, 103, 69, 59], value: '⪠' },\n    { key: [115, 105, 109, 108, 59], value: '⪝' },\n    { key: [115, 105, 109, 108, 69, 59], value: '⪟' },\n    { key: [115, 105, 109, 110, 101, 59], value: '≆' },\n    { key: [115, 105, 109, 112, 108, 117, 115, 59], value: '⨤' },\n    { key: [115, 105, 109, 114, 97, 114, 114, 59], value: '⥲' },\n    { key: [115, 108, 97, 114, 114, 59], value: '←' },\n    { key: [115, 109, 97, 108, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59], value: '∖' },\n    { key: [115, 109, 97, 115, 104, 112, 59], value: '⨳' },\n    { key: [115, 109, 101, 112, 97, 114, 115, 108, 59], value: '⧤' },\n    { key: [115, 109, 105, 100, 59], value: '∣' },\n    { key: [115, 109, 105, 108, 101, 59], value: '⌣' },\n    { key: [115, 109, 116, 59], value: '⪪' },\n    { key: [115, 109, 116, 101, 59], value: '⪬' },\n    { key: [115, 109, 116, 101, 115, 59], value: '⪬︀' },\n    { key: [115, 111, 102, 116, 99, 121, 59], value: 'ь' },\n    { key: [115, 111, 108, 59], value: '/' },\n    { key: [115, 111, 108, 98, 59], value: '⧄' },\n    { key: [115, 111, 108, 98, 97, 114, 59], value: '⌿' },\n    { key: [115, 111, 112, 102, 59], value: '𝕤' },\n    { key: [115, 112, 97, 100, 101, 115, 59], value: '♠' },\n    { key: [115, 112, 97, 100, 101, 115, 117, 105, 116, 59], value: '♠' },\n    { key: [115, 112, 97, 114, 59], value: '∥' },\n    { key: [115, 113, 99, 97, 112, 59], value: '⊓' },\n    { key: [115, 113, 99, 97, 112, 115, 59], value: '⊓︀' },\n    { key: [115, 113, 99, 117, 112, 59], value: '⊔' },\n    { key: [115, 113, 99, 117, 112, 115, 59], value: '⊔︀' },\n    { key: [115, 113, 115, 117, 98, 59], value: '⊏' },\n    { key: [115, 113, 115, 117, 98, 101, 59], value: '⊑' },\n    { key: [115, 113, 115, 117, 98, 115, 101, 116, 59], value: '⊏' },\n    { key: [115, 113, 115, 117, 98, 115, 101, 116, 101, 113, 59], value: '⊑' },\n    { key: [115, 113, 115, 117, 112, 59], value: '⊐' },\n    { key: [115, 113, 115, 117, 112, 101, 59], value: '⊒' },\n    { key: [115, 113, 115, 117, 112, 115, 101, 116, 59], value: '⊐' },\n    { key: [115, 113, 115, 117, 112, 115, 101, 116, 101, 113, 59], value: '⊒' },\n    { key: [115, 113, 117, 59], value: '□' },\n    { key: [115, 113, 117, 97, 114, 101, 59], value: '□' },\n    { key: [115, 113, 117, 97, 114, 102, 59], value: '▪' },\n    { key: [115, 113, 117, 102, 59], value: '▪' },\n    { key: [115, 114, 97, 114, 114, 59], value: '→' },\n    { key: [115, 115, 99, 114, 59], value: '𝓈' },\n    { key: [115, 115, 101, 116, 109, 110, 59], value: '∖' },\n    { key: [115, 115, 109, 105, 108, 101, 59], value: '⌣' },\n    { key: [115, 115, 116, 97, 114, 102, 59], value: '⋆' },\n    { key: [115, 116, 97, 114, 59], value: '☆' },\n    { key: [115, 116, 97, 114, 102, 59], value: '★' },\n    { key: [115, 116, 114, 97, 105, 103, 104, 116, 101, 112, 115, 105, 108, 111, 110, 59], value: 'ϵ' },\n    { key: [115, 116, 114, 97, 105, 103, 104, 116, 112, 104, 105, 59], value: 'ϕ' },\n    { key: [115, 116, 114, 110, 115, 59], value: '¯' },\n    { key: [115, 117, 98, 59], value: '⊂' },\n    { key: [115, 117, 98, 69, 59], value: '⫅' },\n    { key: [115, 117, 98, 100, 111, 116, 59], value: '⪽' },\n    { key: [115, 117, 98, 101, 59], value: '⊆' },\n    { key: [115, 117, 98, 101, 100, 111, 116, 59], value: '⫃' },\n    { key: [115, 117, 98, 109, 117, 108, 116, 59], value: '⫁' },\n    { key: [115, 117, 98, 110, 69, 59], value: '⫋' },\n    { key: [115, 117, 98, 110, 101, 59], value: '⊊' },\n    { key: [115, 117, 98, 112, 108, 117, 115, 59], value: '⪿' },\n    { key: [115, 117, 98, 114, 97, 114, 114, 59], value: '⥹' },\n    { key: [115, 117, 98, 115, 101, 116, 59], value: '⊂' },\n    { key: [115, 117, 98, 115, 101, 116, 101, 113, 59], value: '⊆' },\n    { key: [115, 117, 98, 115, 101, 116, 101, 113, 113, 59], value: '⫅' },\n    { key: [115, 117, 98, 115, 101, 116, 110, 101, 113, 59], value: '⊊' },\n    { key: [115, 117, 98, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫋' },\n    { key: [115, 117, 98, 115, 105, 109, 59], value: '⫇' },\n    { key: [115, 117, 98, 115, 117, 98, 59], value: '⫕' },\n    { key: [115, 117, 98, 115, 117, 112, 59], value: '⫓' },\n    { key: [115, 117, 99, 99, 59], value: '≻' },\n    { key: [115, 117, 99, 99, 97, 112, 112, 114, 111, 120, 59], value: '⪸' },\n    { key: [115, 117, 99, 99, 99, 117, 114, 108, 121, 101, 113, 59], value: '≽' },\n    { key: [115, 117, 99, 99, 101, 113, 59], value: '⪰' },\n    { key: [115, 117, 99, 99, 110, 97, 112, 112, 114, 111, 120, 59], value: '⪺' },\n    { key: [115, 117, 99, 99, 110, 101, 113, 113, 59], value: '⪶' },\n    { key: [115, 117, 99, 99, 110, 115, 105, 109, 59], value: '⋩' },\n    { key: [115, 117, 99, 99, 115, 105, 109, 59], value: '≿' },\n    { key: [115, 117, 109, 59], value: '∑' },\n    { key: [115, 117, 110, 103, 59], value: '♪' },\n    { key: [115, 117, 112, 49, 59], value: '¹' },\n    { key: [115, 117, 112, 50, 59], value: '²' },\n    { key: [115, 117, 112, 51, 59], value: '³' },\n    { key: [115, 117, 112, 59], value: '⊃' },\n    { key: [115, 117, 112, 69, 59], value: '⫆' },\n    { key: [115, 117, 112, 100, 111, 116, 59], value: '⪾' },\n    { key: [115, 117, 112, 100, 115, 117, 98, 59], value: '⫘' },\n    { key: [115, 117, 112, 101, 59], value: '⊇' },\n    { key: [115, 117, 112, 101, 100, 111, 116, 59], value: '⫄' },\n    { key: [115, 117, 112, 104, 115, 111, 108, 59], value: '⟉' },\n    { key: [115, 117, 112, 104, 115, 117, 98, 59], value: '⫗' },\n    { key: [115, 117, 112, 108, 97, 114, 114, 59], value: '⥻' },\n    { key: [115, 117, 112, 109, 117, 108, 116, 59], value: '⫂' },\n    { key: [115, 117, 112, 110, 69, 59], value: '⫌' },\n    { key: [115, 117, 112, 110, 101, 59], value: '⊋' },\n    { key: [115, 117, 112, 112, 108, 117, 115, 59], value: '⫀' },\n    { key: [115, 117, 112, 115, 101, 116, 59], value: '⊃' },\n    { key: [115, 117, 112, 115, 101, 116, 101, 113, 59], value: '⊇' },\n    { key: [115, 117, 112, 115, 101, 116, 101, 113, 113, 59], value: '⫆' },\n    { key: [115, 117, 112, 115, 101, 116, 110, 101, 113, 59], value: '⊋' },\n    { key: [115, 117, 112, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫌' },\n    { key: [115, 117, 112, 115, 105, 109, 59], value: '⫈' },\n    { key: [115, 117, 112, 115, 117, 98, 59], value: '⫔' },\n    { key: [115, 117, 112, 115, 117, 112, 59], value: '⫖' },\n    { key: [115, 119, 65, 114, 114, 59], value: '⇙' },\n    { key: [115, 119, 97, 114, 104, 107, 59], value: '⤦' },\n    { key: [115, 119, 97, 114, 114, 59], value: '↙' },\n    { key: [115, 119, 97, 114, 114, 111, 119, 59], value: '↙' },\n    { key: [115, 119, 110, 119, 97, 114, 59], value: '⤪' },\n    { key: [115, 122, 108, 105, 103, 59], value: 'ß' },\n    { key: [116, 97, 114, 103, 101, 116, 59], value: '⌖' },\n    { key: [116, 97, 117, 59], value: 'τ' },\n    { key: [116, 98, 114, 107, 59], value: '⎴' },\n    { key: [116, 99, 97, 114, 111, 110, 59], value: 'ť' },\n    { key: [116, 99, 101, 100, 105, 108, 59], value: 'ţ' },\n    { key: [116, 99, 121, 59], value: 'т' },\n    { key: [116, 100, 111, 116, 59], value: '⃛' },\n    { key: [116, 101, 108, 114, 101, 99, 59], value: '⌕' },\n    { key: [116, 102, 114, 59], value: '𝔱' },\n    { key: [116, 104, 101, 114, 101, 52, 59], value: '∴' },\n    { key: [116, 104, 101, 114, 101, 102, 111, 114, 101, 59], value: '∴' },\n    { key: [116, 104, 101, 116, 97, 59], value: 'θ' },\n    { key: [116, 104, 101, 116, 97, 115, 121, 109, 59], value: 'ϑ' },\n    { key: [116, 104, 101, 116, 97, 118, 59], value: 'ϑ' },\n    { key: [116, 104, 105, 99, 107, 97, 112, 112, 114, 111, 120, 59], value: '≈' },\n    { key: [116, 104, 105, 99, 107, 115, 105, 109, 59], value: '∼' },\n    { key: [116, 104, 105, 110, 115, 112, 59], value: ' ' },\n    { key: [116, 104, 107, 97, 112, 59], value: '≈' },\n    { key: [116, 104, 107, 115, 105, 109, 59], value: '∼' },\n    { key: [116, 104, 111, 114, 110, 59], value: 'þ' },\n    { key: [116, 105, 108, 100, 101, 59], value: '˜' },\n    { key: [116, 105, 109, 101, 115, 59], value: '×' },\n    { key: [116, 105, 109, 101, 115, 98, 59], value: '⊠' },\n    { key: [116, 105, 109, 101, 115, 98, 97, 114, 59], value: '⨱' },\n    { key: [116, 105, 109, 101, 115, 100, 59], value: '⨰' },\n    { key: [116, 105, 110, 116, 59], value: '∭' },\n    { key: [116, 111, 101, 97, 59], value: '⤨' },\n    { key: [116, 111, 112, 59], value: '⊤' },\n    { key: [116, 111, 112, 98, 111, 116, 59], value: '⌶' },\n    { key: [116, 111, 112, 99, 105, 114, 59], value: '⫱' },\n    { key: [116, 111, 112, 102, 59], value: '𝕥' },\n    { key: [116, 111, 112, 102, 111, 114, 107, 59], value: '⫚' },\n    { key: [116, 111, 115, 97, 59], value: '⤩' },\n    { key: [116, 112, 114, 105, 109, 101, 59], value: '‴' },\n    { key: [116, 114, 97, 100, 101, 59], value: '™' },\n    { key: [116, 114, 105, 97, 110, 103, 108, 101, 59], value: '▵' },\n    { key: [116, 114, 105, 97, 110, 103, 108, 101, 100, 111, 119, 110, 59], value: '▿' },\n    { key: [116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '◃' },\n    { key: [116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 101, 113, 59], value: '⊴' },\n    { key: [116, 114, 105, 97, 110, 103, 108, 101, 113, 59], value: '≜' },\n    { key: [116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '▹' },\n    { key: [116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 101, 113, 59], value: '⊵' },\n    { key: [116, 114, 105, 100, 111, 116, 59], value: '◬' },\n    { key: [116, 114, 105, 101, 59], value: '≜' },\n    { key: [116, 114, 105, 109, 105, 110, 117, 115, 59], value: '⨺' },\n    { key: [116, 114, 105, 112, 108, 117, 115, 59], value: '⨹' },\n    { key: [116, 114, 105, 115, 98, 59], value: '⧍' },\n    { key: [116, 114, 105, 116, 105, 109, 101, 59], value: '⨻' },\n    { key: [116, 114, 112, 101, 122, 105, 117, 109, 59], value: '⏢' },\n    { key: [116, 115, 99, 114, 59], value: '𝓉' },\n    { key: [116, 115, 99, 121, 59], value: 'ц' },\n    { key: [116, 115, 104, 99, 121, 59], value: 'ћ' },\n    { key: [116, 115, 116, 114, 111, 107, 59], value: 'ŧ' },\n    { key: [116, 119, 105, 120, 116, 59], value: '≬' },\n    { key: [116, 119, 111, 104, 101, 97, 100, 108, 101, 102, 116, 97, 114, 114, 111, 119, 59], value: '↞' },\n    { key: [116, 119, 111, 104, 101, 97, 100, 114, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59], value: '↠' },\n    { key: [117, 65, 114, 114, 59], value: '⇑' },\n    { key: [117, 72, 97, 114, 59], value: '⥣' },\n    { key: [117, 97, 99, 117, 116, 101, 59], value: 'ú' },\n    { key: [117, 97, 114, 114, 59], value: '↑' },\n    { key: [117, 98, 114, 99, 121, 59], value: 'ў' },\n    { key: [117, 98, 114, 101, 118, 101, 59], value: 'ŭ' },\n    { key: [117, 99, 105, 114, 99, 59], value: 'û' },\n    { key: [117, 99, 121, 59], value: 'у' },\n    { key: [117, 100, 97, 114, 114, 59], value: '⇅' },\n    { key: [117, 100, 98, 108, 97, 99, 59], value: 'ű' },\n    { key: [117, 100, 104, 97, 114, 59], value: '⥮' },\n    { key: [117, 102, 105, 115, 104, 116, 59], value: '⥾' },\n    { key: [117, 102, 114, 59], value: '𝔲' },\n    { key: [117, 103, 114, 97, 118, 101, 59], value: 'ù' },\n    { key: [117, 104, 97, 114, 108, 59], value: '↿' },\n    { key: [117, 104, 97, 114, 114, 59], value: '↾' },\n    { key: [117, 104, 98, 108, 107, 59], value: '▀' },\n    { key: [117, 108, 99, 111, 114, 110, 59], value: '⌜' },\n    { key: [117, 108, 99, 111, 114, 110, 101, 114, 59], value: '⌜' },\n    { key: [117, 108, 99, 114, 111, 112, 59], value: '⌏' },\n    { key: [117, 108, 116, 114, 105, 59], value: '◸' },\n    { key: [117, 109, 97, 99, 114, 59], value: 'ū' },\n    { key: [117, 109, 108, 59], value: '¨' },\n    { key: [117, 111, 103, 111, 110, 59], value: 'ų' },\n    { key: [117, 111, 112, 102, 59], value: '𝕦' },\n    { key: [117, 112, 97, 114, 114, 111, 119, 59], value: '↑' },\n    { key: [117, 112, 100, 111, 119, 110, 97, 114, 114, 111, 119, 59], value: '↕' },\n    { key: [117, 112, 104, 97, 114, 112, 111, 111, 110, 108, 101, 102, 116, 59], value: '↿' },\n    { key: [117, 112, 104, 97, 114, 112, 111, 111, 110, 114, 105, 103, 104, 116, 59], value: '↾' },\n    { key: [117, 112, 108, 117, 115, 59], value: '⊎' },\n    { key: [117, 112, 115, 105, 59], value: 'υ' },\n    { key: [117, 112, 115, 105, 104, 59], value: 'ϒ' },\n    { key: [117, 112, 115, 105, 108, 111, 110, 59], value: 'υ' },\n    { key: [117, 112, 117, 112, 97, 114, 114, 111, 119, 115, 59], value: '⇈' },\n    { key: [117, 114, 99, 111, 114, 110, 59], value: '⌝' },\n    { key: [117, 114, 99, 111, 114, 110, 101, 114, 59], value: '⌝' },\n    { key: [117, 114, 99, 114, 111, 112, 59], value: '⌎' },\n    { key: [117, 114, 105, 110, 103, 59], value: 'ů' },\n    { key: [117, 114, 116, 114, 105, 59], value: '◹' },\n    { key: [117, 115, 99, 114, 59], value: '𝓊' },\n    { key: [117, 116, 100, 111, 116, 59], value: '⋰' },\n    { key: [117, 116, 105, 108, 100, 101, 59], value: 'ũ' },\n    { key: [117, 116, 114, 105, 59], value: '▵' },\n    { key: [117, 116, 114, 105, 102, 59], value: '▴' },\n    { key: [117, 117, 97, 114, 114, 59], value: '⇈' },\n    { key: [117, 117, 109, 108, 59], value: 'ü' },\n    { key: [117, 119, 97, 110, 103, 108, 101, 59], value: '⦧' },\n    { key: [118, 65, 114, 114, 59], value: '⇕' },\n    { key: [118, 66, 97, 114, 59], value: '⫨' },\n    { key: [118, 66, 97, 114, 118, 59], value: '⫩' },\n    { key: [118, 68, 97, 115, 104, 59], value: '⊨' },\n    { key: [118, 97, 110, 103, 114, 116, 59], value: '⦜' },\n    { key: [118, 97, 114, 101, 112, 115, 105, 108, 111, 110, 59], value: 'ϵ' },\n    { key: [118, 97, 114, 107, 97, 112, 112, 97, 59], value: 'ϰ' },\n    { key: [118, 97, 114, 110, 111, 116, 104, 105, 110, 103, 59], value: '∅' },\n    { key: [118, 97, 114, 112, 104, 105, 59], value: 'ϕ' },\n    { key: [118, 97, 114, 112, 105, 59], value: 'ϖ' },\n    { key: [118, 97, 114, 112, 114, 111, 112, 116, 111, 59], value: '∝' },\n    { key: [118, 97, 114, 114, 59], value: '↕' },\n    { key: [118, 97, 114, 114, 104, 111, 59], value: 'ϱ' },\n    { key: [118, 97, 114, 115, 105, 103, 109, 97, 59], value: 'ς' },\n    { key: [118, 97, 114, 115, 117, 98, 115, 101, 116, 110, 101, 113, 59], value: '⊊︀' },\n    { key: [118, 97, 114, 115, 117, 98, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫋︀' },\n    { key: [118, 97, 114, 115, 117, 112, 115, 101, 116, 110, 101, 113, 59], value: '⊋︀' },\n    { key: [118, 97, 114, 115, 117, 112, 115, 101, 116, 110, 101, 113, 113, 59], value: '⫌︀' },\n    { key: [118, 97, 114, 116, 104, 101, 116, 97, 59], value: 'ϑ' },\n    { key: [118, 97, 114, 116, 114, 105, 97, 110, 103, 108, 101, 108, 101, 102, 116, 59], value: '⊲' },\n    { key: [118, 97, 114, 116, 114, 105, 97, 110, 103, 108, 101, 114, 105, 103, 104, 116, 59], value: '⊳' },\n    { key: [118, 99, 121, 59], value: 'в' },\n    { key: [118, 100, 97, 115, 104, 59], value: '⊢' },\n    { key: [118, 101, 101, 59], value: '∨' },\n    { key: [118, 101, 101, 98, 97, 114, 59], value: '⊻' },\n    { key: [118, 101, 101, 101, 113, 59], value: '≚' },\n    { key: [118, 101, 108, 108, 105, 112, 59], value: '⋮' },\n    { key: [118, 101, 114, 98, 97, 114, 59], value: '|' },\n    { key: [118, 101, 114, 116, 59], value: '|' },\n    { key: [118, 102, 114, 59], value: '𝔳' },\n    { key: [118, 108, 116, 114, 105, 59], value: '⊲' },\n    { key: [118, 110, 115, 117, 98, 59], value: '⊂⃒' },\n    { key: [118, 110, 115, 117, 112, 59], value: '⊃⃒' },\n    { key: [118, 111, 112, 102, 59], value: '𝕧' },\n    { key: [118, 112, 114, 111, 112, 59], value: '∝' },\n    { key: [118, 114, 116, 114, 105, 59], value: '⊳' },\n    { key: [118, 115, 99, 114, 59], value: '𝓋' },\n    { key: [118, 115, 117, 98, 110, 69, 59], value: '⫋︀' },\n    { key: [118, 115, 117, 98, 110, 101, 59], value: '⊊︀' },\n    { key: [118, 115, 117, 112, 110, 69, 59], value: '⫌︀' },\n    { key: [118, 115, 117, 112, 110, 101, 59], value: '⊋︀' },\n    { key: [118, 122, 105, 103, 122, 97, 103, 59], value: '⦚' },\n    { key: [119, 99, 105, 114, 99, 59], value: 'ŵ' },\n    { key: [119, 101, 100, 98, 97, 114, 59], value: '⩟' },\n    { key: [119, 101, 100, 103, 101, 59], value: '∧' },\n    { key: [119, 101, 100, 103, 101, 113, 59], value: '≙' },\n    { key: [119, 101, 105, 101, 114, 112, 59], value: '℘' },\n    { key: [119, 102, 114, 59], value: '𝔴' },\n    { key: [119, 111, 112, 102, 59], value: '𝕨' },\n    { key: [119, 112, 59], value: '℘' },\n    { key: [119, 114, 59], value: '≀' },\n    { key: [119, 114, 101, 97, 116, 104, 59], value: '≀' },\n    { key: [119, 115, 99, 114, 59], value: '𝓌' },\n    { key: [120, 99, 97, 112, 59], value: '⋂' },\n    { key: [120, 99, 105, 114, 99, 59], value: '◯' },\n    { key: [120, 99, 117, 112, 59], value: '⋃' },\n    { key: [120, 100, 116, 114, 105, 59], value: '▽' },\n    { key: [120, 102, 114, 59], value: '𝔵' },\n    { key: [120, 104, 65, 114, 114, 59], value: '⟺' },\n    { key: [120, 104, 97, 114, 114, 59], value: '⟷' },\n    { key: [120, 105, 59], value: 'ξ' },\n    { key: [120, 108, 65, 114, 114, 59], value: '⟸' },\n    { key: [120, 108, 97, 114, 114, 59], value: '⟵' },\n    { key: [120, 109, 97, 112, 59], value: '⟼' },\n    { key: [120, 110, 105, 115, 59], value: '⋻' },\n    { key: [120, 111, 100, 111, 116, 59], value: '⨀' },\n    { key: [120, 111, 112, 102, 59], value: '𝕩' },\n    { key: [120, 111, 112, 108, 117, 115, 59], value: '⨁' },\n    { key: [120, 111, 116, 105, 109, 101, 59], value: '⨂' },\n    { key: [120, 114, 65, 114, 114, 59], value: '⟹' },\n    { key: [120, 114, 97, 114, 114, 59], value: '⟶' },\n    { key: [120, 115, 99, 114, 59], value: '𝓍' },\n    { key: [120, 115, 113, 99, 117, 112, 59], value: '⨆' },\n    { key: [120, 117, 112, 108, 117, 115, 59], value: '⨄' },\n    { key: [120, 117, 116, 114, 105, 59], value: '△' },\n    { key: [120, 118, 101, 101, 59], value: '⋁' },\n    { key: [120, 119, 101, 100, 103, 101, 59], value: '⋀' },\n    { key: [121, 97, 99, 117, 116, 101, 59], value: 'ý' },\n    { key: [121, 97, 99, 121, 59], value: 'я' },\n    { key: [121, 99, 105, 114, 99, 59], value: 'ŷ' },\n    { key: [121, 99, 121, 59], value: 'ы' },\n    { key: [121, 101, 110, 59], value: '¥' },\n    { key: [121, 102, 114, 59], value: '𝔶' },\n    { key: [121, 105, 99, 121, 59], value: 'ї' },\n    { key: [121, 111, 112, 102, 59], value: '𝕪' },\n    { key: [121, 115, 99, 114, 59], value: '𝓎' },\n    { key: [121, 117, 99, 121, 59], value: 'ю' },\n    { key: [121, 117, 109, 108, 59], value: 'ÿ' },\n    { key: [122, 97, 99, 117, 116, 101, 59], value: 'ź' },\n    { key: [122, 99, 97, 114, 111, 110, 59], value: 'ž' },\n    { key: [122, 99, 121, 59], value: 'з' },\n    { key: [122, 100, 111, 116, 59], value: 'ż' },\n    { key: [122, 101, 101, 116, 114, 102, 59], value: 'ℨ' },\n    { key: [122, 101, 116, 97, 59], value: 'ζ' },\n    { key: [122, 102, 114, 59], value: '𝔷' },\n    { key: [122, 104, 99, 121, 59], value: 'ж' },\n    { key: [122, 105, 103, 114, 97, 114, 114, 59], value: '⇝' },\n    { key: [122, 111, 112, 102, 59], value: '𝕫' },\n    { key: [122, 115, 99, 114, 59], value: '𝓏' },\n    { key: [122, 119, 106, 59], value: '‍' },\n    { key: [122, 119, 110, 106, 59], value: '‌' }\n];\n\nexports.UnicodePcCodePoint = void 0;\n(function (UnicodePcCodePoint) {\n    UnicodePcCodePoint[UnicodePcCodePoint[\"LOW_LINE\"] = 95] = \"LOW_LINE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"UNDERTIE\"] = 8255] = \"UNDERTIE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"CHARACTER_TIE\"] = 8256] = \"CHARACTER_TIE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"INVERTED_UNDERTIE\"] = 8276] = \"INVERTED_UNDERTIE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LOW_LINE\"] = 65075] = \"PRESENTATION_FORM_FOR_VERTICAL_LOW_LINE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_WAVY_LOW_LINE\"] = 65076] = \"PRESENTATION_FORM_FOR_VERTICAL_WAVY_LOW_LINE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"DASHED_LOW_LINE\"] = 65101] = \"DASHED_LOW_LINE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"CENTRELINE_LOW_LINE\"] = 65102] = \"CENTRELINE_LOW_LINE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"WAVY_LOW_LINE\"] = 65103] = \"WAVY_LOW_LINE\";\n    UnicodePcCodePoint[UnicodePcCodePoint[\"FULLWIDTH_LOW_LINE\"] = 65343] = \"FULLWIDTH_LOW_LINE\";\n})(exports.UnicodePcCodePoint || (exports.UnicodePcCodePoint = {}));\n\nexports.UnicodePdCodePoint = void 0;\n(function (UnicodePdCodePoint) {\n    UnicodePdCodePoint[UnicodePdCodePoint[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"ARMENIAN_HYPHEN\"] = 1418] = \"ARMENIAN_HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"HEBREW_PUNCTUATION_MAQAF\"] = 1470] = \"HEBREW_PUNCTUATION_MAQAF\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"CANADIAN_SYLLABICS_HYPHEN\"] = 5120] = \"CANADIAN_SYLLABICS_HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"MONGOLIAN_TODO_SOFT_HYPHEN\"] = 6150] = \"MONGOLIAN_TODO_SOFT_HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"HYPHEN\"] = 8208] = \"HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"NON_BREAKING_HYPHEN\"] = 8209] = \"NON_BREAKING_HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"FIGURE_DASH\"] = 8210] = \"FIGURE_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"EN_DASH\"] = 8211] = \"EN_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"EM_DASH\"] = 8212] = \"EM_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"HORIZONTAL_BAR\"] = 8213] = \"HORIZONTAL_BAR\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"DOUBLE_OBLIQUE_HYPHEN\"] = 11799] = \"DOUBLE_OBLIQUE_HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"HYPHEN_WITH_DIAERESIS\"] = 11802] = \"HYPHEN_WITH_DIAERESIS\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"TWO_EM_DASH\"] = 11834] = \"TWO_EM_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"THREE_EM_DASH\"] = 11835] = \"THREE_EM_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"DOUBLE_HYPHEN\"] = 11840] = \"DOUBLE_HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"WAVE_DASH\"] = 12316] = \"WAVE_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"WAVY_DASH\"] = 12336] = \"WAVY_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"KATAKANA_HIRAGANA_DOUBLE_HYPHEN\"] = 12448] = \"KATAKANA_HIRAGANA_DOUBLE_HYPHEN\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_EM_DASH\"] = 65073] = \"PRESENTATION_FORM_FOR_VERTICAL_EM_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_EN_DASH\"] = 65074] = \"PRESENTATION_FORM_FOR_VERTICAL_EN_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"SMALL_EM_DASH\"] = 65112] = \"SMALL_EM_DASH\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"SMALL_HYPHEN_MINUS\"] = 65123] = \"SMALL_HYPHEN_MINUS\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"FULLWIDTH_HYPHEN_MINUS\"] = 65293] = \"FULLWIDTH_HYPHEN_MINUS\";\n    UnicodePdCodePoint[UnicodePdCodePoint[\"YEZIDI_HYPHENATION_MARK\"] = 69293] = \"YEZIDI_HYPHENATION_MARK\";\n})(exports.UnicodePdCodePoint || (exports.UnicodePdCodePoint = {}));\n\nexports.UnicodePeCodePoint = void 0;\n(function (UnicodePeCodePoint) {\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_PARENTHESIS\"] = 41] = \"RIGHT_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_CURLY_BRACKET\"] = 125] = \"RIGHT_CURLY_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"TIBETAN_MARK_GUG_RTAGS_GYAS\"] = 3899] = \"TIBETAN_MARK_GUG_RTAGS_GYAS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"TIBETAN_MARK_ANG_KHANG_GYAS\"] = 3901] = \"TIBETAN_MARK_ANG_KHANG_GYAS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"OGHAM_REVERSED_FEATHER_MARK\"] = 5788] = \"OGHAM_REVERSED_FEATHER_MARK\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_SQUARE_BRACKET_WITH_QUILL\"] = 8262] = \"RIGHT_SQUARE_BRACKET_WITH_QUILL\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"SUPERSCRIPT_RIGHT_PARENTHESIS\"] = 8318] = \"SUPERSCRIPT_RIGHT_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"SUBSCRIPT_RIGHT_PARENTHESIS\"] = 8334] = \"SUBSCRIPT_RIGHT_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_CEILING\"] = 8969] = \"RIGHT_CEILING\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_FLOOR\"] = 8971] = \"RIGHT_FLOOR\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_POINTING_ANGLE_BRACKET\"] = 9002] = \"RIGHT_POINTING_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MEDIUM_RIGHT_PARENTHESIS_ORNAMENT\"] = 10089] = \"MEDIUM_RIGHT_PARENTHESIS_ORNAMENT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MEDIUM_FLATTENED_RIGHT_PARENTHESIS_ORNAMENT\"] = 10091] = \"MEDIUM_FLATTENED_RIGHT_PARENTHESIS_ORNAMENT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MEDIUM_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT\"] = 10093] = \"MEDIUM_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"HEAVY_RIGHT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT\"] = 10095] = \"HEAVY_RIGHT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"HEAVY_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT\"] = 10097] = \"HEAVY_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"LIGHT_RIGHT_TORTOISE_SHELL_BRACKET_ORNAMENT\"] = 10099] = \"LIGHT_RIGHT_TORTOISE_SHELL_BRACKET_ORNAMENT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MEDIUM_RIGHT_CURLY_BRACKET_ORNAMENT\"] = 10101] = \"MEDIUM_RIGHT_CURLY_BRACKET_ORNAMENT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_S_SHAPED_BAG_DELIMITER\"] = 10182] = \"RIGHT_S_SHAPED_BAG_DELIMITER\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MATHEMATICAL_RIGHT_WHITE_SQUARE_BRACKET\"] = 10215] = \"MATHEMATICAL_RIGHT_WHITE_SQUARE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MATHEMATICAL_RIGHT_ANGLE_BRACKET\"] = 10217] = \"MATHEMATICAL_RIGHT_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MATHEMATICAL_RIGHT_DOUBLE_ANGLE_BRACKET\"] = 10219] = \"MATHEMATICAL_RIGHT_DOUBLE_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MATHEMATICAL_RIGHT_WHITE_TORTOISE_SHELL_BRACKET\"] = 10221] = \"MATHEMATICAL_RIGHT_WHITE_TORTOISE_SHELL_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"MATHEMATICAL_RIGHT_FLATTENED_PARENTHESIS\"] = 10223] = \"MATHEMATICAL_RIGHT_FLATTENED_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_WHITE_CURLY_BRACKET\"] = 10628] = \"RIGHT_WHITE_CURLY_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_WHITE_PARENTHESIS\"] = 10630] = \"RIGHT_WHITE_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"Z_NOTATION_RIGHT_IMAGE_BRACKET\"] = 10632] = \"Z_NOTATION_RIGHT_IMAGE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"Z_NOTATION_RIGHT_BINDING_BRACKET\"] = 10634] = \"Z_NOTATION_RIGHT_BINDING_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_SQUARE_BRACKET_WITH_UNDERBAR\"] = 10636] = \"RIGHT_SQUARE_BRACKET_WITH_UNDERBAR\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER\"] = 10638] = \"RIGHT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER\"] = 10640] = \"RIGHT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_ANGLE_BRACKET_WITH_DOT\"] = 10642] = \"RIGHT_ANGLE_BRACKET_WITH_DOT\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_ARC_GREATER_THAN_BRACKET\"] = 10644] = \"RIGHT_ARC_GREATER_THAN_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"DOUBLE_RIGHT_ARC_LESS_THAN_BRACKET\"] = 10646] = \"DOUBLE_RIGHT_ARC_LESS_THAN_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_BLACK_TORTOISE_SHELL_BRACKET\"] = 10648] = \"RIGHT_BLACK_TORTOISE_SHELL_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_WIGGLY_FENCE\"] = 10713] = \"RIGHT_WIGGLY_FENCE\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_DOUBLE_WIGGLY_FENCE\"] = 10715] = \"RIGHT_DOUBLE_WIGGLY_FENCE\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_POINTING_CURVED_ANGLE_BRACKET\"] = 10749] = \"RIGHT_POINTING_CURVED_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"TOP_RIGHT_HALF_BRACKET\"] = 11811] = \"TOP_RIGHT_HALF_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"BOTTOM_RIGHT_HALF_BRACKET\"] = 11813] = \"BOTTOM_RIGHT_HALF_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_SIDEWAYS_U_BRACKET\"] = 11815] = \"RIGHT_SIDEWAYS_U_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_DOUBLE_PARENTHESIS\"] = 11817] = \"RIGHT_DOUBLE_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_ANGLE_BRACKET\"] = 12297] = \"RIGHT_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_DOUBLE_ANGLE_BRACKET\"] = 12299] = \"RIGHT_DOUBLE_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_CORNER_BRACKET\"] = 12301] = \"RIGHT_CORNER_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_WHITE_CORNER_BRACKET\"] = 12303] = \"RIGHT_WHITE_CORNER_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_BLACK_LENTICULAR_BRACKET\"] = 12305] = \"RIGHT_BLACK_LENTICULAR_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_TORTOISE_SHELL_BRACKET\"] = 12309] = \"RIGHT_TORTOISE_SHELL_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_WHITE_LENTICULAR_BRACKET\"] = 12311] = \"RIGHT_WHITE_LENTICULAR_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_WHITE_TORTOISE_SHELL_BRACKET\"] = 12313] = \"RIGHT_WHITE_TORTOISE_SHELL_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"RIGHT_WHITE_SQUARE_BRACKET\"] = 12315] = \"RIGHT_WHITE_SQUARE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"DOUBLE_PRIME_QUOTATION_MARK\"] = 12318] = \"DOUBLE_PRIME_QUOTATION_MARK\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"LOW_DOUBLE_PRIME_QUOTATION_MARK\"] = 12319] = \"LOW_DOUBLE_PRIME_QUOTATION_MARK\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"ORNATE_LEFT_PARENTHESIS\"] = 64830] = \"ORNATE_LEFT_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_LENTICULAR_BRAKCET\"] = 65048] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_LENTICULAR_BRAKCET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_PARENTHESIS\"] = 65078] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CURLY_BRACKET\"] = 65080] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CURLY_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_TORTOISE_SHELL_BRACKET\"] = 65082] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_TORTOISE_SHELL_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_BLACK_LENTICULAR_BRACKET\"] = 65084] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_BLACK_LENTICULAR_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_DOUBLE_ANGLE_BRACKET\"] = 65086] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_DOUBLE_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_ANGLE_BRACKET\"] = 65088] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_ANGLE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CORNER_BRACKET\"] = 65090] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CORNER_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_CORNER_BRACKET\"] = 65092] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_CORNER_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_SQUARE_BRACKET\"] = 65096] = \"PRESENTATION_FORM_FOR_VERTICAL_RIGHT_SQUARE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"SMALL_RIGHT_PARENTHESIS\"] = 65114] = \"SMALL_RIGHT_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"SMALL_RIGHT_CURLY_BRACKET\"] = 65116] = \"SMALL_RIGHT_CURLY_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"SMALL_RIGHT_TORTOISE_SHELL_BRACKET\"] = 65118] = \"SMALL_RIGHT_TORTOISE_SHELL_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"FULLWIDTH_RIGHT_PARENTHESIS\"] = 65289] = \"FULLWIDTH_RIGHT_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"FULLWIDTH_RIGHT_SQUARE_BRACKET\"] = 65341] = \"FULLWIDTH_RIGHT_SQUARE_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"FULLWIDTH_RIGHT_CURLY_BRACKET\"] = 65373] = \"FULLWIDTH_RIGHT_CURLY_BRACKET\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"FULLWIDTH_RIGHT_WHITE_PARENTHESIS\"] = 65376] = \"FULLWIDTH_RIGHT_WHITE_PARENTHESIS\";\n    UnicodePeCodePoint[UnicodePeCodePoint[\"HALFWIDTH_RIGHT_CORNER_BRACKET\"] = 65379] = \"HALFWIDTH_RIGHT_CORNER_BRACKET\";\n})(exports.UnicodePeCodePoint || (exports.UnicodePeCodePoint = {}));\n\nexports.UnicodePfCodePoint = void 0;\n(function (UnicodePfCodePoint) {\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK\"] = 187] = \"RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_SINGLE_QUOTATION_MARK\"] = 8217] = \"RIGHT_SINGLE_QUOTATION_MARK\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_DOUBLE_QUOTATION_MARK\"] = 8221] = \"RIGHT_DOUBLE_QUOTATION_MARK\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"SINGLE_RIGHT_POINTING_ANGLE_QUOTATION_MARK\"] = 8250] = \"SINGLE_RIGHT_POINTING_ANGLE_QUOTATION_MARK\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_SUBSTITUTION_BRACKET\"] = 11779] = \"RIGHT_SUBSTITUTION_BRACKET\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_DOTTED_SUBSTITUTION_BRACKET\"] = 11781] = \"RIGHT_DOTTED_SUBSTITUTION_BRACKET\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_TRANSPOSITION_BRACKET\"] = 11786] = \"RIGHT_TRANSPOSITION_BRACKET\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_RAISED_OMISSION_BRACKET\"] = 11789] = \"RIGHT_RAISED_OMISSION_BRACKET\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_LOW_PARAPHRASE_BRACKET\"] = 11805] = \"RIGHT_LOW_PARAPHRASE_BRACKET\";\n    UnicodePfCodePoint[UnicodePfCodePoint[\"RIGHT_VERTICAL_BAR_WITH_QUILL\"] = 11809] = \"RIGHT_VERTICAL_BAR_WITH_QUILL\";\n})(exports.UnicodePfCodePoint || (exports.UnicodePfCodePoint = {}));\n\nexports.UnicodePiCodePoint = void 0;\n(function (UnicodePiCodePoint) {\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK\"] = 171] = \"LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_SINGLE_QUOTATION_MARK\"] = 8216] = \"LEFT_SINGLE_QUOTATION_MARK\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"SINGLE_HIGH_REVERSED_9_QUOTATION_MARK\"] = 8219] = \"SINGLE_HIGH_REVERSED_9_QUOTATION_MARK\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_DOUBLE_QUOTATION_MARK\"] = 8220] = \"LEFT_DOUBLE_QUOTATION_MARK\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"DOUBLE_HIGH_REVERSED_9_QUOTATION_MARK\"] = 8223] = \"DOUBLE_HIGH_REVERSED_9_QUOTATION_MARK\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"SINGLE_LEFT_POINTING_ANGLE_QUOTATION_MARK\"] = 8249] = \"SINGLE_LEFT_POINTING_ANGLE_QUOTATION_MARK\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_SUBSTITUTION_BRACKET\"] = 11778] = \"LEFT_SUBSTITUTION_BRACKET\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_DOTTED_SUBSTITUTION_BRACKET\"] = 11780] = \"LEFT_DOTTED_SUBSTITUTION_BRACKET\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_TRANSPOSITION_BRACKET\"] = 11785] = \"LEFT_TRANSPOSITION_BRACKET\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_RAISED_OMISSION_BRACKET\"] = 11788] = \"LEFT_RAISED_OMISSION_BRACKET\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_LOW_PARAPHRASE_BRACKET\"] = 11804] = \"LEFT_LOW_PARAPHRASE_BRACKET\";\n    UnicodePiCodePoint[UnicodePiCodePoint[\"LEFT_VERTICAL_BAR_WITH_QUILL\"] = 11808] = \"LEFT_VERTICAL_BAR_WITH_QUILL\";\n})(exports.UnicodePiCodePoint || (exports.UnicodePiCodePoint = {}));\n\nexports.UnicodePoCodePoint = void 0;\n(function (UnicodePoCodePoint) {\n    UnicodePoCodePoint[UnicodePoCodePoint[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PERCENT_SIGN\"] = 37] = \"PERCENT_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ASTERISK\"] = 42] = \"ASTERISK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COMMA\"] = 44] = \"COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULL_STOP\"] = 46] = \"FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COLON\"] = 58] = \"COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COMMERCIAL_AT\"] = 64] = \"COMMERCIAL_AT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSE_SOLIDUS\"] = 92] = \"REVERSE_SOLIDUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"INVERTED_EXCLAMATION_MARK\"] = 161] = \"INVERTED_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SECTION_SIGN\"] = 167] = \"SECTION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PILCROW_SIGN\"] = 182] = \"PILCROW_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MIDDLE_DOT\"] = 183] = \"MIDDLE_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"INVERTED_QUESTION_MARK\"] = 191] = \"INVERTED_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"GREEK_QUESTION_MARK\"] = 894] = \"GREEK_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"GREEK_ANO_TELEIA\"] = 903] = \"GREEK_ANO_TELEIA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARMENIAN_APOSTROPHE\"] = 1370] = \"ARMENIAN_APOSTROPHE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARMENIAN_EMPHASIS_MARK\"] = 1371] = \"ARMENIAN_EMPHASIS_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARMENIAN_EXCLAMATION_MARK\"] = 1372] = \"ARMENIAN_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARMENIAN_COMMA\"] = 1373] = \"ARMENIAN_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARMENIAN_QUESTION_MARK\"] = 1374] = \"ARMENIAN_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARMENIAN_ABBREVIATION_MARK\"] = 1375] = \"ARMENIAN_ABBREVIATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARMENIAN_FULL_STOP\"] = 1417] = \"ARMENIAN_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HEBREW_PUNCTUATION_PASEQ\"] = 1472] = \"HEBREW_PUNCTUATION_PASEQ\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HEBREW_PUNCTUATION_SOF_PASUQ\"] = 1475] = \"HEBREW_PUNCTUATION_SOF_PASUQ\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HEBREW_PUNCTUATION_NUN_HAFUKHA\"] = 1478] = \"HEBREW_PUNCTUATION_NUN_HAFUKHA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HEBREW_PUNCTUATION_GERESH\"] = 1523] = \"HEBREW_PUNCTUATION_GERESH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HEBREW_PUNCTUATION_GERSHAYIM\"] = 1524] = \"HEBREW_PUNCTUATION_GERSHAYIM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_INDIC_PER_MILLE_SIGN\"] = 1545] = \"ARABIC_INDIC_PER_MILLE_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_INDIC_PER_TEN_THOUSAND_SIGN\"] = 1546] = \"ARABIC_INDIC_PER_TEN_THOUSAND_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_COMMA\"] = 1548] = \"ARABIC_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_DATE_SEPARATOR\"] = 1549] = \"ARABIC_DATE_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_SEMICOLON\"] = 1563] = \"ARABIC_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_TRIPLE_DOT_PUNCTUATION_MARK\"] = 1566] = \"ARABIC_TRIPLE_DOT_PUNCTUATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_QUESTION_MARK\"] = 1567] = \"ARABIC_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_PERCENT_SIGN\"] = 1642] = \"ARABIC_PERCENT_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_DECIMAL_SEPARATOR\"] = 1643] = \"ARABIC_DECIMAL_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_THOUSANDS_SEPARATOR\"] = 1644] = \"ARABIC_THOUSANDS_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_FIVE_POINTED_STAR\"] = 1645] = \"ARABIC_FIVE_POINTED_STAR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ARABIC_FULL_STOP\"] = 1748] = \"ARABIC_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_END_OF_PARAGRAPH\"] = 1792] = \"SYRIAC_END_OF_PARAGRAPH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_SUPRALINEAR_FULL_STOP\"] = 1793] = \"SYRIAC_SUPRALINEAR_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_SUBLINEAR_FULL_STOP\"] = 1794] = \"SYRIAC_SUBLINEAR_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_SUPRALINEAR_COLON\"] = 1795] = \"SYRIAC_SUPRALINEAR_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_SUBLINEAR_COLON\"] = 1796] = \"SYRIAC_SUBLINEAR_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_HORIZONTAL_COLON\"] = 1797] = \"SYRIAC_HORIZONTAL_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_COLON_SKEWED_LEFT\"] = 1798] = \"SYRIAC_COLON_SKEWED_LEFT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_COLON_SKEWED_RIGHT\"] = 1799] = \"SYRIAC_COLON_SKEWED_RIGHT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_SUPRALINEAR_COLON_SKEWED_LEFT\"] = 1800] = \"SYRIAC_SUPRALINEAR_COLON_SKEWED_LEFT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_SUBLINEAR_COLON_SKEWED_RIGHT\"] = 1801] = \"SYRIAC_SUBLINEAR_COLON_SKEWED_RIGHT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_CONTRACTION\"] = 1802] = \"SYRIAC_CONTRACTION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_HARKLEAN_OBELUS\"] = 1803] = \"SYRIAC_HARKLEAN_OBELUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_HARKLEAN_METOBELUS\"] = 1804] = \"SYRIAC_HARKLEAN_METOBELUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SYRIAC_HARKLEAN_ASTERISCUS\"] = 1805] = \"SYRIAC_HARKLEAN_ASTERISCUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NKO_SYMBOL_GBAKURUNEN\"] = 2039] = \"NKO_SYMBOL_GBAKURUNEN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NKO_COMMA\"] = 2040] = \"NKO_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NKO_EXCLAMATION_MARK\"] = 2041] = \"NKO_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_NEQUDAA\"] = 2096] = \"SAMARITAN_PUNCTUATION_NEQUDAA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_AFSAAQ\"] = 2097] = \"SAMARITAN_PUNCTUATION_AFSAAQ\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_ANGED\"] = 2098] = \"SAMARITAN_PUNCTUATION_ANGED\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_BAU\"] = 2099] = \"SAMARITAN_PUNCTUATION_BAU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_ATMAAU\"] = 2100] = \"SAMARITAN_PUNCTUATION_ATMAAU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_SHIYYAALAA\"] = 2101] = \"SAMARITAN_PUNCTUATION_SHIYYAALAA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_ABBREVIATION_MARK\"] = 2102] = \"SAMARITAN_ABBREVIATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_MELODIC_QITSA\"] = 2103] = \"SAMARITAN_PUNCTUATION_MELODIC_QITSA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_ZIQAA\"] = 2104] = \"SAMARITAN_PUNCTUATION_ZIQAA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_QITSA\"] = 2105] = \"SAMARITAN_PUNCTUATION_QITSA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_ZAEF\"] = 2106] = \"SAMARITAN_PUNCTUATION_ZAEF\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_TURU\"] = 2107] = \"SAMARITAN_PUNCTUATION_TURU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_ARKAANU\"] = 2108] = \"SAMARITAN_PUNCTUATION_ARKAANU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_SOF_MASHFAAT\"] = 2109] = \"SAMARITAN_PUNCTUATION_SOF_MASHFAAT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAMARITAN_PUNCTUATION_ANNAAU\"] = 2110] = \"SAMARITAN_PUNCTUATION_ANNAAU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANDAIC_PUNCTUATION\"] = 2142] = \"MANDAIC_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DEVANAGARI_DANDA\"] = 2404] = \"DEVANAGARI_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DEVANAGARI_DOUBLE_DANDA\"] = 2405] = \"DEVANAGARI_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DEVANAGARI_ABBREVIATION_SIGN\"] = 2416] = \"DEVANAGARI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BENGALI_ABBREVIATION_SIGN\"] = 2557] = \"BENGALI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"GURMUKHI_ABBREVIATION_SIGN\"] = 2678] = \"GURMUKHI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"GUJARATI_ABBREVIATION_SIGN\"] = 2800] = \"GUJARATI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TELUGU_SIGN_SIDDHAM\"] = 3191] = \"TELUGU_SIGN_SIDDHAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KANNADA_SIGN_SIDDHAM\"] = 3204] = \"KANNADA_SIGN_SIDDHAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SINHALA_PUNCTUATION_KUNDDALIYA\"] = 3572] = \"SINHALA_PUNCTUATION_KUNDDALIYA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"THAI_CHARACTER_FONGMAN\"] = 3663] = \"THAI_CHARACTER_FONGMAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"THAI_CHARACTER_ANGKHANKHU\"] = 3674] = \"THAI_CHARACTER_ANGKHANKHU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"THAI_CHARACTER_KHOMUT\"] = 3675] = \"THAI_CHARACTER_KHOMUT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_INITIAL_YIG_MGO_MDUN_MA\"] = 3844] = \"TIBETAN_MARK_INITIAL_YIG_MGO_MDUN_MA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_CLOSING_YIG_MGO_SGAB_MA\"] = 3845] = \"TIBETAN_MARK_CLOSING_YIG_MGO_SGAB_MA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_CARET_YIG_MGO_PHUR_SHAD_MA\"] = 3846] = \"TIBETAN_MARK_CARET_YIG_MGO_PHUR_SHAD_MA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_YIG_MGO_TSHEG_SHAD_MA\"] = 3847] = \"TIBETAN_MARK_YIG_MGO_TSHEG_SHAD_MA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_SBRUL_SHAD\"] = 3848] = \"TIBETAN_MARK_SBRUL_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_BSKUR_YIG_MGO\"] = 3849] = \"TIBETAN_MARK_BSKUR_YIG_MGO\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_BKA__SHOG_YIG_MGO\"] = 3850] = \"TIBETAN_MARK_BKA__SHOG_YIG_MGO\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_INTERSYLLABIC_TSHEG\"] = 3851] = \"TIBETAN_MARK_INTERSYLLABIC_TSHEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_DELIMITER_TSHEG_BSTAR\"] = 3852] = \"TIBETAN_MARK_DELIMITER_TSHEG_BSTAR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_SHAD\"] = 3853] = \"TIBETAN_MARK_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_NYIS_SHAD\"] = 3854] = \"TIBETAN_MARK_NYIS_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_TSHEG_SHAD\"] = 3855] = \"TIBETAN_MARK_TSHEG_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_NYIS_TSHEG_SHAD\"] = 3856] = \"TIBETAN_MARK_NYIS_TSHEG_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_RIN_CHEN_SPUNGS_SHAD\"] = 3857] = \"TIBETAN_MARK_RIN_CHEN_SPUNGS_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_RGYA_GRAM_SHAD\"] = 3858] = \"TIBETAN_MARK_RGYA_GRAM_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_GTER_TSHEG\"] = 3860] = \"TIBETAN_MARK_GTER_TSHEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_PALUTA\"] = 3973] = \"TIBETAN_MARK_PALUTA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_BSKA__SHOG_GI_MGO_RGYAN\"] = 4048] = \"TIBETAN_MARK_BSKA__SHOG_GI_MGO_RGYAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_MNYAM_YIG_GI_MGO_RGYAN\"] = 4049] = \"TIBETAN_MARK_MNYAM_YIG_GI_MGO_RGYAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_NYIS_TSHEG\"] = 4050] = \"TIBETAN_MARK_NYIS_TSHEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_INITIAL_BRDA_RNYING_YIG_MGO_MDUN_MA\"] = 4051] = \"TIBETAN_MARK_INITIAL_BRDA_RNYING_YIG_MGO_MDUN_MA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_CLOSING_BRDA_RNYING_YIG_MGO_SGAB_MA\"] = 4052] = \"TIBETAN_MARK_CLOSING_BRDA_RNYING_YIG_MGO_SGAB_MA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_LEADING_MCHAN_RTAGS\"] = 4057] = \"TIBETAN_MARK_LEADING_MCHAN_RTAGS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIBETAN_MARK_TRAILING_MCHAN_RTAGS\"] = 4058] = \"TIBETAN_MARK_TRAILING_MCHAN_RTAGS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MYANMAR_SIGN_LITTLE_SECTION\"] = 4170] = \"MYANMAR_SIGN_LITTLE_SECTION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MYANMAR_SIGN_SECTION\"] = 4171] = \"MYANMAR_SIGN_SECTION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MYANMAR_SYMBOL_LOCATIVE\"] = 4172] = \"MYANMAR_SYMBOL_LOCATIVE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MYANMAR_SYMBOL_COMPLETED\"] = 4173] = \"MYANMAR_SYMBOL_COMPLETED\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MYANMAR_SYMBOL_AFOREMENTIONED\"] = 4174] = \"MYANMAR_SYMBOL_AFOREMENTIONED\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MYANMAR_SYMBOL_GENITIVE\"] = 4175] = \"MYANMAR_SYMBOL_GENITIVE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"GEORGIAN_PARAGRAPH_SEPARATOR\"] = 4347] = \"GEORGIAN_PARAGRAPH_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_SECTION_MARK\"] = 4960] = \"ETHIOPIC_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_WORDSPACE\"] = 4961] = \"ETHIOPIC_WORDSPACE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_FULL_STOP\"] = 4962] = \"ETHIOPIC_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_COMMA\"] = 4963] = \"ETHIOPIC_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_SEMICOLON\"] = 4964] = \"ETHIOPIC_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_COLON\"] = 4965] = \"ETHIOPIC_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_PREFACE_COLON\"] = 4966] = \"ETHIOPIC_PREFACE_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_QUESTION_MARK\"] = 4967] = \"ETHIOPIC_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ETHIOPIC_PARAGRAPH_SEPARATOR\"] = 4968] = \"ETHIOPIC_PARAGRAPH_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CANADIAN_SYLLABICS_FULL_STOP\"] = 5742] = \"CANADIAN_SYLLABICS_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RUNIC_SINGLE_PUNCTUATION\"] = 5867] = \"RUNIC_SINGLE_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RUNIC_MULTIPLE_PUNCTUATION\"] = 5868] = \"RUNIC_MULTIPLE_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RUNIC_CROSS_PUNCTUATION\"] = 5869] = \"RUNIC_CROSS_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PHILIPPINE_SINGLE_PUNCTUATION\"] = 5941] = \"PHILIPPINE_SINGLE_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PHILIPPINE_DOUBLE_PUNCTUATION\"] = 5942] = \"PHILIPPINE_DOUBLE_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHMER_SIGN_KHAN\"] = 6100] = \"KHMER_SIGN_KHAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHMER_SIGN_BARIYOOSAN\"] = 6101] = \"KHMER_SIGN_BARIYOOSAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHMER_SIGN_CAMNUC_PII_KUUH\"] = 6102] = \"KHMER_SIGN_CAMNUC_PII_KUUH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHMER_SIGN_BEYYAL\"] = 6104] = \"KHMER_SIGN_BEYYAL\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHMER_SIGN_PHNAEK_MUAN\"] = 6105] = \"KHMER_SIGN_PHNAEK_MUAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHMER_SIGN_KOOMUUT\"] = 6106] = \"KHMER_SIGN_KOOMUUT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_BIRGA\"] = 6144] = \"MONGOLIAN_BIRGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_ELLIPSIS\"] = 6145] = \"MONGOLIAN_ELLIPSIS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_COMMA\"] = 6146] = \"MONGOLIAN_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_FULL_STOP\"] = 6147] = \"MONGOLIAN_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_COLON\"] = 6148] = \"MONGOLIAN_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_FOUR_DOTS\"] = 6149] = \"MONGOLIAN_FOUR_DOTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_SIBE_SYLLABLE_BOUNDARY_MARKER\"] = 6151] = \"MONGOLIAN_SIBE_SYLLABLE_BOUNDARY_MARKER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_MANCHU_COMMA\"] = 6152] = \"MONGOLIAN_MANCHU_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_MANCHU_FULL_STOP\"] = 6153] = \"MONGOLIAN_MANCHU_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_NIRUGU\"] = 6154] = \"MONGOLIAN_NIRUGU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LIMBU_EXCLAMATION_MARK\"] = 6468] = \"LIMBU_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LIMBU_QUESTION_MARK\"] = 6469] = \"LIMBU_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BUGINESE_PALLAWA\"] = 6686] = \"BUGINESE_PALLAWA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BUGINESE_END_OF_SECTION\"] = 6687] = \"BUGINESE_END_OF_SECTION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_WIANG\"] = 6816] = \"TAI_THAM_SIGN_WIANG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_WIANGWAAK\"] = 6817] = \"TAI_THAM_SIGN_WIANGWAAK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_SAWAN\"] = 6818] = \"TAI_THAM_SIGN_SAWAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_KEOW\"] = 6819] = \"TAI_THAM_SIGN_KEOW\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_HOY\"] = 6820] = \"TAI_THAM_SIGN_HOY\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_DOKMAI\"] = 6821] = \"TAI_THAM_SIGN_DOKMAI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_REVERSED_ROTATED_RANA\"] = 6822] = \"TAI_THAM_SIGN_REVERSED_ROTATED_RANA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_KAAN\"] = 6824] = \"TAI_THAM_SIGN_KAAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_KAANKUU\"] = 6825] = \"TAI_THAM_SIGN_KAANKUU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_SATKAAN\"] = 6826] = \"TAI_THAM_SIGN_SATKAAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_SATKAANKUU\"] = 6827] = \"TAI_THAM_SIGN_SATKAANKUU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_HANG\"] = 6828] = \"TAI_THAM_SIGN_HANG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_THAM_SIGN_CAANG\"] = 6829] = \"TAI_THAM_SIGN_CAANG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BALINESE_PANTI\"] = 7002] = \"BALINESE_PANTI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BALINESE_PAMADA\"] = 7003] = \"BALINESE_PAMADA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BALINESE_WINDU\"] = 7004] = \"BALINESE_WINDU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BALINESE_CARIK_PAMUNGKAH\"] = 7005] = \"BALINESE_CARIK_PAMUNGKAH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BALINESE_CARIK_SIKI\"] = 7006] = \"BALINESE_CARIK_SIKI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BALINESE_CARIK_PAREREN\"] = 7007] = \"BALINESE_CARIK_PAREREN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BALINESE_PAMENENG\"] = 7008] = \"BALINESE_PAMENENG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BATAK_SYMBOL_BINDU_NA_METEK\"] = 7164] = \"BATAK_SYMBOL_BINDU_NA_METEK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BATAK_SYMBOL_BINDU_PINARBORAS\"] = 7165] = \"BATAK_SYMBOL_BINDU_PINARBORAS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BATAK_SYMBOL_BINDU_JUDUL\"] = 7166] = \"BATAK_SYMBOL_BINDU_JUDUL\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BATAK_SYMBOL_BINDU_PANGOLAT\"] = 7167] = \"BATAK_SYMBOL_BINDU_PANGOLAT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LEPCHA_PUNCTUATION_TA_ROL\"] = 7227] = \"LEPCHA_PUNCTUATION_TA_ROL\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LEPCHA_PUNCTUATION_NYET_THYOOM_TA_ROL\"] = 7228] = \"LEPCHA_PUNCTUATION_NYET_THYOOM_TA_ROL\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LEPCHA_PUNCTUATION_CER_WA\"] = 7229] = \"LEPCHA_PUNCTUATION_CER_WA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LEPCHA_PUNCTUATION_TSHOOK_CER_WA\"] = 7230] = \"LEPCHA_PUNCTUATION_TSHOOK_CER_WA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LEPCHA_PUNCTUATION_TSHOOK\"] = 7231] = \"LEPCHA_PUNCTUATION_TSHOOK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"OL_CHIKI_PUNCTUATION_MUCAAD\"] = 7294] = \"OL_CHIKI_PUNCTUATION_MUCAAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"OL_CHIKI_PUNCTUATION_DOUBLE_MUCAAD\"] = 7295] = \"OL_CHIKI_PUNCTUATION_DOUBLE_MUCAAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_SURYA\"] = 7360] = \"SUNDANESE_PUNCTUATION_BINDU_SURYA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_PANGLONG\"] = 7361] = \"SUNDANESE_PUNCTUATION_BINDU_PANGLONG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_PURNAMA\"] = 7362] = \"SUNDANESE_PUNCTUATION_BINDU_PURNAMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_CAKRA\"] = 7363] = \"SUNDANESE_PUNCTUATION_BINDU_CAKRA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_LEU_SATANGA\"] = 7364] = \"SUNDANESE_PUNCTUATION_BINDU_LEU_SATANGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_KA_SATANGA\"] = 7365] = \"SUNDANESE_PUNCTUATION_BINDU_KA_SATANGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_DA_SATANGA\"] = 7366] = \"SUNDANESE_PUNCTUATION_BINDU_DA_SATANGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SUNDANESE_PUNCTUATION_BINDU_BA_SATANGA\"] = 7367] = \"SUNDANESE_PUNCTUATION_BINDU_BA_SATANGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"VEDIC_SIGN_NIHSHVASA\"] = 7379] = \"VEDIC_SIGN_NIHSHVASA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_VERTICAL_LINE\"] = 8214] = \"DOUBLE_VERTICAL_LINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_LOW_LINE\"] = 8215] = \"DOUBLE_LOW_LINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DAGGER\"] = 8224] = \"DAGGER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_DAGGER\"] = 8225] = \"DOUBLE_DAGGER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BULLET\"] = 8226] = \"BULLET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TRIANGULAR_BULLET\"] = 8227] = \"TRIANGULAR_BULLET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ONE_DOT_LEADER\"] = 8228] = \"ONE_DOT_LEADER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TWO_DOT_LEADER\"] = 8229] = \"TWO_DOT_LEADER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HORIZONTAL_ELLIPSIS\"] = 8230] = \"HORIZONTAL_ELLIPSIS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HYPHENATION_POINT\"] = 8231] = \"HYPHENATION_POINT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PER_MILLE_SIGN\"] = 8240] = \"PER_MILLE_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PER_TEN_THOUSAND_SIGN\"] = 8241] = \"PER_TEN_THOUSAND_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRIME\"] = 8242] = \"PRIME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_PRIME\"] = 8243] = \"DOUBLE_PRIME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TRIPLE_PRIME\"] = 8244] = \"TRIPLE_PRIME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_PRIME\"] = 8245] = \"REVERSED_PRIME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_DOUBLE_PRIME\"] = 8246] = \"REVERSED_DOUBLE_PRIME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_TRIPLE_PRIME\"] = 8247] = \"REVERSED_TRIPLE_PRIME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CARET\"] = 8248] = \"CARET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REFERENCE_MARK\"] = 8251] = \"REFERENCE_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_EXCLAMATION_MARK\"] = 8252] = \"DOUBLE_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"INTERROBANG\"] = 8253] = \"INTERROBANG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"OVERLINE\"] = 8254] = \"OVERLINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CARET_INSERTION_POINT\"] = 8257] = \"CARET_INSERTION_POINT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ASTERISM\"] = 8258] = \"ASTERISM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HYPHEN_BULLET\"] = 8259] = \"HYPHEN_BULLET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_QUESTION_MARK\"] = 8263] = \"DOUBLE_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"QUESTION_EXCLAMATION_MARK\"] = 8264] = \"QUESTION_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"EXCLAMATION_QUESTION_MARK\"] = 8265] = \"EXCLAMATION_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIRONIAN_SIGN_ET\"] = 8266] = \"TIRONIAN_SIGN_ET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_PILCROW_SIGN\"] = 8267] = \"REVERSED_PILCROW_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BLACK_LEFTWARDS_BULLET\"] = 8268] = \"BLACK_LEFTWARDS_BULLET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BLACK_RIGHTWARDS_BULLET\"] = 8269] = \"BLACK_RIGHTWARDS_BULLET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LOW_ASTERISK\"] = 8270] = \"LOW_ASTERISK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_SEMICOLON\"] = 8271] = \"REVERSED_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CLOSE_UP\"] = 8272] = \"CLOSE_UP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TWO_ASTERISKS_ALIGNED_VERTICALLY\"] = 8273] = \"TWO_ASTERISKS_ALIGNED_VERTICALLY\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SWUNG_DASH\"] = 8275] = \"SWUNG_DASH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FLOWER_PUNCTUATION_MARK\"] = 8277] = \"FLOWER_PUNCTUATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"THREE_DOT_PUNCTUATION\"] = 8278] = \"THREE_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"QUADRUPLE_PRIME\"] = 8279] = \"QUADRUPLE_PRIME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FOUR_DOT_PUNCTUATION\"] = 8280] = \"FOUR_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FIVE_DOT_PUNCTUATION\"] = 8281] = \"FIVE_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TWO_DOT_PUNCTUATION\"] = 8282] = \"TWO_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FOUR_DOT_MARK\"] = 8283] = \"FOUR_DOT_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOTTED_CROSS\"] = 8284] = \"DOTTED_CROSS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TRICOLON\"] = 8285] = \"TRICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"VERTICAL_FOUR_DOTS\"] = 8286] = \"VERTICAL_FOUR_DOTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COPTIC_OLD_NUBIAN_FULL_STOP\"] = 11513] = \"COPTIC_OLD_NUBIAN_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COPTIC_OLD_NUBIAN_DIRECT_QUESTION_MARK\"] = 11514] = \"COPTIC_OLD_NUBIAN_DIRECT_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COPTIC_OLD_NUBIAN_INDIRECT_QUESTION_MARK\"] = 11515] = \"COPTIC_OLD_NUBIAN_INDIRECT_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COPTIC_OLD_NUBIAN_VERSE_DIVIDER\"] = 11516] = \"COPTIC_OLD_NUBIAN_VERSE_DIVIDER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COPTIC_FULL_STOP\"] = 11518] = \"COPTIC_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"COPTIC_MORPHOLOGICAL_DIVIDER\"] = 11519] = \"COPTIC_MORPHOLOGICAL_DIVIDER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIFINAGH_SEPARATOR_MARK\"] = 11632] = \"TIFINAGH_SEPARATOR_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RIGHT_ANGLE_SUBSTITUTION_MARKER\"] = 11776] = \"RIGHT_ANGLE_SUBSTITUTION_MARKER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RIGHT_ANGLE_DOTTED_SUBSTITUTION_MARKER\"] = 11777] = \"RIGHT_ANGLE_DOTTED_SUBSTITUTION_MARKER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RAISED_INTERPOLATION_MARKER\"] = 11782] = \"RAISED_INTERPOLATION_MARKER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RAISED_DOTTED_INTERPOLATION_MARKER\"] = 11783] = \"RAISED_DOTTED_INTERPOLATION_MARKER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOTTED_TRANSPOSITION_MARKER\"] = 11784] = \"DOTTED_TRANSPOSITION_MARKER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RAISED_SQUARE\"] = 11787] = \"RAISED_SQUARE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"EDITORIAL_CORONIS\"] = 11790] = \"EDITORIAL_CORONIS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PARAGRAPHOS\"] = 11791] = \"PARAGRAPHOS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FORKED_PARAGRAPHOS\"] = 11792] = \"FORKED_PARAGRAPHOS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_FORKED_PARAGRAPHOS\"] = 11793] = \"REVERSED_FORKED_PARAGRAPHOS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HYPODIASTOLE\"] = 11794] = \"HYPODIASTOLE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOTTED_OBELOS\"] = 11795] = \"DOTTED_OBELOS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOWNWARDS_ANCORA\"] = 11796] = \"DOWNWARDS_ANCORA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"UPWARDS_ANCORA\"] = 11797] = \"UPWARDS_ANCORA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOTTED_RIGHT_POINTING_ANGLE\"] = 11798] = \"DOTTED_RIGHT_POINTING_ANGLE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"INVERTED_INTERROBANG\"] = 11800] = \"INVERTED_INTERROBANG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PALM_BRANCH\"] = 11801] = \"PALM_BRANCH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TILDE_WITH_RING_ABOVE\"] = 11803] = \"TILDE_WITH_RING_ABOVE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TILDE_WITH_DOT_ABOVE\"] = 11806] = \"TILDE_WITH_DOT_ABOVE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TILDE_WITH_DOT_BELOW\"] = 11807] = \"TILDE_WITH_DOT_BELOW\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\"] = 11818] = \"TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ONE_DOT_OVER_TWO_DOTS_PUNCTUATION\"] = 11819] = \"ONE_DOT_OVER_TWO_DOTS_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SQUARED_FOUR_DOT_PUNCTUATION\"] = 11820] = \"SQUARED_FOUR_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FIVE_DOT_MARK\"] = 11821] = \"FIVE_DOT_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_QUESTION_MARK\"] = 11822] = \"REVERSED_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RING_POINT\"] = 11824] = \"RING_POINT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"WORD_SEPARATOR_MIDDLE_DOT\"] = 11825] = \"WORD_SEPARATOR_MIDDLE_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TURNED_COMMA\"] = 11826] = \"TURNED_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RAISED_DOT\"] = 11827] = \"RAISED_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"RAISED_COMMA\"] = 11828] = \"RAISED_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TURNED_SEMICOLON\"] = 11829] = \"TURNED_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DAGGER_WITH_LEFT_GUARD\"] = 11830] = \"DAGGER_WITH_LEFT_GUARD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DAGGER_WITH_RIGHT_GUARD\"] = 11831] = \"DAGGER_WITH_RIGHT_GUARD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TURNED_DAGGER\"] = 11832] = \"TURNED_DAGGER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TOP_HALF_SECTION_SIGN\"] = 11833] = \"TOP_HALF_SECTION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"STENOGRAPHIC_FULL_STOP\"] = 11836] = \"STENOGRAPHIC_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"VERTICAL_SIX_DOTS\"] = 11837] = \"VERTICAL_SIX_DOTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"WIGGLY_VERTICAL_LINE\"] = 11838] = \"WIGGLY_VERTICAL_LINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CAPITULUM\"] = 11839] = \"CAPITULUM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REVERSED_COMMA\"] = 11841] = \"REVERSED_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DASH_WITH_LEFT_UPTURN\"] = 11843] = \"DASH_WITH_LEFT_UPTURN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_SUSPENSION_MARK\"] = 11844] = \"DOUBLE_SUSPENSION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"INVERTED_LOW_KAVYKA\"] = 11845] = \"INVERTED_LOW_KAVYKA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"INVERTED_LOW_KAVYKA_WITH_KAVYKA_ABOVE\"] = 11846] = \"INVERTED_LOW_KAVYKA_WITH_KAVYKA_ABOVE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LOW_KAVYKA\"] = 11847] = \"LOW_KAVYKA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LOW_KAVYKA_WITH_DOT\"] = 11848] = \"LOW_KAVYKA_WITH_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_STACKED_COMMA\"] = 11849] = \"DOUBLE_STACKED_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOTTED_SOLIDUS\"] = 11850] = \"DOTTED_SOLIDUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TRIPLE_DAGGER\"] = 11851] = \"TRIPLE_DAGGER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEDIEVAL_COMMA\"] = 11852] = \"MEDIEVAL_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PARAGRAPHUS_MARK\"] = 11853] = \"PARAGRAPHUS_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PUNCTUS_ELEVATUS_MARK\"] = 11854] = \"PUNCTUS_ELEVATUS_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CORNISH_VERSE_DIVIDER\"] = 11855] = \"CORNISH_VERSE_DIVIDER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIRONIAN_SIGN_CAPITAL_ET\"] = 11858] = \"TIRONIAN_SIGN_CAPITAL_ET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"IDEOGRAPHIC_COMMA\"] = 12289] = \"IDEOGRAPHIC_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"IDEOGRAPHIC_FULL_STOP\"] = 12290] = \"IDEOGRAPHIC_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DITTO_MARK\"] = 12291] = \"DITTO_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PART_ALTERNATION_MARK\"] = 12349] = \"PART_ALTERNATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KATAKANA_MIDDLE_DOT\"] = 12539] = \"KATAKANA_MIDDLE_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LISU_PUNCTUATION_COMMA\"] = 42238] = \"LISU_PUNCTUATION_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LISU_PUNCTUATION_FULL_STOP\"] = 42239] = \"LISU_PUNCTUATION_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"VAI_COMMA\"] = 42509] = \"VAI_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"VAI_FULL_STOP\"] = 42510] = \"VAI_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"VAI_QUESTION_MARK\"] = 42511] = \"VAI_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SLAVONIC_ASTERISK\"] = 42611] = \"SLAVONIC_ASTERISK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CYRILLIC_KAVYKA\"] = 42622] = \"CYRILLIC_KAVYKA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BAMUM_NJAEMLI\"] = 42738] = \"BAMUM_NJAEMLI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BAMUM_FULL_STOP\"] = 42739] = \"BAMUM_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BAMUM_COLON\"] = 42740] = \"BAMUM_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BAMUM_COMMA\"] = 42741] = \"BAMUM_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BAMUM_SEMICOLON\"] = 42742] = \"BAMUM_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BAMUM_QUESTION_MARK\"] = 42743] = \"BAMUM_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PHAGS_PA_SINGLE_HEAD_MARK\"] = 43124] = \"PHAGS_PA_SINGLE_HEAD_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PHAGS_PA_DOUBLE_HEAD_MARK\"] = 43125] = \"PHAGS_PA_DOUBLE_HEAD_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PHAGS_PA_MARK_SHAD\"] = 43126] = \"PHAGS_PA_MARK_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PHAGS_PA_MARK_DOUBLE_SHAD\"] = 43127] = \"PHAGS_PA_MARK_DOUBLE_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAURASHTRA_DANDA\"] = 43214] = \"SAURASHTRA_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SAURASHTRA_DOUBLE_DANDA\"] = 43215] = \"SAURASHTRA_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DEVANAGARI_SIGN_PUSHPIKA\"] = 43256] = \"DEVANAGARI_SIGN_PUSHPIKA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DEVANAGARI_GAP_FILLER\"] = 43257] = \"DEVANAGARI_GAP_FILLER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DEVANAGARI_CARET\"] = 43258] = \"DEVANAGARI_CARET\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DEVANAGARI_SIGN_SIDDHAM\"] = 43260] = \"DEVANAGARI_SIGN_SIDDHAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAYAH_LI_SIGN_CWI\"] = 43310] = \"KAYAH_LI_SIGN_CWI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAYAH_LI_SIGN_SHYA\"] = 43311] = \"KAYAH_LI_SIGN_SHYA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"REJANG_SECTION_MARK\"] = 43359] = \"REJANG_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_LEFT_RERENGGAN\"] = 43457] = \"JAVANESE_LEFT_RERENGGAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_RIGHT_RERENGGAN\"] = 43458] = \"JAVANESE_RIGHT_RERENGGAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_ANDAP\"] = 43459] = \"JAVANESE_PADA_ANDAP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_MADYA\"] = 43460] = \"JAVANESE_PADA_MADYA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_LUHUR\"] = 43461] = \"JAVANESE_PADA_LUHUR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_WINDU\"] = 43462] = \"JAVANESE_PADA_WINDU\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_PANGKAT\"] = 43463] = \"JAVANESE_PADA_PANGKAT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_LINGSA\"] = 43464] = \"JAVANESE_PADA_LINGSA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_LUNGSI\"] = 43465] = \"JAVANESE_PADA_LUNGSI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_ADEG\"] = 43466] = \"JAVANESE_PADA_ADEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_ADEG_ADEG\"] = 43467] = \"JAVANESE_PADA_ADEG_ADEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_PISELEH\"] = 43468] = \"JAVANESE_PADA_PISELEH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_TURNED_PADA_PISELEH\"] = 43469] = \"JAVANESE_TURNED_PADA_PISELEH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_TIRTA_TUMETES\"] = 43486] = \"JAVANESE_PADA_TIRTA_TUMETES\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"JAVANESE_PADA_ISEN_ISEN\"] = 43487] = \"JAVANESE_PADA_ISEN_ISEN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAM_PUNCTUATION_SPIRAL\"] = 43612] = \"CHAM_PUNCTUATION_SPIRAL\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAM_PUNCTUATION_DANDA\"] = 43613] = \"CHAM_PUNCTUATION_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAM_PUNCTUATION_DOUBLE_DANDA\"] = 43614] = \"CHAM_PUNCTUATION_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAM_PUNCTUATION_TRIPLE_DANDA\"] = 43615] = \"CHAM_PUNCTUATION_TRIPLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_VIET_SYMBOL_HO_HOI\"] = 43742] = \"TAI_VIET_SYMBOL_HO_HOI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAI_VIET_SYMBOL_KOI_KOI\"] = 43743] = \"TAI_VIET_SYMBOL_KOI_KOI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEETEI_MAYEK_CHEIKHAN\"] = 43760] = \"MEETEI_MAYEK_CHEIKHAN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEETEI_MAYEK_AHANG_KHUDAM\"] = 43761] = \"MEETEI_MAYEK_AHANG_KHUDAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEETEI_MAYEK_CHEIKHEI\"] = 44011] = \"MEETEI_MAYEK_CHEIKHEI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_COMMA\"] = 65040] = \"PRESENTATION_FORM_FOR_VERTICAL_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_COMMA\"] = 65041] = \"PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_FULL_STOP\"] = 65042] = \"PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_COLON\"] = 65043] = \"PRESENTATION_FORM_FOR_VERTICAL_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_SEMICOLON\"] = 65044] = \"PRESENTATION_FORM_FOR_VERTICAL_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_EXCLAMATION_MARK\"] = 65045] = \"PRESENTATION_FORM_FOR_VERTICAL_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_QUESTION_MARK\"] = 65046] = \"PRESENTATION_FORM_FOR_VERTICAL_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_HORIZONTAL_ELLIPSIS\"] = 65049] = \"PRESENTATION_FORM_FOR_VERTICAL_HORIZONTAL_ELLIPSIS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_TWO_DOT_LEADER\"] = 65072] = \"PRESENTATION_FORM_FOR_VERTICAL_TWO_DOT_LEADER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SESAME_DOT\"] = 65093] = \"SESAME_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"WHITE_SESAME_DOT\"] = 65094] = \"WHITE_SESAME_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DASHED_OVERLINE\"] = 65097] = \"DASHED_OVERLINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CENTRELINE_OVERLINE\"] = 65098] = \"CENTRELINE_OVERLINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"WAVY_OVERLINE\"] = 65099] = \"WAVY_OVERLINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOUBLE_WAVY_OVERLINE\"] = 65100] = \"DOUBLE_WAVY_OVERLINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_COMMA\"] = 65104] = \"SMALL_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_IDEOGRAPHIC_COMMA\"] = 65105] = \"SMALL_IDEOGRAPHIC_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_FULL_STOP\"] = 65106] = \"SMALL_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_SEMICOLON\"] = 65108] = \"SMALL_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_COLON\"] = 65109] = \"SMALL_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_QUESTION_MARK\"] = 65110] = \"SMALL_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_EXCLAMATION_MARK\"] = 65111] = \"SMALL_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_NUMBER_SIGN\"] = 65119] = \"SMALL_NUMBER_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_AMPERSAND\"] = 65120] = \"SMALL_AMPERSAND\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_ASTERISK\"] = 65121] = \"SMALL_ASTERISK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_REVERSE_SOLIDUS\"] = 65128] = \"SMALL_REVERSE_SOLIDUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_PERCENT_SIGN\"] = 65130] = \"SMALL_PERCENT_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_COMMERCIAL_AT\"] = 65131] = \"SMALL_COMMERCIAL_AT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_EXCLAMATION_MARK\"] = 65281] = \"FULLWIDTH_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_QUOTATION_MARK\"] = 65282] = \"FULLWIDTH_QUOTATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_NUMBER_SIGN\"] = 65283] = \"FULLWIDTH_NUMBER_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_PERCENT_SIGN\"] = 65285] = \"FULLWIDTH_PERCENT_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_AMPERSAND\"] = 65286] = \"FULLWIDTH_AMPERSAND\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_APOSTROPHE\"] = 65287] = \"FULLWIDTH_APOSTROPHE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_ASTERISK\"] = 65290] = \"FULLWIDTH_ASTERISK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_COMMA\"] = 65292] = \"FULLWIDTH_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_FULL_STOP\"] = 65294] = \"FULLWIDTH_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_SOLIDUS\"] = 65295] = \"FULLWIDTH_SOLIDUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_COLON\"] = 65306] = \"FULLWIDTH_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_SEMICOLON\"] = 65307] = \"FULLWIDTH_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_QUESTION_MARK\"] = 65311] = \"FULLWIDTH_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_COMMERCIAL_AT\"] = 65312] = \"FULLWIDTH_COMMERCIAL_AT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"FULLWIDTH_REVERSE_SOLIDUS\"] = 65340] = \"FULLWIDTH_REVERSE_SOLIDUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HALFWIDTH_IDEOGRAPHIC_FULL_STOP\"] = 65377] = \"HALFWIDTH_IDEOGRAPHIC_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HALFWIDTH_IDEOGRAPHIC_COMMA\"] = 65380] = \"HALFWIDTH_IDEOGRAPHIC_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"HALFWIDTH_KATAKANA_MIDDLE_DOT\"] = 65381] = \"HALFWIDTH_KATAKANA_MIDDLE_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AEGEAN_WORD_SEPARATOR_LINE\"] = 65792] = \"AEGEAN_WORD_SEPARATOR_LINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AEGEAN_WORD_SEPARATOR_DOT\"] = 65793] = \"AEGEAN_WORD_SEPARATOR_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AEGEAN_CHECK_MARK\"] = 65794] = \"AEGEAN_CHECK_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"UGARITIC_WORD_DIVIDER\"] = 66463] = \"UGARITIC_WORD_DIVIDER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"OLD_PERSIAN_WORD_DIVIDER\"] = 66512] = \"OLD_PERSIAN_WORD_DIVIDER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CAUCASIAN_ALBANIAN_CITATION_MARK\"] = 66927] = \"CAUCASIAN_ALBANIAN_CITATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"IMPERIAL_ARAMAIC_SECTION_SIGN\"] = 67671] = \"IMPERIAL_ARAMAIC_SECTION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PHOENICIAN_WORD_SEPARATOR\"] = 67871] = \"PHOENICIAN_WORD_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LYDIAN_TRIANGULAR_MARK\"] = 67903] = \"LYDIAN_TRIANGULAR_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_DOT\"] = 68176] = \"KHAROSHTHI_PUNCTUATION_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_SMALL_CIRCLE\"] = 68177] = \"KHAROSHTHI_PUNCTUATION_SMALL_CIRCLE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_CIRCLE\"] = 68178] = \"KHAROSHTHI_PUNCTUATION_CIRCLE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_CRESCENT_BAR\"] = 68179] = \"KHAROSHTHI_PUNCTUATION_CRESCENT_BAR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_MANGALAM\"] = 68180] = \"KHAROSHTHI_PUNCTUATION_MANGALAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_LOTUS\"] = 68181] = \"KHAROSHTHI_PUNCTUATION_LOTUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_DANDA\"] = 68182] = \"KHAROSHTHI_PUNCTUATION_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_DOUBLE_DANDA\"] = 68183] = \"KHAROSHTHI_PUNCTUATION_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHAROSHTHI_PUNCTUATION_LINES\"] = 68184] = \"KHAROSHTHI_PUNCTUATION_LINES\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"OLD_SOUTH_ARABIAN_NUMERIC_INDICATOR\"] = 68223] = \"OLD_SOUTH_ARABIAN_NUMERIC_INDICATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANICHAEAN_PUNCTUATION_STAR\"] = 68336] = \"MANICHAEAN_PUNCTUATION_STAR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANICHAEAN_PUNCTUATION_FLEURON\"] = 68337] = \"MANICHAEAN_PUNCTUATION_FLEURON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANICHAEAN_PUNCTUATION_DOUBLE_DOT_WITHIN_DOT\"] = 68338] = \"MANICHAEAN_PUNCTUATION_DOUBLE_DOT_WITHIN_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANICHAEAN_PUNCTUATION_DOT_WITHIN_DOT\"] = 68339] = \"MANICHAEAN_PUNCTUATION_DOT_WITHIN_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANICHAEAN_PUNCTUATION_DOT\"] = 68340] = \"MANICHAEAN_PUNCTUATION_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANICHAEAN_PUNCTUATION_TWO_DOTS\"] = 68341] = \"MANICHAEAN_PUNCTUATION_TWO_DOTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MANICHAEAN_PUNCTUATION_LINE_FILLER\"] = 68342] = \"MANICHAEAN_PUNCTUATION_LINE_FILLER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AVESTAN_ABBREVIATION_MARK\"] = 68409] = \"AVESTAN_ABBREVIATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TINY_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\"] = 68410] = \"TINY_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SMALL_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\"] = 68411] = \"SMALL_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LARGE_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\"] = 68412] = \"LARGE_TWO_DOTS_OVER_ONE_DOT_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LARGE_ONE_DOT_OVER_TWO_DOTS_PUNCTUATION\"] = 68413] = \"LARGE_ONE_DOT_OVER_TWO_DOTS_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LARGE_TWO_RINGS_OVER_ONE_RING_PUNCTUATION\"] = 68414] = \"LARGE_TWO_RINGS_OVER_ONE_RING_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"LARGE_ONE_RING_OVER_TWO_RINGS_PUNCTUATION\"] = 68415] = \"LARGE_ONE_RING_OVER_TWO_RINGS_PUNCTUATION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PSALTER_PAHLAVI_SECTION_MARK\"] = 68505] = \"PSALTER_PAHLAVI_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PSALTER_PAHLAVI_TURNED_SECTION_MARK\"] = 68506] = \"PSALTER_PAHLAVI_TURNED_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PSALTER_PAHLAVI_FOUR_DOTS_WITH_CROSS\"] = 68507] = \"PSALTER_PAHLAVI_FOUR_DOTS_WITH_CROSS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PSALTER_PAHLAVI_FOUR_DOTS_WITH_DOT\"] = 68508] = \"PSALTER_PAHLAVI_FOUR_DOTS_WITH_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS\"] = 69461] = \"SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS_WITH_DOTS\"] = 69462] = \"SOGDIAN_PUNCTUATION_TWO_VERTICAL_BARS_WITH_DOTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOGDIAN_PUNCTUATION_CIRCLE_WITH_DOT\"] = 69463] = \"SOGDIAN_PUNCTUATION_CIRCLE_WITH_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOGDIAN_PUNCTUATION_TWO_CIRCLES_WITH_DOTS\"] = 69464] = \"SOGDIAN_PUNCTUATION_TWO_CIRCLES_WITH_DOTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOGDIAN_PUNCTUATION_HALF_CIRCLE_WITH_DOT\"] = 69465] = \"SOGDIAN_PUNCTUATION_HALF_CIRCLE_WITH_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BRAHMI_DANDA\"] = 69703] = \"BRAHMI_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BRAHMI_DOUBLE_DANDA\"] = 69704] = \"BRAHMI_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BRAHMI_PUNCTUATION_DOT\"] = 69705] = \"BRAHMI_PUNCTUATION_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BRAHMI_PUNCTUATION_DOUBLE_DOT\"] = 69706] = \"BRAHMI_PUNCTUATION_DOUBLE_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BRAHMI_PUNCTUATION_LINE\"] = 69707] = \"BRAHMI_PUNCTUATION_LINE\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BRAHMI_PUNCTUATION_CRESCENT_BAR\"] = 69708] = \"BRAHMI_PUNCTUATION_CRESCENT_BAR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BRAHMI_PUNCTUATION_LOTUS\"] = 69709] = \"BRAHMI_PUNCTUATION_LOTUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAITHI_ABBREVIATION_SIGN\"] = 69819] = \"KAITHI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAITHI_ENUMERATION_SIGN\"] = 69820] = \"KAITHI_ENUMERATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAITHI_SECTION_MARK\"] = 69822] = \"KAITHI_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAITHI_DOUBLE_SECTION_MARK\"] = 69823] = \"KAITHI_DOUBLE_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAITHI_DANDA\"] = 69824] = \"KAITHI_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KAITHI_DOUBLE_DANDA\"] = 69825] = \"KAITHI_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAKMA_SECTION_MARK\"] = 69952] = \"CHAKMA_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAKMA_DANDA\"] = 69953] = \"CHAKMA_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAKMA_DOUBLE_DANDA\"] = 69954] = \"CHAKMA_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CHAKMA_QUESTION_MARK\"] = 69955] = \"CHAKMA_QUESTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MAHAJANI_ABBREVIATION_SIGN\"] = 70004] = \"MAHAJANI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MAHAJANI_SECTION_MARK\"] = 70005] = \"MAHAJANI_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_DANDA\"] = 70085] = \"SHARADA_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_DOUBLE_DANDA\"] = 70086] = \"SHARADA_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_ABBREVIATION_SIGN\"] = 70087] = \"SHARADA_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_SEPARATOR\"] = 70088] = \"SHARADA_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_SUTRA_MARK\"] = 70093] = \"SHARADA_SUTRA_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_SIGN_SIDDHAM\"] = 70107] = \"SHARADA_SIGN_SIDDHAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_CONTINUATION_SIGN\"] = 70109] = \"SHARADA_CONTINUATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_SECTION_MARK_1\"] = 70110] = \"SHARADA_SECTION_MARK_1\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SHARADA_SECTION_MARK_2\"] = 70111] = \"SHARADA_SECTION_MARK_2\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHOJKI_DANDA\"] = 70200] = \"KHOJKI_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHOJKI_DOUBLE_DANDA\"] = 70201] = \"KHOJKI_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHOJKI_WORD_SEPARATOR\"] = 70202] = \"KHOJKI_WORD_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHOJKI_SECTION_MARK\"] = 70203] = \"KHOJKI_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHOJKI_DOUBLE_SECTION_MARK\"] = 70204] = \"KHOJKI_DOUBLE_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"KHOJKI_ABBREVIATION_SIGN\"] = 70205] = \"KHOJKI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MULTANI_SECTION_MARK\"] = 70313] = \"MULTANI_SECTION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_DANDA\"] = 70731] = \"NEWA_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_DOUBLE_DANDA\"] = 70732] = \"NEWA_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_COMMA\"] = 70733] = \"NEWA_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_GAP_FILLER\"] = 70734] = \"NEWA_GAP_FILLER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_ABBREVIATION_SIGN\"] = 70735] = \"NEWA_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_DOUBLE_COMMA\"] = 70746] = \"NEWA_DOUBLE_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_PLACEHOLDER_MARK\"] = 70747] = \"NEWA_PLACEHOLDER_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NEWA_INSERTION_SIGN\"] = 70749] = \"NEWA_INSERTION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TIRHUTA_ABBREVIATION_SIGN\"] = 70854] = \"TIRHUTA_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SIGN_SIDDHAM\"] = 71105] = \"SIDDHAM_SIGN_SIDDHAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_DANDA\"] = 71106] = \"SIDDHAM_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_DOUBLE_DANDA\"] = 71107] = \"SIDDHAM_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SEPARATOR_DOT\"] = 71108] = \"SIDDHAM_SEPARATOR_DOT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SEPARATOR_BAR\"] = 71109] = \"SIDDHAM_SEPARATOR_BAR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_REPETITION_MARK_1\"] = 71110] = \"SIDDHAM_REPETITION_MARK_1\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_REPETITION_MARK_2\"] = 71111] = \"SIDDHAM_REPETITION_MARK_2\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_REPETITION_MARK_3\"] = 71112] = \"SIDDHAM_REPETITION_MARK_3\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_END_OF_TEXT_MARK\"] = 71113] = \"SIDDHAM_END_OF_TEXT_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_U_SHAPED_ORNAMENTS\"] = 71114] = \"SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_U_SHAPED_ORNAMENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_DOTTED_CRESCENTS\"] = 71115] = \"SIDDHAM_SECTION_MARK_WITH_TRIDENT_AND_DOTTED_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_CRESCENTS\"] = 71116] = \"SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_DOUBLE_CRESCENTS\"] = 71117] = \"SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_DOUBLE_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_TRIPLE_CRESCENTS\"] = 71118] = \"SIDDHAM_SECTION_MARK_WITH_RAYS_AND_DOTTED_TRIPLE_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_DOUBLE_RING\"] = 71119] = \"SIDDHAM_SECTION_MARK_DOUBLE_RING\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_DOUBLE_RING_WITH_RAYS\"] = 71120] = \"SIDDHAM_SECTION_MARK_DOUBLE_RING_WITH_RAYS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_DOUBLE_CRESCENTS\"] = 71121] = \"SIDDHAM_SECTION_MARK_WITH_DOUBLE_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_TRIPLE_CRESCENTS\"] = 71122] = \"SIDDHAM_SECTION_MARK_WITH_TRIPLE_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_QUADRUPLE_CRESCENTS\"] = 71123] = \"SIDDHAM_SECTION_MARK_WITH_QUADRUPLE_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_SEPTUPLE_CRESCENTS\"] = 71124] = \"SIDDHAM_SECTION_MARK_WITH_SEPTUPLE_CRESCENTS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_RAYS\"] = 71125] = \"SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_RAYS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_TWO_ENCLOSURES\"] = 71126] = \"SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_TWO_ENCLOSURES\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_FOUR_ENCLOSURES\"] = 71127] = \"SIDDHAM_SECTION_MARK_WITH_CIRCLES_AND_FOUR_ENCLOSURES\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MODI_DANDA\"] = 71233] = \"MODI_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MODI_DOUBLE_DANDA\"] = 71234] = \"MODI_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MODI_ABBREVIATION_SIGN\"] = 71235] = \"MODI_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_BIRGA_WITH_ORNAMENT\"] = 71264] = \"MONGOLIAN_BIRGA_WITH_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_ROTATED_BIRGA\"] = 71265] = \"MONGOLIAN_ROTATED_BIRGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_DOUBLE_BIRGA_WITH_ORNAMENT\"] = 71266] = \"MONGOLIAN_DOUBLE_BIRGA_WITH_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_TRIPLE_BIRGA_WITH_ORNAMENT\"] = 71267] = \"MONGOLIAN_TRIPLE_BIRGA_WITH_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_BIRGA_WITH_DOUBLE_ORNAMENT\"] = 71268] = \"MONGOLIAN_BIRGA_WITH_DOUBLE_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_ROTATED_BIRGA_WITH_ORNAMENT\"] = 71269] = \"MONGOLIAN_ROTATED_BIRGA_WITH_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_ROTATED_BIRGA_WITH_DOUBLE_ORNAMENT\"] = 71270] = \"MONGOLIAN_ROTATED_BIRGA_WITH_DOUBLE_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_INVERTED_BIRGA\"] = 71271] = \"MONGOLIAN_INVERTED_BIRGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_INVERTED_BIRGA_WITH_DOUBLE_ORNAMENT\"] = 71272] = \"MONGOLIAN_INVERTED_BIRGA_WITH_DOUBLE_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_SWIRL_BIRGA\"] = 71273] = \"MONGOLIAN_SWIRL_BIRGA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_SWIRL_BIRGA_WITH_ORNAMENT\"] = 71274] = \"MONGOLIAN_SWIRL_BIRGA_WITH_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT\"] = 71275] = \"MONGOLIAN_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MONGOLIAN_TURNED_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT\"] = 71276] = \"MONGOLIAN_TURNED_SWIRL_BIRGA_WITH_DOUBLE_ORNAMENT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AHOM_SIGN_SMALL_SECTION\"] = 71484] = \"AHOM_SIGN_SMALL_SECTION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AHOM_SIGN_SECTION\"] = 71485] = \"AHOM_SIGN_SECTION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"AHOM_SIGN_RULAI\"] = 71486] = \"AHOM_SIGN_RULAI\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DOGRA_ABBREVIATION_SIGN\"] = 71739] = \"DOGRA_ABBREVIATION_SIGN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DIVES_AKURU_DOUBLE_DANDA\"] = 72004] = \"DIVES_AKURU_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DIVES_AKURU_GAP_FILLER\"] = 72005] = \"DIVES_AKURU_GAP_FILLER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DIVES_AKURU_END_OF_TEXT_MARK\"] = 72006] = \"DIVES_AKURU_END_OF_TEXT_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"NANDINAGARI_SIGN_SIDDHAM\"] = 72162] = \"NANDINAGARI_SIGN_SIDDHAM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_INITIAL_HEAD_MARK\"] = 72255] = \"ZANABAZAR_SQUARE_INITIAL_HEAD_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_CLOSING_HEAD_MARK\"] = 72256] = \"ZANABAZAR_SQUARE_CLOSING_HEAD_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_MARK_TSHEG\"] = 72257] = \"ZANABAZAR_SQUARE_MARK_TSHEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_MARK_SHAD\"] = 72258] = \"ZANABAZAR_SQUARE_MARK_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_MARK_DOUBLE_SHAD\"] = 72259] = \"ZANABAZAR_SQUARE_MARK_DOUBLE_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_MARK_LONG_TSHEG\"] = 72260] = \"ZANABAZAR_SQUARE_MARK_LONG_TSHEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_INITIAL_DOUBLE_LINED_HEAD_MARK\"] = 72261] = \"ZANABAZAR_SQUARE_INITIAL_DOUBLE_LINED_HEAD_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ZANABAZAR_SQUARE_CLOSING_DOUBLE_LINED_HEAD_MARK\"] = 72262] = \"ZANABAZAR_SQUARE_CLOSING_DOUBLE_LINED_HEAD_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_MARK_TSHEG\"] = 72346] = \"SOYOMBO_MARK_TSHEG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_MARK_SHAD\"] = 72347] = \"SOYOMBO_MARK_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_MARK_DOUBLE_SHAD\"] = 72348] = \"SOYOMBO_MARK_DOUBLE_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_TRIPLE_FLAME\"] = 72350] = \"SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_TRIPLE_FLAME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_FLAME\"] = 72351] = \"SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN_AND_FLAME\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN\"] = 72352] = \"SOYOMBO_HEAD_MARK_WITH_MOON_AND_SUN\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_TERMINAL_MARK_1\"] = 72353] = \"SOYOMBO_TERMINAL_MARK_1\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SOYOMBO_TERMINAL_MARK_2\"] = 72354] = \"SOYOMBO_TERMINAL_MARK_2\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BHAIKSUKI_DANDA\"] = 72769] = \"BHAIKSUKI_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BHAIKSUKI_DOUBLE_DANDA\"] = 72770] = \"BHAIKSUKI_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BHAIKSUKI_WORD_SEPARATOR\"] = 72771] = \"BHAIKSUKI_WORD_SEPARATOR\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BHAIKSUKI_GAP_FILLER_1\"] = 72772] = \"BHAIKSUKI_GAP_FILLER_1\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BHAIKSUKI_GAP_FILLER_2\"] = 72773] = \"BHAIKSUKI_GAP_FILLER_2\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MARCHEN_HEAD_MARK\"] = 72816] = \"MARCHEN_HEAD_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MARCHEN_MARK_SHAD\"] = 72817] = \"MARCHEN_MARK_SHAD\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MAKASAR_PASSIMBANG\"] = 73463] = \"MAKASAR_PASSIMBANG\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MAKASAR_END_OF_SECTION\"] = 73464] = \"MAKASAR_END_OF_SECTION\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"TAMIL_PUNCTUATION_END_OF_TEXT\"] = 73727] = \"TAMIL_PUNCTUATION_END_OF_TEXT\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CUNEIFORM_PUNCTUATION_SIGN_OLD_ASSYRIAN_WORD_DIVIDER\"] = 74864] = \"CUNEIFORM_PUNCTUATION_SIGN_OLD_ASSYRIAN_WORD_DIVIDER\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CUNEIFORM_PUNCTUATION_SIGN_VERTICAL_COLON\"] = 74865] = \"CUNEIFORM_PUNCTUATION_SIGN_VERTICAL_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_COLON\"] = 74866] = \"CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_TRICOLON\"] = 74867] = \"CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_TRICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_QUADCOLON\"] = 74868] = \"CUNEIFORM_PUNCTUATION_SIGN_DIAGONAL_QUADCOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MRO_DANDA\"] = 92782] = \"MRO_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MRO_DOUBLE_DANDA\"] = 92783] = \"MRO_DOUBLE_DANDA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"BASSA_VAH_FULL_STOP\"] = 92917] = \"BASSA_VAH_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PAHAWH_HMONG_SIGN_VOS_THOM\"] = 92983] = \"PAHAWH_HMONG_SIGN_VOS_THOM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PAHAWH_HMONG_SIGN_VOS_TSHAB_CEEB\"] = 92984] = \"PAHAWH_HMONG_SIGN_VOS_TSHAB_CEEB\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PAHAWH_HMONG_SIGN_CIM_CHEEM\"] = 92985] = \"PAHAWH_HMONG_SIGN_CIM_CHEEM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PAHAWH_HMONG_SIGN_VOS_THIAB\"] = 92986] = \"PAHAWH_HMONG_SIGN_VOS_THIAB\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PAHAWH_HMONG_SIGN_VOS_FEEM\"] = 92987] = \"PAHAWH_HMONG_SIGN_VOS_FEEM\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"PAHAWH_HMONG_SIGN_XAUS\"] = 92996] = \"PAHAWH_HMONG_SIGN_XAUS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEDEFAIDRIN_COMMA\"] = 93847] = \"MEDEFAIDRIN_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEDEFAIDRIN_FULL_STOP\"] = 93848] = \"MEDEFAIDRIN_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEDEFAIDRIN_SYMBOL_AIVA\"] = 93849] = \"MEDEFAIDRIN_SYMBOL_AIVA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"MEDEFAIDRIN_EXCLAMATION_OH\"] = 93850] = \"MEDEFAIDRIN_EXCLAMATION_OH\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"OLD_CHINESE_HOOK_MARK\"] = 94178] = \"OLD_CHINESE_HOOK_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"DUPLOYAN_PUNCTUATION_CHINOOK_FULL_STOP\"] = 113823] = \"DUPLOYAN_PUNCTUATION_CHINOOK_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIGNWRITING_COMMA\"] = 121479] = \"SIGNWRITING_COMMA\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIGNWRITING_FULL_STOP\"] = 121480] = \"SIGNWRITING_FULL_STOP\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIGNWRITING_SEMICOLON\"] = 121481] = \"SIGNWRITING_SEMICOLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIGNWRITING_COLON\"] = 121482] = \"SIGNWRITING_COLON\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"SIGNWRITING_PARENTHESIS\"] = 121483] = \"SIGNWRITING_PARENTHESIS\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ADLAM_INITIAL_EXCLAMATION_MARK\"] = 125278] = \"ADLAM_INITIAL_EXCLAMATION_MARK\";\n    UnicodePoCodePoint[UnicodePoCodePoint[\"ADLAM_INITIAL_QUESTION_MARK\"] = 125279] = \"ADLAM_INITIAL_QUESTION_MARK\";\n})(exports.UnicodePoCodePoint || (exports.UnicodePoCodePoint = {}));\n\nexports.UnicodePsCodePoint = void 0;\n(function (UnicodePsCodePoint) {\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_PARENTHESIS\"] = 40] = \"LEFT_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_SQUARE_BRACKET\"] = 91] = \"LEFT_SQUARE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_CURLY_BRACKET\"] = 123] = \"LEFT_CURLY_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"TIBETAN_MARK_GUG_RTAGS_GYON\"] = 3898] = \"TIBETAN_MARK_GUG_RTAGS_GYON\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"TIBETAN_MARK_ANG_KHANG_GYON\"] = 3900] = \"TIBETAN_MARK_ANG_KHANG_GYON\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"OGHAM_FEATHER_MARK\"] = 5787] = \"OGHAM_FEATHER_MARK\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"SINGLE_LOW_9_QUOTATION_MARK\"] = 8218] = \"SINGLE_LOW_9_QUOTATION_MARK\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"DOUBLE_LOW_9_QUOTATION_MARK\"] = 8222] = \"DOUBLE_LOW_9_QUOTATION_MARK\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_SQUARE_BRACKET_WITH_QUILL\"] = 8261] = \"LEFT_SQUARE_BRACKET_WITH_QUILL\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"SUPERSCRIPT_LEFT_PARENTHESIS\"] = 8317] = \"SUPERSCRIPT_LEFT_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"SUBSCRIPT_LEFT_PARENTHESIS\"] = 8333] = \"SUBSCRIPT_LEFT_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_CEILING\"] = 8968] = \"LEFT_CEILING\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_FLOOR\"] = 8970] = \"LEFT_FLOOR\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_POINTING_ANGLE_BRACKET\"] = 9001] = \"LEFT_POINTING_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MEDIUM_LEFT_PARENTHESIS_ORNAMENT\"] = 10088] = \"MEDIUM_LEFT_PARENTHESIS_ORNAMENT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MEDIUM_FLATTENED_LEFT_PARENTHESIS_ORNAMENT\"] = 10090] = \"MEDIUM_FLATTENED_LEFT_PARENTHESIS_ORNAMENT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MEDIUM_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT\"] = 10092] = \"MEDIUM_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"HEAVY_LEFT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT\"] = 10094] = \"HEAVY_LEFT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"HEAVY_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT\"] = 10096] = \"HEAVY_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LIGHT_LEFT_TORTOISE_SHELL_BRACKET_ORNAMENT\"] = 10098] = \"LIGHT_LEFT_TORTOISE_SHELL_BRACKET_ORNAMENT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MEDIUM_LEFT_CURLY_BRACKET_ORNAMENT\"] = 10100] = \"MEDIUM_LEFT_CURLY_BRACKET_ORNAMENT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_S_SHAPED_BAG_DELIMITER\"] = 10181] = \"LEFT_S_SHAPED_BAG_DELIMITER\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MATHEMATICAL_LEFT_WHITE_SQUARE_BRACKET\"] = 10214] = \"MATHEMATICAL_LEFT_WHITE_SQUARE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MATHEMATICAL_LEFT_ANGLE_BRACKET\"] = 10216] = \"MATHEMATICAL_LEFT_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MATHEMATICAL_LEFT_DOUBLE_ANGLE_BRACKET\"] = 10218] = \"MATHEMATICAL_LEFT_DOUBLE_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MATHEMATICAL_LEFT_WHITE_TORTOISE_SHELL_BRACKET\"] = 10220] = \"MATHEMATICAL_LEFT_WHITE_TORTOISE_SHELL_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"MATHEMATICAL_LEFT_FLATTENED_PARENTHESIS\"] = 10222] = \"MATHEMATICAL_LEFT_FLATTENED_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_WHITE_CURLY_BRACKET\"] = 10627] = \"LEFT_WHITE_CURLY_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_WHITE_PARENTHESIS\"] = 10629] = \"LEFT_WHITE_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"Z_NOTATION_LEFT_IMAGE_BRACKET\"] = 10631] = \"Z_NOTATION_LEFT_IMAGE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"Z_NOTATION_LEFT_BINDING_BRACKET\"] = 10633] = \"Z_NOTATION_LEFT_BINDING_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_SQUARE_BRACKET_WITH_UNDERBAR\"] = 10635] = \"LEFT_SQUARE_BRACKET_WITH_UNDERBAR\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER\"] = 10637] = \"LEFT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER\"] = 10639] = \"LEFT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_ANGLE_BRACKET_WITH_DOT\"] = 10641] = \"LEFT_ANGLE_BRACKET_WITH_DOT\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_ARC_LESS_THAN_BRACKET\"] = 10643] = \"LEFT_ARC_LESS_THAN_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"DOUBLE_LEFT_ARC_GREATER_THAN_BRACKET\"] = 10645] = \"DOUBLE_LEFT_ARC_GREATER_THAN_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_BLACK_TORTOISE_SHELL_BRACKET\"] = 10647] = \"LEFT_BLACK_TORTOISE_SHELL_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_WIGGLY_FENCE\"] = 10712] = \"LEFT_WIGGLY_FENCE\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_DOUBLE_WIGGLY_FENCE\"] = 10714] = \"LEFT_DOUBLE_WIGGLY_FENCE\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_POINTING_CURVED_ANGLE_BRACKET\"] = 10748] = \"LEFT_POINTING_CURVED_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"TOP_LEFT_HALF_BRACKET\"] = 11810] = \"TOP_LEFT_HALF_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"BOTTOM_LEFT_HALF_BRACKET\"] = 11812] = \"BOTTOM_LEFT_HALF_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_SIDEWAYS_U_BRACKET\"] = 11814] = \"LEFT_SIDEWAYS_U_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_DOUBLE_PARENTHESIS\"] = 11816] = \"LEFT_DOUBLE_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"DOUBLE_LOW_REVERSED_9_QUOTATION_MARK\"] = 11842] = \"DOUBLE_LOW_REVERSED_9_QUOTATION_MARK\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_ANGLE_BRACKET\"] = 12296] = \"LEFT_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_DOUBLE_ANGLE_BRACKET\"] = 12298] = \"LEFT_DOUBLE_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_CORNER_BRACKET\"] = 12300] = \"LEFT_CORNER_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_WHITE_CORNER_BRACKET\"] = 12302] = \"LEFT_WHITE_CORNER_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_BLACK_LENTICULAR_BRACKET\"] = 12304] = \"LEFT_BLACK_LENTICULAR_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_TORTOISE_SHELL_BRACKET\"] = 12308] = \"LEFT_TORTOISE_SHELL_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_WHITE_LENTICULAR_BRACKET\"] = 12310] = \"LEFT_WHITE_LENTICULAR_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_WHITE_TORTOISE_SHELL_BRACKET\"] = 12312] = \"LEFT_WHITE_TORTOISE_SHELL_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"LEFT_WHITE_SQUARE_BRACKET\"] = 12314] = \"LEFT_WHITE_SQUARE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"REVERSED_DOUBLE_PRIME_QUOTATION_MARK\"] = 12317] = \"REVERSED_DOUBLE_PRIME_QUOTATION_MARK\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"ORNATE_RIGHT_PARENTHESIS\"] = 64831] = \"ORNATE_RIGHT_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_LENTICULAR_BRACKET\"] = 65047] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_LENTICULAR_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_PARENTHESIS\"] = 65077] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_CURLY_BRACKET\"] = 65079] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_CURLY_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_TORTOISE_SHELL_BRACKET\"] = 65081] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_TORTOISE_SHELL_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_BLACK_LENTICULAR_BRACKET\"] = 65083] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_BLACK_LENTICULAR_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_DOUBLE_ANGLE_BRACKET\"] = 65085] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_DOUBLE_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_ANGLE_BRACKET\"] = 65087] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_ANGLE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_CORNER_BRACKET\"] = 65089] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_CORNER_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_CORNER_BRACKET\"] = 65091] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_CORNER_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"PRESENTATION_FORM_FOR_VERTICAL_LEFT_SQUARE_BRACKET\"] = 65095] = \"PRESENTATION_FORM_FOR_VERTICAL_LEFT_SQUARE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"SMALL_LEFT_PARENTHESIS\"] = 65113] = \"SMALL_LEFT_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"SMALL_LEFT_CURLY_BRACKET\"] = 65115] = \"SMALL_LEFT_CURLY_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"SMALL_LEFT_TORTOISE_SHELL_BRACKET\"] = 65117] = \"SMALL_LEFT_TORTOISE_SHELL_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"FULLWIDTH_LEFT_PARENTHESIS\"] = 65288] = \"FULLWIDTH_LEFT_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"FULLWIDTH_LEFT_SQUARE_BRACKET\"] = 65339] = \"FULLWIDTH_LEFT_SQUARE_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"FULLWIDTH_LEFT_CURLY_BRACKET\"] = 65371] = \"FULLWIDTH_LEFT_CURLY_BRACKET\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"FULLWIDTH_LEFT_WHITE_PARENTHESIS\"] = 65375] = \"FULLWIDTH_LEFT_WHITE_PARENTHESIS\";\n    UnicodePsCodePoint[UnicodePsCodePoint[\"HALFWIDTH_LEFT_CORNER_BRACKET\"] = 65378] = \"HALFWIDTH_LEFT_CORNER_BRACKET\";\n})(exports.UnicodePsCodePoint || (exports.UnicodePsCodePoint = {}));\n\nexports.UnicodeZsCodePoint = void 0;\n(function (UnicodeZsCodePoint) {\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"SPACE\"] = 32] = \"SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"NO_BREAK_SPACE\"] = 160] = \"NO_BREAK_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"OGHAM_SPACE_MARK\"] = 5760] = \"OGHAM_SPACE_MARK\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"EN_QUAD\"] = 8192] = \"EN_QUAD\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"EM_QUAD\"] = 8193] = \"EM_QUAD\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"EN_SPACE\"] = 8194] = \"EN_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"EM_SPACE\"] = 8195] = \"EM_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"THREE_PER_EM_SPACE\"] = 8196] = \"THREE_PER_EM_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"FOUR_PER_EM_SPACE\"] = 8197] = \"FOUR_PER_EM_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"SIX_PER_EM_SPACE\"] = 8198] = \"SIX_PER_EM_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"FIGURE_SPACE\"] = 8199] = \"FIGURE_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"PUNCTUATION_SPACE\"] = 8200] = \"PUNCTUATION_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"THIN_SPACE\"] = 8201] = \"THIN_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"HAIR_SPACE\"] = 8202] = \"HAIR_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"NARROW_NO_BREAK_SPACE\"] = 8239] = \"NARROW_NO_BREAK_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"MEDIUM_MATHEMATICAL_SPACE\"] = 8287] = \"MEDIUM_MATHEMATICAL_SPACE\";\n    UnicodeZsCodePoint[UnicodeZsCodePoint[\"IDEOGRAPHIC_SPACE\"] = 12288] = \"IDEOGRAPHIC_SPACE\";\n})(exports.UnicodeZsCodePoint || (exports.UnicodeZsCodePoint = {}));\n\nexports.VirtualCodePoint = void 0;\n(function (VirtualCodePoint) {\n    VirtualCodePoint[VirtualCodePoint[\"LINE_END\"] = -1] = \"LINE_END\";\n    VirtualCodePoint[VirtualCodePoint[\"SPACE\"] = -2] = \"SPACE\";\n})(exports.VirtualCodePoint || (exports.VirtualCodePoint = {}));\n\nfunction createCodePointSearcher(codePoints) {\n    const orderedCodePoints = [...new Set(codePoints)].sort((x, y) => x - y);\n    const size = orderedCodePoints.length;\n    if (size < 8) {\n        return [\n            (codePoint) => {\n                for (let i = 0; i < orderedCodePoints.length; ++i) {\n                    if (codePoint === orderedCodePoints[i])\n                        return true;\n                }\n                return false;\n            },\n            [...orderedCodePoints],\n        ];\n    }\n    const orderedRangeCodePoints = [];\n    for (let i = 0, j; i < size; i += j) {\n        const c = orderedCodePoints[i];\n        for (j = 1; i + j < size; ++j) {\n            if (orderedCodePoints[i + j] > c + j)\n                break;\n        }\n        orderedRangeCodePoints.push(c, c + j);\n    }\n    if (orderedRangeCodePoints.length * 1.5 < size) {\n        const rangeSize = orderedRangeCodePoints.length;\n        if (rangeSize < 8) {\n            return [\n                (codePoint) => {\n                    for (let i = 0; i < rangeSize; i += 2) {\n                        const lft = orderedRangeCodePoints[i];\n                        const rht = orderedRangeCodePoints[i + 1];\n                        if (lft <= codePoint && codePoint < rht)\n                            return true;\n                    }\n                    return false;\n                },\n                orderedCodePoints,\n            ];\n        }\n        return [\n            (codePoint) => {\n                let lft = 0, rht = rangeSize;\n                while (lft < rht) {\n                    const mid = (lft + rht) >>> 1;\n                    if (codePoint < orderedRangeCodePoints[mid])\n                        rht = mid;\n                    else\n                        lft = mid + 1;\n                }\n                return Boolean(rht & 1);\n            },\n            orderedCodePoints,\n        ];\n    }\n    return [\n        (codePoint) => {\n            let lft = 0, rht = size;\n            while (lft < rht) {\n                const mid = (lft + rht) >>> 1;\n                if (codePoint < orderedCodePoints[mid])\n                    rht = mid;\n                else\n                    lft = mid + 1;\n            }\n            if (rht <= 0)\n                return false;\n            return orderedCodePoints[rht - 1] === codePoint;\n        },\n        [...orderedCodePoints],\n    ];\n}\nfunction collectCodePointsFromEnum(_enum) {\n    return Object.values(_enum).filter((v) => typeof v === 'number');\n}\n\nconst [isAsciiWhitespaceCharacter, asciiWhitespaceCharacters] = createCodePointSearcher([\n    exports.AsciiCodePoint.HT,\n    exports.AsciiCodePoint.LF,\n    exports.AsciiCodePoint.VT,\n    exports.AsciiCodePoint.FF,\n    exports.AsciiCodePoint.CR,\n    exports.AsciiCodePoint.SPACE,\n]);\nconst [isAsciiPunctuationCharacter, asciiPunctuationCharacters] = createCodePointSearcher([\n    exports.AsciiCodePoint.EXCLAMATION_MARK,\n    exports.AsciiCodePoint.DOUBLE_QUOTE,\n    exports.AsciiCodePoint.NUMBER_SIGN,\n    exports.AsciiCodePoint.DOLLAR_SIGN,\n    exports.AsciiCodePoint.PERCENT_SIGN,\n    exports.AsciiCodePoint.AMPERSAND,\n    exports.AsciiCodePoint.SINGLE_QUOTE,\n    exports.AsciiCodePoint.OPEN_PARENTHESIS,\n    exports.AsciiCodePoint.CLOSE_PARENTHESIS,\n    exports.AsciiCodePoint.ASTERISK,\n    exports.AsciiCodePoint.PLUS_SIGN,\n    exports.AsciiCodePoint.COMMA,\n    exports.AsciiCodePoint.MINUS_SIGN,\n    exports.AsciiCodePoint.DOT,\n    exports.AsciiCodePoint.SLASH,\n    exports.AsciiCodePoint.COLON,\n    exports.AsciiCodePoint.SEMICOLON,\n    exports.AsciiCodePoint.OPEN_ANGLE,\n    exports.AsciiCodePoint.EQUALS_SIGN,\n    exports.AsciiCodePoint.CLOSE_ANGLE,\n    exports.AsciiCodePoint.QUESTION_MARK,\n    exports.AsciiCodePoint.AT_SIGN,\n    exports.AsciiCodePoint.OPEN_BRACKET,\n    exports.AsciiCodePoint.BACKSLASH,\n    exports.AsciiCodePoint.CLOSE_BRACKET,\n    exports.AsciiCodePoint.CARET,\n    exports.AsciiCodePoint.UNDERSCORE,\n    exports.AsciiCodePoint.BACKTICK,\n    exports.AsciiCodePoint.OPEN_BRACE,\n    exports.AsciiCodePoint.VERTICAL_SLASH,\n    exports.AsciiCodePoint.CLOSE_BRACE,\n    exports.AsciiCodePoint.TILDE,\n]);\nconst isAsciiDigitCharacter = (codePoint) => codePoint >= exports.AsciiCodePoint.DIGIT0 && codePoint <= exports.AsciiCodePoint.DIGIT9;\nconst isAsciiLowerLetter = (codePoint) => codePoint >= exports.AsciiCodePoint.LOWERCASE_A && codePoint <= exports.AsciiCodePoint.LOWERCASE_Z;\nconst isAsciiUpperLetter = (codePoint) => codePoint >= exports.AsciiCodePoint.UPPERCASE_A && codePoint <= exports.AsciiCodePoint.UPPERCASE_Z;\nconst isAsciiLetter = (codePoint) => isAsciiLowerLetter(codePoint) || isAsciiUpperLetter(codePoint);\nconst isAlphanumeric = (codePoint) => isAsciiLowerLetter(codePoint) || isAsciiUpperLetter(codePoint) || isAsciiDigitCharacter(codePoint);\nconst isAsciiCharacter = (codePoint) => codePoint >= exports.AsciiCodePoint.NUL && codePoint <= exports.AsciiCodePoint.DELETE;\nconst [isAsciiControlCharacter, asciiControlCharacters] = createCodePointSearcher([\n    exports.AsciiCodePoint.NUL,\n    exports.AsciiCodePoint.SOH,\n    exports.AsciiCodePoint.STX,\n    exports.AsciiCodePoint.ETX,\n    exports.AsciiCodePoint.EOT,\n    exports.AsciiCodePoint.ENQ,\n    exports.AsciiCodePoint.ACK,\n    exports.AsciiCodePoint.BEL,\n    exports.AsciiCodePoint.BS,\n    exports.AsciiCodePoint.HT,\n    exports.AsciiCodePoint.LF,\n    exports.AsciiCodePoint.VT,\n    exports.AsciiCodePoint.FF,\n    exports.AsciiCodePoint.CR,\n    exports.AsciiCodePoint.SO,\n    exports.AsciiCodePoint.SI,\n    exports.AsciiCodePoint.DLE,\n    exports.AsciiCodePoint.DC1,\n    exports.AsciiCodePoint.DC2,\n    exports.AsciiCodePoint.DC3,\n    exports.AsciiCodePoint.DC4,\n    exports.AsciiCodePoint.NAK,\n    exports.AsciiCodePoint.SYN,\n    exports.AsciiCodePoint.ETB,\n    exports.AsciiCodePoint.CAN,\n    exports.AsciiCodePoint.EM,\n    exports.AsciiCodePoint.SUB,\n    exports.AsciiCodePoint.ESC,\n    exports.AsciiCodePoint.FS,\n    exports.AsciiCodePoint.GS,\n    exports.AsciiCodePoint.RS,\n    exports.AsciiCodePoint.US,\n    exports.AsciiCodePoint.DELETE,\n]);\n\nconst [isWhitespaceCharacter, whitespaceCharacters] = createCodePointSearcher([\n    exports.AsciiCodePoint.VT,\n    exports.AsciiCodePoint.FF,\n    exports.AsciiCodePoint.SPACE,\n    exports.VirtualCodePoint.SPACE,\n    exports.VirtualCodePoint.LINE_END,\n]);\nconst spaceCharacters = [exports.AsciiCodePoint.SPACE, exports.VirtualCodePoint.SPACE];\nconst isSpaceCharacter = (codePoint) => {\n    return codePoint === exports.AsciiCodePoint.SPACE || codePoint === exports.VirtualCodePoint.SPACE;\n};\nconst isLineEnding = (codePoint) => {\n    return codePoint === exports.VirtualCodePoint.LINE_END;\n};\nconst [isPunctuationCharacter, punctuationCharacters] = createCodePointSearcher([\n    ...asciiPunctuationCharacters,\n    ...collectCodePointsFromEnum(exports.UnicodePcCodePoint),\n    ...collectCodePointsFromEnum(exports.UnicodePdCodePoint),\n    ...collectCodePointsFromEnum(exports.UnicodePeCodePoint),\n    ...collectCodePointsFromEnum(exports.UnicodePfCodePoint),\n    ...collectCodePointsFromEnum(exports.UnicodePiCodePoint),\n    ...collectCodePointsFromEnum(exports.UnicodePoCodePoint),\n    ...collectCodePointsFromEnum(exports.UnicodePsCodePoint),\n]);\nconst controlCharacters = asciiControlCharacters;\nconst isControlCharacter = isAsciiControlCharacter;\nconst isSpaceLike = (c) => isSpaceCharacter(c) || isLineEnding(c);\n\nconst [isUnicodeWhitespaceCharacter, unicodeWhitespaceCharacters] = createCodePointSearcher([\n    exports.AsciiCodePoint.HT,\n    exports.AsciiCodePoint.LF,\n    exports.AsciiCodePoint.FF,\n    exports.AsciiCodePoint.CR,\n    exports.VirtualCodePoint.SPACE,\n    exports.VirtualCodePoint.LINE_END,\n    ...collectCodePointsFromEnum(exports.UnicodeZsCodePoint),\n]);\n\nvar UnicodeCodePoint;\n(function (UnicodeCodePoint) {\n    UnicodeCodePoint[UnicodeCodePoint[\"REPLACEMENT_CHARACTER\"] = 65533] = \"REPLACEMENT_CHARACTER\";\n})(UnicodeCodePoint || (UnicodeCodePoint = {}));\n\nfunction createEntityReferenceTrie() {\n    const upperBound = (nodes, key) => {\n        if (nodes.length <= 4) {\n            for (let i = 0; i < nodes.length; ++i) {\n                if (nodes[i].key >= key)\n                    return i;\n            }\n            return nodes.length;\n        }\n        let lft = 0, rht = nodes.length;\n        while (lft < rht) {\n            const mid = (lft + rht) >>> 1;\n            const o = nodes[mid];\n            if (o.key < key)\n                lft = mid + 1;\n            else\n                rht = mid;\n        }\n        return lft;\n    };\n    const root = { key: 0, children: [] };\n    const insert = (keys, value) => {\n        let u = root;\n        for (const key of keys) {\n            const index = upperBound(u.children, key);\n            if (index >= u.children.length) {\n                const v = { key, children: [] };\n                u.children.push(v);\n                u = v;\n                continue;\n            }\n            let v = u.children[index];\n            if (v.key === key) {\n                u = v;\n                continue;\n            }\n            v = { key, children: [] };\n            u.children.splice(index, 0, v);\n            u = v;\n        }\n        u.value = value;\n    };\n    const search = (nodePoints, startIndex, endIndex) => {\n        let u = root;\n        for (let i = startIndex; i < endIndex; ++i) {\n            const key = nodePoints[i].codePoint;\n            const index = upperBound(u.children, key);\n            if (index >= u.children.length)\n                return null;\n            const v = u.children[index];\n            if (v.key !== key)\n                return null;\n            if (v.value != null)\n                return { nextIndex: i + 1, value: v.value };\n            u = v;\n        }\n        return null;\n    };\n    return { insert, search };\n}\nconst entityReferenceTrie = createEntityReferenceTrie();\nentityReferences.forEach(entity => entityReferenceTrie.insert(entity.key, entity.value));\nfunction eatEntityReference(nodePoints, startIndex, endIndex) {\n    if (startIndex + 1 >= endIndex)\n        return null;\n    const result = entityReferenceTrie.search(nodePoints, startIndex, endIndex);\n    if (result != null)\n        return result;\n    if (nodePoints[startIndex].codePoint !== exports.AsciiCodePoint.NUMBER_SIGN)\n        return null;\n    let val = 0, i = startIndex + 1;\n    if (nodePoints[i].codePoint === exports.AsciiCodePoint.LOWERCASE_X ||\n        nodePoints[i].codePoint === exports.AsciiCodePoint.UPPERCASE_X) {\n        i += 1;\n        for (let cnt = 1; cnt <= 6 && i < endIndex; ++cnt, ++i) {\n            const c = nodePoints[i].codePoint;\n            if (isAsciiDigitCharacter(c)) {\n                val = (val << 4) + (c - exports.AsciiCodePoint.DIGIT0);\n                continue;\n            }\n            if (c >= exports.AsciiCodePoint.UPPERCASE_A && c <= exports.AsciiCodePoint.UPPERCASE_F) {\n                val = (val << 4) + (c - exports.AsciiCodePoint.UPPERCASE_A + 10);\n                continue;\n            }\n            if (c >= exports.AsciiCodePoint.LOWERCASE_A && c <= exports.AsciiCodePoint.LOWERCASE_F) {\n                val = (val << 4) + (c - exports.AsciiCodePoint.LOWERCASE_A + 10);\n                continue;\n            }\n            break;\n        }\n    }\n    else {\n        for (let cnt = 1; cnt <= 7 && i < endIndex; ++cnt, ++i) {\n            const c = nodePoints[i].codePoint;\n            if (!isAsciiDigitCharacter(c))\n                break;\n            val = val * 10 + (c - exports.AsciiCodePoint.DIGIT0);\n        }\n    }\n    if (i >= endIndex || nodePoints[i].codePoint !== exports.AsciiCodePoint.SEMICOLON)\n        return null;\n    let value;\n    try {\n        if (val === 0)\n            val = UnicodeCodePoint.REPLACEMENT_CHARACTER;\n        value = String.fromCodePoint(val);\n    }\n    catch (error) {\n        value = String.fromCodePoint(UnicodeCodePoint.REPLACEMENT_CHARACTER);\n    }\n    return { nextIndex: i + 1, value };\n}\n\nfunction foldCase(text) {\n    return Array.from(text)\n        .map(c => { var _a; return (_a = foldingCaseCodeMap[c]) !== null && _a !== void 0 ? _a : c; })\n        .join('');\n}\n\nconst stripChineseCharacters = (() => {\n    try {\n        const pattern = /\\p{Script=Han}|[\\u{3002}\\u{ff1f}\\u{ff01}\\u{ff0c}\\u{3001}\\u{ff1b}\\u{ff1a}\\u{201c}\\u{201d}\\u{2018}\\u{2019}\\u{ff08}\\u{ff09}\\u{300a}\\u{300b}\\u{3008}\\u{3009}\\u{3010}\\u{3011}\\u{300e}\\u{300f}\\u{300c}\\u{300d}\\u{fe43}\\u{fe44}\\u{3014}\\u{3015}\\u{2026}\\u{2014}\\u{ff5e}\\u{fe4f}\\u{ffe5}]/u\n            .source;\n        const regex = new RegExp(`(${pattern})\\\\n+(${pattern})`, 'gu');\n        return (value) => value.replace(regex, '$1$2');\n    }\n    catch (_a) {\n        const pattern = /[\\u{4E00}-\\u{9FCC}\\u{3400}-\\u{4DB5}\\u{FA0E}\\u{FA0F}\\u{FA11}\\u{FA13}\\u{FA14}\\u{FA1F}\\u{FA21}\\u{FA23}\\u{FA24}\\u{FA27}-\\u{FA29}]|[\\u{d840}-\\u{d868}][\\u{dc00}-\\u{dfff}]|\\u{d869}[\\u{dc00}-\\u{ded6}\\u{df00}-\\u{dfff}]|[\\u{d86a}-\\u{d86c}][\\u{dc00}-\\u{dfff}]|\\u{d86d}[\\u{dc00}-\\u{df34}\\u{df40}-\\u{dfff}]|\\u{d86e}[\\u{dc00}-\\u{dc1d}]/u\n            .source;\n        const regex = new RegExp(`(${pattern})\\\\n+(${pattern})`, 'gu');\n        return (value) => value.replace(regex, '$1$2');\n    }\n})();\nconst tightenChineseCharacters = (() => {\n    try {\n        const pattern = /\\p{Script=Han}|[\\u{3002}\\u{ff1f}\\u{ff01}\\u{ff0c}\\u{3001}\\u{ff1b}\\u{ff1a}\\u{201c}\\u{201d}\\u{2018}\\u{2019}\\u{ff08}\\u{ff09}\\u{300a}\\u{300b}\\u{3008}\\u{3009}\\u{3010}\\u{3011}\\u{300e}\\u{300f}\\u{300c}\\u{300d}\\u{fe43}\\u{fe44}\\u{3014}\\u{3015}\\u{2026}\\u{2014}\\u{ff5e}\\u{fe4f}\\u{ffe5}]/u\n            .source;\n        const regex = new RegExp(`(${pattern})[\\\\s\\\\n]+(${pattern})`, 'gu');\n        return (value) => value.replace(regex, '$1$2');\n    }\n    catch (_a) {\n        const pattern = /[\\u{4E00}-\\u{9FCC}\\u{3400}-\\u{4DB5}\\u{FA0E}\\u{FA0F}\\u{FA11}\\u{FA13}\\u{FA14}\\u{FA1F}\\u{FA21}\\u{FA23}\\u{FA24}\\u{FA27}-\\u{FA29}]|[\\u{d840}-\\u{d868}][\\u{dc00}-\\u{dfff}]|\\u{d869}[\\u{dc00}-\\u{ded6}\\u{df00}-\\u{dfff}]|[\\u{d86a}-\\u{d86c}][\\u{dc00}-\\u{dfff}]|\\u{d86d}[\\u{dc00}-\\u{df34}\\u{df40}-\\u{dfff}]|\\u{d86e}[\\u{dc00}-\\u{dc1d}]/u\n            .source;\n        const regex = new RegExp(`(${pattern})[\\\\s\\\\n]+(${pattern})`, 'gu');\n        return (value) => value.replace(regex, '$1$2');\n    }\n})();\n\nfunction* createNodePointGenerator(literalStrings) {\n    let offset = 0;\n    let column = 1;\n    let line = 1;\n    const contents = typeof literalStrings === 'string' ? [literalStrings] : literalStrings;\n    for (const content of contents) {\n        const codePoints = [];\n        for (const c of content) {\n            const codePoint = c.codePointAt(0);\n            codePoints.push(codePoint);\n        }\n        const nodePoints = [];\n        const endIndex = codePoints.length;\n        for (let i = 0; i < endIndex; ++i) {\n            const codePoint = codePoints[i];\n            switch (codePoint) {\n                case exports.AsciiCodePoint.HT:\n                    for (let i = 0; i < 4; ++i) {\n                        nodePoints.push({\n                            line,\n                            column,\n                            offset,\n                            codePoint: exports.VirtualCodePoint.SPACE,\n                        });\n                    }\n                    offset += 1;\n                    column += 1;\n                    break;\n                case exports.AsciiCodePoint.LF:\n                    nodePoints.push({\n                        line,\n                        column,\n                        offset,\n                        codePoint: exports.VirtualCodePoint.LINE_END,\n                    });\n                    offset += 1;\n                    column = 1;\n                    line += 1;\n                    break;\n                case exports.AsciiCodePoint.CR:\n                    nodePoints.push({\n                        line,\n                        column,\n                        offset,\n                        codePoint: exports.VirtualCodePoint.LINE_END,\n                    });\n                    offset += 1;\n                    column = 1;\n                    line += 1;\n                    if (i + 1 < endIndex && codePoints[i + 1] === exports.AsciiCodePoint.LF) {\n                        offset += 1;\n                        i += 1;\n                    }\n                    break;\n                case exports.AsciiCodePoint.NUL:\n                    nodePoints.push({\n                        line,\n                        column,\n                        offset,\n                        codePoint: UnicodeCodePoint.REPLACEMENT_CHARACTER,\n                    });\n                    offset += 1;\n                    column += 1;\n                    break;\n                default:\n                    nodePoints.push({ line, column, offset, codePoint });\n                    offset += 1;\n                    column += 1;\n                    break;\n            }\n        }\n        yield nodePoints;\n    }\n    return;\n}\nfunction calcStringFromNodePoints(nodePoints, startIndex = 0, endIndex = nodePoints.length, trim = false) {\n    if (trim) {\n        [startIndex, endIndex] = calcTrimBoundaryOfCodePoints(nodePoints, startIndex, endIndex);\n    }\n    let result = '';\n    for (let i = startIndex, j; i < endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        switch (c) {\n            case exports.VirtualCodePoint.SPACE: {\n                for (j = i + 1; j < endIndex; ++j) {\n                    if (nodePoints[j].codePoint !== exports.VirtualCodePoint.SPACE)\n                        break;\n                }\n                const tabCount = (j - i) >> 2;\n                const spaceCount = (j - i) & 3;\n                for (let k = 0; k < spaceCount; ++k)\n                    result += ' ';\n                for (let k = 0; k < tabCount; ++k)\n                    result += '\\t';\n                i = j - 1;\n                break;\n            }\n            case exports.VirtualCodePoint.LINE_END: {\n                result += '\\n';\n                break;\n            }\n            default:\n                result += String.fromCodePoint(c);\n        }\n    }\n    return result;\n}\nfunction calcEscapedStringFromNodePoints(nodePoints, startIndex = 0, endIndex = nodePoints.length, trim = false) {\n    if (trim) {\n        [startIndex, endIndex] = calcTrimBoundaryOfCodePoints(nodePoints, startIndex, endIndex);\n    }\n    let result = '';\n    for (let i = startIndex, j; i < endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        if (c === exports.AsciiCodePoint.BACKSLASH && i + 1 < endIndex) {\n            const d = nodePoints[i + 1].codePoint;\n            if (isAsciiPunctuationCharacter(d)) {\n                i += 1;\n                result += String.fromCodePoint(d);\n            }\n            else {\n                result += '\\\\';\n            }\n            continue;\n        }\n        switch (c) {\n            case exports.VirtualCodePoint.SPACE: {\n                for (j = i + 1; j < endIndex; ++j) {\n                    if (nodePoints[j].codePoint !== exports.VirtualCodePoint.SPACE)\n                        break;\n                }\n                const tabCount = (j - i) >> 2;\n                const spaceCount = (j - i) & 3;\n                for (let k = 0; k < spaceCount; ++k)\n                    result += ' ';\n                for (let k = 0; k < tabCount; ++k)\n                    result += '\\t';\n                i = j - 1;\n                break;\n            }\n            case exports.VirtualCodePoint.LINE_END: {\n                result += '\\n';\n                break;\n            }\n            case exports.AsciiCodePoint.AMPERSAND: {\n                const entityReference = eatEntityReference(nodePoints, i + 1, endIndex);\n                if (entityReference == null)\n                    result += '&';\n                else {\n                    result += entityReference.value;\n                    i = entityReference.nextIndex - 1;\n                }\n                break;\n            }\n            default:\n                result += String.fromCodePoint(c);\n        }\n    }\n    return result;\n}\nfunction calcTrimBoundaryOfCodePoints(nodePoints, startIndex = 0, endIndex = nodePoints.length) {\n    let leftIndex = startIndex, rightIndex = endIndex - 1;\n    for (; leftIndex <= rightIndex; ++leftIndex) {\n        const p = nodePoints[leftIndex];\n        if (!isWhitespaceCharacter(p.codePoint))\n            break;\n    }\n    for (; leftIndex <= rightIndex; --rightIndex) {\n        const p = nodePoints[rightIndex];\n        if (!isWhitespaceCharacter(p.codePoint))\n            break;\n    }\n    return [leftIndex, rightIndex + 1];\n}\n\nexports.asciiControlCharacters = asciiControlCharacters;\nexports.asciiPunctuationCharacters = asciiPunctuationCharacters;\nexports.asciiWhitespaceCharacters = asciiWhitespaceCharacters;\nexports.calcEscapedStringFromNodePoints = calcEscapedStringFromNodePoints;\nexports.calcStringFromNodePoints = calcStringFromNodePoints;\nexports.calcTrimBoundaryOfCodePoints = calcTrimBoundaryOfCodePoints;\nexports.collectCodePointsFromEnum = collectCodePointsFromEnum;\nexports.controlCharacters = controlCharacters;\nexports.createCodePointSearcher = createCodePointSearcher;\nexports.createEntityReferenceTrie = createEntityReferenceTrie;\nexports.createNodePointGenerator = createNodePointGenerator;\nexports.eatEntityReference = eatEntityReference;\nexports.entityReferenceTrie = entityReferenceTrie;\nexports.entityReferences = entityReferences;\nexports.foldCase = foldCase;\nexports.foldingCaseCodeMap = foldingCaseCodeMap;\nexports.isAlphanumeric = isAlphanumeric;\nexports.isAsciiCharacter = isAsciiCharacter;\nexports.isAsciiControlCharacter = isAsciiControlCharacter;\nexports.isAsciiDigitCharacter = isAsciiDigitCharacter;\nexports.isAsciiLetter = isAsciiLetter;\nexports.isAsciiLowerLetter = isAsciiLowerLetter;\nexports.isAsciiPunctuationCharacter = isAsciiPunctuationCharacter;\nexports.isAsciiUpperLetter = isAsciiUpperLetter;\nexports.isAsciiWhitespaceCharacter = isAsciiWhitespaceCharacter;\nexports.isControlCharacter = isControlCharacter;\nexports.isLineEnding = isLineEnding;\nexports.isPunctuationCharacter = isPunctuationCharacter;\nexports.isSpaceCharacter = isSpaceCharacter;\nexports.isSpaceLike = isSpaceLike;\nexports.isUnicodeWhitespaceCharacter = isUnicodeWhitespaceCharacter;\nexports.isWhitespaceCharacter = isWhitespaceCharacter;\nexports.punctuationCharacters = punctuationCharacters;\nexports.spaceCharacters = spaceCharacters;\nexports.stripChineseCharacters = stripChineseCharacters;\nexports.tightenChineseCharacters = tightenChineseCharacters;\nexports.unicodeWhitespaceCharacters = unicodeWhitespaceCharacters;\nexports.whitespaceCharacters = whitespaceCharacters;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar invariant = require('@yozora/invariant');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);\n\nconst createBlockContentProcessor = (hooks, fallbackHook) => {\n    const root = {\n        _tokenizer: 'root',\n        nodeType: 'root',\n        position: {\n            start: { line: 1, column: 1, offset: 0 },\n            end: { line: 1, column: 1, offset: 0 },\n        },\n        children: [],\n    };\n    const stateStack = [];\n    stateStack.push({\n        hook: { isContainingBlock: true },\n        token: root,\n    });\n    let currentStackIndex = 0;\n    const refreshPosition = (endPoint) => {\n        for (let sIndex = currentStackIndex; sIndex >= 0; --sIndex) {\n            const o = stateStack[sIndex];\n            o.token.position.end = Object.assign({}, endPoint);\n        }\n    };\n    const createRollbackProcessor = (hook, lines) => {\n        if (lines.length <= 0)\n            return null;\n        const candidateHooks = hooks.filter(h => h != hook);\n        const processor = createBlockContentProcessor(candidateHooks, fallbackHook);\n        for (const line of lines) {\n            processor.consume(line);\n        }\n        return processor;\n    };\n    const popup = () => {\n        const topState = stateStack.pop();\n        if (topState == null)\n            return undefined;\n        if (stateStack.length > 0) {\n            const parent = stateStack[stateStack.length - 1];\n            if (topState.hook.onClose != null) {\n                const result = topState.hook.onClose(topState.token);\n                if (result != null) {\n                    switch (result.status) {\n                        case 'closingAndRollback': {\n                            const processor = createRollbackProcessor(topState.hook, result.lines);\n                            if (processor == null)\n                                break;\n                            const internalRoot = processor.done();\n                            parent.token.children.push(...internalRoot.children);\n                            break;\n                        }\n                        case 'failedAndRollback': {\n                            parent.token.children.pop();\n                            const processor = createRollbackProcessor(topState.hook, result.lines);\n                            if (processor == null)\n                                break;\n                            const internalRoot = processor.done();\n                            parent.token.children.push(...internalRoot.children);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (currentStackIndex >= stateStack.length) {\n            currentStackIndex = stateStack.length - 1;\n        }\n        return topState;\n    };\n    const cutStaleBranch = (nextTopIndex) => {\n        while (stateStack.length > nextTopIndex)\n            popup();\n    };\n    const push = (hook, nextToken, saturated) => {\n        cutStaleBranch(currentStackIndex + 1);\n        const parent = stateStack[currentStackIndex];\n        parent.token.children.push(nextToken);\n        refreshPosition(nextToken.position.end);\n        currentStackIndex += 1;\n        stateStack.push({ hook, token: nextToken });\n        if (saturated) {\n            popup();\n        }\n    };\n    const rollback = (hook, lines, parent) => {\n        const processor = createRollbackProcessor(hook, lines);\n        if (processor == null)\n            return false;\n        const internalStateStack = processor.shallowSnapshot();\n        const internalStateRoot = internalStateStack[0];\n        if (internalStateRoot.token.children != null) {\n            parent.token.children.push(...internalStateRoot.token.children);\n        }\n        refreshPosition(internalStateRoot.token.position.end);\n        for (let i = 1; i < internalStateStack.length; ++i) {\n            const internalState = internalStateStack[i];\n            stateStack.push(internalState);\n        }\n        currentStackIndex = stateStack.length - 1;\n        return true;\n    };\n    const consume = (line) => {\n        const { nodePoints, startIndex: startIndexOfLine, endIndex: endIndexOfLine } = line;\n        let { firstNonWhitespaceIndex, countOfPrecedeSpaces, startIndex: i } = line;\n        const getEatingInfo = () => ({\n            nodePoints,\n            startIndex: i,\n            endIndex: endIndexOfLine,\n            firstNonWhitespaceIndex,\n            countOfPrecedeSpaces,\n        });\n        const moveForward = (nextIndex, shouldRefreshPosition) => {\n            invariant__default[\"default\"](i <= nextIndex, `[DBTContext#moveForward] nextIndex(${nextIndex}) is behind i(${i}).`);\n            if (shouldRefreshPosition) {\n                const endPoint = coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1);\n                refreshPosition(endPoint);\n            }\n            if (i === nextIndex)\n                return;\n            i = nextIndex;\n            countOfPrecedeSpaces = 0;\n            firstNonWhitespaceIndex = nextIndex;\n            for (; firstNonWhitespaceIndex < endIndexOfLine; ++firstNonWhitespaceIndex) {\n                const c = nodePoints[firstNonWhitespaceIndex].codePoint;\n                if (character.isSpaceCharacter(c)) {\n                    countOfPrecedeSpaces += 1;\n                    continue;\n                }\n                if (!character.isWhitespaceCharacter(c))\n                    break;\n            }\n        };\n        const consumeNewOpener = (hook, line) => {\n            const { token: parentToken } = stateStack[currentStackIndex];\n            const result = hook.eatOpener(line, parentToken);\n            if (result == null)\n                return false;\n            invariant__default[\"default\"](result.nextIndex > i, '[consumeNewOpener] The marker of the new data node cannot be empty.\\n' +\n                ` tokenizer(${result.token._tokenizer})`);\n            moveForward(result.nextIndex, false);\n            const nextToken = result.token;\n            nextToken._tokenizer = hook.name;\n            push(hook, nextToken, Boolean(result.saturated));\n            return true;\n        };\n        const interruptSibling = (hook, line) => {\n            if (hook.eatAndInterruptPreviousSibling == null)\n                return false;\n            const { hook: siblingHook, token: siblingToken } = stateStack[currentStackIndex];\n            const { token: parentToken } = stateStack[currentStackIndex - 1];\n            if (hook.priority <= siblingHook.priority)\n                return false;\n            const result = hook.eatAndInterruptPreviousSibling(line, siblingToken, parentToken);\n            if (result == null)\n                return false;\n            cutStaleBranch(currentStackIndex);\n            parentToken.children.pop();\n            if (result.remainingSibling != null) {\n                if (Array.isArray(result.remainingSibling)) {\n                    parentToken.children.push(...result.remainingSibling);\n                }\n                else {\n                    parentToken.children.push(result.remainingSibling);\n                }\n            }\n            moveForward(result.nextIndex, false);\n            const nextToken = result.token;\n            nextToken._tokenizer = hook.name;\n            push(hook, nextToken, Boolean(result.saturated));\n            return true;\n        };\n        const step1 = () => {\n            currentStackIndex = 1;\n            if (stateStack.length < 2)\n                return;\n            let { token: parentToken } = stateStack[currentStackIndex - 1];\n            while (i < endIndexOfLine && currentStackIndex < stateStack.length) {\n                const currentStateItem = stateStack[currentStackIndex];\n                const currentHook = currentStateItem.hook;\n                const eatingInfo = getEatingInfo();\n                if (hooks.some(hook => hook !== currentHook && interruptSibling(hook, eatingInfo))) {\n                    break;\n                }\n                const result = currentHook.eatContinuationText == null\n                    ? { status: 'notMatched' }\n                    : currentHook.eatContinuationText(eatingInfo, currentStateItem.token, parentToken);\n                let finished = false, rolledBack = false;\n                switch (result.status) {\n                    case 'failedAndRollback': {\n                        parentToken.children.pop();\n                        stateStack.length = currentStackIndex;\n                        currentStackIndex -= 1;\n                        if (result.lines.length > 0) {\n                            const parent = stateStack[currentStackIndex];\n                            if (rollback(currentHook, result.lines, parent)) {\n                                rolledBack = true;\n                                break;\n                            }\n                        }\n                        finished = true;\n                        break;\n                    }\n                    case 'closingAndRollback': {\n                        cutStaleBranch(currentStackIndex);\n                        if (result.lines.length > 0) {\n                            const parent = stateStack[currentStackIndex];\n                            if (rollback(currentHook, result.lines, parent)) {\n                                rolledBack = true;\n                                break;\n                            }\n                        }\n                        finished = true;\n                        break;\n                    }\n                    case 'notMatched': {\n                        currentStackIndex -= 1;\n                        finished = true;\n                        break;\n                    }\n                    case 'closing': {\n                        moveForward(result.nextIndex, true);\n                        currentStackIndex -= 1;\n                        finished = true;\n                        break;\n                    }\n                    case 'opening': {\n                        moveForward(result.nextIndex, true);\n                        break;\n                    }\n                    default:\n                        throw new TypeError(`[eatContinuationText] unexpected status (${result.status}).`);\n                }\n                if (finished)\n                    break;\n                if (rolledBack)\n                    continue;\n                currentStackIndex += 1;\n                parentToken = currentStateItem.token;\n            }\n        };\n        const step2 = () => {\n            if (i >= endIndexOfLine)\n                return;\n            if (currentStackIndex < stateStack.length) {\n                const lastChild = stateStack[stateStack.length - 1];\n                if (lastChild.hook.eatLazyContinuationText != null) {\n                    const eatingInfo = getEatingInfo();\n                    if (eatingInfo.countOfPrecedeSpaces >= 4)\n                        return;\n                }\n            }\n            else {\n                currentStackIndex = stateStack.length - 1;\n            }\n            while (i < endIndexOfLine && stateStack[currentStackIndex].hook.isContainingBlock) {\n                let hasNewOpener = false;\n                const eatingInfo = getEatingInfo();\n                for (const hook of hooks) {\n                    if (consumeNewOpener(hook, eatingInfo)) {\n                        hasNewOpener = true;\n                        break;\n                    }\n                }\n                if (!hasNewOpener)\n                    break;\n            }\n        };\n        const step3 = () => {\n            if (i >= endIndexOfLine || currentStackIndex + 1 >= stateStack.length)\n                return false;\n            const { hook, token } = stateStack[stateStack.length - 1];\n            if (hook.eatLazyContinuationText == null)\n                return false;\n            const { token: parentToken } = stateStack[stateStack.length - 2];\n            const eatingInfo = getEatingInfo();\n            const result = hook.eatLazyContinuationText(eatingInfo, token, parentToken);\n            switch (result.status) {\n                case 'notMatched': {\n                    return false;\n                }\n                case 'opening': {\n                    currentStackIndex = stateStack.length - 1;\n                    moveForward(result.nextIndex, true);\n                    currentStackIndex = stateStack.length - 1;\n                    return true;\n                }\n                default:\n                    throw new TypeError(`[eatLazyContinuationText] unexpected status (${result.status}).`);\n            }\n        };\n        step1();\n        step2();\n        if (!step3()) {\n            cutStaleBranch(currentStackIndex + 1);\n        }\n        if (fallbackHook != null && i < endIndexOfLine) {\n            const eatingInfo = getEatingInfo();\n            consumeNewOpener(fallbackHook, eatingInfo);\n        }\n        invariant__default[\"default\"](firstNonWhitespaceIndex >= endIndexOfLine, '[IBlockContentProcessor] there is still unprocessed contents.' +\n            ` startIndexOfLine(${startIndexOfLine}), endIndexOfLine(${endIndexOfLine})`);\n    };\n    const done = () => {\n        while (stateStack.length > 1)\n            popup();\n        return root;\n    };\n    return {\n        consume,\n        done,\n        shallowSnapshot: () => [...stateStack],\n    };\n};\n\nconst createSinglePriorityDelimiterProcessor = () => {\n    let htIndex = 0;\n    const higherPriorityTokens = [];\n    const delimiterStack = [];\n    const tokenStack = [];\n    const cutStaleBranch = (startStackIndex) => {\n        let top = startStackIndex - 1;\n        while (top >= 0 && delimiterStack[top].inactive)\n            top -= 1;\n        delimiterStack.length = top + 1;\n    };\n    const push = (hook, delimiter) => {\n        delimiterStack.push({\n            hook,\n            delimiter,\n            inactive: false,\n            tokenStackIndex: tokenStack.length,\n        });\n    };\n    const findNearestPairedDelimiter = (hook, closerDelimiter) => {\n        if (delimiterStack.length <= 0)\n            return null;\n        let item = null;\n        for (let i = delimiterStack.length - 1; i >= 0; --i) {\n            item = delimiterStack[i];\n            if (item.inactive || item.hook !== hook)\n                continue;\n            const openerDelimiter = item.delimiter;\n            const result = hook.isDelimiterPair(openerDelimiter, closerDelimiter, higherPriorityTokens);\n            if (result.paired)\n                return openerDelimiter;\n            if (!result.closer)\n                return null;\n        }\n        return null;\n    };\n    const consume = (hook, closerDelimiter) => {\n        if (delimiterStack.length <= 0)\n            return closerDelimiter;\n        let remainOpenerDelimiter;\n        let remainCloserDelimiter = closerDelimiter;\n        let internalTokens = [];\n        for (let i = delimiterStack.length - 1; i >= 0; --i) {\n            const item = delimiterStack[i];\n            if (item.hook !== hook || item.inactive)\n                continue;\n            const openerTokenStackIndex = item.tokenStackIndex;\n            if (openerTokenStackIndex < tokenStack.length) {\n                internalTokens = tokenStack.splice(openerTokenStackIndex).concat(internalTokens);\n            }\n            remainOpenerDelimiter = item.delimiter;\n            while (remainOpenerDelimiter != null && remainCloserDelimiter != null) {\n                if (remainCloserDelimiter.type === 'opener') {\n                    push(hook, remainCloserDelimiter);\n                    remainCloserDelimiter = undefined;\n                    break;\n                }\n                if (remainCloserDelimiter.type === 'full')\n                    break;\n                const prePairResult = hook.isDelimiterPair(remainOpenerDelimiter, remainCloserDelimiter, internalTokens);\n                if (!prePairResult.paired) {\n                    if (!prePairResult.opener) {\n                        const tokens = hook.processSingleDelimiter(remainOpenerDelimiter);\n                        if (tokens.length > 0) {\n                            for (const token of tokens)\n                                token._tokenizer = hook.name;\n                            internalTokens.unshift(...tokens);\n                        }\n                        remainOpenerDelimiter = undefined;\n                        item.inactive = true;\n                    }\n                    if (!prePairResult.closer) {\n                        const tokens = hook.processSingleDelimiter(remainCloserDelimiter);\n                        if (tokens.length > 0) {\n                            for (const token of tokens)\n                                token._tokenizer = hook.name;\n                            internalTokens.push(...tokens);\n                        }\n                        remainCloserDelimiter = undefined;\n                    }\n                    break;\n                }\n                const result = hook.processDelimiterPair(remainOpenerDelimiter, remainCloserDelimiter, internalTokens);\n                {\n                    for (const token of result.tokens) {\n                        if (token._tokenizer == null)\n                            token._tokenizer = hook.name;\n                    }\n                    internalTokens = result.tokens;\n                }\n                remainOpenerDelimiter = result.remainOpenerDelimiter;\n                remainCloserDelimiter = result.remainCloserDelimiter;\n                cutStaleBranch(i);\n                i = Math.min(i, delimiterStack.length);\n                if (remainOpenerDelimiter != null)\n                    push(hook, remainOpenerDelimiter);\n            }\n            if (remainCloserDelimiter == null || remainCloserDelimiter.type === 'full') {\n                break;\n            }\n        }\n        tokenStack.push(...internalTokens);\n        if (remainCloserDelimiter == null)\n            return null;\n        if (remainCloserDelimiter.type === 'full' || remainCloserDelimiter.type === 'closer') {\n            const tokens = hook.processSingleDelimiter(remainCloserDelimiter);\n            for (const token of tokens) {\n                token._tokenizer = hook.name;\n                tokenStack.push(token);\n            }\n            return null;\n        }\n        return remainCloserDelimiter;\n    };\n    const process = (hook, delimiter) => {\n        for (; htIndex < higherPriorityTokens.length; ++htIndex) {\n            const token = higherPriorityTokens[htIndex];\n            if (token.startIndex >= delimiter.endIndex)\n                break;\n            if (token.startIndex >= delimiter.startIndex)\n                continue;\n            tokenStack.push(token);\n        }\n        switch (delimiter.type) {\n            case 'opener': {\n                push(hook, delimiter);\n                break;\n            }\n            case 'both': {\n                const remainDelimiter = consume(hook, delimiter);\n                if (remainDelimiter != null)\n                    push(hook, remainDelimiter);\n                break;\n            }\n            case 'closer': {\n                consume(hook, delimiter);\n                break;\n            }\n            case 'full': {\n                const tokens = hook.processSingleDelimiter(delimiter);\n                for (const token of tokens) {\n                    token._tokenizer = hook.name;\n                    tokenStack.push(token);\n                }\n                break;\n            }\n            default:\n                throw new TypeError(`Unexpected delimiter type(${delimiter.type}) from ${hook.name}.`);\n        }\n    };\n    const done = () => {\n        const tokens = [];\n        for (const { delimiter, hook } of delimiterStack) {\n            const result = hook.processSingleDelimiter(delimiter);\n            for (const token of result) {\n                token._tokenizer = hook.name;\n                tokens.push(token);\n            }\n        }\n        delimiterStack.length = 0;\n        if (tokens.length > 0) {\n            const nextTokenStack = mergeSortedTokenStack(tokenStack, tokens);\n            tokenStack.length = 0;\n            tokenStack.push(...nextTokenStack);\n        }\n        const result = tokenStack.concat(higherPriorityTokens.slice(htIndex));\n        return result;\n    };\n    const reset = (_higherPriorityTokens) => {\n        higherPriorityTokens.length = _higherPriorityTokens.length;\n        for (let i = 0; i < _higherPriorityTokens.length; ++i) {\n            higherPriorityTokens[i] = _higherPriorityTokens[i];\n        }\n        htIndex = 0;\n        delimiterStack.length = 0;\n        tokenStack.length = 0;\n    };\n    return {\n        process,\n        done,\n        reset,\n        findNearestPairedDelimiter,\n    };\n};\nconst mergeSortedTokenStack = (tokens1, tokens2) => {\n    if (tokens1.length <= 0)\n        return tokens2;\n    if (tokens2.length <= 0)\n        return tokens1;\n    const tokens = [];\n    let i1 = 0;\n    let i2 = 0;\n    for (; i1 < tokens1.length && i2 < tokens2.length;) {\n        if (tokens1[i1].startIndex < tokens2[i2].startIndex) {\n            tokens.push(tokens1[i1]);\n            i1 += 1;\n        }\n        else {\n            tokens.push(tokens2[i2]);\n            i2 += 1;\n        }\n    }\n    for (; i1 < tokens1.length; ++i1)\n        tokens.push(tokens1[i1]);\n    for (; i2 < tokens2.length; ++i2)\n        tokens.push(tokens2[i2]);\n    return tokens;\n};\n\nconst createPhrasingContentProcessor = (hookGroups, hookGroupIndex) => {\n    const findNearestDelimiters = (startIndex, endIndex, hooks) => {\n        let nearestDelimiters = [];\n        let nearestDelimiterStartIndex = null;\n        const rangeIndex = [startIndex, endIndex];\n        for (const hook of hooks) {\n            const delimiter = hook.findDelimiter(rangeIndex);\n            if (delimiter == null)\n                continue;\n            if (nearestDelimiterStartIndex != null) {\n                if (delimiter.startIndex > nearestDelimiterStartIndex)\n                    continue;\n                if (delimiter.startIndex < nearestDelimiterStartIndex) {\n                    nearestDelimiters = [];\n                }\n            }\n            nearestDelimiterStartIndex = delimiter.startIndex;\n            nearestDelimiters.push({ hook, delimiter });\n        }\n        if (nearestDelimiters.length <= 0)\n            return { items: [], nextIndex: -1 };\n        const nextIndex = nearestDelimiterStartIndex + 1;\n        if (nearestDelimiters.length > 1) {\n            let potentialCloserCount = 0;\n            for (const item of nearestDelimiters) {\n                const dType = item.delimiter.type;\n                if (dType === 'full')\n                    return { items: [item], nextIndex: item.delimiter.endIndex };\n                if (dType === 'both' || dType === 'closer')\n                    potentialCloserCount += 1;\n            }\n            if (potentialCloserCount > 1) {\n                let validCloserIndex = -1;\n                let validPairedOpenerStartIndex = -1;\n                for (let index = 0; index < nearestDelimiters.length; ++index) {\n                    const { hook, delimiter } = nearestDelimiters[index];\n                    if (delimiter.type === 'both' || delimiter.type === 'closer') {\n                        const openerDelimiter = processor.findNearestPairedDelimiter(hook, delimiter);\n                        if (openerDelimiter != null) {\n                            if (validPairedOpenerStartIndex < openerDelimiter.startIndex) {\n                                validCloserIndex = index;\n                                validPairedOpenerStartIndex = openerDelimiter.startIndex;\n                            }\n                        }\n                    }\n                }\n                const items = validCloserIndex > -1\n                    ? [nearestDelimiters[validCloserIndex]]\n                    : nearestDelimiters.filter(item => item.delimiter.type !== 'closer');\n                return { items, nextIndex };\n            }\n        }\n        return { items: nearestDelimiters, nextIndex };\n    };\n    const processor = createSinglePriorityDelimiterProcessor();\n    const process = (higherPriorityTokens, _startIndex, _endIndex) => {\n        let tokens = higherPriorityTokens;\n        for (let hgIndex = hookGroupIndex; hgIndex < hookGroups.length; ++hgIndex) {\n            const hooks = hookGroups[hgIndex];\n            for (const hook of hooks)\n                hook.reset();\n            let tokenIndex = 0;\n            processor.reset(tokens);\n            for (let i = _startIndex; i < _endIndex;) {\n                let endIndex = _endIndex;\n                for (; tokenIndex < tokens.length; ++tokenIndex) {\n                    const token = tokens[tokenIndex];\n                    if (i < token.startIndex) {\n                        endIndex = token.startIndex;\n                        break;\n                    }\n                    if (i < token.endIndex)\n                        i = token.endIndex;\n                }\n                const { items, nextIndex } = findNearestDelimiters(i, endIndex, hooks);\n                if (nextIndex < 0 || items.length <= 0) {\n                    i = nextIndex < 0 ? endIndex : nextIndex;\n                    continue;\n                }\n                i += 1;\n                for (const { hook, delimiter } of items) {\n                    i = Math.max(i, delimiter.endIndex);\n                    processor.process(hook, delimiter);\n                }\n            }\n            tokens = processor.done();\n        }\n        return tokens;\n    };\n    return { process };\n};\nconst createProcessorHookGroups = (tokenizers, matchInlineApi, resolveFallbackTokens) => {\n    const hookGroups = [];\n    for (let i = 0; i < tokenizers.length;) {\n        const hookGroup = [];\n        hookGroups.push(hookGroup);\n        const processor = createPhrasingContentProcessor(hookGroups, hookGroups.length);\n        const api = Object.freeze(Object.assign(Object.assign({}, matchInlineApi), { resolveInternalTokens: (higherPriorityTokens, startIndex, endIndex) => {\n                let tokens = processor.process(higherPriorityTokens, startIndex, endIndex);\n                tokens = resolveFallbackTokens(tokens, startIndex, endIndex);\n                return tokens;\n            } }));\n        const currentPriority = tokenizers[i].priority;\n        for (; i < tokenizers.length; ++i) {\n            const hook = tokenizers[i];\n            if (hook.priority !== currentPriority)\n                break;\n            const processorHook = createProcessorHook(hook, api);\n            hookGroup.push(processorHook);\n        }\n    }\n    return hookGroups;\n};\nconst createProcessorHook = (tokenizer, api) => {\n    let _findDelimiter;\n    const hook = tokenizer.match(api);\n    return Object.assign(Object.assign({ isDelimiterPair: () => ({ paired: true }), processDelimiterPair: (_1, _2, internalTokens) => ({ tokens: internalTokens }), processSingleDelimiter: () => [] }, hook), { name: tokenizer.name, priority: tokenizer.priority, findDelimiter: rangeIndex => _findDelimiter.next(rangeIndex).value, reset: () => {\n            _findDelimiter = hook.findDelimiter();\n            _findDelimiter.next();\n        } });\n};\n\nfunction createProcessor(options) {\n    const { inlineTokenizers, inlineTokenizerMap, blockTokenizers, blockTokenizerMap, blockFallbackTokenizer, inlineFallbackTokenizer, shouldReservePosition, presetDefinitions, presetFootnoteDefinitions, } = options;\n    let isIdentifierRegisterAvailable = false;\n    const definitionIdentifierSet = new Set();\n    const footnoteIdentifierSet = new Set();\n    let _nodePoints = [];\n    let _blockStartIndex = -1;\n    let _blockEndIndex = -1;\n    const apis = Object.freeze({\n        matchBlockApi: {\n            extractPhrasingLines,\n            rollbackPhrasingLines,\n            registerDefinitionIdentifier: (identifier) => {\n                if (isIdentifierRegisterAvailable)\n                    definitionIdentifierSet.add(identifier);\n            },\n            registerFootnoteDefinitionIdentifier: (identifier) => {\n                if (isIdentifierRegisterAvailable)\n                    footnoteIdentifierSet.add(identifier);\n            },\n        },\n        parseBlockApi: {\n            shouldReservePosition,\n            processInlines,\n            parseBlockTokens,\n        },\n        matchInlineApi: {\n            hasDefinition: identifier => definitionIdentifierSet.has(identifier),\n            hasFootnoteDefinition: identifier => footnoteIdentifierSet.has(identifier),\n            getNodePoints: () => _nodePoints,\n            getBlockStartIndex: () => _blockStartIndex,\n            getBlockEndIndex: () => _blockEndIndex,\n            resolveFallbackTokens,\n        },\n        parseInlineApi: {\n            shouldReservePosition,\n            getNodePoints: () => _nodePoints,\n            hasDefinition: identifier => definitionIdentifierSet.has(identifier),\n            hasFootnoteDefinition: identifier => footnoteIdentifierSet.has(identifier),\n            parseInlineTokens,\n            calcPosition: token => ({\n                start: coreTokenizer.calcStartPoint(_nodePoints, token.startIndex),\n                end: coreTokenizer.calcEndPoint(_nodePoints, token.endIndex - 1),\n            }),\n        },\n    });\n    const matchBlockHooks = blockTokenizers.map(tokenizer => (Object.assign(Object.assign({}, tokenizer.match(apis.matchBlockApi)), { name: tokenizer.name, priority: tokenizer.priority })));\n    const parseBlockHookMap = new Map(Array.from(blockTokenizerMap.entries()).map(entry => [\n        entry[0],\n        entry[1].parse(apis.parseBlockApi),\n    ]));\n    const blockFallbackHook = blockFallbackTokenizer\n        ? Object.assign(Object.assign({}, blockFallbackTokenizer.match(apis.matchBlockApi)), { name: blockFallbackTokenizer.name, priority: blockFallbackTokenizer.priority }) : null;\n    const matchInlineHookGroups = createProcessorHookGroups(inlineTokenizers, apis.matchInlineApi, resolveFallbackTokens);\n    const parseInlineHookMap = new Map(Array.from(inlineTokenizerMap.entries()).map(entry => [\n        entry[0],\n        entry[1].parse(apis.parseInlineApi),\n    ]));\n    const phrasingContentProcessor = createPhrasingContentProcessor(matchInlineHookGroups, 0);\n    return { process };\n    function process(lines) {\n        definitionIdentifierSet.clear();\n        footnoteIdentifierSet.clear();\n        isIdentifierRegisterAvailable = true;\n        const blockTokenTree = matchBlockTokens(lines);\n        isIdentifierRegisterAvailable = false;\n        for (const definition of presetDefinitions) {\n            definitionIdentifierSet.add(definition.identifier);\n        }\n        for (const footnoteDefinition of presetFootnoteDefinitions) {\n            footnoteIdentifierSet.add(footnoteDefinition.identifier);\n        }\n        const children = parseBlockTokens(blockTokenTree.children);\n        const ast = shouldReservePosition\n            ? { type: 'root', position: blockTokenTree.position, children }\n            : { type: 'root', children };\n        return ast;\n    }\n    function extractPhrasingLines(token) {\n        var _a;\n        const tokenizer = blockTokenizerMap.get(token._tokenizer);\n        return (_a = tokenizer === null || tokenizer === void 0 ? void 0 : tokenizer.extractPhrasingContentLines(token)) !== null && _a !== void 0 ? _a : null;\n    }\n    function rollbackPhrasingLines(lines, originalToken) {\n        if (originalToken != null) {\n            const tokenizer = blockTokenizerMap.get(originalToken._tokenizer);\n            if (tokenizer !== undefined && tokenizer.buildBlockToken != null) {\n                const token = tokenizer.buildBlockToken(lines, originalToken);\n                if (token !== null) {\n                    token._tokenizer = tokenizer.name;\n                    return [token];\n                }\n            }\n        }\n        const tokenTree = matchBlockTokens([lines]);\n        return tokenTree.children;\n    }\n    function resolveFallbackTokens(tokens, tokenStartIndex, tokenEndIndex) {\n        if (inlineFallbackTokenizer == null)\n            return tokens;\n        let i = tokenStartIndex;\n        const results = [];\n        for (const token of tokens) {\n            if (i < token.startIndex) {\n                const fallbackToken = inlineFallbackTokenizer.findAndHandleDelimiter(i, token.startIndex, apis.matchInlineApi);\n                fallbackToken._tokenizer = inlineFallbackTokenizer.name;\n                results.push(fallbackToken);\n            }\n            results.push(token);\n            i = token.endIndex;\n        }\n        if (i < tokenEndIndex) {\n            const fallbackToken = inlineFallbackTokenizer.findAndHandleDelimiter(i, tokenEndIndex, apis.matchInlineApi);\n            fallbackToken._tokenizer = inlineFallbackTokenizer.name;\n            results.push(fallbackToken);\n        }\n        return results;\n    }\n    function matchBlockTokens(linesIterator) {\n        const processor = createBlockContentProcessor(matchBlockHooks, blockFallbackHook);\n        for (const lines of linesIterator) {\n            for (const line of lines) {\n                processor.consume(line);\n            }\n        }\n        const root = processor.done();\n        return root;\n    }\n    function parseBlockTokens(tokens) {\n        if (tokens === undefined || tokens.length <= 0)\n            return [];\n        const results = [];\n        for (let i0 = 0, i1; i0 < tokens.length; i0 = i1) {\n            const _tokenizer = tokens[i0]._tokenizer;\n            for (i1 = i0 + 1; i1 < tokens.length && tokens[i1]._tokenizer === _tokenizer;)\n                i1 += 1;\n            const hook = parseBlockHookMap.get(_tokenizer);\n            invariant__default[\"default\"](hook !== undefined, `[parseBlock] tokenizer '${_tokenizer}' not found`);\n            const nodes = hook.parse(tokens.slice(i0, i1));\n            results.push(...nodes);\n        }\n        return results;\n    }\n    function processInlines(nodePoints) {\n        if (nodePoints.length <= 0)\n            return [];\n        const inlineTokens = matchInlineTokens(nodePoints, 0, nodePoints.length);\n        const inlineNodes = parseInlineTokens(inlineTokens);\n        return inlineNodes;\n    }\n    function matchInlineTokens(nodePoints, startIndexOfBlock, endIndexOfBlock) {\n        _nodePoints = nodePoints;\n        _blockStartIndex = startIndexOfBlock;\n        _blockEndIndex = endIndexOfBlock;\n        const tokensStack = phrasingContentProcessor.process([], startIndexOfBlock, endIndexOfBlock);\n        const tokens = resolveFallbackTokens(tokensStack, startIndexOfBlock, endIndexOfBlock);\n        return tokens;\n    }\n    function parseInlineTokens(tokens) {\n        if (tokens === undefined || tokens.length <= 0)\n            return [];\n        const results = [];\n        for (let i0 = 0, i1; i0 < tokens.length; i0 = i1) {\n            const _tokenizer = tokens[i0]._tokenizer;\n            for (i1 = i0 + 1; i1 < tokens.length && tokens[i1]._tokenizer === _tokenizer;)\n                i1 += 1;\n            const hook = parseInlineHookMap.get(_tokenizer);\n            invariant__default[\"default\"](hook !== undefined, `[parseBlock] tokenizer '${_tokenizer}' not found`);\n            const nodes = hook.parse(tokens.slice(i0, i1));\n            results.push(...nodes);\n        }\n        return results;\n    }\n}\n\nfunction* createPhrasingLineGenerator(nodePointsList) {\n    const allNodePoints = [];\n    let startIndex = 0;\n    let firstNonWhitespaceIndex = 0;\n    let countOfPrecedeSpaces = 0;\n    for (const nodePoints of nodePointsList) {\n        const lines = [];\n        for (const p of nodePoints) {\n            const c = p.codePoint;\n            if (firstNonWhitespaceIndex === allNodePoints.length) {\n                if (character.isSpaceCharacter(c)) {\n                    countOfPrecedeSpaces += 1;\n                    firstNonWhitespaceIndex += 1;\n                }\n            }\n            allNodePoints.push(p);\n            if (character.isLineEnding(c)) {\n                if (firstNonWhitespaceIndex + 1 === allNodePoints.length) {\n                    firstNonWhitespaceIndex += 1;\n                }\n                const line = {\n                    nodePoints: allNodePoints,\n                    startIndex,\n                    endIndex: allNodePoints.length,\n                    firstNonWhitespaceIndex,\n                    countOfPrecedeSpaces,\n                };\n                lines.push(line);\n                startIndex = allNodePoints.length;\n                firstNonWhitespaceIndex = allNodePoints.length;\n                countOfPrecedeSpaces = 0;\n            }\n        }\n        yield lines;\n    }\n    if (startIndex < allNodePoints.length) {\n        const line = {\n            nodePoints: allNodePoints,\n            startIndex,\n            endIndex: allNodePoints.length,\n            firstNonWhitespaceIndex,\n            countOfPrecedeSpaces,\n        };\n        yield [line];\n    }\n    return allNodePoints;\n}\n\nclass DefaultParser {\n    constructor(props) {\n        this.blockFallbackTokenizer = null;\n        this.inlineFallbackTokenizer = null;\n        this.defaultParseOptions = null;\n        this.inlineTokenizers = [];\n        this.inlineTokenizerMap = new Map();\n        this.blockTokenizers = [];\n        this.blockTokenizerMap = new Map();\n        this.setDefaultParseOptions(props.defaultParseOptions);\n        if (props.blockFallbackTokenizer)\n            this.useFallbackTokenizer(props.blockFallbackTokenizer);\n        if (props.inlineFallbackTokenizer)\n            this.useFallbackTokenizer(props.inlineFallbackTokenizer);\n    }\n    useTokenizer(tokenizer, registerBeforeTokenizer) {\n        const tokenizers = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizers : this.inlineTokenizers;\n        const tokenizerMap = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizerMap : this.inlineTokenizerMap;\n        this._registerTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer);\n        return this;\n    }\n    replaceTokenizer(tokenizer, registerBeforeTokenizer) {\n        const tokenizers = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizers : this.inlineTokenizers;\n        const tokenizerMap = tokenizer.type === coreTokenizer.TokenizerType.BLOCK ? this.blockTokenizerMap : this.inlineTokenizerMap;\n        this._replaceTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer);\n        return this;\n    }\n    unmountTokenizer(tokenizerOrName) {\n        this._unregisterTokenizer(this.inlineTokenizers, this.inlineTokenizerMap, tokenizerOrName);\n        this._unregisterTokenizer(this.blockTokenizers, this.blockTokenizerMap, tokenizerOrName);\n        return this;\n    }\n    useFallbackTokenizer(fallbackTokenizer) {\n        switch (fallbackTokenizer.type) {\n            case coreTokenizer.TokenizerType.BLOCK:\n                if (this.blockFallbackTokenizer) {\n                    this.unmountTokenizer(this.blockFallbackTokenizer);\n                }\n                this.blockTokenizerMap.set(fallbackTokenizer.name, fallbackTokenizer);\n                this.blockFallbackTokenizer = fallbackTokenizer;\n                break;\n            case coreTokenizer.TokenizerType.INLINE:\n                if (this.inlineFallbackTokenizer) {\n                    this.unmountTokenizer(this.inlineFallbackTokenizer);\n                }\n                this.inlineTokenizerMap.set(fallbackTokenizer.name, fallbackTokenizer);\n                this.inlineFallbackTokenizer = fallbackTokenizer;\n                break;\n        }\n        return this;\n    }\n    setDefaultParseOptions(options = {}) {\n        this.defaultParseOptions = Object.assign({ presetDefinitions: [], presetFootnoteDefinitions: [], shouldReservePosition: false }, options);\n    }\n    parse(contents, options = {}) {\n        const { shouldReservePosition, presetDefinitions, presetFootnoteDefinitions } = Object.assign(Object.assign({}, this.defaultParseOptions), options);\n        const nodePointsIterator = character.createNodePointGenerator(contents);\n        const linesIterator = createPhrasingLineGenerator(nodePointsIterator);\n        const processor = createProcessor({\n            inlineTokenizers: this.inlineTokenizers,\n            inlineTokenizerMap: this.inlineTokenizerMap,\n            blockTokenizers: this.blockTokenizers,\n            blockTokenizerMap: this.blockTokenizerMap,\n            blockFallbackTokenizer: this.blockFallbackTokenizer,\n            inlineFallbackTokenizer: this.inlineFallbackTokenizer,\n            shouldReservePosition,\n            presetDefinitions,\n            presetFootnoteDefinitions,\n        });\n        const root = processor.process(linesIterator);\n        return root;\n    }\n    _replaceTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer) {\n        this._unregisterTokenizer(tokenizers, tokenizerMap, tokenizer.name);\n        this._registerTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer);\n    }\n    _registerTokenizer(tokenizers, tokenizerMap, tokenizer, registerBeforeTokenizer) {\n        if (tokenizerMap.has(tokenizer.name)) {\n            const olderTokenizer = tokenizerMap.get(tokenizer.name);\n            if (olderTokenizer != null) {\n                throw new TypeError(`[useTokenizer] Name(${tokenizer.name}) has been registered.`);\n            }\n        }\n        tokenizerMap.set(tokenizer.name, tokenizer);\n        let index = 0;\n        for (; index < tokenizers.length; ++index) {\n            const t = tokenizers[index];\n            if (registerBeforeTokenizer === t.name)\n                break;\n            if (tokenizer.priority > t.priority)\n                break;\n        }\n        if (index < 0 || index >= tokenizers.length)\n            tokenizers.push(tokenizer);\n        else\n            tokenizers.splice(index, 0, tokenizer);\n    }\n    _unregisterTokenizer(tokenizers, tokenizerMap, tokenizerOrName) {\n        var _a, _b;\n        const tokenizerName = typeof tokenizerOrName === 'string' ? tokenizerOrName : tokenizerOrName.name;\n        const existed = tokenizerMap.delete(tokenizerName);\n        if (!existed)\n            return;\n        if (((_a = this.blockFallbackTokenizer) === null || _a === void 0 ? void 0 : _a.name) === tokenizerName)\n            this.blockFallbackTokenizer = null;\n        if (((_b = this.inlineFallbackTokenizer) === null || _b === void 0 ? void 0 : _b.name) === tokenizerName)\n            this.inlineFallbackTokenizer = null;\n        const index = tokenizers.findIndex(tokenizer => tokenizer.name === tokenizerName);\n        if (index >= 0)\n            tokenizers.splice(index, 1);\n    }\n}\n\nexports.DefaultParser = DefaultParser;\nexports.createBlockContentProcessor = createBlockContentProcessor;\nexports.createPhrasingContentProcessor = createPhrasingContentProcessor;\nexports.createProcessor = createProcessor;\nexports.createProcessorHook = createProcessorHook;\nexports.createProcessorHookGroups = createProcessorHookGroups;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar ast = require('@yozora/ast');\n\nexports.TokenizerType = void 0;\n(function (TokenizerType) {\n    TokenizerType[\"BLOCK\"] = \"block\";\n    TokenizerType[\"INLINE\"] = \"inline\";\n})(exports.TokenizerType || (exports.TokenizerType = {}));\nexports.TokenizerPriority = void 0;\n(function (TokenizerPriority) {\n    TokenizerPriority[TokenizerPriority[\"ATOMIC\"] = 10] = \"ATOMIC\";\n    TokenizerPriority[TokenizerPriority[\"FENCED_BLOCK\"] = 10] = \"FENCED_BLOCK\";\n    TokenizerPriority[TokenizerPriority[\"CONTAINING_BLOCK\"] = 10] = \"CONTAINING_BLOCK\";\n    TokenizerPriority[TokenizerPriority[\"INTERRUPTABLE_BLOCK\"] = 2] = \"INTERRUPTABLE_BLOCK\";\n    TokenizerPriority[TokenizerPriority[\"IMAGES\"] = 4] = \"IMAGES\";\n    TokenizerPriority[TokenizerPriority[\"LINKS\"] = 3] = \"LINKS\";\n    TokenizerPriority[TokenizerPriority[\"CONTAINING_INLINE\"] = 2] = \"CONTAINING_INLINE\";\n    TokenizerPriority[TokenizerPriority[\"SOFT_INLINE\"] = 1] = \"SOFT_INLINE\";\n    TokenizerPriority[TokenizerPriority[\"FALLBACK\"] = -1] = \"FALLBACK\";\n})(exports.TokenizerPriority || (exports.TokenizerPriority = {}));\n\nclass BaseInlineTokenizer {\n    constructor(props) {\n        this.type = exports.TokenizerType.INLINE;\n        this.name = props.name;\n        this.priority = props.priority;\n    }\n    toString() {\n        return this.name;\n    }\n}\nfunction* genFindDelimiter(_findDelimiter) {\n    let lastEndIndex = -1;\n    let delimiter = null;\n    while (true) {\n        const [startIndex, endIndex] = yield delimiter;\n        if (lastEndIndex === endIndex) {\n            if (delimiter == null || delimiter.startIndex >= startIndex)\n                continue;\n        }\n        lastEndIndex = endIndex;\n        delimiter = _findDelimiter(startIndex, endIndex);\n    }\n}\n\nclass BaseBlockTokenizer {\n    constructor(props) {\n        this.type = exports.TokenizerType.BLOCK;\n        this.name = props.name;\n        this.priority = props.priority;\n    }\n    extractPhrasingContentLines(_token) {\n        return null;\n    }\n    buildBlockToken(_lines, _originalToken) {\n        return null;\n    }\n    toString() {\n        return this.name;\n    }\n}\n\nfunction calcStartPoint(nodePoints, index) {\n    const { line, column, offset } = nodePoints[index];\n    return { line, column, offset };\n}\nfunction calcEndPoint(nodePoints, index) {\n    const { line, column, offset } = nodePoints[index];\n    return { line, column: column + 1, offset: offset + 1 };\n}\n\nfunction calcPositionFromPhrasingContentLines(lines) {\n    const firstLine = lines[0];\n    const lastLine = lines[lines.length - 1];\n    const position = {\n        start: calcStartPoint(firstLine.nodePoints, firstLine.startIndex),\n        end: calcEndPoint(lastLine.nodePoints, lastLine.endIndex - 1),\n    };\n    return position;\n}\nfunction mergeContentLinesFaithfully(lines, startLineIndex = 0, endLineIndex = lines.length) {\n    if (startLineIndex >= endLineIndex || startLineIndex < 0 || endLineIndex > lines.length)\n        return [];\n    const contents = [];\n    for (let i = startLineIndex; i < endLineIndex; ++i) {\n        const { nodePoints, startIndex, endIndex } = lines[i];\n        for (let i = startIndex; i < endIndex; ++i) {\n            contents.push(nodePoints[i]);\n        }\n    }\n    return contents;\n}\nfunction mergeAndStripContentLines(lines, startLineIndex = 0, endLineIndex = lines.length) {\n    const contents = [];\n    if (startLineIndex >= endLineIndex || startLineIndex < 0 || endLineIndex > lines.length)\n        return [];\n    for (let i = startLineIndex; i + 1 < endLineIndex; ++i) {\n        const { nodePoints, endIndex, firstNonWhitespaceIndex } = lines[i];\n        for (let i = firstNonWhitespaceIndex; i < endIndex; ++i) {\n            contents.push(nodePoints[i]);\n        }\n    }\n    const { nodePoints, endIndex, firstNonWhitespaceIndex } = lines[endLineIndex - 1];\n    let lastNonWhitespaceIndex = endIndex - 1;\n    for (; lastNonWhitespaceIndex >= 0; --lastNonWhitespaceIndex) {\n        const p = nodePoints[lastNonWhitespaceIndex];\n        if (!character.isWhitespaceCharacter(p.codePoint))\n            break;\n    }\n    for (let i = firstNonWhitespaceIndex; i <= lastNonWhitespaceIndex; ++i) {\n        contents.push(nodePoints[i]);\n    }\n    return contents;\n}\n\nfunction encodeLinkDestination(destination) {\n    const uri = decodeURI(destination);\n    const result = encodeURI(uri);\n    return result;\n}\nfunction resolveLabelToIdentifier(label) {\n    const identifier = label.trim().replace(/\\s+/gu, ' ').toLowerCase();\n    return character.foldCase(identifier);\n}\nfunction resolveLinkLabelAndIdentifier(nodePoints, startIndex, endIndex) {\n    const label = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex, true);\n    if (label.length <= 0)\n        return null;\n    const identifier = resolveLabelToIdentifier(label);\n    return { label, identifier };\n}\nfunction eatLinkLabel(nodePoints, startIndex, _endIndex) {\n    let i = startIndex + 1;\n    const endIndex = Math.min(i + 1000, _endIndex);\n    for (; i < endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        switch (c) {\n            case character.AsciiCodePoint.BACKSLASH:\n                i += 1;\n                break;\n            case character.AsciiCodePoint.OPEN_BRACKET:\n                return { nextIndex: -1, labelAndIdentifier: null };\n            case character.AsciiCodePoint.CLOSE_BRACKET: {\n                const labelAndIdentifier = resolveLinkLabelAndIdentifier(nodePoints, startIndex + 1, i);\n                return { nextIndex: i + 1, labelAndIdentifier };\n            }\n        }\n    }\n    return { nextIndex: -1, labelAndIdentifier: null };\n}\nfunction isLinkToken(token) {\n    return token.nodeType === ast.LinkType || token.nodeType === ast.LinkReferenceType;\n}\nfunction isValidLinkText(nodePoints, startIndex, endIndex, internalTokens) {\n    return false;\n}\n\nfunction eatOptionalCharacters(nodePoints, startIndex, endIndex, codePoint) {\n    let i = startIndex;\n    while (i < endIndex && nodePoints[i].codePoint === codePoint)\n        i += 1;\n    return i;\n}\nfunction eatOptionalWhitespaces(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    while (i < endIndex && character.isWhitespaceCharacter(nodePoints[i].codePoint))\n        i += 1;\n    return i;\n}\nfunction eatOptionalBlankLines(nodePoints, startIndex, endIndex) {\n    let result = startIndex;\n    for (let i = startIndex; i < endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        if (character.isSpaceCharacter(c))\n            continue;\n        if (character.isLineEnding(c)) {\n            result = i + 1;\n            continue;\n        }\n        break;\n    }\n    return result;\n}\nfunction trimBlankLines(lines) {\n    if (lines.length <= 0)\n        return [];\n    let startLineIndex = 0;\n    for (; startLineIndex < lines.length; ++startLineIndex) {\n        const line = lines[startLineIndex];\n        if (line.firstNonWhitespaceIndex < line.endIndex)\n            break;\n    }\n    let endLineIndex = lines.length - 1;\n    for (; endLineIndex > startLineIndex; --endLineIndex) {\n        const line = lines[endLineIndex];\n        if (line.firstNonWhitespaceIndex < line.endIndex)\n            break;\n    }\n    if (startLineIndex > endLineIndex)\n        return [];\n    return lines.slice(startLineIndex, endLineIndex + 1);\n}\n\nexports.BaseBlockTokenizer = BaseBlockTokenizer;\nexports.BaseInlineTokenizer = BaseInlineTokenizer;\nexports.calcEndPoint = calcEndPoint;\nexports.calcPositionFromPhrasingContentLines = calcPositionFromPhrasingContentLines;\nexports.calcStartPoint = calcStartPoint;\nexports.eatLinkLabel = eatLinkLabel;\nexports.eatOptionalBlankLines = eatOptionalBlankLines;\nexports.eatOptionalCharacters = eatOptionalCharacters;\nexports.eatOptionalWhitespaces = eatOptionalWhitespaces;\nexports.encodeLinkDestination = encodeLinkDestination;\nexports.genFindDelimiter = genFindDelimiter;\nexports.isLinkToken = isLinkToken;\nexports.isValidLinkText = isValidLinkText;\nexports.mergeAndStripContentLines = mergeAndStripContentLines;\nexports.mergeContentLinesFaithfully = mergeContentLinesFaithfully;\nexports.resolveLabelToIdentifier = resolveLabelToIdentifier;\nexports.resolveLinkLabelAndIdentifier = resolveLinkLabelAndIdentifier;\nexports.trimBlankLines = trimBlankLines;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst isProduction = process.env.NODE_ENV === 'production';\nconst prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition)\n        return;\n    if (isProduction)\n        throw new Error(prefix);\n    if (message == null)\n        throw new Error(prefix + ': ');\n    throw new Error(prefix + ': ' + (message instanceof Function ? message() : message));\n}\n\nexports[\"default\"] = invariant;\nexports.invariant = invariant;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar coreParser = require('@yozora/core-parser');\nvar AutolinkTokenizer = require('@yozora/tokenizer-autolink');\nvar AutolinkExtensionTokenizer = require('@yozora/tokenizer-autolink-extension');\nvar BlockquoteTokenizer = require('@yozora/tokenizer-blockquote');\nvar BreakTokenizer = require('@yozora/tokenizer-break');\nvar DefinitionTokenizer = require('@yozora/tokenizer-definition');\nvar DeleteTokenizer = require('@yozora/tokenizer-delete');\nvar EmphasisTokenizer = require('@yozora/tokenizer-emphasis');\nvar FencedCodeTokenizer = require('@yozora/tokenizer-fenced-code');\nvar HeadingTokenizer = require('@yozora/tokenizer-heading');\nvar HtmlBlockTokenizer = require('@yozora/tokenizer-html-block');\nvar HtmlInlineTokenizer = require('@yozora/tokenizer-html-inline');\nvar ImageTokenizer = require('@yozora/tokenizer-image');\nvar ImageReferenceTokenizer = require('@yozora/tokenizer-image-reference');\nvar IndentedCodeTokenizer = require('@yozora/tokenizer-indented-code');\nvar InlineCodeTokenizer = require('@yozora/tokenizer-inline-code');\nvar LinkTokenizer = require('@yozora/tokenizer-link');\nvar LinkReferenceTokenizer = require('@yozora/tokenizer-link-reference');\nvar ListTokenizer = require('@yozora/tokenizer-list');\nvar ParagraphTokenizer = require('@yozora/tokenizer-paragraph');\nvar SetextHeadingTokenizer = require('@yozora/tokenizer-setext-heading');\nvar TableTokenizer = require('@yozora/tokenizer-table');\nvar TextTokenizer = require('@yozora/tokenizer-text');\nvar ThematicBreakTokenizer = require('@yozora/tokenizer-thematic-break');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar AutolinkTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(AutolinkTokenizer);\nvar AutolinkExtensionTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(AutolinkExtensionTokenizer);\nvar BlockquoteTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(BlockquoteTokenizer);\nvar BreakTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(BreakTokenizer);\nvar DefinitionTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(DefinitionTokenizer);\nvar DeleteTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(DeleteTokenizer);\nvar EmphasisTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(EmphasisTokenizer);\nvar FencedCodeTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(FencedCodeTokenizer);\nvar HeadingTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(HeadingTokenizer);\nvar HtmlBlockTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(HtmlBlockTokenizer);\nvar HtmlInlineTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(HtmlInlineTokenizer);\nvar ImageTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ImageTokenizer);\nvar ImageReferenceTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ImageReferenceTokenizer);\nvar IndentedCodeTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(IndentedCodeTokenizer);\nvar InlineCodeTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(InlineCodeTokenizer);\nvar LinkTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(LinkTokenizer);\nvar LinkReferenceTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(LinkReferenceTokenizer);\nvar ListTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ListTokenizer);\nvar ParagraphTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ParagraphTokenizer);\nvar SetextHeadingTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(SetextHeadingTokenizer);\nvar TableTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(TableTokenizer);\nvar TextTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(TextTokenizer);\nvar ThematicBreakTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(ThematicBreakTokenizer);\n\nclass GfmExParser extends coreParser.DefaultParser {\n    constructor(props = {}) {\n        var _a, _b;\n        super(Object.assign(Object.assign({}, props), { blockFallbackTokenizer: (_a = props.blockFallbackTokenizer) !== null && _a !== void 0 ? _a : new ParagraphTokenizer__default[\"default\"](), inlineFallbackTokenizer: (_b = props.inlineFallbackTokenizer) !== null && _b !== void 0 ? _b : new TextTokenizer__default[\"default\"]() }));\n        this\n            .useTokenizer(new IndentedCodeTokenizer__default[\"default\"]())\n            .useTokenizer(new HtmlBlockTokenizer__default[\"default\"]())\n            .useTokenizer(new SetextHeadingTokenizer__default[\"default\"]())\n            .useTokenizer(new ThematicBreakTokenizer__default[\"default\"]())\n            .useTokenizer(new BlockquoteTokenizer__default[\"default\"]())\n            .useTokenizer(new ListTokenizer__default[\"default\"]({ enableTaskListItem: true }))\n            .useTokenizer(new HeadingTokenizer__default[\"default\"]())\n            .useTokenizer(new FencedCodeTokenizer__default[\"default\"]())\n            .useTokenizer(new DefinitionTokenizer__default[\"default\"]())\n            .useTokenizer(new TableTokenizer__default[\"default\"]())\n            .useTokenizer(new HtmlInlineTokenizer__default[\"default\"]())\n            .useTokenizer(new InlineCodeTokenizer__default[\"default\"]())\n            .useTokenizer(new AutolinkTokenizer__default[\"default\"]())\n            .useTokenizer(new AutolinkExtensionTokenizer__default[\"default\"]())\n            .useTokenizer(new BreakTokenizer__default[\"default\"]())\n            .useTokenizer(new ImageTokenizer__default[\"default\"]())\n            .useTokenizer(new ImageReferenceTokenizer__default[\"default\"]())\n            .useTokenizer(new LinkTokenizer__default[\"default\"]())\n            .useTokenizer(new LinkReferenceTokenizer__default[\"default\"]())\n            .useTokenizer(new EmphasisTokenizer__default[\"default\"]())\n            .useTokenizer(new DeleteTokenizer__default[\"default\"]());\n    }\n}\n\nexports.GfmExParser = GfmExParser;\nexports[\"default\"] = GfmExParser;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar tokenizerAutolink = require('@yozora/tokenizer-autolink');\nvar ast = require('@yozora/ast');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nfunction eatExtendEmailAddress(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    if (i >= endIndex || !character.isAlphanumeric(nodePoints[i].codePoint)) {\n        return { valid: false, nextIndex: i + 1 };\n    }\n    for (i += 1; i < endIndex; i += 1) {\n        const c = nodePoints[i].codePoint;\n        if (character.isAlphanumeric(c) ||\n            c === character.AsciiCodePoint.DOT ||\n            c === character.AsciiCodePoint.MINUS_SIGN ||\n            c === character.AsciiCodePoint.UNDERSCORE ||\n            c === character.AsciiCodePoint.PLUS_SIGN)\n            continue;\n        break;\n    }\n    if (i === startIndex ||\n        i + 2 >= endIndex ||\n        nodePoints[i].codePoint !== character.AsciiCodePoint.AT_SIGN ||\n        !character.isAlphanumeric(nodePoints[i + 1].codePoint))\n        return { valid: false, nextIndex: i + 1 };\n    let countOfPeriod = 0;\n    for (i += 2; i < endIndex; i += 1) {\n        const c = nodePoints[i].codePoint;\n        if (c === character.AsciiCodePoint.DOT) {\n            countOfPeriod += 1;\n            continue;\n        }\n        if (character.isAlphanumeric(c) || c === character.AsciiCodePoint.MINUS_SIGN || c === character.AsciiCodePoint.UNDERSCORE)\n            continue;\n        break;\n    }\n    const lastCharacter = nodePoints[i - 1].codePoint;\n    if (lastCharacter === character.AsciiCodePoint.MINUS_SIGN || lastCharacter === character.AsciiCodePoint.UNDERSCORE)\n        return { valid: false, nextIndex: i };\n    if (lastCharacter === character.AsciiCodePoint.DOT) {\n        i -= 1;\n        countOfPeriod -= 1;\n    }\n    if (countOfPeriod <= 0)\n        return { valid: false, nextIndex: i };\n    return { valid: true, nextIndex: i };\n}\n\nfunction eatExtendedUrl(nodePoints, startIndex, endIndex) {\n    const schema = tokenizerAutolink.eatAutolinkSchema(nodePoints, startIndex, endIndex);\n    const { nextIndex } = schema;\n    if (!schema.valid ||\n        nextIndex + 3 >= endIndex ||\n        nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.COLON ||\n        nodePoints[nextIndex + 1].codePoint !== character.AsciiCodePoint.SLASH ||\n        nodePoints[nextIndex + 2].codePoint !== character.AsciiCodePoint.SLASH)\n        return { valid: false, nextIndex: nextIndex + 1 };\n    const result = eatValidDomain(nodePoints, nextIndex + 3, endIndex);\n    result.nextIndex = eatOptionalDomainFollows(nodePoints, result.nextIndex, endIndex);\n    return result;\n}\nfunction eatWWWDomain(nodePoints, startIndex, endIndex) {\n    const segment = eatDomainSegment(nodePoints, startIndex, endIndex);\n    const nextIndex = segment.nextIndex;\n    if (!segment.valid ||\n        nextIndex >= endIndex ||\n        nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.DOT ||\n        nextIndex - startIndex !== 3)\n        return { valid: false, nextIndex };\n    for (let i = startIndex; i < nextIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        if (c !== character.AsciiCodePoint.LOWERCASE_W && c !== character.AsciiCodePoint.UPPERCASE_W)\n            return { valid: false, nextIndex };\n    }\n    const result = eatValidDomain(nodePoints, nextIndex + 1, endIndex);\n    result.nextIndex = eatOptionalDomainFollows(nodePoints, result.nextIndex, endIndex);\n    return result;\n}\nfunction eatOptionalDomainFollows(nodePoints, startIndex, endIndex) {\n    let nextIndex = startIndex;\n    for (; nextIndex < endIndex; ++nextIndex) {\n        const c = nodePoints[nextIndex].codePoint;\n        if (character.isWhitespaceCharacter(c) || c === character.AsciiCodePoint.OPEN_ANGLE)\n            break;\n    }\n    for (nextIndex -= 1; nextIndex >= startIndex; nextIndex -= 1) {\n        const c = nodePoints[nextIndex].codePoint;\n        if (character.isPunctuationCharacter(c) ||\n            c === character.AsciiCodePoint.QUESTION_MARK ||\n            c === character.AsciiCodePoint.EXCLAMATION_MARK ||\n            c === character.AsciiCodePoint.DOT ||\n            c === character.AsciiCodePoint.COMMA ||\n            c === character.AsciiCodePoint.COLON ||\n            c === character.AsciiCodePoint.ASTERISK ||\n            c === character.AsciiCodePoint.UNDERSCORE ||\n            c === character.AsciiCodePoint.TILDE)\n            continue;\n        break;\n    }\n    if (nextIndex >= startIndex &&\n        nextIndex + 1 < endIndex &&\n        nodePoints[nextIndex + 1].codePoint === character.AsciiCodePoint.CLOSE_PARENTHESIS) {\n        let countOfOpenParenthesis = 0;\n        for (let i = startIndex; i < nextIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.OPEN_PARENTHESIS:\n                    countOfOpenParenthesis += 1;\n                    break;\n                case character.AsciiCodePoint.CLOSE_PARENTHESIS:\n                    countOfOpenParenthesis -= 1;\n                    break;\n            }\n        }\n        if (countOfOpenParenthesis > 0) {\n            nextIndex += 2;\n            countOfOpenParenthesis -= 1;\n            for (; nextIndex < endIndex && countOfOpenParenthesis > 0;) {\n                const c = nodePoints[nextIndex].codePoint;\n                if (c !== character.AsciiCodePoint.CLOSE_PARENTHESIS)\n                    break;\n                countOfOpenParenthesis -= 1;\n                nextIndex += 1;\n            }\n            nextIndex -= 1;\n        }\n    }\n    if (nextIndex + 1 < endIndex &&\n        nodePoints[nextIndex + 1].codePoint === character.AsciiCodePoint.SEMICOLON) {\n        let i = nextIndex;\n        for (; i >= startIndex; --i) {\n            const c = nodePoints[i].codePoint;\n            if (!character.isAlphanumeric(c))\n                break;\n        }\n        if (i >= startIndex && nodePoints[i].codePoint === character.AsciiCodePoint.AMPERSAND)\n            nextIndex = i - 1;\n    }\n    return nextIndex + 1;\n}\nfunction eatValidDomain(nodePoints, startIndex, endIndex) {\n    const segment = eatDomainSegment(nodePoints, startIndex, endIndex);\n    if (!segment.valid || segment.nextIndex >= endIndex) {\n        return { valid: false, nextIndex: segment.nextIndex };\n    }\n    let nextIndex = segment.nextIndex, countOfPeriod = 0;\n    let countOfUnderscoreOfLastTwoSegment = segment.hasUnderscore ? 2 : 0;\n    for (; nextIndex < endIndex;) {\n        if (nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.DOT)\n            break;\n        const segment = eatDomainSegment(nodePoints, nextIndex + 1, endIndex);\n        if (!segment.valid)\n            break;\n        nextIndex = segment.nextIndex;\n        countOfPeriod += 1;\n        countOfUnderscoreOfLastTwoSegment >>>= 1;\n        countOfUnderscoreOfLastTwoSegment |= segment.hasUnderscore ? 2 : 0;\n    }\n    if (countOfPeriod <= 0 && countOfUnderscoreOfLastTwoSegment === 0) {\n        return { valid: false, nextIndex };\n    }\n    return { valid: true, nextIndex };\n}\nfunction eatDomainSegment(nodePoints, startIndex, endIndex) {\n    let i = startIndex, hasUnderscore = false;\n    for (; i < endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        if (c === character.AsciiCodePoint.UNDERSCORE) {\n            hasUnderscore = true;\n            continue;\n        }\n        if (!character.isAlphanumeric(c) && c !== character.AsciiCodePoint.MINUS_SIGN)\n            break;\n    }\n    if (i > startIndex)\n        return { valid: true, nextIndex: i, hasUnderscore };\n    return { valid: false, nextIndex: i, hasUnderscore };\n}\n\nconst helpers = [\n    { contentType: 'uri', eat: eatExtendedUrl },\n    { contentType: 'uri-www', eat: eatWWWDomain },\n    { contentType: 'email', eat: eatExtendEmailAddress },\n];\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        processSingleDelimiter,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        const blockStartIndex = api.getBlockStartIndex();\n        for (let i = startIndex; i < endIndex; ++i) {\n            {\n                let j = i;\n                let flag = false;\n                for (; j < endIndex; ++j) {\n                    const c = nodePoints[j].codePoint;\n                    if (character.isWhitespaceCharacter(c) ||\n                        c === character.AsciiCodePoint.ASTERISK ||\n                        c === character.AsciiCodePoint.UNDERSCORE ||\n                        c === character.AsciiCodePoint.TILDE ||\n                        c === character.AsciiCodePoint.OPEN_PARENTHESIS) {\n                        flag = true;\n                        continue;\n                    }\n                    if (flag || j === blockStartIndex)\n                        break;\n                    flag = false;\n                }\n                if (j >= endIndex)\n                    break;\n                i = j;\n            }\n            let nextIndex = endIndex;\n            let contentType = null;\n            for (const helper of helpers) {\n                const eatResult = helper.eat(nodePoints, i, endIndex);\n                nextIndex = Math.min(nextIndex, eatResult.nextIndex);\n                if (eatResult.valid) {\n                    contentType = helper.contentType;\n                    nextIndex = eatResult.nextIndex;\n                    break;\n                }\n            }\n            if (contentType == null) {\n                i = Math.max(i, nextIndex - 1);\n                continue;\n            }\n            if (nextIndex <= endIndex) {\n                return {\n                    type: 'full',\n                    startIndex: i,\n                    endIndex: nextIndex,\n                    contentType,\n                };\n            }\n            i = nextIndex - 1;\n        }\n        return null;\n    }\n    function processSingleDelimiter(delimiter) {\n        const token = {\n            nodeType: ast.LinkType,\n            startIndex: delimiter.startIndex,\n            endIndex: delimiter.endIndex,\n            contentType: delimiter.contentType,\n            children: api.resolveFallbackTokens([], delimiter.startIndex, delimiter.endIndex),\n        };\n        return [token];\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const nodePoints = api.getNodePoints();\n            let url = character.calcStringFromNodePoints(nodePoints, token.startIndex, token.endIndex);\n            switch (token.contentType) {\n                case 'email':\n                    url = 'mailto:' + url;\n                    break;\n                case 'uri-www':\n                    url = 'http://' + url;\n                    break;\n            }\n            const children = api.parseInlineTokens(token.children);\n            const node = api.shouldReservePosition\n                ? { type: ast.LinkType, position: api.calcPosition(token), url, children }\n                : { type: ast.LinkType, url, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-autolink-extension';\n\nclass AutolinkExtensionTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.AutolinkExtensionTokenizer = AutolinkExtensionTokenizer;\nexports.AutolinkExtensionTokenizerName = uniqueName;\nexports.autolinkExtensionMatch = match;\nexports.autolinkExtensionParse = parse;\nexports[\"default\"] = AutolinkExtensionTokenizer;\nexports.eatDomainSegment = eatDomainSegment;\nexports.eatExtendEmailAddress = eatExtendEmailAddress;\nexports.eatExtendedUrl = eatExtendedUrl;\nexports.eatOptionalDomainFollows = eatOptionalDomainFollows;\nexports.eatValidDomain = eatValidDomain;\nexports.eatWWWDomain = eatWWWDomain;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar ast = require('@yozora/ast');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nfunction eatEmailAddress(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    for (; i < endIndex; i += 1) {\n        const c = nodePoints[i].codePoint;\n        if (character.isAsciiLetter(c) || character.isAsciiDigitCharacter(c))\n            continue;\n        if (c !== character.AsciiCodePoint.DOT &&\n            c !== character.AsciiCodePoint.EXCLAMATION_MARK &&\n            c !== character.AsciiCodePoint.NUMBER_SIGN &&\n            c !== character.AsciiCodePoint.DOLLAR_SIGN &&\n            c !== character.AsciiCodePoint.PERCENT_SIGN &&\n            c !== character.AsciiCodePoint.AMPERSAND &&\n            c !== character.AsciiCodePoint.SINGLE_QUOTE &&\n            c !== character.AsciiCodePoint.ASTERISK &&\n            c !== character.AsciiCodePoint.PLUS_SIGN &&\n            c !== character.AsciiCodePoint.SLASH &&\n            c !== character.AsciiCodePoint.EQUALS_SIGN &&\n            c !== character.AsciiCodePoint.QUESTION_MARK &&\n            c !== character.AsciiCodePoint.CARET &&\n            c !== character.AsciiCodePoint.UNDERSCORE &&\n            c !== character.AsciiCodePoint.BACKTICK &&\n            c !== character.AsciiCodePoint.OPEN_BRACE &&\n            c !== character.AsciiCodePoint.VERTICAL_SLASH &&\n            c !== character.AsciiCodePoint.CLOSE_BRACE &&\n            c !== character.AsciiCodePoint.TILDE &&\n            c !== character.AsciiCodePoint.MINUS_SIGN)\n            break;\n    }\n    if (i === startIndex ||\n        i + 1 >= endIndex ||\n        nodePoints[i].codePoint !== character.AsciiCodePoint.AT_SIGN ||\n        !character.isAlphanumeric(nodePoints[i + 1].codePoint))\n        return { valid: false, nextIndex: i + 1 };\n    i = eatAddressPart0(nodePoints, i + 2, endIndex);\n    for (; i + 1 < endIndex;) {\n        let c = nodePoints[i].codePoint;\n        if (c !== character.AsciiCodePoint.DOT)\n            break;\n        c = nodePoints[i + 1].codePoint;\n        if (!character.isAsciiLetter(c) && !character.isAsciiDigitCharacter(c))\n            break;\n        i = eatAddressPart0(nodePoints, i + 2, endIndex);\n    }\n    return { valid: true, nextIndex: i };\n}\nfunction eatAddressPart0(nodePoints, startIndex, endIndex) {\n    let i = startIndex, result = -1;\n    for (let _endIndex = Math.min(endIndex, i + 62); i < _endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        if (character.isAsciiLetter(c) || character.isAsciiDigitCharacter(c)) {\n            result = i;\n            continue;\n        }\n        if (c !== character.AsciiCodePoint.MINUS_SIGN)\n            break;\n    }\n    return result >= startIndex ? result + 1 : startIndex;\n}\n\nfunction eatAbsoluteUri(nodePoints, startIndex, endIndex) {\n    const schema = eatAutolinkSchema(nodePoints, startIndex, endIndex);\n    let { nextIndex } = schema;\n    if (!schema.valid ||\n        nextIndex >= endIndex ||\n        nodePoints[nextIndex].codePoint !== character.AsciiCodePoint.COLON)\n        return { valid: false, nextIndex };\n    for (nextIndex += 1; nextIndex < endIndex; ++nextIndex) {\n        const c = nodePoints[nextIndex].codePoint;\n        if (!character.isAsciiCharacter(c) ||\n            character.isWhitespaceCharacter(c) ||\n            character.isAsciiControlCharacter(c) ||\n            c === character.AsciiCodePoint.OPEN_ANGLE ||\n            c === character.AsciiCodePoint.CLOSE_ANGLE)\n            break;\n    }\n    return { valid: true, nextIndex };\n}\nfunction eatAutolinkSchema(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    const c = nodePoints[i].codePoint;\n    if (!character.isAsciiLetter(c))\n        return { valid: false, nextIndex: i + 1 };\n    for (i += 1; i < endIndex; ++i) {\n        const d = nodePoints[i].codePoint;\n        if (character.isAlphanumeric(d) ||\n            d === character.AsciiCodePoint.PLUS_SIGN ||\n            d === character.AsciiCodePoint.DOT ||\n            d === character.AsciiCodePoint.MINUS_SIGN)\n            continue;\n        break;\n    }\n    const count = i - startIndex;\n    if (count < 2 || count > 32)\n        return { valid: false, nextIndex: i + 1 };\n    return { valid: true, nextIndex: i };\n}\n\nconst helpers = [\n    { contentType: 'uri', eat: eatAbsoluteUri },\n    { contentType: 'email', eat: eatEmailAddress },\n];\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        processSingleDelimiter,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        for (let i = startIndex; i < endIndex; ++i) {\n            if (nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_ANGLE)\n                continue;\n            let nextIndex = endIndex;\n            let contentType = null;\n            for (const helper of helpers) {\n                const eatResult = helper.eat(nodePoints, i + 1, endIndex);\n                nextIndex = Math.min(nextIndex, eatResult.nextIndex);\n                if (eatResult.valid) {\n                    contentType = helper.contentType;\n                    nextIndex = eatResult.nextIndex;\n                    break;\n                }\n            }\n            if (contentType == null) {\n                i = Math.max(i, nextIndex - 1);\n                continue;\n            }\n            if (nextIndex < endIndex && nodePoints[nextIndex].codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {\n                return {\n                    type: 'full',\n                    startIndex: i,\n                    endIndex: nextIndex + 1,\n                    contentType,\n                };\n            }\n            i = nextIndex - 1;\n        }\n        return null;\n    }\n    function processSingleDelimiter(delimiter) {\n        const token = {\n            nodeType: ast.LinkType,\n            startIndex: delimiter.startIndex,\n            endIndex: delimiter.endIndex,\n            contentType: delimiter.contentType,\n            children: api.resolveFallbackTokens([], delimiter.startIndex + 1, delimiter.endIndex - 1),\n        };\n        return [token];\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const nodePoints = api.getNodePoints();\n            let url = character.calcStringFromNodePoints(nodePoints, token.startIndex + 1, token.endIndex - 1);\n            if (token.contentType === 'email') {\n                url = 'mailto:' + url;\n            }\n            const encodedUrl = coreTokenizer.encodeLinkDestination(url);\n            const children = api.parseInlineTokens(token.children);\n            const node = api.shouldReservePosition\n                ? { type: ast.LinkType, position: api.calcPosition(token), url: encodedUrl, children }\n                : { type: ast.LinkType, url: encodedUrl, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-autolink';\n\nclass AutolinkTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.AutolinkTokenizer = AutolinkTokenizer;\nexports.AutolinkTokenizerName = uniqueName;\nexports.autolinkMatch = match;\nexports.autolinkParse = parse;\nexports[\"default\"] = AutolinkTokenizer;\nexports.eatAbsoluteUri = eatAbsoluteUri;\nexports.eatAutolinkSchema = eatAutolinkSchema;\nexports.eatEmailAddress = eatEmailAddress;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function () {\n    return {\n        isContainingBlock: true,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n        eatContinuationText,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex ||\n            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)\n            return null;\n        let nextIndex = firstNonWhitespaceIndex + 1;\n        if (nextIndex < endIndex && character.isSpaceCharacter(nodePoints[nextIndex].codePoint)) {\n            nextIndex += 1;\n            if (nextIndex < endIndex && nodePoints[nextIndex].codePoint === character.VirtualCodePoint.SPACE) {\n                nextIndex += 1;\n            }\n        }\n        const token = {\n            nodeType: ast.BlockquoteType,\n            position: {\n                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            children: [],\n        };\n        return { token, nextIndex };\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        const result = eatOpener(line);\n        if (result == null)\n            return null;\n        return {\n            token: result.token,\n            nextIndex: result.nextIndex,\n            remainingSibling: prevSiblingToken,\n        };\n    }\n    function eatContinuationText(line, token, parentToken) {\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;\n        if (countOfPrecedeSpaces >= 4 ||\n            firstNonWhitespaceIndex >= endIndex ||\n            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE) {\n            if (parentToken.nodeType === ast.BlockquoteType) {\n                return { status: 'opening', nextIndex: startIndex };\n            }\n            return { status: 'notMatched' };\n        }\n        const nextIndex = firstNonWhitespaceIndex + 1 < endIndex &&\n            character.isSpaceCharacter(nodePoints[firstNonWhitespaceIndex + 1].codePoint)\n            ? firstNonWhitespaceIndex + 2\n            : firstNonWhitespaceIndex + 1;\n        return { status: 'opening', nextIndex };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const children = api.parseBlockTokens(token.children);\n            const node = api.shouldReservePosition\n                ? { type: ast.BlockquoteType, position: token.position, children }\n                : { type: ast.BlockquoteType, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-blockquote';\n\nclass BlockquoteTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_BLOCK,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.BlockquoteTokenizer = BlockquoteTokenizer;\nexports.BlockquoteTokenizerName = uniqueName;\nexports.blockquoteMatch = match;\nexports.blockquoteParse = parse;\nexports[\"default\"] = BlockquoteTokenizer;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst uniqueName = '@yozora/tokenizer-break';\nvar BreakTokenMarkerType;\n(function (BreakTokenMarkerType) {\n    BreakTokenMarkerType[\"BACKSLASH\"] = \"backslash\";\n    BreakTokenMarkerType[\"MORE_THAN_TWO_SPACES\"] = \"more-than-two-spaces\";\n})(BreakTokenMarkerType || (BreakTokenMarkerType = {}));\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        processSingleDelimiter,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        for (let i = startIndex + 1; i < endIndex; ++i) {\n            if (nodePoints[i].codePoint !== character.VirtualCodePoint.LINE_END)\n                continue;\n            const c = nodePoints[i - 1].codePoint;\n            let _start = null;\n            let markerType = null;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH: {\n                    let x = i - 2;\n                    for (; x >= startIndex; x -= 1) {\n                        if (nodePoints[x].codePoint !== character.AsciiCodePoint.BACKSLASH)\n                            break;\n                    }\n                    if (((i - x) & 1) === 0) {\n                        _start = i - 1;\n                        markerType = BreakTokenMarkerType.BACKSLASH;\n                    }\n                    break;\n                }\n                case character.AsciiCodePoint.SPACE: {\n                    let x = i - 2;\n                    for (; x >= startIndex; x -= 1) {\n                        if (nodePoints[x].codePoint !== character.AsciiCodePoint.SPACE)\n                            break;\n                    }\n                    if (i - x > 2) {\n                        _start = x + 1;\n                        markerType = BreakTokenMarkerType.MORE_THAN_TWO_SPACES;\n                    }\n                    break;\n                }\n            }\n            if (_start == null || markerType == null)\n                continue;\n            return {\n                type: 'full',\n                markerType,\n                startIndex: _start,\n                endIndex: i,\n            };\n        }\n        return null;\n    }\n    function processSingleDelimiter(delimiter) {\n        const token = {\n            nodeType: ast.BreakType,\n            startIndex: delimiter.startIndex,\n            endIndex: delimiter.endIndex,\n        };\n        return [token];\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const node = api.shouldReservePosition\n                ? { type: ast.BreakType, position: api.calcPosition(token) }\n                : { type: ast.BreakType };\n            return node;\n        }),\n    };\n};\n\nclass BreakTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.SOFT_INLINE,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.BreakTokenizer = BreakTokenizer;\nexports.BreakTokenizerName = uniqueName;\nexports.breakMatch = match;\nexports.breakParse = parse;\nexports[\"default\"] = BreakTokenizer;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar ast = require('@yozora/ast');\n\nfunction eatAndCollectLinkDestination(nodePoints, startIndex, endIndex, state) {\n    let i = startIndex;\n    if (state == null) {\n        state = {\n            saturated: false,\n            nodePoints: [],\n            hasOpenAngleBracket: false,\n            openParensCount: 0,\n        };\n    }\n    const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n    if (firstNonWhitespaceIndex >= endIndex)\n        return { nextIndex: -1, state: state };\n    if (state.nodePoints.length <= 0) {\n        i = firstNonWhitespaceIndex;\n        const p = nodePoints[i];\n        if (p.codePoint === character.AsciiCodePoint.OPEN_ANGLE) {\n            i += 1;\n            state.hasOpenAngleBracket = true;\n            state.nodePoints.push(p);\n        }\n    }\n    if (state.hasOpenAngleBracket) {\n        for (; i < endIndex; ++i) {\n            const p = nodePoints[i];\n            switch (p.codePoint) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    if (i + 1 < endIndex) {\n                        state.nodePoints.push(p);\n                        state.nodePoints.push(nodePoints[i + 1]);\n                    }\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.OPEN_ANGLE:\n                case character.VirtualCodePoint.LINE_END:\n                    return { nextIndex: -1, state: state };\n                case character.AsciiCodePoint.CLOSE_ANGLE:\n                    state.saturated = true;\n                    state.nodePoints.push(p);\n                    return { nextIndex: i + 1, state: state };\n                default:\n                    state.nodePoints.push(p);\n            }\n        }\n        return { nextIndex: i, state: state };\n    }\n    for (; i < endIndex; ++i) {\n        const p = nodePoints[i];\n        switch (p.codePoint) {\n            case character.AsciiCodePoint.BACKSLASH:\n                if (i + 1 < endIndex) {\n                    state.nodePoints.push(p);\n                    state.nodePoints.push(nodePoints[i + 1]);\n                }\n                i += 1;\n                break;\n            case character.AsciiCodePoint.OPEN_PARENTHESIS:\n                state.openParensCount += 1;\n                state.nodePoints.push(p);\n                break;\n            case character.AsciiCodePoint.CLOSE_PARENTHESIS:\n                state.openParensCount -= 1;\n                state.nodePoints.push(p);\n                if (state.openParensCount < 0) {\n                    return { nextIndex: i, state: state };\n                }\n                break;\n            default:\n                if (character.isWhitespaceCharacter(p.codePoint) || character.isAsciiControlCharacter(p.codePoint)) {\n                    state.saturated = true;\n                    return { nextIndex: i, state: state };\n                }\n                state.nodePoints.push(p);\n                break;\n        }\n    }\n    state.saturated = true;\n    return { nextIndex: i, state: state };\n}\n\nfunction eatAndCollectLinkLabel(nodePoints, startIndex, endIndex, state) {\n    let i = startIndex;\n    if (state == null) {\n        state = {\n            saturated: false,\n            nodePoints: [],\n            hasNonWhitespaceCharacter: false,\n        };\n    }\n    const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n    if (firstNonWhitespaceIndex >= endIndex)\n        return { nextIndex: -1, state: state };\n    if (state.nodePoints.length <= 0) {\n        i = firstNonWhitespaceIndex;\n        const p = nodePoints[i];\n        if (p.codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {\n            return { nextIndex: -1, state: state };\n        }\n        i += 1;\n        state.nodePoints.push(p);\n    }\n    for (; i < endIndex; ++i) {\n        const p = nodePoints[i];\n        switch (p.codePoint) {\n            case character.AsciiCodePoint.BACKSLASH:\n                state.hasNonWhitespaceCharacter = true;\n                if (i + 1 < endIndex) {\n                    state.nodePoints.push(p);\n                    state.nodePoints.push(nodePoints[i + 1]);\n                }\n                i += 1;\n                break;\n            case character.AsciiCodePoint.OPEN_BRACKET:\n                return { nextIndex: -1, state: state };\n            case character.AsciiCodePoint.CLOSE_BRACKET:\n                state.nodePoints.push(p);\n                if (state.hasNonWhitespaceCharacter) {\n                    state.saturated = true;\n                    return { nextIndex: i + 1, state: state };\n                }\n                return { nextIndex: -1, state: state };\n            default:\n                if (!character.isWhitespaceCharacter(p.codePoint)) {\n                    state.hasNonWhitespaceCharacter = true;\n                }\n                state.nodePoints.push(p);\n        }\n    }\n    return { nextIndex: 1, state: state };\n}\n\nfunction eatAndCollectLinkTitle(nodePoints, startIndex, endIndex, state) {\n    let i = startIndex;\n    if (state == null) {\n        state = {\n            saturated: false,\n            nodePoints: [],\n            wrapSymbol: null,\n        };\n    }\n    const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n    if (firstNonWhitespaceIndex >= endIndex)\n        return { nextIndex: -1, state: state };\n    if (state.nodePoints.length <= 0) {\n        i = firstNonWhitespaceIndex;\n        const p = nodePoints[i];\n        switch (p.codePoint) {\n            case character.AsciiCodePoint.DOUBLE_QUOTE:\n            case character.AsciiCodePoint.SINGLE_QUOTE:\n            case character.AsciiCodePoint.OPEN_PARENTHESIS:\n                state.wrapSymbol = p.codePoint;\n                state.nodePoints.push(p);\n                i += 1;\n                break;\n            default:\n                return { nextIndex: -1, state: state };\n        }\n    }\n    if (state.wrapSymbol == null)\n        return { nextIndex: -1, state: state };\n    switch (state.wrapSymbol) {\n        case character.AsciiCodePoint.DOUBLE_QUOTE:\n        case character.AsciiCodePoint.SINGLE_QUOTE: {\n            for (; i < endIndex; ++i) {\n                const p = nodePoints[i];\n                switch (p.codePoint) {\n                    case character.AsciiCodePoint.BACKSLASH:\n                        if (i + 1 < endIndex) {\n                            state.nodePoints.push(p);\n                            state.nodePoints.push(nodePoints[i + 1]);\n                        }\n                        i += 1;\n                        break;\n                    case state.wrapSymbol:\n                        state.saturated = true;\n                        state.nodePoints.push(p);\n                        return { nextIndex: i + 1, state: state };\n                    default:\n                        state.nodePoints.push(p);\n                }\n            }\n            break;\n        }\n        case character.AsciiCodePoint.OPEN_PARENTHESIS: {\n            for (; i < endIndex; ++i) {\n                const p = nodePoints[i];\n                switch (p.codePoint) {\n                    case character.AsciiCodePoint.BACKSLASH:\n                        if (i + 1 < endIndex) {\n                            state.nodePoints.push(p);\n                            state.nodePoints.push(nodePoints[i + 1]);\n                        }\n                        i += 1;\n                        break;\n                    case character.AsciiCodePoint.OPEN_PARENTHESIS:\n                        return { nextIndex: -1, state: state };\n                    case character.AsciiCodePoint.CLOSE_PARENTHESIS:\n                        if (i + 1 >= endIndex || nodePoints[i + 1].codePoint === character.VirtualCodePoint.LINE_END) {\n                            state.nodePoints.push(p);\n                            state.saturated = true;\n                            break;\n                        }\n                        return { nextIndex: -1, state: state };\n                    default:\n                        state.nodePoints.push(p);\n                }\n            }\n            break;\n        }\n    }\n    return { nextIndex: endIndex, state: state };\n}\n\nconst match = function (api) {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatContinuationText,\n        onClose,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex)\n            return null;\n        let i = firstNonWhitespaceIndex;\n        const { nextIndex: labelEndIndex, state: labelState } = eatAndCollectLinkLabel(nodePoints, i, endIndex, null);\n        if (labelEndIndex < 0)\n            return null;\n        const lineNo = nodePoints[startIndex].line;\n        const createInitState = () => {\n            const token = {\n                nodeType: ast.DefinitionType,\n                position: {\n                    start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                    end: coreTokenizer.calcEndPoint(nodePoints, endIndex - 1),\n                },\n                label: labelState,\n                destination: null,\n                title: null,\n                lineNoOfLabel: lineNo,\n                lineNoOfDestination: -1,\n                lineNoOfTitle: -1,\n                lines: [line],\n            };\n            return token;\n        };\n        if (!labelState.saturated) {\n            const token = createInitState();\n            return { token, nextIndex: endIndex };\n        }\n        if (labelEndIndex < 0 ||\n            labelEndIndex + 1 >= endIndex ||\n            nodePoints[labelEndIndex].codePoint !== character.AsciiCodePoint.COLON)\n            return null;\n        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, labelEndIndex + 1, endIndex);\n        if (i >= endIndex) {\n            const token = createInitState();\n            return { token, nextIndex: endIndex };\n        }\n        const { nextIndex: destinationEndIndex, state: destinationState } = eatAndCollectLinkDestination(nodePoints, i, endIndex, null);\n        if (destinationEndIndex < 0)\n            return null;\n        if (!destinationState.saturated && destinationEndIndex !== endIndex)\n            return null;\n        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, endIndex);\n        if (i >= endIndex) {\n            const token = createInitState();\n            token.destination = destinationState;\n            token.lineNoOfDestination = lineNo;\n            return { token, nextIndex: endIndex };\n        }\n        if (i === destinationEndIndex)\n            return null;\n        const { nextIndex: titleEndIndex, state: titleState } = eatAndCollectLinkTitle(nodePoints, i, endIndex, null);\n        if (titleEndIndex >= 0)\n            i = titleEndIndex;\n        if (i < endIndex) {\n            const k = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n            if (k < endIndex)\n                return null;\n        }\n        const token = createInitState();\n        token.destination = destinationState;\n        token.title = titleState;\n        token.lineNoOfDestination = lineNo;\n        token.lineNoOfTitle = lineNo;\n        return { token, nextIndex: endIndex };\n    }\n    function eatContinuationText(line, token) {\n        var _a;\n        if (token.title != null && token.title.saturated)\n            return { status: 'notMatched' };\n        const { nodePoints, startIndex, firstNonWhitespaceIndex, endIndex } = line;\n        const lineNo = nodePoints[startIndex].line;\n        let i = firstNonWhitespaceIndex;\n        if (!token.label.saturated) {\n            const { nextIndex: labelEndIndex, state: labelState } = eatAndCollectLinkLabel(nodePoints, i, endIndex, token.label);\n            if (labelEndIndex < 0) {\n                return { status: 'failedAndRollback', lines: token.lines };\n            }\n            if (!labelState.saturated) {\n                token.lines.push(line);\n                return { status: 'opening', nextIndex: endIndex };\n            }\n            if (labelEndIndex + 1 >= endIndex ||\n                nodePoints[labelEndIndex].codePoint !== character.AsciiCodePoint.COLON) {\n                return { status: 'failedAndRollback', lines: token.lines };\n            }\n            i = labelEndIndex + 1;\n        }\n        if (token.destination == null) {\n            i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n            if (i >= endIndex) {\n                return { status: 'failedAndRollback', lines: token.lines };\n            }\n            const { nextIndex: destinationEndIndex, state: destinationState } = eatAndCollectLinkDestination(nodePoints, i, endIndex, null);\n            if (destinationEndIndex < 0 || !destinationState.saturated) {\n                return { status: 'failedAndRollback', lines: token.lines };\n            }\n            i = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, endIndex);\n            if (i >= endIndex) {\n                token.destination = destinationState;\n                token.lines.push(line);\n                return { status: 'opening', nextIndex: endIndex };\n            }\n            token.lineNoOfDestination = lineNo;\n            token.lineNoOfTitle = lineNo;\n        }\n        if (token.lineNoOfTitle < 0) {\n            token.lineNoOfTitle = lineNo;\n        }\n        const { nextIndex: titleEndIndex, state: titleState } = eatAndCollectLinkTitle(nodePoints, i, endIndex, token.title);\n        token.title = titleState;\n        if (titleEndIndex < 0 ||\n            titleState.nodePoints.length <= 0 ||\n            (titleState.saturated &&\n                coreTokenizer.eatOptionalWhitespaces(nodePoints, titleEndIndex, endIndex) < endIndex)) {\n            if (token.lineNoOfDestination === token.lineNoOfTitle) {\n                return { status: 'failedAndRollback', lines: token.lines };\n            }\n            const lastLine = token.lines[token.lines.length - 1];\n            token.title = null;\n            token.position.end = coreTokenizer.calcEndPoint(lastLine.nodePoints, lastLine.endIndex - 1);\n            return {\n                status: 'closingAndRollback',\n                lines: token.lines.slice(token.lineNoOfTitle - 1),\n            };\n        }\n        token.lines.push(line);\n        const saturated = (_a = token.title) === null || _a === void 0 ? void 0 : _a.saturated;\n        return { status: saturated ? 'closing' : 'opening', nextIndex: endIndex };\n    }\n    function onClose(token) {\n        let result;\n        if (token.title == null || !token.title.saturated) {\n            if (!token.label.saturated) {\n                return { status: 'failedAndRollback', lines: token.lines };\n            }\n            if (token.destination == null || !token.destination.saturated) {\n                return { status: 'failedAndRollback', lines: token.lines };\n            }\n            if (token.title != null && !token.title.saturated) {\n                if (token.lineNoOfDestination === token.lineNoOfTitle) {\n                    return { status: 'failedAndRollback', lines: token.lines };\n                }\n                const lines = token.lines.splice(token.lineNoOfTitle - 1);\n                const lastLine = token.lines[token.lines.length - 1];\n                token.title = null;\n                token.position.end = coreTokenizer.calcEndPoint(lastLine.nodePoints, lastLine.endIndex - 1);\n                result = { status: 'closingAndRollback', lines };\n            }\n        }\n        const labelPoints = token.label.nodePoints;\n        const label = character.calcStringFromNodePoints(labelPoints, 1, labelPoints.length - 1);\n        const identifier = coreTokenizer.resolveLabelToIdentifier(label);\n        api.registerDefinitionIdentifier(identifier);\n        token._label = label;\n        token._identifier = identifier;\n        return result;\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const label = token._label;\n            const identifier = token._identifier;\n            const destinationPoints = token.destination.nodePoints;\n            const destination = destinationPoints[0].codePoint === character.AsciiCodePoint.OPEN_ANGLE\n                ? character.calcEscapedStringFromNodePoints(destinationPoints, 1, destinationPoints.length - 1, true)\n                : character.calcEscapedStringFromNodePoints(destinationPoints, 0, destinationPoints.length, true);\n            const url = coreTokenizer.encodeLinkDestination(destination);\n            const title = token.title == null\n                ? undefined\n                : character.calcEscapedStringFromNodePoints(token.title.nodePoints, 1, token.title.nodePoints.length - 1);\n            const node = api.shouldReservePosition\n                ? { type: ast.DefinitionType, position: token.position, identifier, label, url, title }\n                : { type: ast.DefinitionType, identifier, label, url, title };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-definition';\n\nclass DefinitionTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.DefinitionTokenizer = DefinitionTokenizer;\nexports.DefinitionTokenizerName = uniqueName;\nexports[\"default\"] = DefinitionTokenizer;\nexports.definitionMatch = match;\nexports.definitionParse = parse;\nexports.eatAndCollectLinkDestination = eatAndCollectLinkDestination;\nexports.eatAndCollectLinkLabel = eatAndCollectLinkLabel;\nexports.eatAndCollectLinkTitle = eatAndCollectLinkTitle;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        processDelimiterPair,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        for (let i = startIndex; i < endIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.TILDE: {\n                    const _startIndex = i;\n                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, endIndex, c) - 1;\n                    if (i - _startIndex !== 1)\n                        break;\n                    let delimiterType = 'both';\n                    const preceding = _startIndex === startIndex ? null : nodePoints[_startIndex - 1];\n                    if (preceding != null && character.isWhitespaceCharacter(preceding.codePoint)) {\n                        delimiterType = 'opener';\n                    }\n                    const following = i + 1 === endIndex ? null : nodePoints[i + 1];\n                    if (following != null && character.isWhitespaceCharacter(following.codePoint)) {\n                        if (delimiterType !== 'both')\n                            break;\n                        delimiterType = 'closer';\n                    }\n                    return {\n                        type: delimiterType,\n                        startIndex: _startIndex,\n                        endIndex: i + 1,\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        internalTokens = api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex);\n        const token = {\n            nodeType: ast.DeleteType,\n            startIndex: openerDelimiter.startIndex,\n            endIndex: closerDelimiter.endIndex,\n            children: internalTokens,\n        };\n        return { tokens: [token] };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const children = api.parseInlineTokens(token.children);\n            const node = api.shouldReservePosition\n                ? { type: ast.DeleteType, position: api.calcPosition(token), children }\n                : { type: ast.DeleteType, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-delete';\n\nclass DeleteTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_INLINE,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.DeleteTokenizer = DeleteTokenizer;\nexports.DeleteTokenizerName = uniqueName;\nexports[\"default\"] = DeleteTokenizer;\nexports.deleteMatch = match;\nexports.deleteParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        isDelimiterPair,\n        processDelimiterPair,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        const blockStartIndex = api.getBlockStartIndex();\n        const blockEndIndex = api.getBlockEndIndex();\n        const isOpenerDelimiter = (delimiterStartIndex, delimiterEndIndex) => {\n            if (delimiterEndIndex === blockEndIndex)\n                return false;\n            if (delimiterEndIndex === endIndex)\n                return true;\n            const nextCodePosition = nodePoints[delimiterEndIndex];\n            if (character.isUnicodeWhitespaceCharacter(nextCodePosition.codePoint))\n                return false;\n            if (!character.isPunctuationCharacter(nextCodePosition.codePoint))\n                return true;\n            if (delimiterStartIndex <= startIndex)\n                return true;\n            const prevCodePosition = nodePoints[delimiterStartIndex - 1];\n            return (character.isUnicodeWhitespaceCharacter(prevCodePosition.codePoint) ||\n                character.isPunctuationCharacter(prevCodePosition.codePoint));\n        };\n        const isCloserDelimiter = (delimiterStartIndex, delimiterEndIndex) => {\n            if (delimiterStartIndex === blockStartIndex)\n                return false;\n            if (delimiterStartIndex === startIndex)\n                return true;\n            const prevCodePosition = nodePoints[delimiterStartIndex - 1];\n            if (character.isUnicodeWhitespaceCharacter(prevCodePosition.codePoint))\n                return false;\n            if (!character.isPunctuationCharacter(prevCodePosition.codePoint))\n                return true;\n            if (delimiterEndIndex >= endIndex)\n                return true;\n            const nextCodePosition = nodePoints[delimiterEndIndex];\n            return (character.isUnicodeWhitespaceCharacter(nextCodePosition.codePoint) ||\n                character.isPunctuationCharacter(nextCodePosition.codePoint));\n        };\n        for (let i = startIndex; i < endIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.ASTERISK:\n                case character.AsciiCodePoint.UNDERSCORE: {\n                    const _startIndex = i;\n                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, endIndex, c) - 1;\n                    const _endIndex = i + 1;\n                    const isLeftFlankingDelimiterRun = isOpenerDelimiter(_startIndex, _endIndex);\n                    const isRightFlankingDelimiterRun = isCloserDelimiter(_startIndex, _endIndex);\n                    let isOpener = isLeftFlankingDelimiterRun;\n                    let isCloser = isRightFlankingDelimiterRun;\n                    if (c === character.AsciiCodePoint.UNDERSCORE) {\n                        if (isLeftFlankingDelimiterRun && isRightFlankingDelimiterRun) {\n                            if (_startIndex > startIndex &&\n                                !character.isPunctuationCharacter(nodePoints[_startIndex - 1].codePoint)) {\n                                isOpener = false;\n                            }\n                            const nextCodePosition = nodePoints[_endIndex];\n                            if (!character.isPunctuationCharacter(nextCodePosition.codePoint)) {\n                                isCloser = false;\n                            }\n                        }\n                    }\n                    if (!isOpener && !isCloser)\n                        break;\n                    const thickness = _endIndex - _startIndex;\n                    return {\n                        type: isOpener ? (isCloser ? 'both' : 'opener') : 'closer',\n                        startIndex: _startIndex,\n                        endIndex: _endIndex,\n                        thickness,\n                        originalThickness: thickness,\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    function isDelimiterPair(openerDelimiter, closerDelimiter) {\n        const nodePoints = api.getNodePoints();\n        if (nodePoints[openerDelimiter.startIndex].codePoint !==\n            nodePoints[closerDelimiter.startIndex].codePoint ||\n            ((openerDelimiter.type === 'both' || closerDelimiter.type === 'both') &&\n                (openerDelimiter.originalThickness + closerDelimiter.originalThickness) % 3 === 0 &&\n                openerDelimiter.originalThickness % 3 !== 0)) {\n            return { paired: false, opener: true, closer: true };\n        }\n        return { paired: true };\n    }\n    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        let thickness = 1;\n        if (openerDelimiter.thickness > 1 && closerDelimiter.thickness > 1) {\n            thickness = 2;\n        }\n        internalTokens = api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex);\n        const token = {\n            nodeType: thickness === 1 ? ast.EmphasisType : ast.StrongType,\n            startIndex: openerDelimiter.endIndex - thickness,\n            endIndex: closerDelimiter.startIndex + thickness,\n            thickness,\n            children: internalTokens,\n        };\n        const remainOpenerDelimiter = openerDelimiter.thickness > thickness\n            ? {\n                type: openerDelimiter.type,\n                startIndex: openerDelimiter.startIndex,\n                endIndex: openerDelimiter.endIndex - thickness,\n                thickness: openerDelimiter.thickness - thickness,\n                originalThickness: openerDelimiter.originalThickness,\n            }\n            : undefined;\n        const remainCloserDelimiter = closerDelimiter.thickness > thickness\n            ? {\n                type: closerDelimiter.type,\n                startIndex: closerDelimiter.startIndex + thickness,\n                endIndex: closerDelimiter.endIndex,\n                thickness: closerDelimiter.thickness - thickness,\n                originalThickness: closerDelimiter.originalThickness,\n            }\n            : undefined;\n        return {\n            tokens: [token],\n            remainOpenerDelimiter,\n            remainCloserDelimiter,\n        };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const children = api.parseInlineTokens(token.children);\n            const node = api.shouldReservePosition\n                ? { type: token.nodeType, position: api.calcPosition(token), children }\n                : { type: token.nodeType, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-emphasis';\n\nclass EmphasisTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_INLINE,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.EmphasisTokenizer = EmphasisTokenizer;\nexports.EmphasisTokenizerName = uniqueName;\nexports[\"default\"] = EmphasisTokenizer;\nexports.emphasisMatch = match;\nexports.emphasisParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nfunction match(_api) {\n    const { nodeType, markers, markersRequired, checkInfoString } = this;\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n        eatContinuationText,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex + markersRequired - 1 >= endIndex)\n            return null;\n        const { nodePoints, startIndex } = line;\n        const marker = nodePoints[firstNonWhitespaceIndex].codePoint;\n        if (markers.indexOf(marker) < 0)\n            return null;\n        const i = coreTokenizer.eatOptionalCharacters(nodePoints, firstNonWhitespaceIndex + 1, endIndex, marker);\n        const countOfMark = i - firstNonWhitespaceIndex;\n        if (countOfMark < markersRequired)\n            return null;\n        const [iLft, iRht] = character.calcTrimBoundaryOfCodePoints(nodePoints, i, endIndex);\n        const infoString = nodePoints.slice(iLft, iRht);\n        if (checkInfoString != null && !checkInfoString(infoString, marker, countOfMark)) {\n            return null;\n        }\n        const nextIndex = endIndex;\n        const token = {\n            nodeType: nodeType,\n            position: {\n                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            indent: firstNonWhitespaceIndex - startIndex,\n            marker: marker,\n            markerCount: countOfMark,\n            lines: [],\n            infoString,\n        };\n        return { token, nextIndex };\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        const result = eatOpener(line);\n        if (result == null)\n            return null;\n        return {\n            token: result.token,\n            nextIndex: result.nextIndex,\n            remainingSibling: prevSiblingToken,\n        };\n    }\n    function eatContinuationText(line, token) {\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;\n        if (countOfPrecedeSpaces < 4 && firstNonWhitespaceIndex < endIndex) {\n            let i = coreTokenizer.eatOptionalCharacters(nodePoints, firstNonWhitespaceIndex, endIndex, token.marker);\n            const markerCount = i - firstNonWhitespaceIndex;\n            if (markerCount >= token.markerCount) {\n                for (; i < endIndex; ++i) {\n                    const c = nodePoints[i].codePoint;\n                    if (!character.isSpaceCharacter(c))\n                        break;\n                }\n                if (i + 1 >= endIndex) {\n                    return { status: 'closing', nextIndex: endIndex };\n                }\n            }\n        }\n        const firstIndex = Math.min(startIndex + token.indent, firstNonWhitespaceIndex, endIndex - 1);\n        token.lines.push({\n            nodePoints,\n            startIndex: firstIndex,\n            endIndex,\n            firstNonWhitespaceIndex,\n            countOfPrecedeSpaces,\n        });\n        return { status: 'opening', nextIndex: endIndex };\n    }\n}\n\nclass FencedBlockTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props) {\n        var _a;\n        super({\n            name: props.name,\n            priority: (_a = props.priority) !== null && _a !== void 0 ? _a : coreTokenizer.TokenizerPriority.FENCED_BLOCK,\n        });\n        this.markers = [];\n        this.match = match;\n        this.nodeType = props.nodeType;\n        this.markers = props.markers;\n        this.markersRequired = props.markersRequired;\n        this.checkInfoString = props.checkInfoString;\n    }\n}\n\nconst FencedBlockType = 'fencedBlock';\n\nexports.FencedBlockTokenizer = FencedBlockTokenizer;\nexports.FencedBlockType = FencedBlockType;\nexports[\"default\"] = FencedBlockTokenizer;\nexports.fencedBlockMatch = match;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar FencedBlockTokenizer = require('@yozora/tokenizer-fenced-block');\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar FencedBlockTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(FencedBlockTokenizer);\n\nconst match = function (api) {\n    const hook = FencedBlockTokenizer.fencedBlockMatch.call(this, api);\n    return Object.assign(Object.assign({}, hook), { isContainingBlock: false });\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const infoString = token.infoString;\n            let i = 0;\n            const langInfo = [];\n            for (; i < infoString.length; ++i) {\n                const p = infoString[i];\n                if (character.isUnicodeWhitespaceCharacter(p.codePoint))\n                    break;\n                langInfo.push(p);\n            }\n            const lang = character.calcEscapedStringFromNodePoints(langInfo, 0, langInfo.length, true);\n            i = coreTokenizer.eatOptionalWhitespaces(infoString, i, infoString.length);\n            const meta = character.calcEscapedStringFromNodePoints(infoString, i, infoString.length, true);\n            const contents = coreTokenizer.mergeContentLinesFaithfully(token.lines);\n            let value = character.calcStringFromNodePoints(contents);\n            if (!/\\n$/.test(value))\n                value += '\\n';\n            const node = api.shouldReservePosition\n                ? {\n                    type: ast.CodeType,\n                    position: token.position,\n                    lang: lang.length > 0 ? lang : null,\n                    meta: meta.length > 0 ? meta : null,\n                    value,\n                }\n                : {\n                    type: ast.CodeType,\n                    lang: lang.length > 0 ? lang : null,\n                    meta: meta.length > 0 ? meta : null,\n                    value,\n                };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-fenced-code';\n\nclass FencedCodeTokenizer extends FencedBlockTokenizer__default[\"default\"] {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FENCED_BLOCK,\n            nodeType: ast.CodeType,\n            markers: [character.AsciiCodePoint.BACKTICK, character.AsciiCodePoint.TILDE],\n            markersRequired: 3,\n            checkInfoString: (infoString, marker) => {\n                if (marker === character.AsciiCodePoint.BACKTICK) {\n                    for (const p of infoString) {\n                        if (p.codePoint === character.AsciiCodePoint.BACKTICK)\n                            return false;\n                    }\n                }\n                return true;\n            },\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.FencedCodeTokenizer = FencedCodeTokenizer;\nexports.FencedCodeTokenizerName = uniqueName;\nexports[\"default\"] = FencedCodeTokenizer;\nexports.fencedCodeMatch = match;\nexports.fencedCodeParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function () {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex ||\n            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.NUMBER_SIGN) {\n            return null;\n        }\n        const i = coreTokenizer.eatOptionalCharacters(nodePoints, firstNonWhitespaceIndex + 1, endIndex, character.AsciiCodePoint.NUMBER_SIGN);\n        const depth = i - firstNonWhitespaceIndex;\n        if (depth > 6)\n            return null;\n        if (i + 1 < endIndex && !character.isSpaceCharacter(nodePoints[i].codePoint))\n            return null;\n        const nextIndex = endIndex;\n        const token = {\n            nodeType: ast.HeadingType,\n            position: {\n                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            depth: depth,\n            line,\n        };\n        return { token, nextIndex, saturated: true };\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        const result = eatOpener(line);\n        if (result == null)\n            return null;\n        return {\n            token: result.token,\n            nextIndex: result.nextIndex,\n            remainingSibling: prevSiblingToken,\n        };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const { nodePoints, firstNonWhitespaceIndex, endIndex } = token.line;\n            let [leftIndex, rightIndex] = character.calcTrimBoundaryOfCodePoints(nodePoints, firstNonWhitespaceIndex + token.depth, endIndex);\n            let closeCharCount = 0;\n            for (let j = rightIndex - 1; j >= leftIndex; --j) {\n                const c = nodePoints[j].codePoint;\n                if (c !== character.AsciiCodePoint.NUMBER_SIGN)\n                    break;\n                closeCharCount += 1;\n            }\n            if (closeCharCount > 0) {\n                let spaceCount = 0, j = rightIndex - 1 - closeCharCount;\n                for (; j >= leftIndex; --j) {\n                    const c = nodePoints[j].codePoint;\n                    if (!character.isWhitespaceCharacter(c))\n                        break;\n                    spaceCount += 1;\n                }\n                if (spaceCount > 0 || j < leftIndex) {\n                    rightIndex -= closeCharCount + spaceCount;\n                }\n            }\n            const lines = [\n                {\n                    nodePoints,\n                    startIndex: leftIndex,\n                    endIndex: rightIndex,\n                    firstNonWhitespaceIndex: leftIndex,\n                    countOfPrecedeSpaces: 0,\n                },\n            ];\n            const contents = coreTokenizer.mergeAndStripContentLines(lines);\n            const children = api.processInlines(contents);\n            const node = api.shouldReservePosition\n                ? { type: ast.HeadingType, position: token.position, depth: token.depth, children }\n                : { type: ast.HeadingType, depth: token.depth, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-heading';\n\nclass HeadingTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.HeadingTokenizer = HeadingTokenizer;\nexports.HeadingTokenizerName = uniqueName;\nexports[\"default\"] = HeadingTokenizer;\nexports.headingMatch = match;\nexports.headingParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar ast = require('@yozora/ast');\n\nfunction eatHTMLAttribute(nodePoints, startIndex, endIndex) {\n    let i = coreTokenizer.eatOptionalWhitespaces(nodePoints, startIndex, endIndex);\n    if (i <= startIndex || i >= endIndex)\n        return null;\n    const attrNameStartIndex = i;\n    let c = nodePoints[i].codePoint;\n    if (!character.isAsciiLetter(c) && c !== character.AsciiCodePoint.UNDERSCORE && c !== character.AsciiCodePoint.COLON)\n        return null;\n    for (i = attrNameStartIndex + 1; i < endIndex; ++i) {\n        c = nodePoints[i].codePoint;\n        if (character.isAsciiLetter(c) ||\n            character.isAsciiDigitCharacter(c) ||\n            c === character.AsciiCodePoint.UNDERSCORE ||\n            c === character.AsciiCodePoint.DOT ||\n            c === character.AsciiCodePoint.COLON ||\n            c === character.AsciiCodePoint.MINUS_SIGN)\n            continue;\n        break;\n    }\n    const attrNameEndIndex = i;\n    const attribute = {\n        name: {\n            startIndex: attrNameStartIndex,\n            endIndex: attrNameEndIndex,\n        },\n    };\n    i = coreTokenizer.eatOptionalWhitespaces(nodePoints, attrNameEndIndex, endIndex);\n    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.EQUALS_SIGN) {\n        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i + 1, endIndex);\n        if (i < endIndex) {\n            const mark = nodePoints[i].codePoint;\n            switch (mark) {\n                case character.AsciiCodePoint.DOUBLE_QUOTE: {\n                    const attrValueStartIndex = i + 1;\n                    for (i = attrValueStartIndex; i < endIndex; ++i) {\n                        c = nodePoints[i].codePoint;\n                        if (c === character.AsciiCodePoint.DOUBLE_QUOTE)\n                            break;\n                    }\n                    const attrValueEndIndex = i;\n                    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.DOUBLE_QUOTE) {\n                        attribute.value = {\n                            startIndex: attrValueStartIndex,\n                            endIndex: attrValueEndIndex,\n                        };\n                        i += 1;\n                    }\n                    break;\n                }\n                case character.AsciiCodePoint.SINGLE_QUOTE: {\n                    const attrValueStartIndex = i + 1;\n                    for (i = attrValueStartIndex; i < endIndex; ++i) {\n                        c = nodePoints[i].codePoint;\n                        if (c === character.AsciiCodePoint.SINGLE_QUOTE)\n                            break;\n                    }\n                    const attrValueEndIndex = i;\n                    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.SINGLE_QUOTE) {\n                        attribute.value = {\n                            startIndex: attrValueStartIndex,\n                            endIndex: attrValueEndIndex,\n                        };\n                        i += 1;\n                    }\n                    break;\n                }\n                default: {\n                    const attrValueStartIndex = i;\n                    for (; i < endIndex; ++i) {\n                        c = nodePoints[i].codePoint;\n                        if (character.isWhitespaceCharacter(c) ||\n                            c === character.AsciiCodePoint.DOUBLE_QUOTE ||\n                            c === character.AsciiCodePoint.SINGLE_QUOTE ||\n                            c === character.AsciiCodePoint.EQUALS_SIGN ||\n                            c === character.AsciiCodePoint.OPEN_ANGLE ||\n                            c === character.AsciiCodePoint.CLOSE_ANGLE ||\n                            c === character.AsciiCodePoint.BACKTICK)\n                            break;\n                    }\n                    const attrValueEndIndex = i;\n                    if (attrValueEndIndex > attrValueStartIndex) {\n                        attribute.value = {\n                            startIndex: attrValueStartIndex,\n                            endIndex: attrValueEndIndex,\n                        };\n                    }\n                    break;\n                }\n            }\n            if (attribute.value != null) {\n                return { attribute, nextIndex: i };\n            }\n        }\n    }\n    return { attribute, nextIndex: attrNameEndIndex };\n}\n\nfunction eatHTMLTagName(nodePoints, startIndex, endIndex) {\n    if (startIndex >= endIndex || !character.isAsciiLetter(nodePoints[startIndex].codePoint))\n        return null;\n    let i = startIndex;\n    for (; i < endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        if (character.isAsciiLetter(c) || character.isAsciiDigitCharacter(c) || c === character.AsciiCodePoint.MINUS_SIGN)\n            continue;\n        return i;\n    }\n    return i;\n}\n\nconst includedTags$1 = ['pre', 'script', 'style'];\nfunction eatStartCondition1(nodePoints, startIndex, endIndex, tagName) {\n    if (!includedTags$1.includes(tagName))\n        return null;\n    if (startIndex >= endIndex)\n        return endIndex;\n    const c = nodePoints[startIndex].codePoint;\n    if (character.isWhitespaceCharacter(c) || c === character.AsciiCodePoint.CLOSE_ANGLE) {\n        return startIndex + 1;\n    }\n    return null;\n}\nfunction eatEndCondition1(nodePoints, startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        if (nodePoints[i].codePoint === character.AsciiCodePoint.OPEN_ANGLE &&\n            i + 3 < endIndex &&\n            nodePoints[i + 1].codePoint === character.AsciiCodePoint.SLASH) {\n            const tagNameStartIndex = i + 2;\n            const tagNameEndIndex = eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);\n            if (tagNameEndIndex == null ||\n                tagNameEndIndex >= endIndex ||\n                nodePoints[tagNameEndIndex].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE) {\n                i += 1;\n                continue;\n            }\n            const rawTagName = character.calcStringFromNodePoints(nodePoints, tagNameStartIndex, tagNameEndIndex, true);\n            const tagName = rawTagName.toLowerCase();\n            if (includedTags$1.includes(tagName))\n                return tagNameEndIndex;\n        }\n    }\n    return null;\n}\n\nfunction eatStartCondition2(nodePoints, startIndex, endIndex) {\n    const i = startIndex;\n    if (i + 2 < endIndex &&\n        nodePoints[i].codePoint === character.AsciiCodePoint.EXCLAMATION_MARK &&\n        nodePoints[i + 1].codePoint === character.AsciiCodePoint.MINUS_SIGN &&\n        nodePoints[i + 2].codePoint === character.AsciiCodePoint.MINUS_SIGN)\n        return i + 3;\n    return null;\n}\nfunction eatEndCondition2(nodePoints, startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        if (nodePoints[i].codePoint === character.AsciiCodePoint.MINUS_SIGN &&\n            i + 2 < endIndex &&\n            nodePoints[i + 1].codePoint === character.AsciiCodePoint.MINUS_SIGN &&\n            nodePoints[i + 2].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)\n            return i + 3;\n    }\n    return null;\n}\n\nfunction eatStartCondition3(nodePoints, startIndex, endIndex) {\n    const i = startIndex;\n    if (i < endIndex && nodePoints[i].codePoint === character.AsciiCodePoint.QUESTION_MARK)\n        return i + 1;\n    return null;\n}\nfunction eatEndCondition3(nodePoints, startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        if (nodePoints[i].codePoint === character.AsciiCodePoint.QUESTION_MARK &&\n            i + 1 < endIndex &&\n            nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)\n            return i + 2;\n    }\n    return null;\n}\n\nfunction eatStartCondition4(nodePoints, startIndex, endIndex) {\n    const i = startIndex;\n    if (i + 1 < endIndex &&\n        nodePoints[i].codePoint === character.AsciiCodePoint.EXCLAMATION_MARK &&\n        character.isAsciiUpperLetter(nodePoints[i + 1].codePoint))\n        return i + 2;\n    return null;\n}\nfunction eatEndCondition4(nodePoints, startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        if (nodePoints[i].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)\n            return i + 1;\n    }\n    return null;\n}\n\nfunction eatStartCondition5(nodePoints, startIndex, endIndex) {\n    const i = startIndex;\n    if (i + 6 < endIndex &&\n        nodePoints[i].codePoint === character.AsciiCodePoint.EXCLAMATION_MARK &&\n        nodePoints[i + 1].codePoint === character.AsciiCodePoint.OPEN_BRACKET &&\n        nodePoints[i + 2].codePoint === character.AsciiCodePoint.UPPERCASE_C &&\n        nodePoints[i + 3].codePoint === character.AsciiCodePoint.UPPERCASE_D &&\n        nodePoints[i + 4].codePoint === character.AsciiCodePoint.UPPERCASE_A &&\n        nodePoints[i + 5].codePoint === character.AsciiCodePoint.UPPERCASE_T &&\n        nodePoints[i + 6].codePoint === character.AsciiCodePoint.UPPERCASE_A)\n        return i + 7;\n    return null;\n}\nfunction eatEndCondition5(nodePoints, startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        if (nodePoints[i].codePoint === character.AsciiCodePoint.CLOSE_BRACKET &&\n            i + 2 < endIndex &&\n            nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_BRACKET &&\n            nodePoints[i + 2].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)\n            return i + 3;\n    }\n    return null;\n}\n\nconst includedTags = [\n    'address',\n    'article',\n    'aside',\n    'base',\n    'basefont',\n    'blockquote',\n    'body',\n    'caption',\n    'center',\n    'col',\n    'colgroup',\n    'dd',\n    'details',\n    'dialog',\n    'dir',\n    'div',\n    'dl',\n    'dt',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'footer',\n    'form',\n    'frame',\n    'frameset',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'head',\n    'header',\n    'hr',\n    'html',\n    'iframe',\n    'legend',\n    'li',\n    'link',\n    'main',\n    'menu',\n    'menuitem',\n    'nav',\n    'noframes',\n    'ol',\n    'optgroup',\n    'option',\n    'p',\n    'param',\n    'section',\n    'source',\n    'summary',\n    'table',\n    'tbody',\n    'td',\n    'tfoot',\n    'th',\n    'thead',\n    'title',\n    'tr',\n    'track',\n    'ul',\n];\nfunction eatStartCondition6(nodePoints, startIndex, endIndex, tagName) {\n    if (!includedTags.includes(tagName))\n        return null;\n    if (startIndex >= endIndex)\n        return endIndex;\n    const c = nodePoints[startIndex].codePoint;\n    if (character.isWhitespaceCharacter(c) || c === character.AsciiCodePoint.CLOSE_ANGLE)\n        return startIndex + 1;\n    if (c === character.AsciiCodePoint.SLASH &&\n        startIndex + 1 < endIndex &&\n        nodePoints[startIndex + 1].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)\n        return startIndex + 2;\n    return null;\n}\n\nconst excludedTags = ['pre', 'script', 'style'];\nfunction eatStartCondition7(nodePoints, startIndex, endIndex, tagName, potentialOpenTag) {\n    if (excludedTags.includes(tagName) || startIndex >= endIndex)\n        return null;\n    let i = startIndex;\n    if (potentialOpenTag) {\n        for (; i < endIndex;) {\n            const result = eatHTMLAttribute(nodePoints, i, endIndex);\n            if (result == null)\n                break;\n            i = result.nextIndex;\n        }\n        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n        if (i >= endIndex)\n            return null;\n        if (nodePoints[i].codePoint === character.AsciiCodePoint.SLASH)\n            i += 1;\n    }\n    else {\n        i = coreTokenizer.eatOptionalWhitespaces(nodePoints, startIndex, endIndex);\n    }\n    if (i >= endIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)\n        return null;\n    for (i += 1; i < endIndex; ++i) {\n        if (!character.isWhitespaceCharacter(nodePoints[i].codePoint))\n            return null;\n    }\n    return endIndex;\n}\n\nconst match = function () {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n        eatContinuationText,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex ||\n            nodePoints[firstNonWhitespaceIndex].codePoint !== character.AsciiCodePoint.OPEN_ANGLE)\n            return null;\n        const i = firstNonWhitespaceIndex + 1;\n        const startResult = eatStartCondition(nodePoints, i, endIndex);\n        if (startResult == null)\n            return null;\n        const { condition } = startResult;\n        let saturated = false;\n        if (condition !== 6 && condition !== 7) {\n            const endResult = eatEndCondition(nodePoints, startResult.nextIndex, endIndex, condition);\n            if (endResult != null)\n                saturated = true;\n        }\n        const nextIndex = endIndex;\n        const token = {\n            nodeType: ast.HtmlType,\n            position: {\n                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            condition,\n            lines: [line],\n        };\n        return { token, nextIndex, saturated };\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        const result = eatOpener(line);\n        if (result == null || result.token.condition === 7)\n            return null;\n        const { token, nextIndex } = result;\n        return {\n            token,\n            nextIndex,\n            remainingSibling: prevSiblingToken,\n        };\n    }\n    function eatContinuationText(line, token) {\n        const { nodePoints, endIndex, firstNonWhitespaceIndex } = line;\n        const nextIndex = eatEndCondition(nodePoints, firstNonWhitespaceIndex, endIndex, token.condition);\n        if (nextIndex === -1)\n            return { status: 'notMatched' };\n        token.lines.push(line);\n        if (nextIndex != null)\n            return { status: 'closing', nextIndex: endIndex };\n        return { status: 'opening', nextIndex: endIndex };\n    }\n    function eatStartCondition(nodePoints, startIndex, endIndex) {\n        let nextIndex = null;\n        if (startIndex >= endIndex)\n            return null;\n        nextIndex = eatStartCondition2(nodePoints, startIndex, endIndex);\n        if (nextIndex != null)\n            return { nextIndex, condition: 2 };\n        nextIndex = eatStartCondition3(nodePoints, startIndex, endIndex);\n        if (nextIndex != null)\n            return { nextIndex, condition: 3 };\n        nextIndex = eatStartCondition4(nodePoints, startIndex, endIndex);\n        if (nextIndex != null)\n            return { nextIndex, condition: 4 };\n        nextIndex = eatStartCondition5(nodePoints, startIndex, endIndex);\n        if (nextIndex != null)\n            return { nextIndex, condition: 5 };\n        if (nodePoints[startIndex].codePoint !== character.AsciiCodePoint.SLASH) {\n            const tagNameStartIndex = startIndex;\n            const tagNameEndIndex = eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);\n            if (tagNameEndIndex == null)\n                return null;\n            const tagNameInterval = {\n                startIndex: tagNameStartIndex,\n                endIndex: tagNameEndIndex,\n            };\n            const rawTagName = character.calcStringFromNodePoints(nodePoints, tagNameInterval.startIndex, tagNameInterval.endIndex);\n            const tagName = rawTagName.toLowerCase();\n            nextIndex = eatStartCondition1(nodePoints, tagNameInterval.endIndex, endIndex, tagName);\n            if (nextIndex != null)\n                return { nextIndex, condition: 1 };\n            nextIndex = eatStartCondition6(nodePoints, tagNameInterval.endIndex, endIndex, tagName);\n            if (nextIndex != null)\n                return { nextIndex, condition: 6 };\n            nextIndex = eatStartCondition7(nodePoints, tagNameInterval.endIndex, endIndex, tagName, true);\n            if (nextIndex != null)\n                return { nextIndex, condition: 7 };\n            return null;\n        }\n        const tagNameStartIndex = startIndex + 1;\n        const tagNameEndIndex = eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);\n        if (tagNameEndIndex == null)\n            return null;\n        const tagNameInterval = {\n            startIndex: tagNameStartIndex,\n            endIndex: tagNameEndIndex,\n        };\n        const rawTagName = character.calcStringFromNodePoints(nodePoints, tagNameInterval.startIndex, tagNameInterval.endIndex);\n        const tagName = rawTagName.toLowerCase();\n        nextIndex = eatStartCondition6(nodePoints, tagNameInterval.endIndex, endIndex, tagName);\n        if (nextIndex != null)\n            return { nextIndex, condition: 6 };\n        nextIndex = eatStartCondition7(nodePoints, tagNameInterval.endIndex, endIndex, tagName, false);\n        if (nextIndex != null)\n            return { nextIndex, condition: 7 };\n        return null;\n    }\n    function eatEndCondition(nodePoints, startIndex, endIndex, condition) {\n        switch (condition) {\n            case 1: {\n                const nextIndex = eatEndCondition1(nodePoints, startIndex, endIndex);\n                return nextIndex == null ? null : endIndex;\n            }\n            case 2: {\n                const nextIndex = eatEndCondition2(nodePoints, startIndex, endIndex);\n                return nextIndex == null ? null : endIndex;\n            }\n            case 3: {\n                const nextIndex = eatEndCondition3(nodePoints, startIndex, endIndex);\n                return nextIndex == null ? null : endIndex;\n            }\n            case 4: {\n                const nextIndex = eatEndCondition4(nodePoints, startIndex, endIndex);\n                return nextIndex == null ? null : endIndex;\n            }\n            case 5: {\n                const nextIndex = eatEndCondition5(nodePoints, startIndex, endIndex);\n                return nextIndex == null ? null : endIndex;\n            }\n            case 6:\n            case 7: {\n                const firstNonWhitespaceIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, startIndex, endIndex);\n                return firstNonWhitespaceIndex >= endIndex ? -1 : null;\n            }\n        }\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const contents = coreTokenizer.mergeContentLinesFaithfully(token.lines);\n            const node = api.shouldReservePosition\n                ? { type: 'html', position: token.position, value: character.calcStringFromNodePoints(contents) }\n                : { type: 'html', value: character.calcStringFromNodePoints(contents) };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-html-block';\n\nclass HtmlBlockTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.HtmlBlockTokenizer = HtmlBlockTokenizer;\nexports.HtmlBlockTokenizerName = uniqueName;\nexports[\"default\"] = HtmlBlockTokenizer;\nexports.eatHTMLAttribute = eatHTMLAttribute;\nexports.eatHTMLTagName = eatHTMLTagName;\nexports.htmlBlockMatch = match;\nexports.htmlBlockParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar tokenizerHtmlBlock = require('@yozora/tokenizer-html-block');\nvar ast = require('@yozora/ast');\n\nfunction eatHtmlInlineCDataDelimiter(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    if (i + 11 >= endIndex ||\n        nodePoints[i + 1].codePoint !== character.AsciiCodePoint.EXCLAMATION_MARK ||\n        nodePoints[i + 2].codePoint !== character.AsciiCodePoint.OPEN_BRACKET ||\n        nodePoints[i + 3].codePoint !== character.AsciiCodePoint.UPPERCASE_C ||\n        nodePoints[i + 4].codePoint !== character.AsciiCodePoint.UPPERCASE_D ||\n        nodePoints[i + 5].codePoint !== character.AsciiCodePoint.UPPERCASE_A ||\n        nodePoints[i + 6].codePoint !== character.AsciiCodePoint.UPPERCASE_T ||\n        nodePoints[i + 7].codePoint !== character.AsciiCodePoint.UPPERCASE_A ||\n        nodePoints[i + 8].codePoint !== character.AsciiCodePoint.OPEN_BRACKET)\n        return null;\n    const si = i + 9;\n    for (i = si; i < endIndex; ++i) {\n        const p = nodePoints[i];\n        if (p.codePoint !== character.AsciiCodePoint.CLOSE_BRACKET)\n            continue;\n        if (i + 2 >= endIndex)\n            return null;\n        if (nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_BRACKET &&\n            nodePoints[i + 2].codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {\n            const delimiter = {\n                type: 'full',\n                startIndex,\n                endIndex: i + 3,\n                htmlType: 'cdata',\n            };\n            return delimiter;\n        }\n    }\n    return null;\n}\n\nfunction eatHtmlInlineClosingDelimiter(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    if (i + 3 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.SLASH)\n        return null;\n    const tagNameStartIndex = i + 2;\n    const tagNameEndIndex = tokenizerHtmlBlock.eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);\n    if (tagNameEndIndex == null)\n        return null;\n    i = coreTokenizer.eatOptionalWhitespaces(nodePoints, tagNameEndIndex, endIndex);\n    if (i >= endIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)\n        return null;\n    const delimiter = {\n        type: 'full',\n        startIndex,\n        endIndex: i + 1,\n        htmlType: 'closing',\n        tagName: {\n            startIndex: tagNameStartIndex,\n            endIndex: tagNameEndIndex,\n        },\n    };\n    return delimiter;\n}\n\nfunction eatHtmlInlineCommentDelimiter(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    if (i + 6 >= endIndex ||\n        nodePoints[i + 1].codePoint !== character.AsciiCodePoint.EXCLAMATION_MARK ||\n        nodePoints[i + 2].codePoint !== character.AsciiCodePoint.MINUS_SIGN ||\n        nodePoints[i + 3].codePoint !== character.AsciiCodePoint.MINUS_SIGN)\n        return null;\n    if (nodePoints[i + 4].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)\n        return null;\n    if (nodePoints[i + 4].codePoint === character.AsciiCodePoint.MINUS_SIGN &&\n        nodePoints[i + 5].codePoint === character.AsciiCodePoint.CLOSE_ANGLE)\n        return null;\n    const si = i + 4;\n    for (i = si; i < endIndex; ++i) {\n        const p = nodePoints[i];\n        if (p.codePoint !== character.AsciiCodePoint.MINUS_SIGN)\n            continue;\n        let hyphenCount = 1;\n        for (; i + hyphenCount < endIndex; hyphenCount += 1) {\n            const q = nodePoints[i + hyphenCount];\n            if (q.codePoint !== character.AsciiCodePoint.MINUS_SIGN)\n                break;\n        }\n        if (hyphenCount < 2)\n            continue;\n        if (hyphenCount > 2 ||\n            i + 2 >= endIndex ||\n            nodePoints[i + 2].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)\n            return null;\n        const delimiter = {\n            type: 'full',\n            startIndex,\n            endIndex: i + 3,\n            htmlType: 'comment',\n        };\n        return delimiter;\n    }\n    return null;\n}\n\nfunction eatHtmlInlineDeclarationDelimiter(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    if (i + 4 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.EXCLAMATION_MARK)\n        return null;\n    const tagNameStartIndex = i + 2;\n    for (i = tagNameStartIndex; i < endIndex; ++i) {\n        const p = nodePoints[i];\n        if (!character.isAsciiUpperLetter(p.codePoint))\n            break;\n    }\n    if (i - tagNameStartIndex <= 0 ||\n        i + 1 >= endIndex ||\n        !character.isWhitespaceCharacter(nodePoints[i].codePoint))\n        return null;\n    const tagNameEndIndex = i, si = i + 1;\n    for (i = si; i < endIndex; ++i) {\n        const p = nodePoints[i];\n        if (p.codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {\n            const delimiter = {\n                type: 'full',\n                startIndex,\n                endIndex: i + 1,\n                htmlType: 'declaration',\n                tagName: {\n                    startIndex: tagNameStartIndex,\n                    endIndex: tagNameEndIndex,\n                },\n            };\n            return delimiter;\n        }\n    }\n    return null;\n}\n\nfunction eatHtmlInlineInstructionDelimiter(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    if (i + 3 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.QUESTION_MARK)\n        return null;\n    const si = i + 2;\n    for (i = si; i < endIndex; ++i) {\n        const p = nodePoints[i];\n        if (p.codePoint !== character.AsciiCodePoint.QUESTION_MARK)\n            continue;\n        if (i + 1 >= endIndex)\n            return null;\n        if (nodePoints[i + 1].codePoint === character.AsciiCodePoint.CLOSE_ANGLE) {\n            const delimiter = {\n                type: 'full',\n                startIndex,\n                endIndex: i + 2,\n                htmlType: 'instruction',\n            };\n            return delimiter;\n        }\n    }\n    return null;\n}\n\nfunction eatHtmlInlineTokenOpenDelimiter(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    if (i + 2 >= endIndex)\n        return null;\n    const tagNameStartIndex = i + 1;\n    const tagNameEndIndex = tokenizerHtmlBlock.eatHTMLTagName(nodePoints, tagNameStartIndex, endIndex);\n    if (tagNameEndIndex == null)\n        return null;\n    const attributes = [];\n    for (i = tagNameEndIndex; i < endIndex;) {\n        const result = tokenizerHtmlBlock.eatHTMLAttribute(nodePoints, i, endIndex);\n        if (result == null)\n            break;\n        attributes.push(result.attribute);\n        i = result.nextIndex;\n    }\n    i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n    if (i >= endIndex)\n        return null;\n    let selfClosed = false;\n    if (nodePoints[i].codePoint === character.AsciiCodePoint.SLASH) {\n        i += 1;\n        selfClosed = true;\n    }\n    if (i >= endIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.CLOSE_ANGLE)\n        return null;\n    const delimiter = {\n        type: 'full',\n        startIndex,\n        endIndex: i + 1,\n        htmlType: 'open',\n        tagName: {\n            startIndex: tagNameStartIndex,\n            endIndex: tagNameEndIndex,\n        },\n        attributes,\n        selfClosed,\n    };\n    return delimiter;\n}\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        processSingleDelimiter,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        for (let i = startIndex; i < endIndex; ++i) {\n            i = coreTokenizer.eatOptionalWhitespaces(nodePoints, i, endIndex);\n            if (i >= endIndex)\n                break;\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.OPEN_ANGLE: {\n                    const delimiter = tryToEatDelimiter(nodePoints, i, endIndex);\n                    if (delimiter != null)\n                        return delimiter;\n                    break;\n                }\n            }\n        }\n        return null;\n    }\n    function processSingleDelimiter(delimiter) {\n        const token = Object.assign(Object.assign({}, delimiter), { nodeType: ast.HtmlType });\n        return [token];\n    }\n};\nfunction tryToEatDelimiter(nodePoints, startIndex, endIndex) {\n    let delimiter = null;\n    delimiter = eatHtmlInlineTokenOpenDelimiter(nodePoints, startIndex, endIndex);\n    if (delimiter != null)\n        return delimiter;\n    delimiter = eatHtmlInlineClosingDelimiter(nodePoints, startIndex, endIndex);\n    if (delimiter != null)\n        return delimiter;\n    delimiter = eatHtmlInlineCommentDelimiter(nodePoints, startIndex, endIndex);\n    if (delimiter != null)\n        return delimiter;\n    delimiter = eatHtmlInlineInstructionDelimiter(nodePoints, startIndex, endIndex);\n    if (delimiter != null)\n        return delimiter;\n    delimiter = eatHtmlInlineDeclarationDelimiter(nodePoints, startIndex, endIndex);\n    if (delimiter != null)\n        return delimiter;\n    delimiter = eatHtmlInlineCDataDelimiter(nodePoints, startIndex, endIndex);\n    return delimiter;\n}\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const { startIndex, endIndex } = token;\n            const nodePoints = api.getNodePoints();\n            const value = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex);\n            const node = api.shouldReservePosition\n                ? { type: ast.HtmlType, position: api.calcPosition(token), value }\n                : { type: ast.HtmlType, value };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-html-inline';\n\nclass HtmlInlineTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.HtmlInlineTokenizer = HtmlInlineTokenizer;\nexports.HtmlInlineTokenizerName = uniqueName;\nexports[\"default\"] = HtmlInlineTokenizer;\nexports.eatHtmlInlineCDataDelimiter = eatHtmlInlineCDataDelimiter;\nexports.eatHtmlInlineClosingDelimiter = eatHtmlInlineClosingDelimiter;\nexports.eatHtmlInlineCommentDelimiter = eatHtmlInlineCommentDelimiter;\nexports.eatHtmlInlineDeclarationDelimiter = eatHtmlInlineDeclarationDelimiter;\nexports.eatHtmlInlineInstructionDelimiter = eatHtmlInlineInstructionDelimiter;\nexports.eatHtmlInlineTokenOpenDelimiter = eatHtmlInlineTokenOpenDelimiter;\nexports.htmlInlineMatch = match;\nexports.htmlInlineParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar tokenizerLink = require('@yozora/tokenizer-link');\nvar tokenizerImage = require('@yozora/tokenizer-image');\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        isDelimiterPair,\n        processDelimiterPair,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        for (let i = startIndex; i < endIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.EXCLAMATION_MARK: {\n                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {\n                        break;\n                    }\n                    return {\n                        type: 'opener',\n                        startIndex: i,\n                        endIndex: i + 2,\n                        brackets: [],\n                    };\n                }\n                case character.AsciiCodePoint.CLOSE_BRACKET: {\n                    const delimiter = {\n                        type: 'closer',\n                        startIndex: i,\n                        endIndex: i + 1,\n                        brackets: [],\n                    };\n                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {\n                        return delimiter;\n                    }\n                    const result = coreTokenizer.eatLinkLabel(nodePoints, i + 1, endIndex);\n                    if (result.nextIndex < 0)\n                        return delimiter;\n                    if (result.labelAndIdentifier == null) {\n                        return {\n                            type: 'closer',\n                            startIndex: i,\n                            endIndex: result.nextIndex,\n                            brackets: [\n                                {\n                                    startIndex: i + 1,\n                                    endIndex: result.nextIndex,\n                                },\n                            ],\n                        };\n                    }\n                    return {\n                        type: 'closer',\n                        startIndex: i,\n                        endIndex: result.nextIndex,\n                        brackets: [\n                            {\n                                startIndex: i + 1,\n                                endIndex: result.nextIndex,\n                                label: result.labelAndIdentifier.label,\n                                identifier: result.labelAndIdentifier.identifier,\n                            },\n                        ],\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const nodePoints = api.getNodePoints();\n        const balancedBracketsStatus = tokenizerLink.checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);\n        switch (balancedBracketsStatus) {\n            case -1:\n                return { paired: false, opener: false, closer: true };\n            case 0:\n                return { paired: true };\n            case 1:\n                return { paired: false, opener: true, closer: false };\n        }\n    }\n    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const nodePoints = api.getNodePoints();\n        const bracket = closerDelimiter.brackets[0];\n        if (bracket != null && bracket.identifier != null) {\n            if (api.hasDefinition(bracket.identifier)) {\n                const token = {\n                    nodeType: ast.ImageReferenceType,\n                    startIndex: openerDelimiter.startIndex,\n                    endIndex: bracket.endIndex,\n                    referenceType: 'full',\n                    label: bracket.label,\n                    identifier: bracket.identifier,\n                    children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),\n                };\n                return { tokens: [token] };\n            }\n            return { tokens: internalTokens };\n        }\n        const { nextIndex, labelAndIdentifier } = coreTokenizer.eatLinkLabel(nodePoints, openerDelimiter.endIndex - 1, closerDelimiter.startIndex + 1);\n        if (nextIndex === closerDelimiter.startIndex + 1 &&\n            labelAndIdentifier != null &&\n            api.hasDefinition(labelAndIdentifier.identifier)) {\n            const token = {\n                nodeType: ast.ImageReferenceType,\n                startIndex: openerDelimiter.startIndex,\n                endIndex: closerDelimiter.endIndex,\n                referenceType: bracket == null ? 'shortcut' : 'collapsed',\n                label: labelAndIdentifier.label,\n                identifier: labelAndIdentifier.identifier,\n                children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),\n            };\n            return { tokens: [token] };\n        }\n        return { tokens: internalTokens };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const { identifier, label, referenceType } = token;\n            const children = api.parseInlineTokens(token.children);\n            const alt = tokenizerImage.calcImageAlt(children);\n            const node = api.shouldReservePosition\n                ? {\n                    type: ast.ImageReferenceType,\n                    position: api.calcPosition(token),\n                    identifier,\n                    label,\n                    referenceType,\n                    alt,\n                }\n                : {\n                    type: ast.ImageReferenceType,\n                    identifier,\n                    label,\n                    referenceType,\n                    alt,\n                };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-image-reference';\n\nclass ImageReferenceTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.ImageReferenceTokenizer = ImageReferenceTokenizer;\nexports.ImageReferenceTokenizerName = uniqueName;\nexports[\"default\"] = ImageReferenceTokenizer;\nexports.imageReferenceMatch = match;\nexports.imageReferenceParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar tokenizerLink = require('@yozora/tokenizer-link');\n\nfunction calcImageAlt(nodes) {\n    return nodes\n        .map((o) => {\n        if (o.value != null)\n            return o.value;\n        if (o.alt != null)\n            return o.alt;\n        if (o.children != null)\n            return calcImageAlt(o.children);\n        return '';\n    })\n        .join('');\n}\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        isDelimiterPair,\n        processDelimiterPair,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        const blockEndIndex = api.getBlockEndIndex();\n        for (let i = startIndex; i < endIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.EXCLAMATION_MARK: {\n                    if (i + 1 < endIndex && nodePoints[i + 1].codePoint === character.AsciiCodePoint.OPEN_BRACKET) {\n                        return {\n                            type: 'opener',\n                            startIndex: i,\n                            endIndex: i + 2,\n                        };\n                    }\n                    break;\n                }\n                case character.AsciiCodePoint.CLOSE_BRACKET: {\n                    if (i + 1 >= endIndex ||\n                        nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_PARENTHESIS) {\n                        break;\n                    }\n                    const destinationStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i + 2, blockEndIndex);\n                    const destinationEndIndex = tokenizerLink.eatLinkDestination(nodePoints, destinationStartIndex, blockEndIndex);\n                    if (destinationEndIndex < 0)\n                        break;\n                    const titleStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, blockEndIndex);\n                    const titleEndIndex = tokenizerLink.eatLinkTitle(nodePoints, titleStartIndex, blockEndIndex);\n                    if (titleEndIndex < 0)\n                        break;\n                    const _startIndex = i;\n                    const _endIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, titleEndIndex, blockEndIndex) + 1;\n                    if (_endIndex > blockEndIndex ||\n                        nodePoints[_endIndex - 1].codePoint !== character.AsciiCodePoint.CLOSE_PARENTHESIS) {\n                        break;\n                    }\n                    return {\n                        type: 'closer',\n                        startIndex: _startIndex,\n                        endIndex: _endIndex,\n                        destinationContent: destinationStartIndex < destinationEndIndex\n                            ? {\n                                startIndex: destinationStartIndex,\n                                endIndex: destinationEndIndex,\n                            }\n                            : undefined,\n                        titleContent: titleStartIndex < titleEndIndex\n                            ? { startIndex: titleStartIndex, endIndex: titleEndIndex }\n                            : undefined,\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const nodePoints = api.getNodePoints();\n        const balancedBracketsStatus = tokenizerLink.checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);\n        switch (balancedBracketsStatus) {\n            case -1:\n                return { paired: false, opener: false, closer: true };\n            case 0:\n                return { paired: true };\n            case 1:\n                return { paired: false, opener: true, closer: false };\n        }\n    }\n    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const token = {\n            nodeType: ast.ImageType,\n            startIndex: openerDelimiter.startIndex,\n            endIndex: closerDelimiter.endIndex,\n            destinationContent: closerDelimiter.destinationContent,\n            titleContent: closerDelimiter.titleContent,\n            children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),\n        };\n        return { tokens: [token] };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const nodePoints = api.getNodePoints();\n            let url = '';\n            if (token.destinationContent != null) {\n                let { startIndex, endIndex } = token.destinationContent;\n                if (nodePoints[startIndex].codePoint === character.AsciiCodePoint.OPEN_ANGLE) {\n                    startIndex += 1;\n                    endIndex -= 1;\n                }\n                const destination = character.calcEscapedStringFromNodePoints(nodePoints, startIndex, endIndex, true);\n                url = coreTokenizer.encodeLinkDestination(destination);\n            }\n            const children = api.parseInlineTokens(token.children);\n            const alt = calcImageAlt(children);\n            let title;\n            if (token.titleContent != null) {\n                const { startIndex, endIndex } = token.titleContent;\n                title = character.calcEscapedStringFromNodePoints(nodePoints, startIndex + 1, endIndex - 1);\n            }\n            const node = api.shouldReservePosition\n                ? { type: ast.ImageType, position: api.calcPosition(token), url, alt, title }\n                : { type: ast.ImageType, url, alt, title };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-image';\n\nclass ImageTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.ImageTokenizer = ImageTokenizer;\nexports.ImageTokenizerName = uniqueName;\nexports.calcImageAlt = calcImageAlt;\nexports[\"default\"] = ImageTokenizer;\nexports.imageMatch = match;\nexports.imageParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function () {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatContinuationText,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces < 4)\n            return null;\n        const { nodePoints, startIndex, firstNonWhitespaceIndex, endIndex } = line;\n        let firstIndex = startIndex + 4;\n        if (nodePoints[startIndex].codePoint === character.AsciiCodePoint.SPACE &&\n            nodePoints[startIndex + 3].codePoint === character.VirtualCodePoint.SPACE) {\n            let i = startIndex + 1;\n            for (; i < firstNonWhitespaceIndex; ++i) {\n                if (nodePoints[i].codePoint === character.VirtualCodePoint.SPACE)\n                    break;\n            }\n            firstIndex = i + 4;\n        }\n        const nextIndex = endIndex;\n        const token = {\n            nodeType: ast.CodeType,\n            position: {\n                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            lines: [\n                {\n                    nodePoints,\n                    startIndex: firstIndex,\n                    endIndex,\n                    firstNonWhitespaceIndex,\n                    countOfPrecedeSpaces: line.countOfPrecedeSpaces - (firstIndex - startIndex),\n                },\n            ],\n        };\n        return { token, nextIndex };\n    }\n    function eatContinuationText(line, token) {\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;\n        if (countOfPrecedeSpaces < 4 && firstNonWhitespaceIndex < endIndex)\n            return { status: 'notMatched' };\n        const firstIndex = Math.min(endIndex - 1, startIndex + 4);\n        token.lines.push({\n            nodePoints,\n            startIndex: firstIndex,\n            endIndex,\n            firstNonWhitespaceIndex,\n            countOfPrecedeSpaces: countOfPrecedeSpaces - (firstIndex - startIndex),\n        });\n        return { status: 'opening', nextIndex: endIndex };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const { lines } = token;\n            let startLineIndex = 0, endLineIndex = lines.length;\n            for (; startLineIndex < endLineIndex; ++startLineIndex) {\n                const line = lines[startLineIndex];\n                if (line.firstNonWhitespaceIndex < line.endIndex)\n                    break;\n            }\n            for (; startLineIndex < endLineIndex; --endLineIndex) {\n                const line = lines[endLineIndex - 1];\n                if (line.firstNonWhitespaceIndex < line.endIndex)\n                    break;\n            }\n            const contents = coreTokenizer.mergeContentLinesFaithfully(lines, startLineIndex, endLineIndex);\n            let value = character.calcStringFromNodePoints(contents);\n            if (!/\\n$/.test(value))\n                value += '\\n';\n            const node = api.shouldReservePosition\n                ? {\n                    type: ast.CodeType,\n                    position: token.position,\n                    lang: null,\n                    meta: null,\n                    value,\n                }\n                : {\n                    type: ast.CodeType,\n                    lang: null,\n                    meta: null,\n                    value,\n                };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-indented-code';\n\nclass IndentedCodeTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.IndentedCodeTokenizer = IndentedCodeTokenizer;\nexports.IndentedCodeTokenizerName = uniqueName;\nexports[\"default\"] = IndentedCodeTokenizer;\nexports.indentedCodeMatch = match;\nexports.indentedCodeParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function (api) {\n    return { findDelimiter, processSingleDelimiter };\n    function* findDelimiter() {\n        const nodePoints = api.getNodePoints();\n        const blockStartIndex = api.getBlockStartIndex();\n        const blockEndIndex = api.getBlockEndIndex();\n        const potentialDelimiters = [];\n        for (let i = blockStartIndex; i < blockEndIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH: {\n                    i += 1;\n                    if (i < blockEndIndex && nodePoints[i].codePoint === character.AsciiCodePoint.BACKTICK) {\n                        const j = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, character.AsciiCodePoint.BACKTICK);\n                        potentialDelimiters.push({\n                            type: 'closer',\n                            startIndex: i,\n                            endIndex: j,\n                        });\n                        if (j > i + 1) {\n                            potentialDelimiters.push({\n                                type: 'opener',\n                                startIndex: i + 1,\n                                endIndex: j,\n                            });\n                        }\n                        i = j - 1;\n                    }\n                    break;\n                }\n                case character.AsciiCodePoint.BACKTICK: {\n                    const _startIndex = i;\n                    const endIndexOfBacktick = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, c);\n                    potentialDelimiters.push({\n                        type: 'both',\n                        startIndex: _startIndex,\n                        endIndex: endIndexOfBacktick,\n                    });\n                    i = endIndexOfBacktick - 1;\n                    break;\n                }\n            }\n        }\n        let pIndex = 0;\n        let lastEndIndex = -1;\n        let delimiter = null;\n        while (pIndex < potentialDelimiters.length) {\n            const [startIndex, endIndex] = yield delimiter;\n            if (lastEndIndex === endIndex) {\n                if (delimiter == null || delimiter.startIndex >= startIndex)\n                    continue;\n            }\n            lastEndIndex = endIndex;\n            let openerDelimiter = null;\n            let closerDelimiter = null;\n            for (; pIndex < potentialDelimiters.length; ++pIndex) {\n                for (; pIndex < potentialDelimiters.length; ++pIndex) {\n                    const delimiter = potentialDelimiters[pIndex];\n                    if (delimiter.startIndex >= startIndex && delimiter.type !== 'closer')\n                        break;\n                }\n                if (pIndex + 1 >= potentialDelimiters.length)\n                    return;\n                openerDelimiter = potentialDelimiters[pIndex];\n                const thickness = openerDelimiter.endIndex - openerDelimiter.startIndex;\n                for (let i = pIndex + 1; i < potentialDelimiters.length; ++i) {\n                    const delimiter = potentialDelimiters[i];\n                    if (delimiter.type !== 'opener' &&\n                        delimiter.endIndex - delimiter.startIndex === thickness) {\n                        closerDelimiter = delimiter;\n                        break;\n                    }\n                }\n                if (closerDelimiter != null)\n                    break;\n            }\n            if (closerDelimiter == null)\n                return;\n            delimiter = {\n                type: 'full',\n                startIndex: openerDelimiter.startIndex,\n                endIndex: closerDelimiter.endIndex,\n                thickness: closerDelimiter.endIndex - closerDelimiter.startIndex,\n            };\n        }\n    }\n    function processSingleDelimiter(delimiter) {\n        const token = {\n            nodeType: ast.InlineCodeType,\n            startIndex: delimiter.startIndex,\n            endIndex: delimiter.endIndex,\n            thickness: delimiter.thickness,\n        };\n        return [token];\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const nodePoints = api.getNodePoints();\n            let startIndex = token.startIndex + token.thickness;\n            let endIndex = token.endIndex - token.thickness;\n            let isAllSpace = true;\n            for (let i = startIndex; i < endIndex; ++i) {\n                if (character.isSpaceLike(nodePoints[i].codePoint))\n                    continue;\n                isAllSpace = false;\n                break;\n            }\n            if (!isAllSpace && startIndex + 2 < endIndex) {\n                const firstCharacter = nodePoints[startIndex].codePoint;\n                const lastCharacter = nodePoints[endIndex - 1].codePoint;\n                if (character.isSpaceLike(firstCharacter) && character.isSpaceLike(lastCharacter)) {\n                    startIndex += 1;\n                    endIndex -= 1;\n                }\n            }\n            const value = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex).replace(/\\n/g, ' ');\n            const node = api.shouldReservePosition\n                ? { type: ast.InlineCodeType, position: api.calcPosition(token), value }\n                : { type: ast.InlineCodeType, value };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-inline-code';\n\nclass InlineCodeTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.InlineCodeTokenizer = InlineCodeTokenizer;\nexports.InlineCodeTokenizerName = uniqueName;\nexports[\"default\"] = InlineCodeTokenizer;\nexports.inlineCodeMatch = match;\nexports.inlineCodeParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function (api) {\n    const { backtickRequired } = this;\n    return { findDelimiter, processSingleDelimiter };\n    function* findDelimiter() {\n        const nodePoints = api.getNodePoints();\n        const blockStartIndex = api.getBlockStartIndex();\n        const blockEndIndex = api.getBlockEndIndex();\n        const potentialDelimiters = [];\n        for (let i = blockStartIndex; i < blockEndIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.BACKTICK: {\n                    const _startIndex = i;\n                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, character.AsciiCodePoint.BACKTICK);\n                    if (i >= blockEndIndex || nodePoints[i].codePoint !== character.AsciiCodePoint.DOLLAR_SIGN) {\n                        break;\n                    }\n                    const delimiter = {\n                        type: 'opener',\n                        startIndex: _startIndex,\n                        endIndex: i + 1,\n                    };\n                    potentialDelimiters.push(delimiter);\n                    break;\n                }\n                case character.AsciiCodePoint.DOLLAR_SIGN: {\n                    const _startIndex = i;\n                    i = coreTokenizer.eatOptionalCharacters(nodePoints, i + 1, blockEndIndex, character.AsciiCodePoint.BACKTICK);\n                    if (i < blockEndIndex && nodePoints[i].codePoint === character.AsciiCodePoint.DOLLAR_SIGN) {\n                        break;\n                    }\n                    const thickness = i - _startIndex;\n                    if (thickness <= 1) {\n                        if (backtickRequired)\n                            break;\n                        const delimiter = {\n                            type: 'both',\n                            startIndex: _startIndex,\n                            endIndex: i,\n                        };\n                        potentialDelimiters.push(delimiter);\n                        break;\n                    }\n                    const delimiter = {\n                        type: 'closer',\n                        startIndex: _startIndex,\n                        endIndex: i,\n                    };\n                    potentialDelimiters.push(delimiter);\n                    i -= 1;\n                    break;\n                }\n            }\n        }\n        let pIndex = 0;\n        let lastEndIndex = -1;\n        let delimiter = null;\n        while (pIndex < potentialDelimiters.length) {\n            const [startIndex, endIndex] = yield delimiter;\n            if (lastEndIndex === endIndex) {\n                if (delimiter == null || delimiter.startIndex >= startIndex)\n                    continue;\n            }\n            lastEndIndex = endIndex;\n            let openerDelimiter = null;\n            let closerDelimiter = null;\n            for (; pIndex < potentialDelimiters.length; ++pIndex) {\n                for (; pIndex < potentialDelimiters.length; ++pIndex) {\n                    const delimiter = potentialDelimiters[pIndex];\n                    if (delimiter.startIndex >= startIndex && delimiter.type !== 'closer')\n                        break;\n                }\n                if (pIndex + 1 >= potentialDelimiters.length)\n                    break;\n                openerDelimiter = potentialDelimiters[pIndex];\n                const thickness = openerDelimiter.endIndex - openerDelimiter.startIndex;\n                for (let i = pIndex + 1; i < potentialDelimiters.length; ++i) {\n                    const delimiter = potentialDelimiters[i];\n                    if (delimiter.type !== 'opener' &&\n                        delimiter.endIndex - delimiter.startIndex === thickness) {\n                        closerDelimiter = delimiter;\n                        break;\n                    }\n                }\n                if (closerDelimiter != null)\n                    break;\n            }\n            if (closerDelimiter == null)\n                return;\n            delimiter = {\n                type: 'full',\n                startIndex: openerDelimiter.startIndex,\n                endIndex: closerDelimiter.endIndex,\n                thickness: closerDelimiter.endIndex - closerDelimiter.startIndex,\n            };\n        }\n    }\n    function processSingleDelimiter(delimiter) {\n        const token = {\n            nodeType: ast.InlineMathType,\n            startIndex: delimiter.startIndex,\n            endIndex: delimiter.endIndex,\n            thickness: delimiter.thickness,\n        };\n        return [token];\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const nodePoints = api.getNodePoints();\n            let startIndex = token.startIndex + token.thickness;\n            let endIndex = token.endIndex - token.thickness;\n            let isAllSpace = true;\n            for (let i = startIndex; i < endIndex; ++i) {\n                if (character.isSpaceLike(nodePoints[i].codePoint))\n                    continue;\n                isAllSpace = false;\n                break;\n            }\n            if (!isAllSpace && startIndex + 2 < endIndex) {\n                const firstCharacter = nodePoints[startIndex].codePoint;\n                const lastCharacter = nodePoints[endIndex - 1].codePoint;\n                if (character.isSpaceLike(firstCharacter) && character.isSpaceLike(lastCharacter)) {\n                    startIndex += 1;\n                    endIndex -= 1;\n                }\n            }\n            const value = character.calcStringFromNodePoints(nodePoints, startIndex, endIndex).replace(/\\n/g, ' ');\n            const node = api.shouldReservePosition\n                ? { type: ast.InlineMathType, position: api.calcPosition(token), value }\n                : { type: ast.InlineMathType, value };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-inline-math';\n\nclass InlineMathTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b, _c;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n        this.backtickRequired = (_c = props.backtickRequired) !== null && _c !== void 0 ? _c : true;\n    }\n}\n\nexports.InlineMathTokenizer = InlineMathTokenizer;\nexports.InlineMathTokenizerName = uniqueName;\nexports[\"default\"] = InlineMathTokenizer;\nexports.inlineMathMatch = match;\nexports.inlineMathParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar tokenizerLink = require('@yozora/tokenizer-link');\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        isDelimiterPair,\n        processDelimiterPair,\n        processSingleDelimiter,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        for (let i = startIndex; i < endIndex; ++i) {\n            const c = nodePoints[i].codePoint;\n            switch (c) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.OPEN_BRACKET: {\n                    const brackets = [];\n                    const delimiter = {\n                        type: 'opener',\n                        startIndex: i,\n                        endIndex: i + 1,\n                        brackets,\n                    };\n                    const result1 = coreTokenizer.eatLinkLabel(nodePoints, i, endIndex);\n                    if (result1.nextIndex < 0)\n                        return delimiter;\n                    if (result1.labelAndIdentifier == null) {\n                        i = result1.nextIndex - 1;\n                        break;\n                    }\n                    brackets.push({\n                        startIndex: i,\n                        endIndex: result1.nextIndex,\n                        label: result1.labelAndIdentifier.label,\n                        identifier: result1.labelAndIdentifier.identifier,\n                    });\n                    for (i = result1.nextIndex; i < endIndex;) {\n                        if (nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_BRACKET)\n                            break;\n                        const { labelAndIdentifier, nextIndex } = coreTokenizer.eatLinkLabel(nodePoints, i, endIndex);\n                        if (nextIndex === -1) {\n                            delimiter.type = 'opener';\n                            delimiter.endIndex = i + 1;\n                            return delimiter;\n                        }\n                        const bracket = {\n                            startIndex: i,\n                            endIndex: nextIndex,\n                        };\n                        delimiter.type = 'full';\n                        delimiter.endIndex = nextIndex;\n                        brackets.push(bracket);\n                        if (labelAndIdentifier == null)\n                            break;\n                        bracket.label = labelAndIdentifier.label;\n                        bracket.identifier = labelAndIdentifier.identifier;\n                        i = nextIndex;\n                    }\n                    return delimiter;\n                }\n                case character.AsciiCodePoint.CLOSE_BRACKET: {\n                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_BRACKET) {\n                        break;\n                    }\n                    const result1 = coreTokenizer.eatLinkLabel(nodePoints, i + 1, endIndex);\n                    if (result1.nextIndex === -1) {\n                        return {\n                            type: 'opener',\n                            startIndex: i + 1,\n                            endIndex: i + 2,\n                            brackets: [],\n                        };\n                    }\n                    if (result1.labelAndIdentifier == null) {\n                        i = result1.nextIndex - 1;\n                        break;\n                    }\n                    const brackets = [\n                        {\n                            startIndex: i + 1,\n                            endIndex: result1.nextIndex,\n                            label: result1.labelAndIdentifier.label,\n                            identifier: result1.labelAndIdentifier.identifier,\n                        },\n                    ];\n                    const delimiter = {\n                        type: 'closer',\n                        startIndex: i,\n                        endIndex: result1.nextIndex,\n                        brackets,\n                    };\n                    for (i = result1.nextIndex; i < endIndex;) {\n                        if (nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_BRACKET)\n                            break;\n                        const { labelAndIdentifier, nextIndex } = coreTokenizer.eatLinkLabel(nodePoints, i, endIndex);\n                        if (nextIndex === -1) {\n                            delimiter.type = 'both';\n                            delimiter.endIndex = i + 1;\n                            return delimiter;\n                        }\n                        const bracket = {\n                            startIndex: i,\n                            endIndex: nextIndex,\n                        };\n                        delimiter.type = 'full';\n                        delimiter.endIndex = nextIndex;\n                        brackets.push(bracket);\n                        if (labelAndIdentifier == null)\n                            break;\n                        bracket.label = labelAndIdentifier.label;\n                        bracket.identifier = labelAndIdentifier.identifier;\n                        i = nextIndex;\n                    }\n                    return delimiter;\n                }\n            }\n        }\n        return null;\n    }\n    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const hasInternalLinkToken = internalTokens.find(coreTokenizer.isLinkToken) != null;\n        if (hasInternalLinkToken) {\n            return { paired: false, opener: false, closer: false };\n        }\n        const nodePoints = api.getNodePoints();\n        const balancedBracketsStatus = tokenizerLink.checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);\n        switch (balancedBracketsStatus) {\n            case -1:\n                return { paired: false, opener: false, closer: true };\n            case 0: {\n                const bracket = closerDelimiter.brackets[0];\n                if (bracket == null ||\n                    bracket.identifier == null ||\n                    !api.hasDefinition(bracket.identifier)) {\n                    return { paired: false, opener: false, closer: false };\n                }\n                return { paired: true };\n            }\n            case 1: {\n                return { paired: false, opener: true, closer: false };\n            }\n        }\n    }\n    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const tokens = processSingleDelimiter(openerDelimiter);\n        const [bracket, ...brackets] = closerDelimiter.brackets;\n        tokens.push({\n            nodeType: ast.LinkReferenceType,\n            startIndex: openerDelimiter.endIndex - 1,\n            endIndex: bracket.endIndex,\n            referenceType: 'full',\n            label: bracket.label,\n            identifier: bracket.identifier,\n            children: api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex),\n        });\n        return {\n            tokens,\n            remainCloserDelimiter: {\n                type: closerDelimiter.type === 'both' ? 'opener' : 'full',\n                startIndex: bracket.endIndex,\n                endIndex: closerDelimiter.endIndex,\n                brackets,\n            },\n        };\n    }\n    function processSingleDelimiter(delimiter) {\n        const tokens = [];\n        const brackets = delimiter.brackets;\n        if (brackets.length <= 0)\n            return tokens;\n        let bracketIndex = 0;\n        let lastBracketIndex = -1;\n        for (; bracketIndex < brackets.length; ++bracketIndex) {\n            let bracket = null;\n            for (; bracketIndex < brackets.length; ++bracketIndex) {\n                bracket = brackets[bracketIndex];\n                if (bracket.identifier != null && api.hasDefinition(bracket.identifier))\n                    break;\n            }\n            if (bracket == null || bracketIndex >= brackets.length)\n                break;\n            if (lastBracketIndex + 1 < bracketIndex) {\n                const bracket0 = brackets[bracketIndex - 1];\n                tokens.push({\n                    nodeType: ast.LinkReferenceType,\n                    startIndex: bracket0.startIndex,\n                    endIndex: bracket.endIndex,\n                    referenceType: 'full',\n                    label: bracket.label,\n                    identifier: bracket.identifier,\n                    children: api.resolveInternalTokens([], bracket0.startIndex + 1, bracket0.endIndex - 1),\n                });\n                lastBracketIndex = bracketIndex;\n                continue;\n            }\n            if (bracketIndex + 1 === brackets.length) {\n                tokens.push({\n                    nodeType: ast.LinkReferenceType,\n                    startIndex: bracket.startIndex,\n                    endIndex: bracket.endIndex,\n                    referenceType: 'shortcut',\n                    label: bracket.label,\n                    identifier: bracket.identifier,\n                    children: api.resolveInternalTokens([], bracket.startIndex + 1, bracket.endIndex - 1),\n                });\n                break;\n            }\n            if (bracketIndex + 1 < brackets.length && brackets[bracketIndex + 1].identifier == null) {\n                const bracket1 = brackets[bracketIndex + 1];\n                tokens.push({\n                    nodeType: ast.LinkReferenceType,\n                    startIndex: bracket.startIndex,\n                    endIndex: bracket1.endIndex,\n                    referenceType: 'collapsed',\n                    label: bracket.label,\n                    identifier: bracket.identifier,\n                    children: api.resolveInternalTokens([], bracket.startIndex + 1, bracket.endIndex - 1),\n                });\n                break;\n            }\n        }\n        return tokens;\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const { identifier, label, referenceType } = token;\n            const children = api.parseInlineTokens(token.children);\n            const node = api.shouldReservePosition\n                ? {\n                    type: ast.LinkReferenceType,\n                    position: api.calcPosition(token),\n                    identifier,\n                    label,\n                    referenceType,\n                    children,\n                }\n                : {\n                    type: ast.LinkReferenceType,\n                    identifier,\n                    label,\n                    referenceType,\n                    children,\n                };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-link-reference';\n\nclass LinkReferenceTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.LinkReferenceTokenizer = LinkReferenceTokenizer;\nexports.LinkReferenceTokenizerName = uniqueName;\nexports[\"default\"] = LinkReferenceTokenizer;\nexports.linkReferenceMatch = match;\nexports.linkReferenceParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar ast = require('@yozora/ast');\n\nconst checkBalancedBracketsStatus = (startIndex, endIndex, internalTokens, nodePoints) => {\n    let i = startIndex;\n    let bracketCount = 0;\n    const updateBracketCount = () => {\n        const c = nodePoints[i].codePoint;\n        switch (c) {\n            case character.AsciiCodePoint.BACKSLASH:\n                i += 1;\n                break;\n            case character.AsciiCodePoint.OPEN_BRACKET:\n                bracketCount += 1;\n                break;\n            case character.AsciiCodePoint.CLOSE_BRACKET:\n                bracketCount -= 1;\n                break;\n        }\n    };\n    for (const token of internalTokens) {\n        if (token.startIndex < startIndex)\n            continue;\n        if (token.endIndex > endIndex)\n            break;\n        for (; i < token.startIndex; ++i) {\n            updateBracketCount();\n            if (bracketCount < 0)\n                return -1;\n        }\n        i = token.endIndex;\n    }\n    for (; i < endIndex; ++i) {\n        updateBracketCount();\n        if (bracketCount < 0)\n            return -1;\n    }\n    return bracketCount > 0 ? 1 : 0;\n};\n\nfunction eatLinkDestination(nodePoints, startIndex, endIndex) {\n    if (startIndex >= endIndex)\n        return -1;\n    let i = startIndex;\n    switch (nodePoints[i].codePoint) {\n        case character.AsciiCodePoint.OPEN_ANGLE: {\n            for (i += 1; i < endIndex; ++i) {\n                const p = nodePoints[i];\n                switch (p.codePoint) {\n                    case character.AsciiCodePoint.BACKSLASH:\n                        i += 1;\n                        break;\n                    case character.AsciiCodePoint.OPEN_ANGLE:\n                    case character.VirtualCodePoint.LINE_END:\n                        return -1;\n                    case character.AsciiCodePoint.CLOSE_ANGLE:\n                        return i + 1;\n                }\n            }\n            return -1;\n        }\n        default: {\n            let openParensCount = 0;\n            for (; i < endIndex; ++i) {\n                const c = nodePoints[i].codePoint;\n                switch (c) {\n                    case character.AsciiCodePoint.BACKSLASH:\n                        i += 1;\n                        break;\n                    case character.AsciiCodePoint.OPEN_PARENTHESIS:\n                        openParensCount += 1;\n                        break;\n                    case character.AsciiCodePoint.CLOSE_PARENTHESIS:\n                        openParensCount -= 1;\n                        if (openParensCount < 0)\n                            return i;\n                        break;\n                    default:\n                        if (character.isWhitespaceCharacter(c) || character.isAsciiControlCharacter(c))\n                            return i;\n                        break;\n                }\n            }\n            return openParensCount === 0 ? i : -1;\n        }\n    }\n}\n\nfunction eatLinkTitle(nodePoints, startIndex, endIndex) {\n    if (startIndex >= endIndex)\n        return -1;\n    let i = startIndex;\n    const titleWrapSymbol = nodePoints[i].codePoint;\n    switch (titleWrapSymbol) {\n        case character.AsciiCodePoint.DOUBLE_QUOTE:\n        case character.AsciiCodePoint.SINGLE_QUOTE: {\n            for (i += 1; i < endIndex; ++i) {\n                const p = nodePoints[i];\n                switch (p.codePoint) {\n                    case character.AsciiCodePoint.BACKSLASH:\n                        i += 1;\n                        break;\n                    case titleWrapSymbol:\n                        return i + 1;\n                    case character.VirtualCodePoint.LINE_END: {\n                        const j = coreTokenizer.eatOptionalBlankLines(nodePoints, startIndex, i);\n                        if (nodePoints[j].line > p.line + 1)\n                            return -1;\n                        break;\n                    }\n                }\n            }\n            break;\n        }\n        case character.AsciiCodePoint.OPEN_PARENTHESIS: {\n            let openParens = 1;\n            for (i += 1; i < endIndex; ++i) {\n                const p = nodePoints[i];\n                switch (p.codePoint) {\n                    case character.AsciiCodePoint.BACKSLASH:\n                        i += 1;\n                        break;\n                    case character.VirtualCodePoint.LINE_END: {\n                        const j = coreTokenizer.eatOptionalBlankLines(nodePoints, startIndex, i);\n                        if (nodePoints[j].line > p.line + 1)\n                            return -1;\n                        break;\n                    }\n                    case character.AsciiCodePoint.OPEN_PARENTHESIS:\n                        openParens += 1;\n                        break;\n                    case character.AsciiCodePoint.CLOSE_PARENTHESIS:\n                        openParens -= 1;\n                        if (openParens === 0)\n                            return i + 1;\n                        break;\n                }\n            }\n            break;\n        }\n        case character.AsciiCodePoint.CLOSE_PARENTHESIS:\n            return i;\n        default:\n            return -1;\n    }\n    return -1;\n}\n\nconst match = function (api) {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter(_findDelimiter),\n        isDelimiterPair,\n        processDelimiterPair,\n    };\n    function _findDelimiter(startIndex, endIndex) {\n        const nodePoints = api.getNodePoints();\n        const blockEndIndex = api.getBlockEndIndex();\n        for (let i = startIndex; i < endIndex; ++i) {\n            const p = nodePoints[i];\n            switch (p.codePoint) {\n                case character.AsciiCodePoint.BACKSLASH:\n                    i += 1;\n                    break;\n                case character.AsciiCodePoint.OPEN_BRACKET: {\n                    const delimiter = {\n                        type: 'opener',\n                        startIndex: i,\n                        endIndex: i + 1,\n                    };\n                    return delimiter;\n                }\n                case character.AsciiCodePoint.CLOSE_BRACKET: {\n                    if (i + 1 >= endIndex || nodePoints[i + 1].codePoint !== character.AsciiCodePoint.OPEN_PARENTHESIS)\n                        break;\n                    const destinationStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, i + 2, blockEndIndex);\n                    const destinationEndIndex = eatLinkDestination(nodePoints, destinationStartIndex, blockEndIndex);\n                    if (destinationEndIndex < 0)\n                        break;\n                    const titleStartIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, destinationEndIndex, blockEndIndex);\n                    const titleEndIndex = eatLinkTitle(nodePoints, titleStartIndex, blockEndIndex);\n                    if (titleEndIndex < 0)\n                        break;\n                    const _startIndex = i;\n                    const _endIndex = coreTokenizer.eatOptionalWhitespaces(nodePoints, titleEndIndex, blockEndIndex) + 1;\n                    if (_endIndex > blockEndIndex ||\n                        nodePoints[_endIndex - 1].codePoint !== character.AsciiCodePoint.CLOSE_PARENTHESIS)\n                        break;\n                    return {\n                        type: 'closer',\n                        startIndex: _startIndex,\n                        endIndex: _endIndex,\n                        destinationContent: destinationStartIndex < destinationEndIndex\n                            ? {\n                                startIndex: destinationStartIndex,\n                                endIndex: destinationEndIndex,\n                            }\n                            : undefined,\n                        titleContent: titleStartIndex < titleEndIndex\n                            ? { startIndex: titleStartIndex, endIndex: titleEndIndex }\n                            : undefined,\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    function isDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const nodePoints = api.getNodePoints();\n        const hasInternalLinkToken = internalTokens.find(coreTokenizer.isLinkToken) != null;\n        if (hasInternalLinkToken) {\n            return { paired: false, opener: false, closer: false };\n        }\n        const balancedBracketsStatus = checkBalancedBracketsStatus(openerDelimiter.endIndex, closerDelimiter.startIndex, internalTokens, nodePoints);\n        switch (balancedBracketsStatus) {\n            case -1:\n                return { paired: false, opener: false, closer: true };\n            case 0:\n                return { paired: true };\n            case 1:\n                return { paired: false, opener: true, closer: false };\n        }\n    }\n    function processDelimiterPair(openerDelimiter, closerDelimiter, internalTokens) {\n        const children = api.resolveInternalTokens(internalTokens, openerDelimiter.endIndex, closerDelimiter.startIndex);\n        const token = {\n            nodeType: ast.LinkType,\n            startIndex: openerDelimiter.startIndex,\n            endIndex: closerDelimiter.endIndex,\n            destinationContent: closerDelimiter.destinationContent,\n            titleContent: closerDelimiter.titleContent,\n            children,\n        };\n        return { tokens: [token] };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const nodePoints = api.getNodePoints();\n            let url = '';\n            if (token.destinationContent != null) {\n                let { startIndex, endIndex } = token.destinationContent;\n                if (nodePoints[startIndex].codePoint === character.AsciiCodePoint.OPEN_ANGLE) {\n                    startIndex += 1;\n                    endIndex -= 1;\n                }\n                const destination = character.calcEscapedStringFromNodePoints(nodePoints, startIndex, endIndex, true);\n                url = coreTokenizer.encodeLinkDestination(destination);\n            }\n            let title;\n            if (token.titleContent != null) {\n                const { startIndex, endIndex } = token.titleContent;\n                title = character.calcEscapedStringFromNodePoints(nodePoints, startIndex + 1, endIndex - 1);\n            }\n            const children = api.parseInlineTokens(token.children);\n            const node = api.shouldReservePosition\n                ? { type: ast.LinkType, position: api.calcPosition(token), url, title, children }\n                : { type: ast.LinkType, url, title, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-link';\n\nclass LinkTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.LINKS,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.LinkTokenizer = LinkTokenizer;\nexports.LinkTokenizerName = uniqueName;\nexports.checkBalancedBracketsStatus = checkBalancedBracketsStatus;\nexports[\"default\"] = LinkTokenizer;\nexports.eatLinkDestination = eatLinkDestination;\nexports.eatLinkTitle = eatLinkTitle;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar character = require('@yozora/character');\n\nconst match = function () {\n    const { emptyItemCouldNotInterruptedTypes, enableTaskListItem } = this;\n    return {\n        isContainingBlock: true,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n        eatContinuationText,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex)\n            return null;\n        let ordered = false;\n        let marker = null;\n        let orderType;\n        let order;\n        let i = firstNonWhitespaceIndex;\n        let c = nodePoints[i].codePoint;\n        if (i + 1 < endIndex) {\n            const c0 = c;\n            if (character.isAsciiDigitCharacter(c0)) {\n                orderType = '1';\n                let v = c0 - character.AsciiCodePoint.DIGIT0;\n                for (i += 1; i < endIndex; ++i) {\n                    c = nodePoints[i].codePoint;\n                    if (!character.isAsciiDigitCharacter(c))\n                        break;\n                    v = v * 10 + c - character.AsciiCodePoint.DIGIT0;\n                }\n                order = v;\n                orderType = '1';\n            }\n            else if (character.isAsciiLowerLetter(c0)) {\n                i += 1;\n                c = nodePoints[i].codePoint;\n                order = c0 - character.AsciiCodePoint.LOWERCASE_A + 1;\n                orderType = 'a';\n            }\n            else if (character.isAsciiUpperLetter(c0)) {\n                i += 1;\n                c = nodePoints[i].codePoint;\n                order = c0 - character.AsciiCodePoint.UPPERCASE_A + 1;\n                orderType = 'A';\n            }\n            if (i > firstNonWhitespaceIndex &&\n                i - firstNonWhitespaceIndex <= 9 &&\n                (c === character.AsciiCodePoint.DOT || c === character.AsciiCodePoint.CLOSE_PARENTHESIS)) {\n                i += 1;\n                ordered = true;\n                marker = c;\n            }\n        }\n        if (!ordered) {\n            if (c === character.AsciiCodePoint.PLUS_SIGN ||\n                c === character.AsciiCodePoint.MINUS_SIGN ||\n                c === character.AsciiCodePoint.ASTERISK) {\n                i += 1;\n                marker = c;\n            }\n        }\n        if (marker == null)\n            return null;\n        let countOfSpaces = 0, nextIndex = i;\n        if (nextIndex < endIndex) {\n            c = nodePoints[nextIndex].codePoint;\n            if (c === character.VirtualCodePoint.SPACE)\n                nextIndex += 1;\n        }\n        for (; nextIndex < endIndex; ++nextIndex) {\n            c = nodePoints[nextIndex].codePoint;\n            if (!character.isSpaceCharacter(c))\n                break;\n            countOfSpaces += 1;\n        }\n        if (countOfSpaces > 4) {\n            nextIndex -= countOfSpaces - 1;\n            countOfSpaces = 1;\n        }\n        if (countOfSpaces === 0 && nextIndex < endIndex && c !== character.VirtualCodePoint.LINE_END)\n            return null;\n        const countOfTopBlankLine = c === character.VirtualCodePoint.LINE_END ? 1 : -1;\n        if (c === character.VirtualCodePoint.LINE_END) {\n            nextIndex -= countOfSpaces - 1;\n            countOfSpaces = 1;\n        }\n        const indent = i - startIndex + countOfSpaces;\n        let status = null;\n        if (enableTaskListItem) {\n            ({ status, nextIndex } = eatTaskStatus(nodePoints, nextIndex, endIndex));\n        }\n        const token = {\n            nodeType: ast.ListType,\n            position: {\n                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            ordered,\n            marker,\n            orderType: ordered ? orderType : undefined,\n            order: ordered ? order : undefined,\n            indent,\n            countOfTopBlankLine,\n            children: [],\n        };\n        if (status != null)\n            token.status = status;\n        return { token, nextIndex };\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        const result = eatOpener(line);\n        if (result == null)\n            return null;\n        const { token, nextIndex } = result;\n        if (emptyItemCouldNotInterruptedTypes.includes(prevSiblingToken.nodeType)) {\n            if (token.indent === line.endIndex - line.startIndex) {\n                return null;\n            }\n            if (token.ordered && token.order !== 1)\n                return null;\n        }\n        return { token, nextIndex, remainingSibling: prevSiblingToken };\n    }\n    function eatContinuationText(line, token) {\n        const { startIndex, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces: indent } = line;\n        if (firstNonWhitespaceIndex < endIndex && indent < token.indent) {\n            return { status: 'notMatched' };\n        }\n        if (firstNonWhitespaceIndex >= endIndex) {\n            if (token.countOfTopBlankLine >= 0) {\n                token.countOfTopBlankLine += 1;\n                if (token.countOfTopBlankLine > 1) {\n                    return { status: 'notMatched' };\n                }\n            }\n        }\n        else {\n            token.countOfTopBlankLine = -1;\n        }\n        const nextIndex = Math.min(startIndex + token.indent, endIndex - 1);\n        return { status: 'opening', nextIndex };\n    }\n};\nfunction eatTaskStatus(nodePoints, startIndex, endIndex) {\n    let i = startIndex;\n    for (; i < endIndex; ++i) {\n        const c = nodePoints[i].codePoint;\n        if (!character.isSpaceCharacter(c))\n            break;\n    }\n    if (i + 3 >= endIndex ||\n        nodePoints[i].codePoint !== character.AsciiCodePoint.OPEN_BRACKET ||\n        nodePoints[i + 2].codePoint !== character.AsciiCodePoint.CLOSE_BRACKET ||\n        !character.isWhitespaceCharacter(nodePoints[i + 3].codePoint))\n        return { status: null, nextIndex: startIndex };\n    let status;\n    const c = nodePoints[i + 1].codePoint;\n    switch (c) {\n        case character.AsciiCodePoint.SPACE:\n            status = ast.TaskStatus.TODO;\n            break;\n        case character.AsciiCodePoint.MINUS_SIGN:\n            status = ast.TaskStatus.DOING;\n            break;\n        case character.AsciiCodePoint.LOWERCASE_X:\n        case character.AsciiCodePoint.UPPERCASE_X:\n            status = ast.TaskStatus.DONE;\n            break;\n        default:\n            return { status: null, nextIndex: startIndex };\n    }\n    return { status, nextIndex: i + 4 };\n}\n\nconst parse = function (api) {\n    return {\n        parse: tokens => {\n            const results = [];\n            let listItemTokens = [];\n            for (let i = 0; i < tokens.length; ++i) {\n                const originalToken = tokens[i];\n                if (listItemTokens.length <= 0 ||\n                    listItemTokens[0].ordered !== originalToken.ordered ||\n                    listItemTokens[0].orderType !== originalToken.orderType ||\n                    listItemTokens[0].marker !== originalToken.marker) {\n                    const node = resolveList(listItemTokens, api);\n                    if (node)\n                        results.push(node);\n                    listItemTokens = [originalToken];\n                    continue;\n                }\n                listItemTokens.push(originalToken);\n            }\n            const node = resolveList(listItemTokens, api);\n            if (node)\n                results.push(node);\n            return results;\n        },\n    };\n};\nconst resolveList = (tokens, api) => {\n    if (tokens.length <= 0)\n        return null;\n    let spread = tokens.some((item) => {\n        if (item.children == null || item.children.length <= 1)\n            return false;\n        let previousPosition = item.children[0].position;\n        for (let j = 1; j < item.children.length; ++j) {\n            const currentPosition = item.children[j].position;\n            if (previousPosition.end.line + 1 < currentPosition.start.line) {\n                return true;\n            }\n            previousPosition = currentPosition;\n        }\n        return false;\n    });\n    if (!spread && tokens.length > 1) {\n        let previousItem = tokens[0];\n        for (let i = 1; i < tokens.length; ++i) {\n            const currentItem = tokens[i];\n            if (previousItem.position.end.line + 1 < currentItem.position.start.line) {\n                spread = true;\n                break;\n            }\n            previousItem = currentItem;\n        }\n    }\n    const children = tokens.map((listItemToken) => {\n        const nodes = api.parseBlockTokens(listItemToken.children);\n        const children = spread\n            ? nodes\n            : nodes\n                .map(node => (node.type === ast.ParagraphType ? node.children : node))\n                .flat();\n        const listItem = api.shouldReservePosition\n            ? {\n                type: ast.ListItemType,\n                position: listItemToken.position,\n                status: listItemToken.status,\n                children,\n            }\n            : { type: ast.ListItemType, status: listItemToken.status, children };\n        return listItem;\n    });\n    const node = api.shouldReservePosition\n        ? {\n            type: ast.ListType,\n            position: {\n                start: Object.assign({}, tokens[0].position.start),\n                end: Object.assign({}, tokens[tokens.length - 1].position.end),\n            },\n            ordered: tokens[0].ordered,\n            orderType: tokens[0].orderType,\n            start: tokens[0].order,\n            marker: tokens[0].marker,\n            spread,\n            children,\n        }\n        : {\n            type: ast.ListType,\n            ordered: tokens[0].ordered,\n            orderType: tokens[0].orderType,\n            start: tokens[0].order,\n            marker: tokens[0].marker,\n            spread,\n            children,\n        };\n    return node;\n};\n\nconst uniqueName = '@yozora/tokenizer-list';\n\nclass ListTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b, _c, _d;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.CONTAINING_BLOCK,\n        });\n        this.match = match;\n        this.parse = parse;\n        this.enableTaskListItem = (_c = props.enableTaskListItem) !== null && _c !== void 0 ? _c : false;\n        this.emptyItemCouldNotInterruptedTypes = (_d = props.emptyItemCouldNotInterruptedTypes) !== null && _d !== void 0 ? _d : [\n            ast.ParagraphType,\n        ];\n    }\n}\n\nexports.ListTokenizer = ListTokenizer;\nexports.ListTokenizerName = uniqueName;\nexports[\"default\"] = ListTokenizer;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar character = require('@yozora/character');\nvar FencedBlockTokenizer = require('@yozora/tokenizer-fenced-block');\nvar ast = require('@yozora/ast');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar FencedBlockTokenizer__default = /*#__PURE__*/_interopDefaultLegacy(FencedBlockTokenizer);\n\nconst match = function (api) {\n    const { markers } = this;\n    const hook = FencedBlockTokenizer.fencedBlockMatch.call(this, api);\n    return Object.assign(Object.assign({}, hook), { isContainingBlock: true, eatOpener });\n    function eatOpener(line, parentToken) {\n        const result = hook.eatOpener(line, parentToken);\n        if (result == null)\n            return null;\n        const { token } = result;\n        const [lft, rht] = character.calcTrimBoundaryOfCodePoints(token.infoString);\n        if (lft >= rht)\n            return result;\n        let i = rht - 1;\n        for (; i >= lft; --i) {\n            const c = token.infoString[i].codePoint;\n            if (!markers.includes(c))\n                break;\n        }\n        const countOfTailingMarker = rht - i - 1;\n        if (countOfTailingMarker != token.markerCount)\n            return null;\n        const mathToken = Object.assign(Object.assign({}, token), { infoString: [], lines: [\n                {\n                    nodePoints: token.infoString,\n                    startIndex: 0,\n                    endIndex: rht - countOfTailingMarker,\n                    firstNonWhitespaceIndex: lft,\n                    countOfPrecedeSpaces: 0,\n                },\n            ] });\n        return { token: mathToken, nextIndex: line.endIndex, saturated: true };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const contents = coreTokenizer.mergeContentLinesFaithfully(token.lines);\n            let value = character.calcStringFromNodePoints(contents);\n            if (!/\\n$/.test(value))\n                value += '\\n';\n            const node = api.shouldReservePosition\n                ? { type: ast.MathType, position: token.position, value }\n                : { type: ast.MathType, value };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-math';\n\nclass MathTokenizer extends FencedBlockTokenizer__default[\"default\"] {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FENCED_BLOCK,\n            nodeType: ast.MathType,\n            markers: [character.AsciiCodePoint.DOLLAR_SIGN],\n            markersRequired: 2,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.MathTokenizer = MathTokenizer;\nexports.MathTokenizerName = uniqueName;\nexports[\"default\"] = MathTokenizer;\nexports.mathMatch = match;\nexports.mathParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function () {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatContinuationText,\n        eatLazyContinuationText,\n    };\n    function eatOpener(line) {\n        const { endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex)\n            return null;\n        const lines = [line];\n        const position = coreTokenizer.calcPositionFromPhrasingContentLines(lines);\n        const token = {\n            nodeType: ast.ParagraphType,\n            position,\n            lines,\n        };\n        return { token, nextIndex: endIndex };\n    }\n    function eatContinuationText(line, token) {\n        const { endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex) {\n            return { status: 'notMatched' };\n        }\n        token.lines.push(line);\n        return { status: 'opening', nextIndex: endIndex };\n    }\n    function eatLazyContinuationText(line, token) {\n        const result = eatContinuationText(line, token);\n        return result;\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => {\n            const results = [];\n            for (const token of tokens) {\n                const contents = coreTokenizer.mergeAndStripContentLines(token.lines);\n                const children = api.processInlines(contents);\n                if (children.length <= 0)\n                    continue;\n                const node = api.shouldReservePosition\n                    ? { type: ast.ParagraphType, position: token.position, children }\n                    : { type: ast.ParagraphType, children };\n                results.push(node);\n            }\n            return results;\n        },\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-paragraph';\n\nclass ParagraphTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FALLBACK,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n    extractPhrasingContentLines(token) {\n        return token.lines;\n    }\n    buildBlockToken(_lines) {\n        const lines = coreTokenizer.trimBlankLines(_lines);\n        if (lines.length <= 0)\n            return null;\n        const position = coreTokenizer.calcPositionFromPhrasingContentLines(lines);\n        const token = {\n            nodeType: ast.ParagraphType,\n            lines,\n            position,\n        };\n        return token;\n    }\n}\n\nexports.ParagraphTokenizer = ParagraphTokenizer;\nexports.ParagraphTokenizerName = uniqueName;\nexports[\"default\"] = ParagraphTokenizer;\nexports.paragraphMatch = match;\nexports.paragraphParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function (api) {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n    };\n    function eatOpener() {\n        return null;\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        const { nodePoints, endIndex, firstNonWhitespaceIndex, countOfPrecedeSpaces } = line;\n        if (countOfPrecedeSpaces >= 4 || firstNonWhitespaceIndex >= endIndex)\n            return null;\n        let marker = null, hasPotentialInternalSpace = false;\n        for (let i = firstNonWhitespaceIndex; i < endIndex; ++i) {\n            const c = nodePoints[i];\n            if (c.codePoint == character.VirtualCodePoint.LINE_END)\n                break;\n            if (character.isUnicodeWhitespaceCharacter(c.codePoint)) {\n                hasPotentialInternalSpace = true;\n                continue;\n            }\n            if (hasPotentialInternalSpace ||\n                (c.codePoint !== character.AsciiCodePoint.EQUALS_SIGN && c.codePoint !== character.AsciiCodePoint.MINUS_SIGN) ||\n                (marker != null && marker !== c.codePoint)) {\n                marker = null;\n                break;\n            }\n            marker = c.codePoint;\n        }\n        if (marker == null)\n            return null;\n        const lines = api.extractPhrasingLines(prevSiblingToken);\n        if (lines == null)\n            return null;\n        const nextIndex = endIndex;\n        const token = {\n            nodeType: ast.HeadingType,\n            position: {\n                start: coreTokenizer.calcStartPoint(lines[0].nodePoints, lines[0].startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            marker,\n            lines,\n        };\n        return {\n            token,\n            nextIndex,\n            saturated: true,\n            remainingSibling: null,\n        };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            let depth = 1;\n            switch (token.marker) {\n                case character.AsciiCodePoint.EQUALS_SIGN:\n                    depth = 1;\n                    break;\n                case character.AsciiCodePoint.MINUS_SIGN:\n                    depth = 2;\n                    break;\n            }\n            const contents = coreTokenizer.mergeAndStripContentLines(token.lines);\n            const children = api.processInlines(contents);\n            const node = api.shouldReservePosition\n                ? { type: ast.HeadingType, position: token.position, depth, children }\n                : { type: ast.HeadingType, depth, children };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-setext-heading';\n\nclass SetextHeadingTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.SetextHeadingTokenizer = SetextHeadingTokenizer;\nexports.SetextHeadingTokenizerName = uniqueName;\nexports[\"default\"] = SetextHeadingTokenizer;\nexports.setextHeadingMatch = match;\nexports.setextHeadingParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function (api) {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n        eatLazyContinuationText,\n    };\n    function eatOpener() {\n        return null;\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { nodePoints, endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex >= endIndex)\n            return null;\n        const columns = [];\n        let c = nodePoints[firstNonWhitespaceIndex].codePoint;\n        let cIndex = c === character.AsciiCodePoint.VERTICAL_SLASH ? firstNonWhitespaceIndex + 1 : firstNonWhitespaceIndex;\n        for (; cIndex < endIndex;) {\n            for (; cIndex < endIndex; ++cIndex) {\n                c = nodePoints[cIndex].codePoint;\n                if (!character.isWhitespaceCharacter(c))\n                    break;\n            }\n            if (cIndex >= endIndex)\n                break;\n            let leftColon = false;\n            if (c === character.AsciiCodePoint.COLON) {\n                leftColon = true;\n                cIndex += 1;\n            }\n            let hyphenCount = 0;\n            for (; cIndex < endIndex; ++cIndex) {\n                c = nodePoints[cIndex].codePoint;\n                if (c !== character.AsciiCodePoint.MINUS_SIGN)\n                    break;\n                hyphenCount += 1;\n            }\n            if (hyphenCount <= 0)\n                return null;\n            let rightColon = false;\n            if (cIndex < endIndex && c === character.AsciiCodePoint.COLON) {\n                rightColon = true;\n                cIndex += 1;\n            }\n            for (; cIndex < endIndex; ++cIndex) {\n                c = nodePoints[cIndex].codePoint;\n                if (character.isWhitespaceCharacter(c))\n                    continue;\n                if (c === character.AsciiCodePoint.VERTICAL_SLASH) {\n                    cIndex += 1;\n                    break;\n                }\n                return null;\n            }\n            let align = null;\n            if (leftColon && rightColon)\n                align = 'center';\n            else if (leftColon)\n                align = 'left';\n            else if (rightColon)\n                align = 'right';\n            const column = { align };\n            columns.push(column);\n        }\n        if (columns.length <= 0)\n            return null;\n        const lines = api.extractPhrasingLines(prevSiblingToken);\n        if (lines == null || lines.length < 1)\n            return null;\n        let cellCount = 0, hasNonWhitespaceBeforePipe = false;\n        const previousLine = lines[lines.length - 1];\n        for (let pIndex = previousLine.startIndex; pIndex < previousLine.endIndex; ++pIndex) {\n            const p = nodePoints[pIndex];\n            if (character.isWhitespaceCharacter(p.codePoint))\n                continue;\n            if (p.codePoint === character.AsciiCodePoint.VERTICAL_SLASH) {\n                if (hasNonWhitespaceBeforePipe || cellCount > 0)\n                    cellCount += 1;\n                hasNonWhitespaceBeforePipe = false;\n                continue;\n            }\n            hasNonWhitespaceBeforePipe = true;\n            if (p.codePoint === character.AsciiCodePoint.BACKSLASH)\n                pIndex += 1;\n        }\n        if (hasNonWhitespaceBeforePipe && columns.length > 1)\n            cellCount += 1;\n        if (cellCount !== columns.length)\n            return null;\n        const row = calcTableRow(previousLine, columns);\n        const nextIndex = endIndex;\n        const token = {\n            nodeType: ast.TableType,\n            position: {\n                start: coreTokenizer.calcStartPoint(previousLine.nodePoints, previousLine.startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, nextIndex - 1),\n            },\n            columns,\n            rows: [row],\n        };\n        return {\n            token,\n            nextIndex,\n            remainingSibling: api.rollbackPhrasingLines(lines.slice(0, lines.length - 1), prevSiblingToken),\n        };\n    }\n    function eatLazyContinuationText(line, token) {\n        if (line.firstNonWhitespaceIndex >= line.endIndex) {\n            return { status: 'notMatched' };\n        }\n        const row = calcTableRow(line, token.columns);\n        if (row == null)\n            return { status: 'notMatched' };\n        token.rows.push(row);\n        return { status: 'opening', nextIndex: line.endIndex };\n    }\n    function calcTableRow(line, columns) {\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;\n        let p = nodePoints[firstNonWhitespaceIndex];\n        let i = p.codePoint === character.AsciiCodePoint.VERTICAL_SLASH\n            ? firstNonWhitespaceIndex + 1\n            : firstNonWhitespaceIndex;\n        const cells = [];\n        for (; i < endIndex; i += 1) {\n            for (; i < endIndex; ++i) {\n                p = nodePoints[i];\n                if (!character.isWhitespaceCharacter(p.codePoint))\n                    break;\n            }\n            const startPoint = i < endIndex ? coreTokenizer.calcStartPoint(nodePoints, i) : coreTokenizer.calcEndPoint(nodePoints, endIndex - 1);\n            const cellStartIndex = i, cellFirstNonWhitespaceIndex = i;\n            for (; i < endIndex; ++i) {\n                p = nodePoints[i];\n                if (p.codePoint === character.AsciiCodePoint.BACKSLASH) {\n                    i += 1;\n                    continue;\n                }\n                if (p.codePoint === character.AsciiCodePoint.VERTICAL_SLASH)\n                    break;\n            }\n            let cellEndIndex = i;\n            for (; cellEndIndex > cellStartIndex; --cellEndIndex) {\n                const p = nodePoints[cellEndIndex - 1];\n                if (!character.isWhitespaceCharacter(p.codePoint))\n                    break;\n            }\n            const endPoint = coreTokenizer.calcEndPoint(nodePoints, i - 1);\n            const lines = cellFirstNonWhitespaceIndex >= cellEndIndex\n                ? []\n                : [\n                    {\n                        nodePoints,\n                        startIndex: cellStartIndex,\n                        endIndex: cellEndIndex,\n                        firstNonWhitespaceIndex: cellFirstNonWhitespaceIndex,\n                        countOfPrecedeSpaces: cellFirstNonWhitespaceIndex - cellStartIndex,\n                    },\n                ];\n            const cell = {\n                nodeType: ast.TableCellType,\n                position: { start: startPoint, end: endPoint },\n                lines: lines,\n            };\n            cells.push(cell);\n            if (cells.length >= columns.length)\n                break;\n        }\n        const startPoint = coreTokenizer.calcStartPoint(nodePoints, startIndex);\n        const endPoint = coreTokenizer.calcEndPoint(nodePoints, endIndex - 1);\n        for (let c = cells.length; c < columns.length; ++c) {\n            const cell = {\n                nodeType: ast.TableCellType,\n                position: { start: Object.assign({}, endPoint), end: Object.assign({}, endPoint) },\n                lines: [],\n            };\n            cells.push(cell);\n        }\n        const row = {\n            nodeType: ast.TableRowType,\n            position: { start: startPoint, end: endPoint },\n            cells,\n        };\n        return row;\n    }\n};\n\nconst parse = api => ({\n    parse: tokens => tokens.map(token => {\n        const tableRows = token.rows.map((row) => {\n            const tableCells = row.cells.map((cell) => {\n                const contents = [];\n                {\n                    const nodePoints = coreTokenizer.mergeAndStripContentLines(cell.lines);\n                    for (let i = 0, endIndex = nodePoints.length; i < endIndex; ++i) {\n                        const p = nodePoints[i];\n                        if (p.codePoint === character.AsciiCodePoint.BACKSLASH && i + 1 < endIndex) {\n                            const q = nodePoints[i + 1];\n                            if (q.codePoint !== character.AsciiCodePoint.VERTICAL_SLASH)\n                                contents.push(p);\n                            contents.push(q);\n                            i += 1;\n                        }\n                        else {\n                            contents.push(p);\n                        }\n                    }\n                }\n                const children = api.processInlines(contents);\n                const tableCell = api.shouldReservePosition\n                    ? { type: ast.TableCellType, position: cell.position, children }\n                    : { type: ast.TableCellType, children };\n                return tableCell;\n            });\n            const tableRow = api.shouldReservePosition\n                ? { type: ast.TableRowType, position: row.position, children: tableCells }\n                : { type: ast.TableRowType, children: tableCells };\n            return tableRow;\n        });\n        const table = api.shouldReservePosition\n            ? { type: ast.TableType, position: token.position, columns: token.columns, children: tableRows }\n            : { type: ast.TableType, columns: token.columns, children: tableRows };\n        return table;\n    }),\n});\n\nconst uniqueName = '@yozora/tokenizer-table';\n\nclass TableTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.INTERRUPTABLE_BLOCK,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.TableTokenizer = TableTokenizer;\nexports.TableTokenizerName = uniqueName;\nexports[\"default\"] = TableTokenizer;\nexports.tableMatch = match;\nexports.tableParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar coreTokenizer = require('@yozora/core-tokenizer');\nvar character = require('@yozora/character');\n\nconst match = function () {\n    return {\n        findDelimiter: () => coreTokenizer.genFindDelimiter((startIndex, endIndex) => ({\n            type: 'full',\n            startIndex,\n            endIndex,\n        })),\n        processSingleDelimiter: delimiter => [\n            {\n                nodeType: ast.TextType,\n                startIndex: delimiter.startIndex,\n                endIndex: delimiter.endIndex,\n            },\n        ],\n    };\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const nodePoints = api.getNodePoints();\n            let value = character.calcEscapedStringFromNodePoints(nodePoints, token.startIndex, token.endIndex);\n            value = stripSpaces(value);\n            const node = api.shouldReservePosition\n                ? { type: ast.TextType, position: api.calcPosition(token), value }\n                : { type: ast.TextType, value };\n            return node;\n        }),\n    };\n};\nconst _stripRegex = /[^\\S\\n]*\\n[^\\S\\n]*/g;\nconst stripSpaces = (text) => {\n    return text.replace(_stripRegex, '\\n');\n};\n\nconst uniqueName = '@yozora/tokenizer-text';\n\nclass TextTokenizer extends coreTokenizer.BaseInlineTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.FALLBACK,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n    findAndHandleDelimiter(startIndex, endIndex) {\n        const token = {\n            nodeType: ast.TextType,\n            startIndex,\n            endIndex,\n        };\n        return token;\n    }\n}\n\nexports.TextTokenizer = TextTokenizer;\nexports.TextTokenizerName = uniqueName;\nexports[\"default\"] = TextTokenizer;\nexports.textMatch = match;\nexports.textParse = parse;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ast = require('@yozora/ast');\nvar character = require('@yozora/character');\nvar coreTokenizer = require('@yozora/core-tokenizer');\n\nconst match = function () {\n    return {\n        isContainingBlock: false,\n        eatOpener,\n        eatAndInterruptPreviousSibling,\n    };\n    function eatOpener(line) {\n        if (line.countOfPrecedeSpaces >= 4)\n            return null;\n        const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line;\n        if (firstNonWhitespaceIndex + 2 >= endIndex)\n            return null;\n        let marker;\n        let count = 0;\n        let continuous = true;\n        let hasPotentialInternalSpace = false;\n        for (let i = firstNonWhitespaceIndex; i < endIndex; ++i) {\n            const c = nodePoints[i];\n            if (character.isUnicodeWhitespaceCharacter(c.codePoint)) {\n                hasPotentialInternalSpace = true;\n                continue;\n            }\n            if (hasPotentialInternalSpace) {\n                continuous = false;\n            }\n            switch (c.codePoint) {\n                case character.AsciiCodePoint.MINUS_SIGN:\n                case character.AsciiCodePoint.UNDERSCORE:\n                case character.AsciiCodePoint.ASTERISK: {\n                    if (count <= 0) {\n                        marker = c.codePoint;\n                        count += 1;\n                        break;\n                    }\n                    if (c.codePoint !== marker)\n                        return null;\n                    count += 1;\n                    break;\n                }\n                default:\n                    return null;\n            }\n        }\n        if (count < 3)\n            return null;\n        const token = {\n            nodeType: ast.ThematicBreakType,\n            position: {\n                start: coreTokenizer.calcStartPoint(nodePoints, startIndex),\n                end: coreTokenizer.calcEndPoint(nodePoints, endIndex - 1),\n            },\n            marker: marker,\n            continuous,\n        };\n        return { token, nextIndex: endIndex, saturated: true };\n    }\n    function eatAndInterruptPreviousSibling(line, prevSiblingToken) {\n        const result = eatOpener(line);\n        if (result == null)\n            return null;\n        return {\n            token: result.token,\n            nextIndex: result.nextIndex,\n            remainingSibling: prevSiblingToken,\n        };\n    }\n};\n\nconst parse = function (api) {\n    return {\n        parse: tokens => tokens.map(token => {\n            const node = api.shouldReservePosition\n                ? { type: ast.ThematicBreakType, position: token.position }\n                : { type: ast.ThematicBreakType };\n            return node;\n        }),\n    };\n};\n\nconst uniqueName = '@yozora/tokenizer-thematic-break';\n\nclass ThematicBreakTokenizer extends coreTokenizer.BaseBlockTokenizer {\n    constructor(props = {}) {\n        var _a, _b;\n        super({\n            name: (_a = props.name) !== null && _a !== void 0 ? _a : uniqueName,\n            priority: (_b = props.priority) !== null && _b !== void 0 ? _b : coreTokenizer.TokenizerPriority.ATOMIC,\n        });\n        this.match = match;\n        this.parse = parse;\n    }\n}\n\nexports.ThematicBreakTokenizer = ThematicBreakTokenizer;\nexports.ThematicBreakTokenizerName = uniqueName;\nexports[\"default\"] = ThematicBreakTokenizer;\nexports.thematicBreakMatch = match;\nexports.thematicBreakParse = parse;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n","module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","const fs = require('fs')\nconst path = require('path')\n\nmodule.exports = load\n\nfunction load(callback) {\n  let result = {}\n  let pos = -1\n  let exception\n\n  one('aff')\n  one('dic')\n\n  function one(name) {\n    fs.readFile(path.join(__dirname, 'index.' + name), (error, doc) => {\n      pos++\n      exception = exception || error\n      result[name] = doc\n\n      if (pos) {\n        callback(exception, exception ? undefined : result)\n        exception = undefined\n        result = undefined\n      }\n    })\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"./util/logger\");\n/**\n * @internal\n * Build Record<string, any> object to be injected when creates runtime for asm module.\n * Modularized asm module generated via MODULARIZE=1 accepts object as its creation function allow to attach\n * properties. Using those, this function construct few essential convinient functions like awaitable runtime init.\n *\n * Note some init like exporting in-memory FS functions can't be achieved via module object but should rely on\n * preprocessor (https://github.com/kwonoj/docker-hunspell-wasm/blob/eba7781311b31028eefb8eb3e2457d11f294e076/preprocessor.js#L14-L27)\n * to access function-scope variables inside.\n *\n * @param {Record<string, any>} value pre-constructed value to be used, or empty object {}.\n * @param {string} [binaryEndpoint] Provides endpoint to server to download binary module.\n * This value is for browser only - on node.js, should rely on emscripten's default resolution.\n *\n * @returns {Record<string, any>} Augmented object with prefilled interfaces.\n */\nconst constructModule = (value, binaryRemoteEndpoint) => {\n    const ret = {\n        ...value,\n        __asm_module_isInitialized__: false,\n        onRuntimeInitialized: null,\n        initializeRuntime: null\n    };\n    if (!!binaryRemoteEndpoint) {\n        logger_1.log(`constructModule: binaryRemoteEndpoint found, override locateFile function`);\n        ret.locateFile = (fileName) => `${binaryRemoteEndpoint}/${fileName}`;\n    }\n    //export initializeRuntime interface for awaitable runtime initialization\n    ret.initializeRuntime = (timeout = 3000) => {\n        if (ret.__asm_module_isInitialized__) {\n            return Promise.resolve(true);\n        }\n        return new Promise((resolve, _reject) => {\n            const timeoutId = setTimeout(() => resolve(false), timeout);\n            //trap out preamble `abort()` function to avoid too verbose exception details\n            //but only for initialization phase. Other errors will be thrown by postamble.js.\n            ret.onAbort = (reason) => {\n                if (!ret.__asm_module_isInitialized__) {\n                    clearTimeout(timeoutId);\n                    logger_1.log(`initializeRuntime: failed to initialize module`, reason);\n                    throw reason instanceof Error ? reason : new Error(reason);\n                }\n            };\n            ret.onRuntimeInitialized = () => {\n                clearTimeout(timeoutId);\n                ret.__asm_module_isInitialized__ = true;\n                logger_1.log(`initializeRuntime: successfully initialized module`);\n                resolve(true);\n            };\n        });\n    };\n    return ret;\n};\nexports.constructModule = constructModule;\n//# sourceMappingURL=constructModule.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ENVIRONMENT;\n(function (ENVIRONMENT) {\n    ENVIRONMENT[\"NODE\"] = \"NODE\";\n    ENVIRONMENT[\"WEB\"] = \"WEB\";\n})(ENVIRONMENT = exports.ENVIRONMENT || (exports.ENVIRONMENT = {}));\n//# sourceMappingURL=environment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constructModule_1 = require(\"./constructModule\");\nconst logger_1 = require(\"./util/logger\");\n/**\n * Creates loader function to load and initialize wasm module.\n *\n * @param {(runtime: R) => T} factoryLoader Factory to create actual instance of implementation using loaded & initialized wasm runtime.\n *\n * @param {runtimeModuleType} runtimeModule Actual runtime to initialize.\n * It is wasm runtime loaded via plain `require` but compiled with MODULARIZED=1 preamble with SINGLE_FILE option\n * which should be function to accept asm module object to override.\n *\n * @param {Record<string, any>} [module] Record<string, any> object to be injected into wasm runtime for override/set additional value in asm module.\n *\n * @param {ModuleInitOption} [initOptions] Configuration used to initialize the module\n *\n * @returns {moduleLoaderType<T>} Loader function\n */\nconst getModuleLoader = (factoryLoader, runtimeModule, module, { timeout, binaryRemoteEndpoint } = {}) => async () => {\n    const constructedModule = constructModule_1.constructModule(module || {}, binaryRemoteEndpoint);\n    logger_1.log(`loadModule: constructed module object for runtime`);\n    try {\n        const asmModule = runtimeModule(constructedModule);\n        const result = await asmModule.initializeRuntime(timeout);\n        if (!result) {\n            logger_1.log(`loadModule: failed to initialize runtime in time`);\n            throw new Error(`Timeout to initialize runtime`);\n        }\n        logger_1.log(`loadModule: initialized wasm binary Runtime`);\n        return factoryLoader(asmModule);\n    }\n    catch (e) {\n        logger_1.log(`loadModule: failed to initialize wasm binary runtime`);\n        throw e;\n    }\n};\nexports.getModuleLoader = getModuleLoader;\n//# sourceMappingURL=getModuleLoader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"./environment\");\nexports.ENVIRONMENT = environment_1.ENVIRONMENT;\nvar getModuleLoader_1 = require(\"./getModuleLoader\");\nexports.getModuleLoader = getModuleLoader_1.getModuleLoader;\nvar logger_1 = require(\"./util/logger\");\nexports.enableLogger = logger_1.enableLogger;\nexports.log = logger_1.log;\nvar isNode_1 = require(\"./util/isNode\");\nexports.isNode = isNode_1.isNode;\nvar isWasmEnabled_1 = require(\"./util/isWasmEnabled\");\nexports.isWasmEnabled = isWasmEnabled_1.isWasmEnabled;\nvar isMounted_1 = require(\"./path/isMounted\");\nexports.isMounted = isMounted_1.isMounted;\nvar mkdirTree_1 = require(\"./path/mkdirTree\");\nexports.mkdirTree = mkdirTree_1.mkdirTree;\nvar mountBuffer_1 = require(\"./path/mountBuffer\");\nexports.mountBuffer = mountBuffer_1.mountBuffer;\nvar mountDirectory_1 = require(\"./path/mountDirectory\");\nexports.mountDirectory = mountDirectory_1.mountDirectory;\nvar unmount_1 = require(\"./path/unmount\");\nexports.unmount = unmount_1.unmount;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"../util/logger\");\n/**\n * Check if given mount path is already mounted\n *\n * @param {FS} FS wasm module filesystem\n * @param {string} mountPath path to wasm filesystem\n * @param {dir | file} type type of mountPath\n *\n * @returns {boolean} true if mounted, false otherwise or error occurred\n */\nconst isMounted = (FS, mountPath, type) => {\n    try {\n        const stat = FS.stat(mountPath);\n        const typeFunction = type === 'dir' ? FS.isDir : FS.isFile;\n        if (!!stat && typeFunction(stat.mode)) {\n            logger_1.log(`isMounted: ${mountPath} is mounted`);\n            return true;\n        }\n    }\n    catch (e) {\n        if (e.code !== 'ENOENT') {\n            logger_1.log(`isMounted check failed`, e);\n        }\n    }\n    return false;\n};\nexports.isMounted = isMounted;\n//# sourceMappingURL=isMounted.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * `mkdir -p` implementation for wasm FS.mkdir interface.\n * dirPath param should be unixified.\n */\nconst mkdirTree = (FS, dirPath) => {\n    const mkdir = (path) => {\n        try {\n            FS.mkdir(path);\n        }\n        catch (e) {\n            //throw if not ERRNO_CODES.EEXIST\n            if (e.errno != 17) {\n                throw e;\n            }\n        }\n    };\n    dirPath\n        .split('/')\n        .filter(x => !!x)\n        .reduce((acc, value) => {\n        acc.push(`${acc.length > 0 ? acc[acc.length - 1] : ''}/${value}`);\n        return acc;\n    }, [])\n        .forEach(mkdir);\n};\nexports.mkdirTree = mkdirTree;\n//# sourceMappingURL=mkdirTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst nanoid = require(\"nanoid\");\nconst logger_1 = require(\"../util/logger\");\nconst isMounted_1 = require(\"./isMounted\");\n/**\n * Creates a function to mount contents of file into wasm internal memory filesystem\n * to allow wasm can access.\n *\n * @param {FS} FS wasm module filesystem\n * @param {string} memPathId root path in memory filesystem to mount given arrayBuffer.\n * This prefix path is generated automatically each time wasm module is loaded.\n *\n * @return {(contents: ArrayBufferView, fileName?: string) => string} function to mount buffer under memory filesystem.\n * If filename is not provided, it'll be generated automatically. This function checks existing file mounted via filename,\n * does not validate contents of buffer to find out already mounted one.\n */\nconst mountBuffer = (FS, memPathId) => (contents, fileName) => {\n    const file = fileName || nanoid(45);\n    const mountedFilePath = `${memPathId}/${file}`;\n    if (isMounted_1.isMounted(FS, mountedFilePath, 'file')) {\n        logger_1.log(`mountTypedArrayFile: file is already mounted, return it`);\n    }\n    else {\n        FS.writeFile(mountedFilePath, contents, { encoding: 'binary' });\n    }\n    return mountedFilePath;\n};\nexports.mountBuffer = mountBuffer;\n/**\n * Stub function to support `browser` field in package.json. Do not use.\n *\n * @internal\n */\nconst mountDirectory = () => {\n    throw new Error('not supported');\n};\nexports.mountDirectory = mountDirectory;\n//# sourceMappingURL=mountBuffer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unixify = require(\"unixify\");\nconst isNode_1 = require(\"../util/isNode\");\nconst logger_1 = require(\"../util/logger\");\nconst isMounted_1 = require(\"./isMounted\");\nconst mkdirTree_1 = require(\"./mkdirTree\");\n/**\n * Creates a function to mount phsyical path into wasm internal memory filesystem\n * to allow wasm can access phsyical file directly.\n *\n * @param {FS} FS wasm module filesystem\n * @param {string} nodePathId root path in memory filesystem to mount given path under.\n * This prefix path is generated automatically each time wasm module is loaded.\n *\n * @return {(dirPath: string) => string} function to mount given phsical path under memory filesystem.\n */\nconst mountDirectory = (FS, nodePathId) => (dirPath) => {\n    if (!isNode_1.isNode()) {\n        throw new Error('Mounting physical directory is not supported other than node.js environment');\n    }\n    const path = require('path'); //tslint:disable-line:no-require-imports\n    const mountedDirPath = unixify(path.join(nodePathId, unixify(path.resolve(dirPath))));\n    if (isMounted_1.isMounted(FS, mountedDirPath, 'dir')) {\n        logger_1.log(`mountNodeFile: file is already mounted, return it`);\n    }\n    else {\n        mkdirTree_1.mkdirTree(FS, mountedDirPath);\n        FS.mount(FS.filesystems.NODEFS, { root: path.resolve(dirPath) }, mountedDirPath);\n    }\n    return mountedDirPath;\n};\nexports.mountDirectory = mountDirectory;\n//# sourceMappingURL=mountDirectory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"../util/logger\");\nconst isMounted_1 = require(\"./isMounted\");\n/**\n * Creates a function to unmount file or directory in wasm internal memory filesystem\n * If given mounted path prefix is pointing internal buffer file mounted via `mountBuffer`,\n * it'll be removed. Otherwise it'll be unmounted and remove internal directory.\n *\n * @param {FS} FS wasm module filesystem\n * @param {string} memPathId root path in memory filesystem to determine given unmount path is physical directory or buffer.\n * This prefix path is generated automatically each time wasm module is loaded.\n *\n * @return {(mountedPath: string) => void} function to unmount given path under memory filesystem.\n */\nconst unmount = (FS, memPathId) => (mountedPath) => {\n    if (isMounted_1.isMounted(FS, mountedPath, 'file') && mountedPath.indexOf(memPathId) > -1) {\n        logger_1.log(`unmount: ${mountedPath} is typedArrayFile, unlink from memory`);\n        FS.unlink(mountedPath);\n        return;\n    }\n    if (isMounted_1.isMounted(FS, mountedPath, 'dir')) {\n        logger_1.log(`unmount: ${mountedPath} is directory, unmount`);\n        FS.unmount(mountedPath);\n        FS.rmdir(mountedPath);\n        return;\n    }\n};\nexports.unmount = unmount;\n//# sourceMappingURL=unmount.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getroot_1 = require(\"getroot\");\n/**\n * Naïvely detect if running environment if node\n * Note this'll return true on Electron's renderer process as well\n */\nexports.isNode = () => {\n    const proc = getroot_1.root.process;\n    if (!!proc && typeof proc === 'object') {\n        if (!!proc.versions && typeof proc.versions === 'object') {\n            if (typeof proc.versions.node !== 'undefined') {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n//# sourceMappingURL=isNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getroot_1 = require(\"getroot\");\n/**\n * Naïvely check if current runtime supports native web assembly.\n */\nexports.isWasmEnabled = () => !!getroot_1.root.WebAssembly && !!getroot_1.root.WebAssembly.compile && !!getroot_1.root.WebAssembly.instantiate;\n//# sourceMappingURL=isWasmEnabled.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Default log instance falls back to noop if not specified.\n */\nlet logInstance = () => {\n    /* noop */\n};\nconst log = (...args) => logInstance(...args);\nexports.log = log;\n/**\n * Enables logging internal behavior of hunspell-asm.\n * @param logger function to log.\n */\nconst enableLogger = (logger) => (logInstance = logger);\nexports.enableLogger = enableLogger;\n//# sourceMappingURL=logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('Could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst emscripten_wasm_loader_1 = require(\"emscripten-wasm-loader\");\r\nconst nanoid = require(\"nanoid\");\r\nconst logger_1 = require(\"./util/logger\");\r\nconst wrapHunspellInterface_1 = require(\"./wrapHunspellInterface\");\r\n/**\r\n * Creates a factory function for mounting files into wasm filesystem\r\n * and creating hunspell instance.\r\n *\r\n * @param {HunspellAsmModule} asmModule wasm / asm module loaded into memory.\r\n *\r\n * @return {HunspellFactory} factory function for mounting files and creating hunspell instance.\r\n */\r\n/** @internal */\r\nexports.hunspellLoader = (asmModule) => {\r\n    const { cwrap, FS, _free, allocateUTF8, _malloc, getValue, UTF8ToString } = asmModule;\r\n    const hunspellInterface = wrapHunspellInterface_1.wrapHunspellInterface(cwrap);\r\n    //creating top-level path to mount files\r\n    const memPathId = `/${nanoid(45)}`;\r\n    FS.mkdir(memPathId);\r\n    logger_1.log(`hunspellLoader: mount path for bufferFile created at ${memPathId}`);\r\n    /**\r\n     * Naive auto-dispose interface to call hunspell interface with string params.\r\n     *\r\n     */\r\n    const usingParamPtr = (...args) => {\r\n        const params = [...args];\r\n        const fn = params.pop();\r\n        //https://mathiasbynens.be/notes/javascript-unicode\r\n        const paramsPtr = params.map((param) => allocateUTF8(param.normalize()));\r\n        const ret = fn(...paramsPtr);\r\n        paramsPtr.forEach(paramPtr => _free(paramPtr));\r\n        return ret;\r\n    };\r\n    return {\r\n        mountBuffer: emscripten_wasm_loader_1.mountBuffer(FS, memPathId),\r\n        unmount: emscripten_wasm_loader_1.unmount(FS, memPathId),\r\n        create: (affPath, dictPath) => {\r\n            const affPathPtr = allocateUTF8(affPath);\r\n            const dictPathPtr = allocateUTF8(dictPath);\r\n            const hunspellPtr = hunspellInterface.create(affPathPtr, dictPathPtr);\r\n            return {\r\n                dispose: () => {\r\n                    hunspellInterface.destroy(hunspellPtr);\r\n                    _free(affPathPtr);\r\n                    _free(dictPathPtr);\r\n                },\r\n                spell: (word) => !!usingParamPtr(word, wordPtr => hunspellInterface.spell(hunspellPtr, wordPtr)),\r\n                suggest: (word) => {\r\n                    const suggestionListPtr = _malloc(4);\r\n                    const suggestionCount = usingParamPtr(word, wordPtr => hunspellInterface.suggest(hunspellPtr, suggestionListPtr, wordPtr));\r\n                    const suggestionListValuePtr = getValue(suggestionListPtr, '*');\r\n                    const ret = suggestionCount > 0\r\n                        ? Array.from(Array(suggestionCount).keys()).map(idx => UTF8ToString(getValue(suggestionListValuePtr + idx * 4, '*')))\r\n                        : [];\r\n                    hunspellInterface.free_list(hunspellPtr, suggestionListPtr, suggestionCount);\r\n                    _free(suggestionListPtr);\r\n                    return ret;\r\n                },\r\n                addDictionary: (dictPath) => usingParamPtr(dictPath, dictPathPtr => hunspellInterface.add_dic(hunspellPtr, dictPathPtr)) === 1\r\n                    ? false\r\n                    : true,\r\n                addWord: (word) => usingParamPtr(word, wordPtr => hunspellInterface.add(hunspellPtr, wordPtr)),\r\n                addWordWithAffix: (word, affix) => usingParamPtr(word, affix, (wordPtr, affixPtr) => hunspellInterface.add_with_affix(hunspellPtr, wordPtr, affixPtr)),\r\n                removeWord: (word) => usingParamPtr(word, wordPtr => hunspellInterface.remove(hunspellPtr, wordPtr))\r\n            };\r\n        }\r\n    };\r\n};\r\n//# sourceMappingURL=hunspellLoader.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar loadModule_1 = require(\"./loadModule\");\r\nexports.loadModule = loadModule_1.loadModule;\r\nvar logger_1 = require(\"./util/logger\");\r\nexports.log = logger_1.log;\r\nexports.enableLogger = logger_1.enableLogger;\r\n//# sourceMappingURL=index.js.map","\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(Module) {\n  Module = Module || {};\n\nvar Module=typeof Module!==\"undefined\"?Module:{};Module[\"preRun\"]=function(){Module.FS={filesystems:FS.filesystems,stat:FS.stat,isDir:FS.isDir,isFile:FS.isFile,mkdir:FS.mkdir,mount:FS.mount,writeFile:FS.writeFile,unlink:FS.unlink,unmount:FS.unmount,rmdir:FS.rmdir}};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=true;if(Module[\"ENVIRONMENT\"]){throw new Error(\"Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)\")}var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readBinary;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(!(typeof process===\"object\"&&typeof require===\"function\"))throw new Error(\"not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)\");scriptDirectory=__dirname+\"/\";read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else{throw new Error(\"environment detection error\")}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(!Object.getOwnPropertyDescriptor(Module,\"arguments\"))Object.defineProperty(Module,\"arguments\",{configurable:true,get:function(){abort(\"Module.arguments has been replaced with plain arguments_\")}});if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(!Object.getOwnPropertyDescriptor(Module,\"thisProgram\"))Object.defineProperty(Module,\"thisProgram\",{configurable:true,get:function(){abort(\"Module.thisProgram has been replaced with plain thisProgram\")}});if(Module[\"quit\"])quit_=Module[\"quit\"];if(!Object.getOwnPropertyDescriptor(Module,\"quit\"))Object.defineProperty(Module,\"quit\",{configurable:true,get:function(){abort(\"Module.quit has been replaced with plain quit_\")}});assert(typeof Module[\"memoryInitializerPrefixURL\"]===\"undefined\",\"Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead\");assert(typeof Module[\"pthreadMainPrefixURL\"]===\"undefined\",\"Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead\");assert(typeof Module[\"cdInitializerPrefixURL\"]===\"undefined\",\"Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead\");assert(typeof Module[\"filePackagePrefixURL\"]===\"undefined\",\"Module.filePackagePrefixURL option was removed, use Module.locateFile instead\");assert(typeof Module[\"read\"]===\"undefined\",\"Module.read option was removed (modify read_ in JS)\");assert(typeof Module[\"readAsync\"]===\"undefined\",\"Module.readAsync option was removed (modify readAsync in JS)\");assert(typeof Module[\"readBinary\"]===\"undefined\",\"Module.readBinary option was removed (modify readBinary in JS)\");assert(typeof Module[\"setWindowTitle\"]===\"undefined\",\"Module.setWindowTitle option was removed (modify setWindowTitle in JS)\");if(!Object.getOwnPropertyDescriptor(Module,\"read\"))Object.defineProperty(Module,\"read\",{configurable:true,get:function(){abort(\"Module.read has been replaced with plain read_\")}});if(!Object.getOwnPropertyDescriptor(Module,\"readAsync\"))Object.defineProperty(Module,\"readAsync\",{configurable:true,get:function(){abort(\"Module.readAsync has been replaced with plain readAsync\")}});if(!Object.getOwnPropertyDescriptor(Module,\"readBinary\"))Object.defineProperty(Module,\"readBinary\",{configurable:true,get:function(){abort(\"Module.readBinary has been replaced with plain readBinary\")}});var STACK_ALIGN=16;stackSave=stackRestore=stackAlloc=function(){abort(\"cannot use the stack before compiled code is ready to run, and has provided stack access\")};function dynamicAlloc(size){assert(DYNAMICTOP_PTR);var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end>_emscripten_get_heap_size()){abort(\"failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly\")}HEAP32[DYNAMICTOP_PTR>>2]=end;return ret}function getNativeTypeSize(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return 4}else if(type[0]===\"i\"){var bits=parseInt(type.substr(1));assert(bits%8===0,\"getNativeTypeSize invalid bits \"+bits+\", type \"+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}function convertJsFunctionToWasm(func,sig){if(typeof WebAssembly.Function===\"function\"){var typeNames={\"i\":\"i32\",\"j\":\"i64\",\"f\":\"f32\",\"d\":\"f64\"};var type={parameters:[],results:sig[0]==\"v\"?[]:[typeNames[sig[0]]]};for(var i=1;i<sig.length;++i){type.parameters.push(typeNames[sig[i]])}return new WebAssembly.Function(type,func)}var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={\"i\":127,\"j\":126,\"f\":125,\"d\":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet==\"v\"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{\"e\":{\"f\":func}});var wrappedFunc=instance.exports[\"f\"];return wrappedFunc}function addFunctionWasm(func,sig){var table=wasmTable;var ret=table.length;try{table.grow(1)}catch(err){if(!(err instanceof RangeError)){throw err}throw\"Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.\"}try{table.set(ret,func)}catch(err){if(!(err instanceof TypeError)){throw err}assert(typeof sig!==\"undefined\",\"Missing signature argument to addFunction\");var wrapped=convertJsFunctionToWasm(func,sig);table.set(ret,wrapped)}return ret}function removeFunctionWasm(index){}var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){assert(args.length==sig.length-1);assert(\"dynCall_\"+sig in Module,\"bad function pointer type - no table for sig '\"+sig+\"'\");return Module[\"dynCall_\"+sig].apply(null,[ptr].concat(args))}else{assert(sig.length==1);assert(\"dynCall_\"+sig in Module,\"bad function pointer type - no table for sig '\"+sig+\"'\");return Module[\"dynCall_\"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];if(!Object.getOwnPropertyDescriptor(Module,\"wasmBinary\"))Object.defineProperty(Module,\"wasmBinary\",{configurable:true,get:function(){abort(\"Module.wasmBinary has been replaced with plain wasmBinary\")}});var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(!Object.getOwnPropertyDescriptor(Module,\"noExitRuntime\"))Object.defineProperty(Module,\"noExitRuntime\",{configurable:true,get:function(){abort(\"Module.noExitRuntime has been replaced with plain noExitRuntime\")}});if(typeof WebAssembly!==\"object\"){abort(\"No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.\")}function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}function getValue(ptr,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":return HEAP8[ptr>>0];case\"i8\":return HEAP8[ptr>>0];case\"i16\":return HEAP16[ptr>>1];case\"i32\":return HEAP32[ptr>>2];case\"i64\":return HEAP32[ptr>>2];case\"float\":return HEAPF32[ptr>>2];case\"double\":return HEAPF64[ptr>>3];default:abort(\"invalid type for getValue: \"+type)}return null}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":350,\"maximum\":350+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={\"string\":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},\"array\":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\")return UTF8ToString(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;assert(returnType!==\"array\",'Return type should not be \"array\".');if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function cwrap(ident,returnType,argTypes,opts){return function(){return ccall(ident,returnType,argTypes,arguments,opts)}}var ALLOC_NONE=3;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab===\"number\"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types===\"string\"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,stackAlloc,dynamicAlloc][allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var stop;ptr=ret;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType===\"i8\"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];type=singleType||types[i];if(type===0){i++;continue}assert(type,\"Must know what type to store in allocate!\");if(type==\"i64\")type=\"i32\";setValue(ret+i,curr,type);if(previousType!==type){typeSize=getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{if((u0&248)!=240)warnOnce(\"Invalid UTF-8 leading byte 0x\"+u0.toString(16)+\" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!\");u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;if(u>=2097152)warnOnce(\"Invalid Unicode code point 0x\"+u.toString(16)+\" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).\");outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){assert(typeof maxBytesToWrite==\"number\",\"stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!\");return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){assert(array.length>=0,\"writeArrayToMemory array must have a length (should be an array or typed array)\");HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){assert(str.charCodeAt(i)===str.charCodeAt(i)&255);HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var STACK_BASE=5395312,STACK_MAX=152432,DYNAMIC_BASE=5395312,DYNAMICTOP_PTR=152272;assert(STACK_BASE%16===0,\"stack must start aligned\");assert(DYNAMIC_BASE%16===0,\"heap must start aligned\");var TOTAL_STACK=5242880;if(Module[\"TOTAL_STACK\"])assert(TOTAL_STACK===Module[\"TOTAL_STACK\"],\"the stack size can no longer be determined at runtime\");var INITIAL_TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||16777216;if(!Object.getOwnPropertyDescriptor(Module,\"TOTAL_MEMORY\"))Object.defineProperty(Module,\"TOTAL_MEMORY\",{configurable:true,get:function(){abort(\"Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY\")}});assert(INITIAL_TOTAL_MEMORY>=TOTAL_STACK,\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+INITIAL_TOTAL_MEMORY+\"! (TOTAL_STACK=\"+TOTAL_STACK+\")\");assert(typeof Int32Array!==\"undefined\"&&typeof Float64Array!==\"undefined\"&&Int32Array.prototype.subarray!==undefined&&Int32Array.prototype.set!==undefined,\"JS engine does not provide full typed array support\");if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_TOTAL_MEMORY=buffer.byteLength;assert(INITIAL_TOTAL_MEMORY%WASM_PAGE_SIZE===0);updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function writeStackCookie(){assert((STACK_MAX&3)==0);HEAPU32[(STACK_MAX>>2)+1]=34821223;HEAPU32[(STACK_MAX>>2)+2]=2310721022;HEAP32[0]=1668509029}function checkStackCookie(){var cookie1=HEAPU32[(STACK_MAX>>2)+1];var cookie2=HEAPU32[(STACK_MAX>>2)+2];if(cookie1!=34821223||cookie2!=2310721022){abort(\"Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x\"+cookie2.toString(16)+\" \"+cookie1.toString(16))}if(HEAP32[0]!==1668509029)abort(\"Runtime error: The application has corrupted its heap memory area (address zero)!\")}function abortStackOverflow(allocSize){abort(\"Stack overflow! Attempted to allocate \"+allocSize+\" bytes on the stack, but stack has only \"+(STACK_MAX-stackSave()+allocSize)+\" bytes available!\")}(function(){var h16=new Int16Array(1);var h8=new Int8Array(h16.buffer);h16[0]=25459;if(h8[0]!==115||h8[1]!==99)throw\"Runtime error: expected the system to be little-endian!\"})();function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){checkStackCookie();assert(!runtimeInitialized);runtimeInitialized=true;if(!Module[\"noFSInit\"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__)}function preMain(){checkStackCookie();FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){checkStackCookie();runtimeExited=true}function postRun(){checkStackCookie();if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}assert(Math.imul,\"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");assert(Math.fround,\"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");assert(Math.clz32,\"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");assert(Math.trunc,\"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;var runDependencyTracking={};function getUniqueRunDependency(id){var orig=id;while(1){if(!runDependencyTracking[id])return id;id=orig+Math.random()}return id}function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(id){assert(!runDependencyTracking[id]);runDependencyTracking[id]=1;if(runDependencyWatcher===null&&typeof setInterval!==\"undefined\"){runDependencyWatcher=setInterval(function(){if(ABORT){clearInterval(runDependencyWatcher);runDependencyWatcher=null;return}var shown=false;for(var dep in runDependencyTracking){if(!shown){shown=true;err(\"still waiting on run dependencies:\")}err(\"dependency: \"+dep)}if(shown){err(\"(end of list)\")}},1e4)}}else{err(\"warning: run dependency added without ID\")}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(id){assert(runDependencyTracking[id]);delete runDependencyTracking[id]}else{err(\"warning: run dependency removed without ID\")}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;var output=\"abort(\"+what+\") at \"+stackTrace();what=output;throw new WebAssembly.RuntimeError(what)}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile=\"data:application/octet-stream;base64,\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(wasmBinaryFile);if(binary){return binary}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"env\":asmLibraryArg,\"wasi_snapshot_preview1\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");var trueModule=Module;function receiveInstantiatedSource(output){assert(Module===trueModule,\"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?\");trueModule=null;receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}var tempDouble;var tempI64;__ATINIT__.push({func:function(){___wasm_call_ctors()}});function demangle(func){warnOnce(\"warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling\");return func}function demangleAll(text){var regex=/\\b_Z[\\w\\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+\" [\"+x+\"]\"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module[\"extraStackTrace\"])js+=\"\\n\"+Module[\"extraStackTrace\"]();return demangleAll(js)}function ___cxa_allocate_exception(size){return _malloc(size)}function _atexit(func,arg){warnOnce(\"atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)\");__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(){return _atexit.apply(null,arguments)}var ___exception_infos={};var ___exception_last=0;function ___cxa_throw(ptr,type,destructor){___exception_infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};___exception_last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exceptions=1}else{__ZSt18uncaught_exceptionv.uncaught_exceptions++}throw ptr+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\"}function ___handle_stack_overflow(){abort(\"stack overflow\")}function ___lock(){}function ___setErrNo(value){if(Module[\"___errno_location\"])HEAP32[Module[\"___errno_location\"]()>>2]=value;else err(\"failed to set errno from JS\");return value}function ___map_file(pathname,size){___setErrNo(63);return-1}var PATH={splitPath:function(filename){var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1)}else if(last===\"..\"){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)===\"/\",trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p}),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\"}if(path&&trailingSlash){path+=\"/\"}return(isAbsolute?\"/\":\"\")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\"}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path===\"/\")return\"/\";var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join(\"/\"))},join2:function(l,r){return PATH.normalize(l+\"/\"+r)}};var PATH_FS={resolve:function(){var resolvedPath=\"\",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!==\"string\"){throw new TypeError(\"Arguments to path.resolve must be strings\")}else if(!path){return\"\"}resolvedPath=path+\"/\"+resolvedPath;resolvedAbsolute=path.charAt(0)===\"/\"}resolvedPath=PATH.normalizeArray(resolvedPath.split(\"/\").filter(function(p){return!!p}),!resolvedAbsolute).join(\"/\");return(resolvedAbsolute?\"/\":\"\")+resolvedPath||\".\"},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!==\"\")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!==\"\")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split(\"/\"));var toParts=trim(to.split(\"/\"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push(\"..\")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join(\"/\")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().indexOf(\"EOF\")!=-1)bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString(\"utf-8\")}else{result=null}}else if(typeof window!=\"undefined\"&&typeof window.prompt==\"function\"){result=window.prompt(\"Input: \");if(result!==null){result+=\"\\n\"}}else if(typeof readline==\"function\"){result=readline();if(result!==null){result+=\"\\n\"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,\"/\",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name]},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name]},readdir:function(node){var entries=[\".\",\"..\"];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){assert(!(buffer instanceof ArrayBuffer));if(buffer.buffer===HEAP8.buffer){if(canOwn){warnOnce(\"file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)\")}canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){assert(position===0,\"canOwn must imply no weird position inside the file\");node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,buffer,offset,length,position,prot,flags){assert(!(buffer instanceof ArrayBuffer));if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer.buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;var fromHeap=buffer.buffer==HEAP8.buffer;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(48)}(fromHeap?HEAP8:buffer).set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var ERRNO_MESSAGES={0:\"Success\",1:\"Arg list too long\",2:\"Permission denied\",3:\"Address already in use\",4:\"Address not available\",5:\"Address family not supported by protocol family\",6:\"No more processes\",7:\"Socket already connected\",8:\"Bad file number\",9:\"Trying to read unreadable message\",10:\"Mount device busy\",11:\"Operation canceled\",12:\"No children\",13:\"Connection aborted\",14:\"Connection refused\",15:\"Connection reset by peer\",16:\"File locking deadlock error\",17:\"Destination address required\",18:\"Math arg out of domain of func\",19:\"Quota exceeded\",20:\"File exists\",21:\"Bad address\",22:\"File too large\",23:\"Host is unreachable\",24:\"Identifier removed\",25:\"Illegal byte sequence\",26:\"Connection already in progress\",27:\"Interrupted system call\",28:\"Invalid argument\",29:\"I/O error\",30:\"Socket is already connected\",31:\"Is a directory\",32:\"Too many symbolic links\",33:\"Too many open files\",34:\"Too many links\",35:\"Message too long\",36:\"Multihop attempted\",37:\"File or path name too long\",38:\"Network interface is not configured\",39:\"Connection reset by network\",40:\"Network is unreachable\",41:\"Too many open files in system\",42:\"No buffer space available\",43:\"No such device\",44:\"No such file or directory\",45:\"Exec format error\",46:\"No record locks available\",47:\"The link has been severed\",48:\"Not enough core\",49:\"No message of desired type\",50:\"Protocol not available\",51:\"No space left on device\",52:\"Function not implemented\",53:\"Socket is not connected\",54:\"Not a directory\",55:\"Directory not empty\",56:\"State not recoverable\",57:\"Socket operation on non-socket\",59:\"Not a typewriter\",60:\"No such device or address\",61:\"Value too large for defined data type\",62:\"Previous owner died\",63:\"Not super-user\",64:\"Broken pipe\",65:\"Protocol error\",66:\"Unknown protocol\",67:\"Protocol wrong type for socket\",68:\"Math result not representable\",69:\"Read only file system\",70:\"Illegal seek\",71:\"No such process\",72:\"Stale file handle\",73:\"Connection timed out\",74:\"Text file busy\",75:\"Cross-device link\",100:\"Device not a stream\",101:\"Bad font file fmt\",102:\"Invalid slot\",103:\"Invalid request code\",104:\"No anode\",105:\"Block device required\",106:\"Channel number out of range\",107:\"Level 3 halted\",108:\"Level 3 reset\",109:\"Link number out of range\",110:\"Protocol driver not attached\",111:\"No CSI structure available\",112:\"Level 2 halted\",113:\"Invalid exchange\",114:\"Invalid request descriptor\",115:\"Exchange full\",116:\"No data (for no delay io)\",117:\"Timer expired\",118:\"Out of streams resources\",119:\"Machine is not on the network\",120:\"Package not installed\",121:\"The object is remote\",122:\"Advertise error\",123:\"Srmount error\",124:\"Communication error on send\",125:\"Cross mount point (not really error)\",126:\"Given log. name not unique\",127:\"f.d. invalid for this operation\",128:\"Remote address changed\",129:\"Can   access a needed shared lib\",130:\"Accessing a corrupted shared lib\",131:\".lib section in a.out corrupted\",132:\"Attempting to link in too many libs\",133:\"Attempting to exec a shared library\",135:\"Streams pipe error\",136:\"Too many users\",137:\"Socket type not supported\",138:\"Not supported\",139:\"Protocol family not supported\",140:\"Can't send after socket shutdown\",141:\"Too many references\",142:\"Host is down\",148:\"No medium (in tape drive)\",156:\"Level 2 not synchronized\"};var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+\" : \"+stackTrace();return ___setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:\"\",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p}),false);var current=FS.root;var current_path=\"/\";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!==\"/\"?mount+\"/\"+path:mount+path}path=path?node.name+\"/\"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{\"r\":0,\"rs\":1052672,\"r+\":2,\"w\":577,\"wx\":705,\"xw\":705,\"w+\":578,\"wx+\":706,\"xw+\":706,\"a\":1089,\"ax\":1217,\"xa\":1217,\"a+\":1090,\"ax+\":1218,\"xa+\":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags===\"undefined\"){throw new Error(\"Unknown file open mode: \"+str)}return flags},flagsToPermissionString:function(flag){var perms=[\"r\",\"w\",\"rw\"][flag&3];if(flag&512){perms+=\"w\"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf(\"r\")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf(\"w\")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf(\"x\")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var err=FS.nodePermissions(dir,\"x\");if(err)return err;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,\"wx\")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,\"wx\");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!==\"r\"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate===\"function\"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err(\"warning: \"+FS.syncFSRequests+\" FS.syncfs operations in flight at once, probably just doing extra work\")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(err){assert(FS.syncFSRequests>0);FS.syncFSRequests--;return callback(err)}function done(err){if(err){if(!done.errored){done.errored=true;return doCallback(err)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){if(typeof type===\"string\"){throw type}var root=mountpoint===\"/\";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name===\".\"||name===\"..\"){throw new FS.ErrnoError(28)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split(\"/\");var d=\"\";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+=\"/\"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev===\"undefined\"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(10)}if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,\"w\");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate[\"willMovePath\"]){FS.trackingDelegate[\"willMovePath\"](old_path,new_path)}}catch(e){err(\"FS.trackingDelegate['willMovePath']('\"+old_path+\"', '\"+new_path+\"') threw an exception: \"+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate[\"onMovePath\"])FS.trackingDelegate[\"onMovePath\"](old_path,new_path)}catch(e){err(\"FS.trackingDelegate['onMovePath']('\"+old_path+\"', '\"+new_path+\"') threw an exception: \"+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate[\"willDeletePath\"]){FS.trackingDelegate[\"willDeletePath\"](path)}}catch(e){err(\"FS.trackingDelegate['willDeletePath']('\"+path+\"') threw an exception: \"+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate[\"onDeletePath\"])FS.trackingDelegate[\"onDeletePath\"](path)}catch(e){err(\"FS.trackingDelegate['onDeletePath']('\"+path+\"') threw an exception: \"+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate[\"willDeletePath\"]){FS.trackingDelegate[\"willDeletePath\"](path)}}catch(e){err(\"FS.trackingDelegate['willDeletePath']('\"+path+\"') threw an exception: \"+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate[\"onDeletePath\"])FS.trackingDelegate[\"onDeletePath\"](path)}catch(e){err(\"FS.trackingDelegate['onDeletePath']('\"+path+\"') threw an exception: \"+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path===\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path===\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path===\"string\"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var err=FS.nodePermissions(node,\"w\");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===\"\"){throw new FS.ErrnoError(44)}flags=typeof flags===\"string\"?FS.modeStringToFlags(flags):flags;mode=typeof mode===\"undefined\"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path===\"object\"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module[\"logReadFiles\"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err(\"FS.trackingDelegate error on read file: \"+path)}}try{if(FS.trackingDelegate[\"onOpenFile\"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate[\"onOpenFile\"](path,trackingFlags)}}catch(e){err(\"FS.trackingDelegate['onOpenFile']('\"+path+\"', flags) threw an exception: \"+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!==\"undefined\";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!==\"undefined\";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate[\"onWriteToFile\"])FS.trackingDelegate[\"onWriteToFile\"](stream.path)}catch(e){err(\"FS.trackingDelegate['onWriteToFile']('\"+stream.path+\"') threw an exception: \"+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,buffer,offset,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||\"r\";opts.encoding=opts.encoding||\"binary\";if(opts.encoding!==\"utf8\"&&opts.encoding!==\"binary\"){throw new Error('Invalid encoding type \"'+opts.encoding+'\"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding===\"utf8\"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding===\"binary\"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||\"w\";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data===\"string\"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error(\"Unsupported data type\")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var err=FS.nodePermissions(lookup.node,\"x\");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir(\"/tmp\");FS.mkdir(\"/home\");FS.mkdir(\"/home/web_user\")},createDefaultDevices:function(){FS.mkdir(\"/dev\");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev(\"/dev/null\",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev(\"/dev/tty\",FS.makedev(5,0));FS.mkdev(\"/dev/tty1\",FS.makedev(6,0));var random_device;if(typeof crypto===\"object\"&&typeof crypto[\"getRandomValues\"]===\"function\"){var randomBuffer=new Uint8Array(1);random_device=function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require(\"crypto\");random_device=function(){return crypto_module[\"randomBytes\"](1)[0]}}catch(e){}}else{}if(!random_device){random_device=function(){abort(\"no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };\")}}FS.createDevice(\"/dev\",\"random\",random_device);FS.createDevice(\"/dev\",\"urandom\",random_device);FS.mkdir(\"/dev/shm\");FS.mkdir(\"/dev/shm/tmp\")},createSpecialDirectories:function(){FS.mkdir(\"/proc\");FS.mkdir(\"/proc/self\");FS.mkdir(\"/proc/self/fd\");FS.mount({mount:function(){var node=FS.createNode(\"/proc/self\",\"fd\",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:\"fake\"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},\"/proc/self/fd\")},createStandardStreams:function(){if(Module[\"stdin\"]){FS.createDevice(\"/dev\",\"stdin\",Module[\"stdin\"])}else{FS.symlink(\"/dev/tty\",\"/dev/stdin\")}if(Module[\"stdout\"]){FS.createDevice(\"/dev\",\"stdout\",null,Module[\"stdout\"])}else{FS.symlink(\"/dev/tty\",\"/dev/stdout\")}if(Module[\"stderr\"]){FS.createDevice(\"/dev\",\"stderr\",null,Module[\"stderr\"])}else{FS.symlink(\"/dev/tty1\",\"/dev/stderr\")}var stdin=FS.open(\"/dev/stdin\",\"r\");var stdout=FS.open(\"/dev/stdout\",\"w\");var stderr=FS.open(\"/dev/stderr\",\"w\");assert(stdin.fd===0,\"invalid handle for stdin (\"+stdin.fd+\")\");assert(stdout.fd===1,\"invalid handle for stdout (\"+stdout.fd+\")\");assert(stderr.fd===2,\"invalid handle for stderr (\"+stderr.fd+\")\")},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}};this.setErrno(errno);this.message=ERRNO_MESSAGES[errno];if(this.stack){Object.defineProperty(this,\"stack\",{value:(new Error).stack,writable:true});this.stack=demangleAll(this.stack)}};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack=\"<generic error, no stack>\"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},\"/\");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={\"MEMFS\":MEMFS}},init:function(input,output,error){assert(!FS.init.initialized,\"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)\");FS.init.initialized=true;FS.ensureErrnoError();Module[\"stdin\"]=input||Module[\"stdin\"];Module[\"stdout\"]=output||Module[\"stdout\"];Module[\"stderr\"]=error||Module[\"stderr\"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module[\"_fflush\"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},joinPath:function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]==\"/\")path=path.substr(1);return path},absolutePath:function(relative,base){return PATH_FS.resolve(base,relative)},standardizePath:function(path){return PATH.normalize(path)},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path===\"/\"}catch(e){ret.error=e.errno}return ret},createFolder:function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)},createPath:function(parent,path,canRead,canWrite){parent=typeof parent===\"string\"?parent:FS.getPath(parent);var parts=path.split(\"/\").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data===\"string\"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,\"w\");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},createLink:function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name);return FS.symlink(target,path)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!==\"undefined\"){throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error(\"Cannot load without read() or XMLHttpRequest.\")}if(!success)___setErrNo(29);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open(\"HEAD\",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);var datalength=Number(xhr.getResponseHeader(\"Content-length\"));var header;var hasByteServing=(header=xhr.getResponseHeader(\"Accept-Ranges\"))&&header===\"bytes\";var usesGzip=(header=xhr.getResponseHeader(\"Content-Encoding\"))&&header===\"gzip\";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error(\"invalid range (\"+from+\", \"+to+\") or no bytes requested!\");if(to>datalength-1)throw new Error(\"only \"+datalength+\" bytes available! programmer error!\");var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);if(datalength!==chunkSize)xhr.setRequestHeader(\"Range\",\"bytes=\"+from+\"-\"+to);if(typeof Uint8Array!=\"undefined\")xhr.responseType=\"arraybuffer\";if(xhr.overrideMimeType){xhr.overrideMimeType(\"text/plain; charset=x-user-defined\")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||\"\",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]===\"undefined\"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]===\"undefined\")throw new Error(\"doXHR failed!\");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out(\"LazyFiles on gzip forces download of the whole file when length is accessed\")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!==\"undefined\"){if(!ENVIRONMENT_IS_WORKER)throw\"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency(\"cp \"+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module[\"preloadPlugins\"].forEach(function(plugin){if(handled)return;if(plugin[\"canHandle\"](fullname)){plugin[\"handle\"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url==\"string\"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return\"EM_FS_\"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:\"FILE_DATA\",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out(\"creating db\");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],\"readwrite\");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],\"readonly\")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd,path){if(path[0]!==\"/\"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}path=PATH.join2(dir,path)}return path},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=new Uint8Array(HEAPU8.subarray(addr,addr+len));FS.msync(stream,buffer,offset,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]===\"/\")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44}var perms=\"\";if(amode&4)perms+=\"r\";if(amode&2)perms+=\"w\";if(amode&1)perms+=\"x\";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},getStreamFromFD:function(fd){if(fd===undefined)fd=SYSCALLS.get();var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low},getZero:function(){assert(SYSCALLS.get()===0)}};function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return-28;case 9:___setErrNo(28);return-1;default:{return-28}}}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),op=SYSCALLS.get();switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;return 0}case 21524:{if(!stream.tty)return-59;return 0}default:abort(\"bad ioctl syscall \"+op)}}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function __emscripten_syscall_munmap(addr,len){if(addr===-1||len===0){return-28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);SYSCALLS.doMsync(addr,stream,len,info.flags,info.offset);FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}function ___syscall91(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get();return __emscripten_syscall_munmap(addr,len)}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}function _abort(){abort()}function _clock(){if(_clock.start===undefined)_clock.start=Date.now();return(Date.now()-_clock.start)*(1e6/1e3)|0}function _emscripten_get_heap_size(){return HEAP8.length}function _emscripten_get_sbrk_ptr(){return 152272}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){console.error(\"emscripten_realloc_buffer: Attempted to grow heap from \"+buffer.byteLength+\" bytes to \"+size+\" bytes, but got error: \"+e)}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();assert(requestedSize>oldSize);var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648-PAGE_MULTIPLE;if(requestedSize>maxHeapSize){err(\"Cannot enlarge memory, asked to go up to \"+requestedSize+\" bytes, but the limit is \"+maxHeapSize+\" bytes!\");return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}err(\"Failed to grow the heap from \"+oldSize+\" bytes to \"+newSize+\" bytes, not enough memory!\");return false}var ENV={};function _emscripten_get_environ(){if(!_emscripten_get_environ.strings){var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":(typeof navigator===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",\"_\":thisProgram};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x])}_emscripten_get_environ.strings=strings}return _emscripten_get_environ.strings}function _environ_get(__environ,environ_buf){var strings=_emscripten_get_environ();var bufSize=0;strings.forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=_emscripten_get_environ();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _setTempRet0($i){setTempRet0($i|0)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},\"%A\":function(date){return WEEKDAYS[date.tm_wday]},\"%b\":function(date){return MONTHS[date.tm_mon].substring(0,3)},\"%B\":function(date){return MONTHS[date.tm_mon]},\"%C\":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":function(date){return leadingNulls(date.tm_mday,2)},\"%e\":function(date){return leadingSomething(date.tm_mday,2,\" \")},\"%g\":function(date){return getWeekBasedYear(date).toString().substring(2)},\"%G\":function(date){return getWeekBasedYear(date)},\"%H\":function(date){return leadingNulls(date.tm_hour,2)},\"%I\":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},\"%m\":function(date){return leadingNulls(date.tm_mon+1,2)},\"%M\":function(date){return leadingNulls(date.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}},\"%S\":function(date){return leadingNulls(date.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(date){return date.tm_wday||7},\"%U\":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"},\"%V\":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},\"%w\":function(date){return date.tm_wday},\"%W\":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"},\"%y\":function(date){return(date.tm_year+1900).toString().substring(2)},\"%Y\":function(date){return date.tm_year+1900},\"%z\":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":function(date){return date.tm_zone},\"%%\":function(){return\"%\"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}FS.staticInit();var ASSERTIONS=true;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var decodeBase64=typeof atob===\"function\"?atob:function(input){var keyStr=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";var output=\"\";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE===\"boolean\"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,\"base64\")}catch(_){buf=new Buffer(s,\"base64\")}return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error(\"Converting base64 string to bytes failed.\")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={\"__cxa_allocate_exception\":___cxa_allocate_exception,\"__cxa_atexit\":___cxa_atexit,\"__cxa_throw\":___cxa_throw,\"__handle_stack_overflow\":___handle_stack_overflow,\"__lock\":___lock,\"__map_file\":___map_file,\"__syscall221\":___syscall221,\"__syscall5\":___syscall5,\"__syscall54\":___syscall54,\"__syscall91\":___syscall91,\"__unlock\":___unlock,\"abort\":_abort,\"clock\":_clock,\"emscripten_get_sbrk_ptr\":_emscripten_get_sbrk_ptr,\"emscripten_memcpy_big\":_emscripten_memcpy_big,\"emscripten_resize_heap\":_emscripten_resize_heap,\"environ_get\":_environ_get,\"environ_sizes_get\":_environ_sizes_get,\"fd_close\":_fd_close,\"fd_read\":_fd_read,\"fd_seek\":_fd_seek,\"fd_write\":_fd_write,\"memory\":wasmMemory,\"setTempRet0\":_setTempRet0,\"strftime_l\":_strftime_l,\"table\":wasmTable};var asm=createWasm();var real____wasm_call_ctors=asm[\"__wasm_call_ctors\"];asm[\"__wasm_call_ctors\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real____wasm_call_ctors.apply(null,arguments)};var real__Hunspell_free_list=asm[\"Hunspell_free_list\"];asm[\"Hunspell_free_list\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_free_list.apply(null,arguments)};var real__Hunspell_suggest=asm[\"Hunspell_suggest\"];asm[\"Hunspell_suggest\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_suggest.apply(null,arguments)};var real__Hunspell_create=asm[\"Hunspell_create\"];asm[\"Hunspell_create\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_create.apply(null,arguments)};var real__Hunspell_destroy=asm[\"Hunspell_destroy\"];asm[\"Hunspell_destroy\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_destroy.apply(null,arguments)};var real__Hunspell_add_dic=asm[\"Hunspell_add_dic\"];asm[\"Hunspell_add_dic\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_add_dic.apply(null,arguments)};var real__Hunspell_spell=asm[\"Hunspell_spell\"];asm[\"Hunspell_spell\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_spell.apply(null,arguments)};var real__Hunspell_add=asm[\"Hunspell_add\"];asm[\"Hunspell_add\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_add.apply(null,arguments)};var real__Hunspell_add_with_affix=asm[\"Hunspell_add_with_affix\"];asm[\"Hunspell_add_with_affix\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_add_with_affix.apply(null,arguments)};var real__Hunspell_remove=asm[\"Hunspell_remove\"];asm[\"Hunspell_remove\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__Hunspell_remove.apply(null,arguments)};var real__fflush=asm[\"fflush\"];asm[\"fflush\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__fflush.apply(null,arguments)};var real____errno_location=asm[\"__errno_location\"];asm[\"__errno_location\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real____errno_location.apply(null,arguments)};var real__setThrew=asm[\"setThrew\"];asm[\"setThrew\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__setThrew.apply(null,arguments)};var real___ZSt18uncaught_exceptionv=asm[\"_ZSt18uncaught_exceptionv\"];asm[\"_ZSt18uncaught_exceptionv\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real___ZSt18uncaught_exceptionv.apply(null,arguments)};var real__malloc=asm[\"malloc\"];asm[\"malloc\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__malloc.apply(null,arguments)};var real__free=asm[\"free\"];asm[\"free\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real__free.apply(null,arguments)};var real____set_stack_limit=asm[\"__set_stack_limit\"];asm[\"__set_stack_limit\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real____set_stack_limit.apply(null,arguments)};var real_stackSave=asm[\"stackSave\"];asm[\"stackSave\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_stackSave.apply(null,arguments)};var real_stackAlloc=asm[\"stackAlloc\"];asm[\"stackAlloc\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_stackAlloc.apply(null,arguments)};var real_stackRestore=asm[\"stackRestore\"];asm[\"stackRestore\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_stackRestore.apply(null,arguments)};var real___growWasmMemory=asm[\"__growWasmMemory\"];asm[\"__growWasmMemory\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real___growWasmMemory.apply(null,arguments)};var real_dynCall_ii=asm[\"dynCall_ii\"];asm[\"dynCall_ii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_ii.apply(null,arguments)};var real_dynCall_iiii=asm[\"dynCall_iiii\"];asm[\"dynCall_iiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiii.apply(null,arguments)};var real_dynCall_jiji=asm[\"dynCall_jiji\"];asm[\"dynCall_jiji\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_jiji.apply(null,arguments)};var real_dynCall_iidiiii=asm[\"dynCall_iidiiii\"];asm[\"dynCall_iidiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iidiiii.apply(null,arguments)};var real_dynCall_vii=asm[\"dynCall_vii\"];asm[\"dynCall_vii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_vii.apply(null,arguments)};var real_dynCall_vi=asm[\"dynCall_vi\"];asm[\"dynCall_vi\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_vi.apply(null,arguments)};var real_dynCall_viiiiii=asm[\"dynCall_viiiiii\"];asm[\"dynCall_viiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_viiiiii.apply(null,arguments)};var real_dynCall_viiiii=asm[\"dynCall_viiiii\"];asm[\"dynCall_viiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_viiiii.apply(null,arguments)};var real_dynCall_viiii=asm[\"dynCall_viiii\"];asm[\"dynCall_viiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_viiii.apply(null,arguments)};var real_dynCall_viijii=asm[\"dynCall_viijii\"];asm[\"dynCall_viijii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_viijii.apply(null,arguments)};var real_dynCall_iii=asm[\"dynCall_iii\"];asm[\"dynCall_iii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iii.apply(null,arguments)};var real_dynCall_v=asm[\"dynCall_v\"];asm[\"dynCall_v\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_v.apply(null,arguments)};var real_dynCall_iiiii=asm[\"dynCall_iiiii\"];asm[\"dynCall_iiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiii.apply(null,arguments)};var real_dynCall_iiiiii=asm[\"dynCall_iiiiii\"];asm[\"dynCall_iiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiii.apply(null,arguments)};var real_dynCall_iiiiiiiii=asm[\"dynCall_iiiiiiiii\"];asm[\"dynCall_iiiiiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiiiiii.apply(null,arguments)};var real_dynCall_iiiiiii=asm[\"dynCall_iiiiiii\"];asm[\"dynCall_iiiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiiii.apply(null,arguments)};var real_dynCall_iiiiij=asm[\"dynCall_iiiiij\"];asm[\"dynCall_iiiiij\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiij.apply(null,arguments)};var real_dynCall_iiiiid=asm[\"dynCall_iiiiid\"];asm[\"dynCall_iiiiid\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiid.apply(null,arguments)};var real_dynCall_iiiiijj=asm[\"dynCall_iiiiijj\"];asm[\"dynCall_iiiiijj\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiijj.apply(null,arguments)};var real_dynCall_iiiiiiii=asm[\"dynCall_iiiiiiii\"];asm[\"dynCall_iiiiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiiiii.apply(null,arguments)};var real_dynCall_iiiiiijj=asm[\"dynCall_iiiiiijj\"];asm[\"dynCall_iiiiiijj\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return real_dynCall_iiiiiijj.apply(null,arguments)};Module[\"asm\"]=asm;var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"__wasm_call_ctors\"].apply(null,arguments)};var _Hunspell_free_list=Module[\"_Hunspell_free_list\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_free_list\"].apply(null,arguments)};var _Hunspell_suggest=Module[\"_Hunspell_suggest\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_suggest\"].apply(null,arguments)};var _Hunspell_create=Module[\"_Hunspell_create\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_create\"].apply(null,arguments)};var _Hunspell_destroy=Module[\"_Hunspell_destroy\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_destroy\"].apply(null,arguments)};var _Hunspell_add_dic=Module[\"_Hunspell_add_dic\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_add_dic\"].apply(null,arguments)};var _Hunspell_spell=Module[\"_Hunspell_spell\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_spell\"].apply(null,arguments)};var _Hunspell_add=Module[\"_Hunspell_add\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_add\"].apply(null,arguments)};var _Hunspell_add_with_affix=Module[\"_Hunspell_add_with_affix\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_add_with_affix\"].apply(null,arguments)};var _Hunspell_remove=Module[\"_Hunspell_remove\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"Hunspell_remove\"].apply(null,arguments)};var _fflush=Module[\"_fflush\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"fflush\"].apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"__errno_location\"].apply(null,arguments)};var _setThrew=Module[\"_setThrew\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"setThrew\"].apply(null,arguments)};var __ZSt18uncaught_exceptionv=Module[\"__ZSt18uncaught_exceptionv\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"_ZSt18uncaught_exceptionv\"].apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"malloc\"].apply(null,arguments)};var _free=Module[\"_free\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"free\"].apply(null,arguments)};var ___set_stack_limit=Module[\"___set_stack_limit\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"__set_stack_limit\"].apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"stackSave\"].apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"stackAlloc\"].apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"stackRestore\"].apply(null,arguments)};var __growWasmMemory=Module[\"__growWasmMemory\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"__growWasmMemory\"].apply(null,arguments)};var dynCall_ii=Module[\"dynCall_ii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_ii\"].apply(null,arguments)};var dynCall_iiii=Module[\"dynCall_iiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiii\"].apply(null,arguments)};var dynCall_jiji=Module[\"dynCall_jiji\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_jiji\"].apply(null,arguments)};var dynCall_iidiiii=Module[\"dynCall_iidiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iidiiii\"].apply(null,arguments)};var dynCall_vii=Module[\"dynCall_vii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_vii\"].apply(null,arguments)};var dynCall_vi=Module[\"dynCall_vi\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_vi\"].apply(null,arguments)};var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null,arguments)};var dynCall_viiiii=Module[\"dynCall_viiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_viiiii\"].apply(null,arguments)};var dynCall_viiii=Module[\"dynCall_viiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_viiii\"].apply(null,arguments)};var dynCall_viijii=Module[\"dynCall_viijii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_viijii\"].apply(null,arguments)};var dynCall_iii=Module[\"dynCall_iii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iii\"].apply(null,arguments)};var dynCall_v=Module[\"dynCall_v\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_v\"].apply(null,arguments)};var dynCall_iiiii=Module[\"dynCall_iiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiii\"].apply(null,arguments)};var dynCall_iiiiii=Module[\"dynCall_iiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiii\"].apply(null,arguments)};var dynCall_iiiiiiiii=Module[\"dynCall_iiiiiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiiiiii\"].apply(null,arguments)};var dynCall_iiiiiii=Module[\"dynCall_iiiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiiii\"].apply(null,arguments)};var dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiij\"].apply(null,arguments)};var dynCall_iiiiid=Module[\"dynCall_iiiiid\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiid\"].apply(null,arguments)};var dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiijj\"].apply(null,arguments)};var dynCall_iiiiiiii=Module[\"dynCall_iiiiiiii\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiiiii\"].apply(null,arguments)};var dynCall_iiiiiijj=Module[\"dynCall_iiiiiijj\"]=function(){assert(runtimeInitialized,\"you need to wait for the runtime to be ready (e.g. wait for main() to be called)\");assert(!runtimeExited,\"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)\");return Module[\"asm\"][\"dynCall_iiiiiijj\"].apply(null,arguments)};Module[\"asm\"]=asm;if(!Object.getOwnPropertyDescriptor(Module,\"intArrayFromString\"))Module[\"intArrayFromString\"]=function(){abort(\"'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"intArrayToString\"))Module[\"intArrayToString\"]=function(){abort(\"'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"ccall\"))Module[\"ccall\"]=function(){abort(\"'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};Module[\"cwrap\"]=cwrap;if(!Object.getOwnPropertyDescriptor(Module,\"setValue\"))Module[\"setValue\"]=function(){abort(\"'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};Module[\"getValue\"]=getValue;if(!Object.getOwnPropertyDescriptor(Module,\"allocate\"))Module[\"allocate\"]=function(){abort(\"'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"getMemory\"))Module[\"getMemory\"]=function(){abort(\"'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"AsciiToString\"))Module[\"AsciiToString\"]=function(){abort(\"'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"stringToAscii\"))Module[\"stringToAscii\"]=function(){abort(\"'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"UTF8ArrayToString\"))Module[\"UTF8ArrayToString\"]=function(){abort(\"'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};Module[\"UTF8ToString\"]=UTF8ToString;if(!Object.getOwnPropertyDescriptor(Module,\"stringToUTF8Array\"))Module[\"stringToUTF8Array\"]=function(){abort(\"'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};Module[\"stringToUTF8\"]=stringToUTF8;if(!Object.getOwnPropertyDescriptor(Module,\"lengthBytesUTF8\"))Module[\"lengthBytesUTF8\"]=function(){abort(\"'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"UTF16ToString\"))Module[\"UTF16ToString\"]=function(){abort(\"'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"stringToUTF16\"))Module[\"stringToUTF16\"]=function(){abort(\"'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"lengthBytesUTF16\"))Module[\"lengthBytesUTF16\"]=function(){abort(\"'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"UTF32ToString\"))Module[\"UTF32ToString\"]=function(){abort(\"'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"stringToUTF32\"))Module[\"stringToUTF32\"]=function(){abort(\"'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"lengthBytesUTF32\"))Module[\"lengthBytesUTF32\"]=function(){abort(\"'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};Module[\"allocateUTF8\"]=allocateUTF8;if(!Object.getOwnPropertyDescriptor(Module,\"stackTrace\"))Module[\"stackTrace\"]=function(){abort(\"'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"addOnPreRun\"))Module[\"addOnPreRun\"]=function(){abort(\"'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"addOnInit\"))Module[\"addOnInit\"]=function(){abort(\"'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"addOnPreMain\"))Module[\"addOnPreMain\"]=function(){abort(\"'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"addOnExit\"))Module[\"addOnExit\"]=function(){abort(\"'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"addOnPostRun\"))Module[\"addOnPostRun\"]=function(){abort(\"'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"writeStringToMemory\"))Module[\"writeStringToMemory\"]=function(){abort(\"'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"writeArrayToMemory\"))Module[\"writeArrayToMemory\"]=function(){abort(\"'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"writeAsciiToMemory\"))Module[\"writeAsciiToMemory\"]=function(){abort(\"'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"addRunDependency\"))Module[\"addRunDependency\"]=function(){abort(\"'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"removeRunDependency\"))Module[\"removeRunDependency\"]=function(){abort(\"'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"ENV\"))Module[\"ENV\"]=function(){abort(\"'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS\"))Module[\"FS\"]=function(){abort(\"'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_createFolder\"))Module[\"FS_createFolder\"]=function(){abort(\"'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_createPath\"))Module[\"FS_createPath\"]=function(){abort(\"'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_createDataFile\"))Module[\"FS_createDataFile\"]=function(){abort(\"'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_createPreloadedFile\"))Module[\"FS_createPreloadedFile\"]=function(){abort(\"'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_createLazyFile\"))Module[\"FS_createLazyFile\"]=function(){abort(\"'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_createLink\"))Module[\"FS_createLink\"]=function(){abort(\"'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_createDevice\"))Module[\"FS_createDevice\"]=function(){abort(\"'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"FS_unlink\"))Module[\"FS_unlink\"]=function(){abort(\"'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")};if(!Object.getOwnPropertyDescriptor(Module,\"GL\"))Module[\"GL\"]=function(){abort(\"'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"dynamicAlloc\"))Module[\"dynamicAlloc\"]=function(){abort(\"'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"loadDynamicLibrary\"))Module[\"loadDynamicLibrary\"]=function(){abort(\"'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"loadWebAssemblyModule\"))Module[\"loadWebAssemblyModule\"]=function(){abort(\"'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"getLEB\"))Module[\"getLEB\"]=function(){abort(\"'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"getFunctionTables\"))Module[\"getFunctionTables\"]=function(){abort(\"'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"alignFunctionTables\"))Module[\"alignFunctionTables\"]=function(){abort(\"'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"registerFunctions\"))Module[\"registerFunctions\"]=function(){abort(\"'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"addFunction\"))Module[\"addFunction\"]=function(){abort(\"'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"removeFunction\"))Module[\"removeFunction\"]=function(){abort(\"'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"getFuncWrapper\"))Module[\"getFuncWrapper\"]=function(){abort(\"'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"prettyPrint\"))Module[\"prettyPrint\"]=function(){abort(\"'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"makeBigInt\"))Module[\"makeBigInt\"]=function(){abort(\"'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"dynCall\"))Module[\"dynCall\"]=function(){abort(\"'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"getCompilerSetting\"))Module[\"getCompilerSetting\"]=function(){abort(\"'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"print\"))Module[\"print\"]=function(){abort(\"'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"printErr\"))Module[\"printErr\"]=function(){abort(\"'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"getTempRet0\"))Module[\"getTempRet0\"]=function(){abort(\"'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"setTempRet0\"))Module[\"setTempRet0\"]=function(){abort(\"'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"callMain\"))Module[\"callMain\"]=function(){abort(\"'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"abort\"))Module[\"abort\"]=function(){abort(\"'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"warnOnce\"))Module[\"warnOnce\"]=function(){abort(\"'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"stackSave\"))Module[\"stackSave\"]=function(){abort(\"'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"stackRestore\"))Module[\"stackRestore\"]=function(){abort(\"'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"stackAlloc\"))Module[\"stackAlloc\"]=function(){abort(\"'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};Module[\"writeStackCookie\"]=writeStackCookie;Module[\"checkStackCookie\"]=checkStackCookie;Module[\"abortStackOverflow\"]=abortStackOverflow;if(!Object.getOwnPropertyDescriptor(Module,\"intArrayFromBase64\"))Module[\"intArrayFromBase64\"]=function(){abort(\"'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"tryParseAsDataURI\"))Module[\"tryParseAsDataURI\"]=function(){abort(\"'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")};if(!Object.getOwnPropertyDescriptor(Module,\"ALLOC_NORMAL\"))Object.defineProperty(Module,\"ALLOC_NORMAL\",{configurable:true,get:function(){abort(\"'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}});if(!Object.getOwnPropertyDescriptor(Module,\"ALLOC_STACK\"))Object.defineProperty(Module,\"ALLOC_STACK\",{configurable:true,get:function(){abort(\"'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}});if(!Object.getOwnPropertyDescriptor(Module,\"ALLOC_DYNAMIC\"))Object.defineProperty(Module,\"ALLOC_DYNAMIC\",{configurable:true,get:function(){abort(\"'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}});if(!Object.getOwnPropertyDescriptor(Module,\"ALLOC_NONE\"))Object.defineProperty(Module,\"ALLOC_NONE\",{configurable:true,get:function(){abort(\"'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}});if(!Object.getOwnPropertyDescriptor(Module,\"calledRun\"))Object.defineProperty(Module,\"calledRun\",{configurable:true,get:function(){abort(\"'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}});var calledRun;Module[\"then\"]=function(func){if(calledRun){func(Module)}else{var old=Module[\"onRuntimeInitialized\"];Module[\"onRuntimeInitialized\"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}writeStackCookie();preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;if(ABORT)return;initRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();assert(!Module[\"_main\"],'compiled without a main, but one is present. if you added it from JS, use Module[\"onRuntimeInitialized\"]');postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}checkStackCookie()}Module[\"run\"]=run;function checkUnflushedContent(){var print=out;var printErr=err;var has=false;out=err=function(x){has=true};try{var flush=Module[\"_fflush\"];if(flush)flush(0);[\"stdout\",\"stderr\"].forEach(function(name){var info=FS.analyzePath(\"/dev/\"+name);if(!info)return;var stream=info.object;var rdev=stream.rdev;var tty=TTY.ttys[rdev];if(tty&&tty.output&&tty.output.length){has=true}})}catch(e){}out=print;err=printErr;if(has){warnOnce(\"stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.\")}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n      module.exports = Module;\n    else if (typeof define === 'function' && define['amd'])\n      define([], function() { return Module; });\n    else if (typeof exports === 'object')\n      exports[\"Module\"] = Module;\n    ","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst emscripten_wasm_loader_1 = require(\"emscripten-wasm-loader\");\r\nconst hunspellLoader_1 = require(\"./hunspellLoader\");\r\nconst logger_1 = require(\"./util/logger\");\r\n//imports MODULARIZED emscripten preamble\r\nconst runtime = require(\"./lib/node/hunspell\");\r\n/**\r\n * Load, initialize wasm binary to use actual hunspell wasm instances.\r\n *\r\n * @param [InitOptions] Options to initialize hunspell wasm binary.\r\n * @param {number} [InitOptions.timeout] - timeout to wait wasm binary compilation & load.\r\n * @param {string | object} [InitOptions.locateBinary] - custom resolution logic for wasm binary. (not supported)\r\n * It could be either remote endpoint url, or loader-returned object for bundler. Check examples/browser_* for references.\r\n *\r\n * @returns {() => Promise<HunspellFactory>} Function to load module\r\n */\r\nconst loadModule = async (initOptions = {}) => {\r\n    const { timeout } = initOptions;\r\n    logger_1.log(`loadModule: loading hunspell wasm binary`, { initOptions });\r\n    const moduleLoader = await emscripten_wasm_loader_1.getModuleLoader((runtime) => hunspellLoader_1.hunspellLoader(runtime), runtime, undefined, { timeout });\r\n    return moduleLoader();\r\n};\r\nexports.loadModule = loadModule;\r\n//# sourceMappingURL=loadModule.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst emscripten_wasm_loader_1 = require(\"emscripten-wasm-loader\");\r\n/**\r\n * Default log instance falls back to noop if not specified.\r\n */\r\nlet logInstance = () => {\r\n    /* noop */\r\n};\r\nconst log = (...args) => logInstance(...args);\r\nexports.log = log;\r\n/**\r\n * Enables logging internal behavior of hunspell-asm.\r\n * @param logger function to log.\r\n */\r\nconst enableLogger = (logger) => {\r\n    const scopedLogger = (scope) => (message, ...optionalParams) => {\r\n        logger(`${scope}::${message}`, ...optionalParams);\r\n    };\r\n    logInstance = scopedLogger(`hunspell`);\r\n    emscripten_wasm_loader_1.enableLogger(scopedLogger(`hunspellLoader`));\r\n};\r\nexports.enableLogger = enableLogger;\r\n//# sourceMappingURL=logger.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Wrap hunspell exported interfaces via cwrap for resuable mannter.\r\n *\r\n */\r\n/** @internal */\r\nexports.wrapHunspellInterface = (cwrap) => ({\r\n    //Hunhandle* Hunspell_create(const char* affpath, const char* dpath)\r\n    create: cwrap('Hunspell_create', 'number', ['number', 'number']),\r\n    //void Hunspell_destroy(Hunhandle* pHunspell)\r\n    destroy: cwrap('Hunspell_destroy', null, ['number']),\r\n    //int Hunspell_spell(Hunhandle* pHunspell, const char*)\r\n    spell: cwrap('Hunspell_spell', 'number', ['number', 'number']),\r\n    //int Hunspell_suggest(Hunhandle* pHunspell, char*** slst, const char* word);\r\n    suggest: cwrap('Hunspell_suggest', 'number', ['number', 'number', 'number']),\r\n    //void Hunspell_free_list(Hunhandle* pHunspell, char*** slst, int n);\r\n    free_list: cwrap('Hunspell_free_list', null, ['number', 'number', 'number']),\r\n    //0 = additional dictionary slots available, 1 = slots are now full\r\n    //int Hunspell_add_dic(Hunhandle* pHunspell, const char* dpath);\r\n    add_dic: cwrap('Hunspell_add_dic', 'number', ['number', 'number']),\r\n    //int Hunspell_add(Hunhandle* pHunspell, const char* word);\r\n    add: cwrap('Hunspell_add', 'number', ['number', 'number']),\r\n    //int Hunspell_add_with_affix(Hunhandle* pHunspell, const char* word, const char* example);\r\n    add_with_affix: cwrap('Hunspell_add_with_affix', 'number', ['number', 'number', 'number']),\r\n    //int Hunspell_remove(Hunhandle* pHunspell, const char* word);\r\n    remove: cwrap('Hunspell_remove', 'number', ['number', 'number'])\r\n});\r\n//# sourceMappingURL=wrapHunspellInterface.js.map","module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = (function () { try { return require('path') } catch (e) {}}()) || {\n  sep: '/'\n}\nminimatch.sep = path.sep\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  b = b || {}\n  var t = {}\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n  m.Minimatch.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options)).Minimatch\n  }\n\n  m.filter = function filter (pattern, options) {\n    return orig.filter(pattern, ext(def, options))\n  }\n\n  m.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options))\n  }\n\n  m.makeRe = function makeRe (pattern, options) {\n    return orig.makeRe(pattern, ext(def, options))\n  }\n\n  m.braceExpand = function braceExpand (pattern, options) {\n    return orig.braceExpand(pattern, ext(def, options))\n  }\n\n  m.match = function (list, pattern, options) {\n    return orig.match(list, pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (!options.allowWindowsEscape && path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n  this.partial = !!options.partial\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\nvar MAX_PATTERN_LENGTH = 1024 * 64\nvar assertValidPattern = function (pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  assertValidPattern(pattern)\n\n  var options = this.options\n\n  // shortcuts\n  if (pattern === '**') {\n    if (!options.noglobstar)\n      return GLOBSTAR\n    else\n      pattern = '*'\n  }\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      /* istanbul ignore next */\n      case '/': {\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n      }\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        // split where the last [ was, make sure we don't have\n        // an invalid re. if so, re-walk the contents of the\n        // would-be class to re-translate any characters that\n        // were passed through as-is\n        // TODO: It would probably be faster to determine this\n        // without a try/catch and a new RegExp, but it's tricky\n        // to do safely.  For now, this is safe and works.\n        var cs = pattern.substring(classStart + 1, i)\n        try {\n          RegExp('[' + cs + ']')\n        } catch (er) {\n          // not a valid class!\n          var sp = this.parse(cs, SUBPARSE)\n          re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n          hasMagic = hasMagic || sp[1]\n          inClass = false\n          continue\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '[': case '.': case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) /* istanbul ignore next - should be impossible */ {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) /* istanbul ignore next - should be impossible */ {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = function match (f, partial) {\n  if (typeof partial === 'undefined') partial = this.partial\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    /* istanbul ignore if */\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      /* istanbul ignore if */\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      hit = f === p\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else /* istanbul ignore else */ if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    return (fi === fl - 1) && (file[fi] === '')\n  }\n\n  // should be unreachable.\n  /* istanbul ignore next */\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n","var random = require('./random')\nvar url = require('./url')\n\n/**\n * Generate secure URL-friendly unique ID.\n *\n * By default, ID will have 21 symbols to have a collision probability similar\n * to UUID v4.\n *\n * @param {number} [size=21] The number of symbols in ID.\n *\n * @return {string} Random string.\n *\n * @example\n * const nanoid = require('nanoid')\n * model.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqL\"\n *\n * @name nanoid\n * @function\n */\nmodule.exports = function (size) {\n  size = size || 21\n  var bytes = random(size)\n  var id = ''\n  // Compact alternative for `for (var i = 0; i < size; i++)`\n  while (size--) {\n    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.\n    // This mask reduces random byte 0-255 to 0-63 values.\n    // There is no need in `|| ''` and `* 1.6` hacks in here,\n    // because bitmask trim bytes exact to alphabet size.\n    id += url[bytes[size] & 63]\n  }\n  return id\n}\n","var crypto = require('crypto')\n\nif (crypto.randomFillSync) {\n  // We reuse buffers with the same size to avoid memory fragmentations\n  // for better performance\n  var buffers = { }\n  module.exports = function (bytes) {\n    var buffer = buffers[bytes]\n    if (!buffer) {\n      // `Buffer.allocUnsafe()` faster because it don’t clean memory.\n      // We do not need it, since we will fill memory with new bytes anyway.\n      buffer = Buffer.allocUnsafe(bytes)\n      if (bytes <= 255) buffers[bytes] = buffer\n    }\n    return crypto.randomFillSync(buffer)\n  }\n} else {\n  module.exports = crypto.randomBytes\n}\n","// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Despite the fact the source code is quite long, its entropy\n// is low and there are lots of duplicates - just what compressors\n// like GZIP and Brotli likes the best.\n\n/**\n * URL safe symbols.\n *\n * @name url\n * @type {string}\n *\n * @example\n * const url = require('nanoid/url')\n * generate(url, 10) //=> \"Uakgb_J5m9\"\n */\n\n// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\nmodule.exports = '-_'\nvar i = 36\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  module.exports += i.toString(36)\n  i > 9 && (module.exports += i.toString(36).toUpperCase())\n}\n","var isWin = process.platform === 'win32';\n\nmodule.exports = function (str) {\n\tvar i = str.length - 1;\n\tif (i < 2) {\n\t\treturn str;\n\t}\n\twhile (isSeparator(str, i)) {\n\t\ti--;\n\t}\n\treturn str.substr(0, i + 1);\n};\n\nfunction isSeparator(str, i) {\n\tvar char = str[i];\n\treturn i > 0 && (char === '/' || (isWin && char === '\\\\'));\n}\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","/*!\n * unixify <https://github.com/jonschlinkert/unixify>\n *\n * Copyright (c) 2014, 2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar normalizePath = require('normalize-path');\n\nmodule.exports = function unixify(filepath, stripTrailing) {\n  filepath = normalizePath(filepath, stripTrailing);\n  return filepath.replace(/^([a-zA-Z]+:|\\.\\/)/, '');\n};\n","/*!\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nvar removeTrailingSeparator = require('remove-trailing-separator');\n\nmodule.exports = function normalizePath(str, stripTrailing) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n  str = str.replace(/[\\\\\\/]+/g, '/');\n  if (stripTrailing !== false) {\n    str = removeTrailingSeparator(str);\n  }\n  return str;\n};\n","module.exports = require(\"assert\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3109);\n",""],"names":[],"sourceRoot":""}